# waiting for protobuf to upgrade
common  --incompatible_package_name_is_a_function=false # https://github.com/protocolbuffers/protobuf/issues/5547

# custom toolchain. Should become the default after we figure out how to make sanitized builds run well on OSX
test:clang7 --crosstool_top=@llvm_toolchain//:toolchain
build:clang7 --crosstool_top=@llvm_toolchain//:toolchain

# C / C++ Options
# Don't depend on system compiler
build --cxxopt=-std=c++17 --host_cxxopt=-std=c++17


# Developer laptops run skylake, devboxes run skylake-avx512
# however some AWS instances in our fleet still run Sandy Bridge (Skylake predecessor)
build --copt=-march=sandybridge
build --cxxopt=-march=sandybridge

build --copt=-fno-omit-frame-pointer
build --cxxopt=-fno-omit-frame-pointer

build --copt=-fstack-protector
build --cxxopt=-fstack-protector

build --copt=-Werror --copt=-Wimplicit-fallthrough
build --cxxopt=-Werror --cxxopt=-Wimplicit-fallthrough

build --host_cxxopt=-O0
build --host_copt=-O0
build --host_cxxopt=-DFORCE_DEBUG
build --host_copt=-DFORCE_DEBUG

# We shell out to homebrew and ruby. Hardcode the most likely places
# to find them on both Linux and OS X
build --action_env PATH=/usr/local/bin:/usr/local/opt/bison/bin:/usr/bin:/bin

# The MacOS CROSSTOOL in bazel defines _FORTIFY_SOURCE both on
# <command line>:1:9: and <built-in>:355:9: so sadly we turn them all off
build --copt=-Wno-macro-redefined
build --cxxopt=-Wno-macro-redefined

build:dbg --copt=-O0
build:dbg --cxxopt=-O0
build:dbg --compilation_mode=dbg
build:dbg --config=debugsymbols
build:dbg --config=nopie

# release version: optimized, with debug symbols and version information
build:release-common --define release=true
build:release-common --define jemalloc=true
build:release-common --compilation_mode=opt
build:release-common --config=debugsymbols
build:release-common --config=nopie
build:release-common --config=lto
build:release-common --stamp

# harden: mark relocation sections read-only
build:release-linux --linkopt=-Wl,-z,relro,-z,now
build:release-linux --config=lto-linux --config=clang7 --config=release-common

build:release-debug-linux --config=release-linux
build:release-debug-linux --config=forcedebug

build:release-sanitized-linux --config=release-debug-linux
build:release-sanitized-linux --config=sanitize-linux
build:release-sanitized-linux --define jemalloc=true
build:release-sanitized-linux --config=debugsymbols

build:test-sanitized-linux --config=release-sanitized-linux --config=dbg --nostamp --define release=false
test:test-sanitized-linux --config=release-sanitized-linux --config=dbg --nostamp --define release=false
test:test-sanitized-linux --test_env="UBSAN_OPTIONS=print_stacktrace=1"
test:test-sanitized-linux --test_env="ASAN_OPTIONS=detect_leaks=0"

build:travis --config=test-sanitized-linux
build:travis --crosstool_top=@llvm_toolchain//:toolchain
build:travis --curses=no
test:travis --ram_utilization_factor=10
test:travis --test_strategy=standalone
test:travis --test_output=errors
test:travis --curses=no

# DEBUG_MODE is set by default for all builds except --config=release.
# Use this flag to set DEBUG_MODE even for --config=release.
build:forcedebug --copt=-DFORCE_DEBUG
build:forcedebug --cxxopt=-DFORCE_DEBUG

# LTO build. Much longer compilation time. Smaller size and better perf.
build:lto --copt=-flto=thin
build:lto --cxxopt=-flto=thin
build:lto --linkopt=-flto=thin
build:lto --config=nopie

## flags that substantially increase Clang&LLVMs ability to devirtualize calls
build:lto-linux --copt=-fwhole-program-vtables --copt=-fvisibility=hidden --copt=-fforce-emit-vtables
build:lto-linux --cxxopt=-fwhole-program-vtables --cxxopt=-fvisibility=hidden --cxxopt=-fforce-emit-vtables
build:lto-linux --linkopt=-fwhole-program-vtables --linkopt=-fvisibility=hidden --linkopt=-fforce-emit-vtables
build:lto-linux --linkopt=-Wl,--icf=all
build:lto-linux --config=lto

# DEBUG_MODE is set by default for all builds except --config=release.
# Use this flag to set DEBUG_MODE even for --config=release.
build:forcedebug --copt=-DFORCE_DEBUG
build:forcedebug --cxxopt=-DFORCE_DEBUG

# Used to build --stamp build that contains version and build time.
build --workspace_status_command=tools/buildstamp/get_workspace_status

# It's useful to be able to write `config_setting` rules for "this is
# an unsanitized build", but we can't express "copt does not contain
# -fsanitize". So we set this `--define` and unset it if we're using a
# sanitizer.
build --define unsanitized=true
# sanitize build: run with ASAN and UBSAN. Catches most memory and
# undefined-behavior errors, substantially larger and slower binary.
build:sanitize --copt=-fsanitize=address --copt=-fsanitize-address-use-after-scope
build:sanitize --cxxopt=-fsanitize=address --cxxopt=-fsanitize-address-use-after-scope
build:sanitize --linkopt=-fsanitize=address --linkopt=-fsanitize-address-use-after-scope
build:sanitize --copt=-fsanitize=undefined --copt=-fno-sanitize-recover=undefined
build:sanitize --cxxopt=-fsanitize=undefined --copt=-fno-sanitize-recover=undefined
build:sanitize --linkopt=-fsanitize=undefined --copt=-fno-sanitize-recover=undefined
build:sanitize --cxxopt=-DADDRESS_SANITIZER # used by abseil
build:sanitize --define unsanitized=false

# Bazel links C++ files with $CC, not $CXX, this breaks UBSan
build:sanitize-linux --config=clang7 --linkopt=external/llvm_toolchain/lib/clang/7.0.0/lib/linux/libclang_rt.asan_cxx-x86_64.a
test:sanitize-linux --config=clang7 --linkopt=external/llvm_toolchain/lib/clang/7.0.0/lib/linux/libclang_rt.asan_cxx-x86_64.a


build:tsan --copt=-fsanitize=thread
build:tsan --cxxopt=-fsanitize=thread
build:tsan --linkopt=-fsanitize=thread

# Build optimized for executable size. Can be faster if size of executable code is a bottleneck.
build:size --linkopt=-Os
build:size --copt=-Os
build:size --cxxopt=-Os

### Debug symbols on OS X. ###
# From https://github.com/RobotLocomotion/drake/blob/master/tools/cc_toolchain/bazel.rc
# See https://github.com/bazelbuild/bazel/issues/2537
build:debugsymbols --copt=-g3 --copt=-fstandalone-debug --copt=-DDEBUG_SYMBOLS --copt=-glldb
build:debugsymbols --cxxopt=-g3 --cxxopt=-fstandalone-debug --cxxopt=-DDEBUG_SYMBOLS --cxxopt=-glldb
build:debugsymbols --linkopt=-g3 --linkopt=-fstandalone-debug --linkopt=-DDEBUG_SYMBOLS --linkopt=-glldb
build:debugsymbols --spawn_strategy=standalone
build:debugsymbols --genrule_strategy=standalone

build:nopie --linkopt=-fno-pie
build:nopie --copt=-fno-pie
build:nopie --cxxopt=-fno-pie

build --strip=never

# Enable nice UIs. Taken from bazel.rc of Bazel itself.
common --experimental_ui --experimental_ui_actions_shown 8
common --show_progress_rate_limit=0.25

# Webasm config. Please use either of those depending on your platform
build:webasm-linux --crosstool_top=//tools/toolchain/webasm-linux --config=webasm
build:webasm-darwin --crosstool_top=//tools/toolchain/webasm-darwin --config=webasm

# common webasm config
# Use --cpu as a differentiator.
build:webasm --cpu=webasm --spawn_strategy=standalone --genrule_strategy=standalone --copt=-Oz --cxxopt=-Oz --linkopt=-Oz --copt=-DMDB_USE_ROBUST=0 --cxxopt=-DMDB_USE_ROBUST=0
build:webasm --compilation_mode=opt
build:webasm --copt=--llvm-lto --copt=3 --cxxopt=--llvm-lto --cxxopt=3 --linkopt=--llvm-lto --linkopt=3
# Specify a "sane" C++ toolchain for the host platform.
build:webasm --host_crosstool_top=@bazel_tools//tools/cpp:toolchain

common:stripeci --config=ci
build:ci --announce_rc
common:ci --color yes
