suggest-sig-override.rb:15: This function does not have a `sig` http://go/e/7017
    15 |  def foo; end
          ^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:15: Insert `sig {generated.implementation.void}
  `
    15 |  def foo; end
          ^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:13: Insert `  extend T::Helpers
`
    13 |  include Abstract
        ^

suggest-sig-override.rb:30: This function does not have a `sig` http://go/e/7017
    30 |  def qux; end
          ^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:30: Insert `sig {generated.returns(NilClass)}
  `
    30 |  def qux; end
          ^

suggest-sig-override.rb:33: This function does not have a `sig` http://go/e/7017
    33 |  def initialize; end
          ^^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:33: Insert `sig {generated.void}
  `
    33 |  def initialize; end
          ^

suggest-sig-override.rb:35: This function does not have a `sig` http://go/e/7017
    35 |  def foo; end
          ^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:35: Insert `sig {generated.override.void}
  `
    35 |  def foo; end
          ^

suggest-sig-override.rb:37: This function does not have a `sig` http://go/e/7017
    37 |  def bar; end
          ^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:37: Insert `sig {generated.override.void}
  `
    37 |  def bar; end
          ^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:27: Insert `generated.overridable.`
    27 |  sig {void}
               ^

suggest-sig-override.rb:39: This function does not have a `sig` http://go/e/7017
    39 |  def qux; end
          ^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:39: Insert `sig {generated.returns(NilClass)}
  `
    39 |  def qux; end
          ^

suggest-sig-override.rb:71: This function does not have a `sig` http://go/e/7017
    71 |  def just_void; end
          ^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:71: Insert `sig {generated.override.void}
  `
    71 |  def just_void; end
          ^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:46: Insert `generated.overridable.`
    46 |  sig {void}
               ^

suggest-sig-override.rb:73: This function does not have a `sig` http://go/e/7017
    73 |  def just_returns; end
          ^^^^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:73: Insert `sig {generated.override.returns(NilClass)}
  `
    73 |  def just_returns; end
          ^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:49: Insert `generated.overridable.`
    49 |  sig {returns(NilClass)}
               ^

suggest-sig-override.rb:75: This function does not have a `sig` http://go/e/7017
    75 |  def x_to_void(x); end
          ^^^^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:75: Insert `sig {generated.params(x: T.untyped).override.void}
  `
    75 |  def x_to_void(x); end
          ^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:52: Insert `generated.overridable.`
    52 |  sig {params(x: Integer).void}
                                  ^

suggest-sig-override.rb:77: This function does not have a `sig` http://go/e/7017
    77 |  def x_to_returns(x); end
          ^^^^^^^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:77: Insert `sig {generated.params(x: T.untyped).override.returns(NilClass)}
  `
    77 |  def x_to_returns(x); end
          ^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:55: Insert `generated.overridable.`
    55 |  sig {params(x: Integer).returns(NilClass)}
                                  ^

suggest-sig-override.rb:79: This function does not have a `sig` http://go/e/7017
    79 |  def multiline_x_to_void(x); end
          ^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:79: Insert `sig {generated.params(x: T.untyped).override.void}
  `
    79 |  def multiline_x_to_void(x); end
          ^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:60: Insert `generated.overridable.`
    60 |    .void
             ^

suggest-sig-override.rb:81: This function does not have a `sig` http://go/e/7017
    81 |  def multiline_x_to_returns(x); end
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:81: Insert `sig {generated.params(x: T.untyped).override.returns(NilClass)}
  `
    81 |  def multiline_x_to_returns(x); end
          ^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:66: Insert `generated.overridable.`
    66 |    .returns(NilClass)
             ^

suggest-sig-override.rb:88: This function does not have a `sig` http://go/e/7017
    88 |  def nope; end
          ^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:88: Insert `sig {generated.returns(NilClass)}
  `
    88 |  def nope; end
          ^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:86: Insert `  extend T::Helpers
`
    86 |  # random words to trip up our hacky text search:
        ^

suggest-sig-override.rb:92: This function does not have a `sig` http://go/e/7017
    92 |  def nope; end
          ^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:92: Insert `sig {generated.returns(NilClass)}
  `
    92 |  def nope; end
          ^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:92: Insert `  extend T::Helpers
`
    92 |  def nope; end
        ^

suggest-sig-override.rb:101: This function does not have a `sig` http://go/e/7017
     101 |  def opt_string; end
            ^^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:101: Insert `sig {generated.override.returns(String)}
  `
     101 |  def opt_string; end
            ^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig-override.rb:101: Insert `  extend T::Helpers
`
     101 |  def opt_string; end
          ^
Errors: 15

--------------------------------------------------------------------------

# typed: strict

extend T::Helpers

# Suggest "implementation." for these classes
module Abstract
  extend T::Helpers
  abstract!
  sig {abstract.void}
  def foo; end
end
class Implementation
  extend T::Helpers
  include Abstract

  sig {generated.implementation.void}
  def foo; end
end

# Suggest "override." for these classes
class Parent
  extend T::Helpers
  sig {void}
  def initialize; end

  sig {overridable.void}
  def foo; end

  sig {generated.overridable.void}
  def bar; end

  sig {generated.returns(NilClass)}
  def qux; end
end
class Child < Parent
  sig {generated.void}
  def initialize; end

  sig {generated.override.void}
  def foo; end

  sig {generated.override.void}
  def bar; end

  sig {generated.returns(NilClass)}
  def qux; end
end

# Weird overridable edge cases in string parsing
class Parent
  extend T::Helpers

  sig {generated.overridable.void}
  def just_void; end

  sig {generated.overridable.returns(NilClass)}
  def just_returns; end

  sig {params(x: Integer).generated.overridable.void}
  def x_to_void(x); end

  sig {params(x: Integer).generated.overridable.returns(NilClass)}
  def x_to_returns(x); end

  sig do
    params(x: Integer)
    .generated.overridable.void
  end
  def multiline_x_to_void(x); end

  sig do
    params(x: Integer)
    .generated.overridable.returns(NilClass)
  end
  def multiline_x_to_returns(x); end
end
class Child < Parent
  sig {generated.override.void}
  def just_void; end

  sig {generated.override.returns(NilClass)}
  def just_returns; end

  sig {generated.params(x: T.untyped).override.void}
  def x_to_void(x); end

  sig {generated.params(x: T.untyped).override.returns(NilClass)}
  def x_to_returns(x); end

  sig {generated.params(x: T.untyped).override.void}
  def multiline_x_to_void(x); end

  sig {generated.params(x: T.untyped).override.returns(NilClass)}
  def multiline_x_to_returns(x); end
end

# Doesn't need overridable because parent doesn't have a sig
class DoesntNeedOverridable
  extend T::Helpers
  # random words to trip up our hacky text search:
  # void return sig params generated
  sig {generated.returns(NilClass)}
  def nope; end
end

class ChildOfDoesntNeedOverridable < DoesntNeedOverridable
  extend T::Helpers
  sig {generated.returns(NilClass)}
  def nope; end
end

class DSLParent
  # avoid sigging this
  dsl_optional :opt_string, String
end

class DSLChild < DSLParent
  extend T::Helpers
  sig {generated.override.returns(String)}
  def opt_string; end
end
