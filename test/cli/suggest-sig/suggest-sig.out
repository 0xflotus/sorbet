suggest-sig.rb:5: This function does not have a `sig` http://go/e/7017
     5 |def hazTwoArgs(a, b); 1; end;
        ^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:5: Insert `sig {generated.params(a: T.untyped, b: T.untyped).returns(Integer).generated}
`
     5 |def hazTwoArgs(a, b); 1; end;
        ^

suggest-sig.rb:8: Method `someCondition` does not exist on `Object` http://go/e/7003
     8 |  if someCondition
             ^^^^^^^^^^^^^

suggest-sig.rb:7: This function does not have a `sig` http://go/e/7017
     7 |def baz
        ^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:7: Insert `sig {generated.returns(T.any(T::Array[T.untyped], String)).generated}
`
     7 |def baz
        ^

suggest-sig.rb:18: This function does not have a `sig` http://go/e/7017
    18 |def bla; give_me_void; end
        ^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:18: Insert `sig {generated.void.generated}
`
    18 |def bla; give_me_void; end
        ^

suggest-sig.rb:21: Method `someCondition` does not exist on `Object` http://go/e/7003
    21 |  if someCondition
             ^^^^^^^^^^^^^

suggest-sig.rb:20: This function does not have a `sig` http://go/e/7017
    20 |def bbq
        ^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:20: Insert `sig {generated.void.generated}
`
    20 |def bbq
        ^

suggest-sig.rb:28: This function does not have a `sig` http://go/e/7017
    28 |def idk(a); a / a + a * a; end
        ^^^^^^^^^^

suggest-sig.rb:30: This function does not have a `sig` http://go/e/7017
    30 |def give_me_literal; 1; end;
        ^^^^^^^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:30: Insert `sig {generated.returns(Integer).generated}
`
    30 |def give_me_literal; 1; end;
        ^

suggest-sig.rb:32: This function does not have a `sig` http://go/e/7017
    32 |def give_me_literal_nested; [[1]]; end;
        ^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:32: Insert `sig {generated.returns(T::Array[T::Array[Integer]]).generated}
`
    32 |def give_me_literal_nested; [[1]]; end;
        ^

suggest-sig.rb:34: This function does not have a `sig` http://go/e/7017
    34 |private def root_private; end
                ^^^^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:34: Insert `sig {generated.returns(NilClass).generated}
`
    34 |private def root_private; end
        ^

suggest-sig.rb:36: This function does not have a `sig` http://go/e/7017
    36 |protected def root_protected; end
                  ^^^^^^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:36: Insert `sig {generated.returns(NilClass).generated}
`
    36 |protected def root_protected; end
        ^

suggest-sig.rb:46: This function does not have a `sig` http://go/e/7017
    46 |def foo(a)
        ^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:46: Insert `sig {generated.params(a: Integer).returns(Integer).generated}
`
    46 |def foo(a)
        ^

suggest-sig.rb:56: This function does not have a `sig` http://go/e/7017
    56 |def fooCond(a, cond)
        ^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:56: Insert `sig {generated.params(a: T.any(Integer, String), cond: T.untyped).void.generated}
`
    56 |def fooCond(a, cond)
        ^

suggest-sig.rb:64: This function does not have a `sig` http://go/e/7017
    64 |def fooWhile(a, cond1, cond2)
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:64: Insert `sig {generated.params(a: T.any(Integer, String), cond1: T.untyped, cond2: T.untyped).returns(NilClass).generated}
`
    64 |def fooWhile(a, cond1, cond2)
        ^

suggest-sig.rb:74: This function does not have a `sig` http://go/e/7017
    74 |def takesBlock
        ^^^^^^^^^^^^^^

suggest-sig.rb:79: This function does not have a `sig` http://go/e/7017
    79 |def list_ints_or_empty_list
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:79: Insert `sig {generated.returns(T::Array[T.untyped]).generated}
`
    79 |def list_ints_or_empty_list
        ^

suggest-sig.rb:85: This code is unreachable http://go/e/7006
    85 |  if true || qux || blah
                     ^^^

suggest-sig.rb:85: This code is unreachable http://go/e/7006
    85 |  if true || qux || blah
                            ^^^^

suggest-sig.rb:88: This code is unreachable http://go/e/7006
    88 |    takesString(x)
            ^^^^^^^^^^^^^^

suggest-sig.rb:84: This function does not have a `sig` http://go/e/7017
    84 |def dead(x)
        ^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:84: Insert `sig {generated.params(x: Integer).void.generated}
`
    84 |def dead(x)
        ^

suggest-sig.rb:92: This function does not have a `sig` http://go/e/7017
    92 |def with_block
        ^^^^^^^^^^^^^^

suggest-sig.rb:98: This function does not have a `sig` http://go/e/7017
    98 |def takesRepated(*a); end;
        ^^^^^^^^^^^^^^^^^^^^

suggest-sig.rb:99: This function does not have a `sig` http://go/e/7017
    99 |def hasNoName(*); end;
        ^^^^^^^^^^^^^^^^

suggest-sig.rb:118: This function does not have a `sig` http://go/e/7017
     118 |def cantRun(a)
          ^^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:118: Insert `sig {generated.params(a: T.untyped).returns(Integer).generated}
`
     118 |def cantRun(a)
          ^

suggest-sig.rb:162: This function does not have a `sig` http://go/e/7017
     162 |def fooCondGeneratedCurly(a, cond)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:161: Replace with `sig {generated.params(a: T.any(Integer, String), cond: T.any(TrueClass, FalseClass)).returns(T.untyped).generated}
`
     161 |sig {params(a: T.untyped, cond: T.any(TrueClass, FalseClass)).returns(T.untyped).generated}
     162 |def fooCondGeneratedCurly(a, cond)

suggest-sig.rb:176: This function does not have a `sig` http://go/e/7017
     176 |def fooCondGeneratedDo(a, cond)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:171: Replace with `sig {generated.params(a: T.any(Integer, String), cond: T.any(TrueClass, FalseClass)).returns(T.untyped).generated}
`
     171 |sig do
     172 |  params(a: T.untyped, cond: T.any(TrueClass, FalseClass)).
     173 |  returns(T.untyped).
     174 |  generated
     175 |end
     176 |def fooCondGeneratedDo(a, cond)

suggest-sig.rb:41: This function does not have a `sig` http://go/e/7017
    41 |  private def a_private; end
                  ^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:41: Insert `sig {generated.returns(NilClass).generated}
  `
    41 |  private def a_private; end
          ^

suggest-sig.rb:43: This function does not have a `sig` http://go/e/7017
    43 |  protected def a_protected; end
                    ^^^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:43: Insert `sig {generated.returns(NilClass).generated}
  `
    43 |  protected def a_protected; end
          ^

suggest-sig.rb:102: This function does not have a `sig` http://go/e/7017
     102 |Foo = Struct.new(:a, :b)
          ^^^^^^^^^^^^^^^^^^^^^^^^

suggest-sig.rb:102: This function does not have a `sig` http://go/e/7017
     102 |Foo = Struct.new(:a, :b)
          ^^^^^^^^^^^^^^^^^^^^^^^^

suggest-sig.rb:102: This function does not have a `sig` http://go/e/7017
     102 |Foo = Struct.new(:a, :b)
          ^^^^^^^^^^^^^^^^^^^^^^^^

suggest-sig.rb:102: This function does not have a `sig` http://go/e/7017
     102 |Foo = Struct.new(:a, :b)
          ^^^^^^^^^^^^^^^^^^^^^^^^

suggest-sig.rb:112: This function does not have a `sig` http://go/e/7017
     112 |  def self.load_account_business_profile(merchant)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:112: Insert `sig {generated.params(merchant: T.untyped).returns(Integer).generated}
  `
     112 |  def self.load_account_business_profile(merchant)
            ^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:105: Insert `  extend T::Helpers
`
     105 |  class Merchant
          ^

suggest-sig.rb:108: Method `sig` does not exist on `T.class_of(TestCarash)` http://go/e/7003
     108 |  sig {params(merchant: Merchant).void}
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

suggest-sig.rb:134: This function does not have a `sig` http://go/e/7017
     134 |  def foo; end
            ^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:134: Insert `sig {generated.implementation.void.generated}
  `
     134 |  def foo; end
            ^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:132: Insert `  extend T::Helpers
`
     132 |  include Abstract
          ^

suggest-sig.rb:149: This function does not have a `sig` http://go/e/7017
     149 |  def qux; end
            ^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:149: Insert `sig {generated.returns(NilClass).generated}
  `
     149 |  def qux; end
            ^

suggest-sig.rb:152: This function does not have a `sig` http://go/e/7017
     152 |  def initialize; end
            ^^^^^^^^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:152: Insert `sig {generated.void.generated}
  `
     152 |  def initialize; end
            ^

suggest-sig.rb:154: This function does not have a `sig` http://go/e/7017
     154 |  def foo; end
            ^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:154: Insert `sig {generated.override.void.generated}
  `
     154 |  def foo; end
            ^

suggest-sig.rb:156: This function does not have a `sig` http://go/e/7017
     156 |  def bar; end
            ^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:156: Insert `sig {generated.override.void.generated}
  `
     156 |  def bar; end
            ^

suggest-sig.rb:158: This function does not have a `sig` http://go/e/7017
     158 |  def qux; end
            ^^^^^^^
  Autocorrect: Use `-a` to autocorrect
    suggest-sig.rb:158: Insert `sig {generated.override.returns(NilClass).generated}
  `
     158 |  def qux; end
            ^
Errors: 40

--------------------------------------------------------------------------

# typed: strict

extend T::Helpers

sig {generated.params(a: T.untyped, b: T.untyped).returns(Integer).generated}
def hazTwoArgs(a, b); 1; end;

sig {generated.returns(T.any(T::Array[T.untyped], String)).generated}
def baz
  if someCondition
    []
  else
    "[]"
  end
end

sig {void}
def give_me_void; end

sig {generated.void.generated}
def bla; give_me_void; end

sig {generated.void.generated}
def bbq
  if someCondition
    give_me_void
  else
    nil
  end
end

def idk(a); a / a + a * a; end

sig {generated.returns(Integer).generated}
def give_me_literal; 1; end;

sig {generated.returns(T::Array[T::Array[Integer]]).generated}
def give_me_literal_nested; [[1]]; end;

sig {generated.returns(NilClass).generated}
private def root_private; end

sig {generated.returns(NilClass).generated}
protected def root_protected; end

class A
  extend T::Helpers

  sig {generated.returns(NilClass).generated}
  private def a_private; end

  sig {generated.returns(NilClass).generated}
  protected def a_protected; end
end

sig {generated.params(a: Integer).returns(Integer).generated}
def foo(a)
 1 + a
end

sig {params(a: Integer).void}
def takesInt(a); end;

sig {params(a: String).void}
def takesString(a); end;

sig {generated.params(a: T.any(Integer, String), cond: T.untyped).void.generated}
def fooCond(a, cond)
  if cond
    takesInt(a)
  else
    takesString(a)
  end
end

sig {generated.params(a: T.any(Integer, String), cond1: T.untyped, cond2: T.untyped).returns(NilClass).generated}
def fooWhile(a, cond1, cond2)
  while cond2
    if cond1
      takesInt(a)
    else
      takesString(a)
    end
  end
end

def takesBlock
  yield 1
  2
end

sig {generated.returns(T::Array[T.untyped]).generated}
def list_ints_or_empty_list
  x = T.let(1, T.nilable(Integer))
  x.nil? ? [x] : []
end

sig {generated.params(x: Integer).void.generated}
def dead(x)
  if true || qux || blah
    takesInt(x)
  else
    takesString(x)
  end
end

def with_block
  yield
  nil
end


def takesRepated(*a); end;
def hasNoName(*); end;

# We used to generate multiple sigs for dsl'd methods here
Foo = Struct.new(:a, :b)

class TestCarash
  extend T::Helpers
  class Merchant
  end

  sig {params(merchant: Merchant).void}
  def self.blar(merchant:)
  end

  sig {generated.params(merchant: T.untyped).returns(Integer).generated}
  def self.load_account_business_profile(merchant)
    blar(merchant: merchant)
    1
  end
end

sig {generated.params(a: T.untyped).returns(Integer).generated}
def cantRun(a)
  takesInt(a)
  takesString(a)
  1
end

# Suggest "implementation." for these classes
module Abstract
  extend T::Helpers
  abstract!
  sig {abstract.void}
  def foo; end
end
class Implementation
  extend T::Helpers
  include Abstract

  sig {generated.implementation.void.generated}
  def foo; end
end

# Suggest "override." for these classes
class Parent
  extend T::Helpers
  sig {void}
  def initialize; end

  sig {overridable.void}
  def foo; end

  sig {void}
  def bar; end

  sig {generated.returns(NilClass).generated}
  def qux; end
end
class Child < Parent
  sig {generated.void.generated}
  def initialize; end

  sig {generated.override.void.generated}
  def foo; end

  sig {generated.override.void.generated}
  def bar; end

  sig {generated.override.returns(NilClass).generated}
  def qux; end
end

sig {generated.params(a: T.any(Integer, String), cond: T.any(TrueClass, FalseClass)).returns(T.untyped).generated}
def fooCondGeneratedCurly(a, cond)
  if cond
    takesInt(a)
  else
    takesString(a)
  end
end


sig {generated.params(a: T.any(Integer, String), cond: T.any(TrueClass, FalseClass)).returns(T.untyped).generated}
def fooCondGeneratedDo(a, cond)
  if cond
    takesInt(a)
  else
    takesString(a)
  end
end
