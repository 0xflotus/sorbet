class <emptyTree><<C <U <root>>>> < ()
  class <emptyTree>::<C <U TestDSLBuilder>><<C <U <todo sym>>>> < (::<todo sym>)
    ::Sorbet.<U sig>() do ||
      <U <self>>.<U params>({:"opt_string" => <emptyTree>::<C <U String>>}).<U returns>(::NilClass)
    end

    def self.<U opt_string><<C <U <todo sym>>>>(<U opt_string>, &<U <blk>>)
      <emptyTree>
    end

    ::Sorbet.<U sig>() do ||
      <U <self>>.<U returns>(::T.<U nilable>(<emptyTree>::<C <U String>>))
    end

    def self.<U get_opt_string><<C <U <todo sym>>>>(&<U <blk>>)
      ::T.<U unsafe>(nil)
    end

    ::Sorbet.<U sig>() do ||
      <U <self>>.<U returns>(::T.<U nilable>(<emptyTree>::<C <U String>>))
    end

    def <U opt_string><<C <U <todo sym>>>>(&<U <blk>>)
      ::T.<U unsafe>(nil)
    end

    ::Sorbet.<U sig>() do ||
      <U <self>>.<U params>({:"opt_int_defaulted" => <emptyTree>::<C <U Integer>>}).<U returns>(::NilClass)
    end

    def self.<U opt_int_defaulted><<C <U <todo sym>>>>(<U opt_int_defaulted>, &<U <blk>>)
      <emptyTree>
    end

    ::Sorbet.<U sig>() do ||
      <U <self>>.<U returns>(<emptyTree>::<C <U Integer>>)
    end

    def self.<U get_opt_int_defaulted><<C <U <todo sym>>>>(&<U <blk>>)
      ::T.<U unsafe>(nil)
    end

    ::Sorbet.<U sig>() do ||
      <U <self>>.<U returns>(<emptyTree>::<C <U Integer>>)
    end

    def <U opt_int_defaulted><<C <U <todo sym>>>>(&<U <blk>>)
      ::T.<U unsafe>(nil)
    end

    ::Sorbet.<U sig>() do ||
      <U <self>>.<U params>({:"req_string" => <emptyTree>::<C <U String>>}).<U returns>(::NilClass)
    end

    def self.<U req_string><<C <U <todo sym>>>>(<U req_string>, &<U <blk>>)
      <emptyTree>
    end

    ::Sorbet.<U sig>() do ||
      <U <self>>.<U returns>(<emptyTree>::<C <U String>>)
    end

    def self.<U get_req_string><<C <U <todo sym>>>>(&<U <blk>>)
      ::T.<U unsafe>(nil)
    end

    ::Sorbet.<U sig>() do ||
      <U <self>>.<U returns>(<emptyTree>::<C <U String>>)
    end

    def <U req_string><<C <U <todo sym>>>>(&<U <blk>>)
      ::T.<U unsafe>(nil)
    end

    ::Sorbet.<U sig>() do ||
      <U <self>>.<U params>({:"implied_string" => <emptyTree>::<C <U String>>}).<U returns>(::NilClass)
    end

    def self.<U implied_string><<C <U <todo sym>>>>(<U implied_string> = ::T.<U untyped>(), &<U <blk>>)
      <emptyTree>
    end

    ::Sorbet.<U sig>() do ||
      <U <self>>.<U returns>(<emptyTree>::<C <U String>>)
    end

    def self.<U get_implied_string><<C <U <todo sym>>>>(&<U <blk>>)
      ::T.<U unsafe>(nil)
    end

    ::Sorbet.<U sig>() do ||
      <U <self>>.<U returns>(<emptyTree>::<C <U String>>)
    end

    def <U implied_string><<C <U <todo sym>>>>(&<U <blk>>)
      ::T.<U unsafe>(nil)
    end

    ::Sorbet.<U sig>() do ||
      <U <self>>.<U params>({:"no_getter" => <emptyTree>::<C <U String>>}).<U returns>(::NilClass)
    end

    def self.<U no_getter><<C <U <todo sym>>>>(<U no_getter>, &<U <blk>>)
      <emptyTree>
    end

    ::Sorbet.<U sig>() do ||
      <U <self>>.<U returns>(::T.<U nilable>(<emptyTree>::<C <U String>>))
    end

    def self.<U get_no_setter><<C <U <todo sym>>>>(&<U <blk>>)
      ::T.<U unsafe>(nil)
    end

    ::Sorbet.<U sig>() do ||
      <U <self>>.<U returns>(::T.<U nilable>(<emptyTree>::<C <U String>>))
    end

    def <U no_setter><<C <U <todo sym>>>>(&<U <blk>>)
      ::T.<U unsafe>(nil)
    end

    <U <self>>.<U dsl_optional>(:"no_getter_or_setter", <emptyTree>::<C <U String>>, {:"skip_getter" => true, :"skip_setter" => true})

    ::Sorbet.<U sig>() do ||
      <U <self>>.<U params>({:"class_of" => <emptyTree>::<C <U T>>.<U class_of>(<emptyTree>::<C <U Integer>>)}).<U returns>(::NilClass)
    end

    def self.<U class_of><<C <U <todo sym>>>>(<U class_of>, &<U <blk>>)
      <emptyTree>
    end

    ::Sorbet.<U sig>() do ||
      <U <self>>.<U returns>(::T.<U nilable>(<emptyTree>::<C <U T>>.<U class_of>(<emptyTree>::<C <U Integer>>)))
    end

    def self.<U get_class_of><<C <U <todo sym>>>>(&<U <blk>>)
      ::T.<U unsafe>(nil)
    end

    ::Sorbet.<U sig>() do ||
      <U <self>>.<U returns>(::T.<U nilable>(<emptyTree>::<C <U T>>.<U class_of>(<emptyTree>::<C <U Integer>>)))
    end

    def <U class_of><<C <U <todo sym>>>>(&<U <blk>>)
      ::T.<U unsafe>(nil)
    end

    ::Sorbet.<U sig>() do ||
      <U <self>>.<U params>({:"root_const" => ::<root>::<C <U Integer>>}).<U returns>(::NilClass)
    end

    def self.<U root_const><<C <U <todo sym>>>>(<U root_const>, &<U <blk>>)
      <emptyTree>
    end

    ::Sorbet.<U sig>() do ||
      <U <self>>.<U returns>(::T.<U nilable>(::<root>::<C <U Integer>>))
    end

    def self.<U get_root_const><<C <U <todo sym>>>>(&<U <blk>>)
      ::T.<U unsafe>(nil)
    end

    ::Sorbet.<U sig>() do ||
      <U <self>>.<U returns>(::T.<U nilable>(::<root>::<C <U Integer>>))
    end

    def <U root_const><<C <U <todo sym>>>>(&<U <blk>>)
      ::T.<U unsafe>(nil)
    end
  end

  class <emptyTree>::<C <U TestChild>><<C <U <todo sym>>>> < (<emptyTree>::<C <U TestDSLBuilder>>)
    <U <self>>.<U opt_string>("hi")

    <U <self>>.<U get_opt_string>()

    <U <self>>.<U opt_string>()

    <U <self>>.<U opt_string>(:"nope")

    <U <self>>.<U opt_string>(nil)

    <U <self>>.<U opt_int_defaulted>(17)

    <U <self>>.<U implied_string>()

    <U <self>>.<U no_getter>("I\'m setting the value")

    <U <self>>.<U get_no_getter>()

    <U <self>>.<U class_of>(<emptyTree>::<C <U Integer>>)

    <emptyTree>::<C <U T>>.<U assert_type!>(<U <self>>.<U get_opt_string>(), <emptyTree>::<C <U T>>.<U nilable>(<emptyTree>::<C <U String>>))

    <emptyTree>::<C <U T>>.<U assert_type!>(<U <self>>.<U get_opt_string>(), <emptyTree>::<C <U String>>)

    <emptyTree>::<C <U T>>.<U assert_type!>(<U <self>>.<U get_opt_int_defaulted>(), <emptyTree>::<C <U Integer>>)

    <emptyTree>::<C <U T>>.<U assert_type!>(<U <self>>.<U get_req_string>(), <emptyTree>::<C <U String>>)

    def <U test_instance_methods><<C <U <todo sym>>>>(&<U <blk>>)
      begin
        <emptyTree>::<C <U T>>.<U assert_type!>(<U <self>>.<U opt_string>(), <emptyTree>::<C <U T>>.<U nilable>(<emptyTree>::<C <U String>>))
        <emptyTree>::<C <U T>>.<U assert_type!>(<U <self>>.<U opt_int_defaulted>(), <emptyTree>::<C <U Integer>>)
        <emptyTree>::<C <U T>>.<U assert_type!>(<U <self>>.<U req_string>(), <emptyTree>::<C <U String>>)
        <U <self>>.<U no_getter>()
      end
    end
  end
end
