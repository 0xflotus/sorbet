class <emptyTree><<constant:<root>>> < ()
  class <emptyTree>::<constant:TestDSLBuilder><<constant:<todo sym>>> < (::<todo sym>)
    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"opt_string" => <emptyTree>::<constant:String>}).returns(::NilClass)
    end

    def self.opt_string<<constant:<todo sym>>>(opt_string)
      <emptyTree>
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).returns(::T.nilable(<emptyTree>::<constant:String>))
    end

    def self.get_opt_string<<constant:<todo sym>>>()
      ::T.unsafe(nil)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).returns(::T.nilable(<emptyTree>::<constant:String>))
    end

    def opt_string<<constant:<todo sym>>>()
      ::T.unsafe(nil)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"opt_int_defaulted" => <emptyTree>::<constant:Integer>}).returns(::NilClass)
    end

    def self.opt_int_defaulted<<constant:<todo sym>>>(opt_int_defaulted)
      <emptyTree>
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).returns(<emptyTree>::<constant:Integer>)
    end

    def self.get_opt_int_defaulted<<constant:<todo sym>>>()
      ::T.unsafe(nil)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).returns(<emptyTree>::<constant:Integer>)
    end

    def opt_int_defaulted<<constant:<todo sym>>>()
      ::T.unsafe(nil)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"req_string" => <emptyTree>::<constant:String>}).returns(::NilClass)
    end

    def self.req_string<<constant:<todo sym>>>(req_string)
      <emptyTree>
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).returns(<emptyTree>::<constant:String>)
    end

    def self.get_req_string<<constant:<todo sym>>>()
      ::T.unsafe(nil)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).returns(<emptyTree>::<constant:String>)
    end

    def req_string<<constant:<todo sym>>>()
      ::T.unsafe(nil)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"implied_string" => <emptyTree>::<constant:String>}).returns(::NilClass)
    end

    def self.implied_string<<constant:<todo sym>>>(implied_string = ::T.untyped())
      <emptyTree>
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).returns(<emptyTree>::<constant:String>)
    end

    def self.get_implied_string<<constant:<todo sym>>>()
      ::T.unsafe(nil)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).returns(<emptyTree>::<constant:String>)
    end

    def implied_string<<constant:<todo sym>>>()
      ::T.unsafe(nil)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"no_getter" => <emptyTree>::<constant:String>}).returns(::NilClass)
    end

    def self.no_getter<<constant:<todo sym>>>(no_getter)
      <emptyTree>
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).returns(::T.nilable(<emptyTree>::<constant:String>))
    end

    def self.get_no_setter<<constant:<todo sym>>>()
      ::T.unsafe(nil)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).returns(::T.nilable(<emptyTree>::<constant:String>))
    end

    def no_setter<<constant:<todo sym>>>()
      ::T.unsafe(nil)
    end

    self(<constant:<todo sym>>).dsl_optional(:"no_getter_or_setter", <emptyTree>::<constant:String>, {:"skip_getter" => true, :"skip_setter" => true})

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"class_of" => <emptyTree>::<constant:T>.class_of(<emptyTree>::<constant:Integer>)}).returns(::NilClass)
    end

    def self.class_of<<constant:<todo sym>>>(class_of)
      <emptyTree>
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).returns(::T.nilable(<emptyTree>::<constant:T>.class_of(<emptyTree>::<constant:Integer>)))
    end

    def self.get_class_of<<constant:<todo sym>>>()
      ::T.unsafe(nil)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).returns(::T.nilable(<emptyTree>::<constant:T>.class_of(<emptyTree>::<constant:Integer>)))
    end

    def class_of<<constant:<todo sym>>>()
      ::T.unsafe(nil)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"root_const" => ::<root>::<constant:Integer>}).returns(::NilClass)
    end

    def self.root_const<<constant:<todo sym>>>(root_const)
      <emptyTree>
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).returns(::T.nilable(::<root>::<constant:Integer>))
    end

    def self.get_root_const<<constant:<todo sym>>>()
      ::T.unsafe(nil)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).returns(::T.nilable(::<root>::<constant:Integer>))
    end

    def root_const<<constant:<todo sym>>>()
      ::T.unsafe(nil)
    end
  end

  class <emptyTree>::<constant:TestChild><<constant:<todo sym>>> < (<emptyTree>::<constant:TestDSLBuilder>)
    self(<constant:<todo sym>>).opt_string("hi")

    self(<constant:<todo sym>>).get_opt_string()

    self(<constant:<todo sym>>).opt_string()

    self(<constant:<todo sym>>).opt_string(:"nope")

    self(<constant:<todo sym>>).opt_string(nil)

    self(<constant:<todo sym>>).opt_int_defaulted(17)

    self(<constant:<todo sym>>).implied_string()

    self(<constant:<todo sym>>).no_getter("I\'m setting the value")

    self(<constant:<todo sym>>).get_no_getter()

    self(<constant:<todo sym>>).class_of(<emptyTree>::<constant:Integer>)

    <emptyTree>::<constant:T>.assert_type!(self(<constant:<todo sym>>).get_opt_string(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))

    <emptyTree>::<constant:T>.assert_type!(self(<constant:<todo sym>>).get_opt_string(), <emptyTree>::<constant:String>)

    <emptyTree>::<constant:T>.assert_type!(self(<constant:<todo sym>>).get_opt_int_defaulted(), <emptyTree>::<constant:Integer>)

    <emptyTree>::<constant:T>.assert_type!(self(<constant:<todo sym>>).get_req_string(), <emptyTree>::<constant:String>)

    def test_instance_methods<<constant:<todo sym>>>()
      begin
        <emptyTree>::<constant:T>.assert_type!(self(<constant:<todo sym>>).opt_string(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
        <emptyTree>::<constant:T>.assert_type!(self(<constant:<todo sym>>).opt_int_defaulted(), <emptyTree>::<constant:Integer>)
        <emptyTree>::<constant:T>.assert_type!(self(<constant:<todo sym>>).req_string(), <emptyTree>::<constant:String>)
        self(<constant:<todo sym>>).no_getter()
      end
    end
  end
end
