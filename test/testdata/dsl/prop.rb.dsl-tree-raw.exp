ClassDef{
  name = EmptyTree<<constant:<root>>>
  ancestors = []
  rhs = [
    ClassDef{
      name = UnresolvedConstantLit{
        scope = EmptyTree
        cnst = <constant:NotAODM>
      }<<constant:<todo sym>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = ::<todo sym>
          typeAlias = nullptr
        }]
      rhs = [
        MethodDef{
          flags = self
          name = prop<<constant:<todo sym>>>
          args = [RestArg{ expr = UnresolvedIdent{
              kind = Local
              name = args
            } }]
          rhs = EmptyTree
        }

        Send{
          recv = Self{ claz = ::<todo sym> }
          fun = prop
          block = nullptr
          args = [
          ]
        }

        Send{
          recv = Self{ claz = ::<todo sym> }
          fun = prop
          block = nullptr
          args = [
            Literal{ value = :"foo" }
            Literal{ value = :"not_a_string" }
          ]
        }

        Send{
          recv = Self{ claz = ::<todo sym> }
          fun = prop
          block = nullptr
          args = [
            Literal{ value = "not_a_symbol" }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
          ]
        }

        Send{
          recv = Self{ claz = ::<todo sym> }
          fun = prop
          block = nullptr
          args = [
            Literal{ value = :"foo" }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
            Literal{ value = "not_a_hash" }
          ]
        }

        Send{
          recv = Self{ claz = ::<todo sym> }
          fun = prop
          block = nullptr
          args = [
            Literal{ value = "too" }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
            Hash{
              pairs = [
              ]
            }
            Literal{ value = "many" }
          ]
        }

        Send{
          recv = Self{ claz = ::<todo sym> }
          fun = optional
          block = nullptr
          args = [
            Literal{ value = :"company_name" }
            UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
            Literal{ value = :"nonempty_string" }
          ]
        }

        Send{
          recv = Self{ claz = ::<todo sym> }
          fun = optional
          block = nullptr
          args = [
            Literal{ value = :"day" }
            Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:IntegerParam>
              }
              fun = new
              block = nullptr
              args = [
                Hash{
                  pairs = [
                    [
                      key = Literal{ value = :"min" }
                      value = Literal{ value = 1 }
                    ]
                    [
                      key = Literal{ value = :"max" }
                      value = Literal{ value = 31 }
                    ]
                  ]
                }
              ]
            }
          ]
        }

        Send{
          recv = Self{ claz = ::<todo sym> }
          fun = optional
          block = nullptr
          args = [
            Literal{ value = :"name" }
            Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:StringParam>
              }
              fun = alphanumeric
              block = nullptr
              args = [
              ]
            }
          ]
        }

        Send{
          recv = Self{ claz = ::<todo sym> }
          fun = optional
          block = nullptr
          args = [
            Literal{ value = :"how_many" }
            Send{
              recv = UnresolvedConstantLit{
                scope = UnresolvedConstantLit{
                  scope = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:Opus>
                  }
                  cnst = <constant:Param>
                }
                cnst = <constant:CaseParam>
              }
              fun = new
              block = nullptr
              args = [
                Send{
                  recv = Self{ claz = ::<todo sym> }
                  fun = how_many_cases
                  block = nullptr
                  args = [
                  ]
                }
                Send{
                  recv = UnresolvedConstantLit{
                    scope = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <constant:Opus>
                      }
                      cnst = <constant:Param>
                    }
                    cnst = <constant:ParamSpecsParam>
                  }
                  fun = new
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:Default>
                    }
                  ]
                }
              ]
            }
          ]
        }

        Send{
          recv = Self{ claz = ::<todo sym> }
          fun = optional
          block = nullptr
          args = [
            Literal{ value = :"optional_param" }
            Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:IntegerParam>
              }
              fun = new
              block = nullptr
              args = [
              ]
            }
          ]
        }
      ]
    }

    ClassDef{
      name = UnresolvedConstantLit{
        scope = EmptyTree
        cnst = <constant:SomeODM>
      }<<constant:<todo sym>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = ::<todo sym>
          typeAlias = nullptr
        }]
      rhs = [
        Send{
          recv = Self{ claz = ::<todo sym> }
          fun = extend
          block = nullptr
          args = [
            UnresolvedConstantLit{
              scope = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:T>
              }
              cnst = <constant:Helpers>
            }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = foo<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <constant:String>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = foo=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = Self{ claz = ::<todo sym> }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Self{ claz = ::<todo sym> }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:T>
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = 0
          name = foo2<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Self{ claz = ::<todo sym> }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <constant:String>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = 0
          name = foo2=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = cast
            block = nullptr
            args = [
              Literal{ value = nil }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }
      ]
    }

    ClassDef{
      name = UnresolvedConstantLit{
        scope = EmptyTree
        cnst = <constant:ForeignClass>
      }<<constant:<todo sym>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = ::<todo sym>
          typeAlias = nullptr
        }]
      rhs = [
        EmptyTree
      ]
    }

    ClassDef{
      name = UnresolvedConstantLit{
        scope = EmptyTree
        cnst = <constant:AdvancedODM>
      }<<constant:<todo sym>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = ::<todo sym>
          typeAlias = nullptr
        }]
      rhs = [
        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = default_without_optional_false<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <constant:String>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = default_without_optional_false=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = optional_false<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <constant:String>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = optional_false=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = nodefault<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <constant:String>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = nodefault=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = type<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <constant:String>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = type=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    ConstantLit{
                      orig = nullptr
                      symbol = ::Object
                      typeAlias = nullptr
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = object<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    orig = nullptr
                    symbol = ::Object
                    typeAlias = nullptr
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = ConstantLit{
                          orig = nullptr
                          symbol = ::Object
                          typeAlias = nullptr
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = ::Object
                  typeAlias = nullptr
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = object=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                orig = nullptr
                symbol = ::Object
                typeAlias = nullptr
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:Array>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = array<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:Array>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <constant:Array>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:Array>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = array=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:Array>
              }
            ]
          }
        }

        ClassDef{
          name = UnresolvedConstantLit{
            scope = EmptyTree
            cnst = <constant:Mutator>
          }<<constant:<todo sym>>>
          ancestors = []
          rhs = [
            Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = ::Sorbet
                typeAlias = nullptr
              }
              fun = sig
              block = Block {
                args = [
                ]
                body = Send{
                  recv = Send{
                    recv = Self{ claz = ::<todo sym> }
                    fun = params
                    block = nullptr
                    args = [
                      Hash{
                        pairs = [
                          [
                            key = Literal{ value = :"arg0" }
                            value = UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <constant:Array>
                            }
                          ]
                        ]
                      }
                    ]
                  }
                  fun = returns
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:Array>
                    }
                  ]
                }
              }
              args = [
              ]
            }

            MethodDef{
              flags = dsl
              name = array=<<constant:<todo sym>>>
              args = [UnresolvedIdent{
                  kind = Local
                  name = arg0
                }]
              rhs = Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = cast
                block = nullptr
                args = [
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = ::T
                      typeAlias = nullptr
                    }
                    fun = unsafe
                    block = nullptr
                    args = [
                      Literal{ value = nil }
                    ]
                  }
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:Array>
                  }
                ]
              }
            }

            Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = ::Sorbet
                typeAlias = nullptr
              }
              fun = sig
              block = Block {
                args = [
                ]
                body = Send{
                  recv = Self{ claz = ::<todo sym> }
                  fun = returns
                  block = nullptr
                  args = [
                    Send{
                      recv = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = UnresolvedConstantLit{
                                scope = ConstantLit{
                                  orig = nullptr
                                  symbol = ::<root>
                                  typeAlias = nullptr
                                }
                                cnst = <constant:Chalk>
                              }
                              cnst = <constant:ODM>
                            }
                            cnst = <constant:Mutator>
                          }
                          cnst = <constant:Private>
                        }
                        cnst = <constant:ArrayMutator>
                      }
                      fun = []
                      block = nullptr
                      args = [
                        Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                            typeAlias = nullptr
                          }
                          fun = untyped
                          block = nullptr
                          args = [
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
              args = [
              ]
            }

            MethodDef{
              flags = dsl
              name = array<<constant:<todo sym>>>
              args = []
              rhs = Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = cast
                block = nullptr
                args = [
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = ::T
                      typeAlias = nullptr
                    }
                    fun = unsafe
                    block = nullptr
                    args = [
                      Literal{ value = nil }
                    ]
                  }
                  Send{
                    recv = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = ConstantLit{
                                orig = nullptr
                                symbol = ::<root>
                                typeAlias = nullptr
                              }
                              cnst = <constant:Chalk>
                            }
                            cnst = <constant:ODM>
                          }
                          cnst = <constant:Mutator>
                        }
                        cnst = <constant:Private>
                      }
                      cnst = <constant:ArrayMutator>
                    }
                    fun = []
                    block = nullptr
                    args = [
                      Send{
                        recv = ConstantLit{
                          orig = nullptr
                          symbol = ::T
                          typeAlias = nullptr
                        }
                        fun = untyped
                        block = nullptr
                        args = [
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T::Array
                    typeAlias = nullptr
                  }
                  fun = []
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = array_of<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T::Array
                  typeAlias = nullptr
                }
                fun = []
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T::Array
                            typeAlias = nullptr
                          }
                          fun = []
                          block = nullptr
                          args = [
                            UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <constant:String>
                            }
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T::Array
                    typeAlias = nullptr
                  }
                  fun = []
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = array_of=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T::Array
                  typeAlias = nullptr
                }
                fun = []
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:Array>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = array_of_explicit<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:Array>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <constant:Array>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:Array>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = array_of_explicit=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:Array>
              }
            ]
          }
        }

        ClassDef{
          name = UnresolvedConstantLit{
            scope = EmptyTree
            cnst = <constant:Mutator>
          }<<constant:<todo sym>>>
          ancestors = []
          rhs = [
            Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = ::Sorbet
                typeAlias = nullptr
              }
              fun = sig
              block = Block {
                args = [
                ]
                body = Send{
                  recv = Send{
                    recv = Self{ claz = ::<todo sym> }
                    fun = params
                    block = nullptr
                    args = [
                      Hash{
                        pairs = [
                          [
                            key = Literal{ value = :"arg0" }
                            value = UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <constant:Array>
                            }
                          ]
                        ]
                      }
                    ]
                  }
                  fun = returns
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:Array>
                    }
                  ]
                }
              }
              args = [
              ]
            }

            MethodDef{
              flags = dsl
              name = array_of_explicit=<<constant:<todo sym>>>
              args = [UnresolvedIdent{
                  kind = Local
                  name = arg0
                }]
              rhs = Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = cast
                block = nullptr
                args = [
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = ::T
                      typeAlias = nullptr
                    }
                    fun = unsafe
                    block = nullptr
                    args = [
                      Literal{ value = nil }
                    ]
                  }
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:Array>
                  }
                ]
              }
            }

            Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = ::Sorbet
                typeAlias = nullptr
              }
              fun = sig
              block = Block {
                args = [
                ]
                body = Send{
                  recv = Self{ claz = ::<todo sym> }
                  fun = returns
                  block = nullptr
                  args = [
                    Send{
                      recv = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = UnresolvedConstantLit{
                                scope = ConstantLit{
                                  orig = nullptr
                                  symbol = ::<root>
                                  typeAlias = nullptr
                                }
                                cnst = <constant:Chalk>
                              }
                              cnst = <constant:ODM>
                            }
                            cnst = <constant:Mutator>
                          }
                          cnst = <constant:Private>
                        }
                        cnst = <constant:ArrayMutator>
                      }
                      fun = []
                      block = nullptr
                      args = [
                        Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                            typeAlias = nullptr
                          }
                          fun = untyped
                          block = nullptr
                          args = [
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
              args = [
              ]
            }

            MethodDef{
              flags = dsl
              name = array_of_explicit<<constant:<todo sym>>>
              args = []
              rhs = Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = cast
                block = nullptr
                args = [
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = ::T
                      typeAlias = nullptr
                    }
                    fun = unsafe
                    block = nullptr
                    args = [
                      Literal{ value = nil }
                    ]
                  }
                  Send{
                    recv = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = ConstantLit{
                                orig = nullptr
                                symbol = ::<root>
                                typeAlias = nullptr
                              }
                              cnst = <constant:Chalk>
                            }
                            cnst = <constant:ODM>
                          }
                          cnst = <constant:Mutator>
                        }
                        cnst = <constant:Private>
                      }
                      cnst = <constant:ArrayMutator>
                    }
                    fun = []
                    block = nullptr
                    args = [
                      Send{
                        recv = ConstantLit{
                          orig = nullptr
                          symbol = ::T
                          typeAlias = nullptr
                        }
                        fun = untyped
                        block = nullptr
                        args = [
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:T>
                    }
                    cnst = <constant:Array>
                  }
                  fun = []
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = t_array<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:T>
                  }
                  cnst = <constant:Array>
                }
                fun = []
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = Send{
                          recv = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <constant:T>
                            }
                            cnst = <constant:Array>
                          }
                          fun = []
                          block = nullptr
                          args = [
                            UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <constant:String>
                            }
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:T>
                    }
                    cnst = <constant:Array>
                  }
                  fun = []
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = t_array=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:T>
                  }
                  cnst = <constant:Array>
                }
                fun = []
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        ClassDef{
          name = UnresolvedConstantLit{
            scope = EmptyTree
            cnst = <constant:Mutator>
          }<<constant:<todo sym>>>
          ancestors = []
          rhs = [
            Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = ::Sorbet
                typeAlias = nullptr
              }
              fun = sig
              block = Block {
                args = [
                ]
                body = Send{
                  recv = Send{
                    recv = Self{ claz = ::<todo sym> }
                    fun = params
                    block = nullptr
                    args = [
                      Hash{
                        pairs = [
                          [
                            key = Literal{ value = :"arg0" }
                            value = Send{
                              recv = UnresolvedConstantLit{
                                scope = UnresolvedConstantLit{
                                  scope = EmptyTree
                                  cnst = <constant:T>
                                }
                                cnst = <constant:Array>
                              }
                              fun = []
                              block = nullptr
                              args = [
                                UnresolvedConstantLit{
                                  scope = EmptyTree
                                  cnst = <constant:String>
                                }
                              ]
                            }
                          ]
                        ]
                      }
                    ]
                  }
                  fun = returns
                  block = nullptr
                  args = [
                    Send{
                      recv = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <constant:T>
                        }
                        cnst = <constant:Array>
                      }
                      fun = []
                      block = nullptr
                      args = [
                        UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <constant:String>
                        }
                      ]
                    }
                  ]
                }
              }
              args = [
              ]
            }

            MethodDef{
              flags = dsl
              name = t_array=<<constant:<todo sym>>>
              args = [UnresolvedIdent{
                  kind = Local
                  name = arg0
                }]
              rhs = Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = cast
                block = nullptr
                args = [
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = ::T
                      typeAlias = nullptr
                    }
                    fun = unsafe
                    block = nullptr
                    args = [
                      Literal{ value = nil }
                    ]
                  }
                  Send{
                    recv = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <constant:T>
                      }
                      cnst = <constant:Array>
                    }
                    fun = []
                    block = nullptr
                    args = [
                      UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <constant:String>
                      }
                    ]
                  }
                ]
              }
            }

            Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = ::Sorbet
                typeAlias = nullptr
              }
              fun = sig
              block = Block {
                args = [
                ]
                body = Send{
                  recv = Self{ claz = ::<todo sym> }
                  fun = returns
                  block = nullptr
                  args = [
                    Send{
                      recv = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = UnresolvedConstantLit{
                                scope = ConstantLit{
                                  orig = nullptr
                                  symbol = ::<root>
                                  typeAlias = nullptr
                                }
                                cnst = <constant:Chalk>
                              }
                              cnst = <constant:ODM>
                            }
                            cnst = <constant:Mutator>
                          }
                          cnst = <constant:Private>
                        }
                        cnst = <constant:ArrayMutator>
                      }
                      fun = []
                      block = nullptr
                      args = [
                        UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <constant:String>
                        }
                      ]
                    }
                  ]
                }
              }
              args = [
              ]
            }

            MethodDef{
              flags = dsl
              name = t_array<<constant:<todo sym>>>
              args = []
              rhs = Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = cast
                block = nullptr
                args = [
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = ::T
                      typeAlias = nullptr
                    }
                    fun = unsafe
                    block = nullptr
                    args = [
                      Literal{ value = nil }
                    ]
                  }
                  Send{
                    recv = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = ConstantLit{
                                orig = nullptr
                                symbol = ::<root>
                                typeAlias = nullptr
                              }
                              cnst = <constant:Chalk>
                            }
                            cnst = <constant:ODM>
                          }
                          cnst = <constant:Mutator>
                        }
                        cnst = <constant:Private>
                      }
                      cnst = <constant:ArrayMutator>
                    }
                    fun = []
                    block = nullptr
                    args = [
                      UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <constant:String>
                      }
                    ]
                  }
                ]
              }
            }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:T>
                    }
                    cnst = <constant:Hash>
                  }
                  fun = []
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:Symbol>
                    }
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = hash_of<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:T>
                  }
                  cnst = <constant:Hash>
                }
                fun = []
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:Symbol>
                  }
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = Send{
                          recv = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <constant:T>
                            }
                            cnst = <constant:Hash>
                          }
                          fun = []
                          block = nullptr
                          args = [
                            UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <constant:Symbol>
                            }
                            UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <constant:String>
                            }
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:T>
                    }
                    cnst = <constant:Hash>
                  }
                  fun = []
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:Symbol>
                    }
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = hash_of=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:T>
                  }
                  cnst = <constant:Hash>
                }
                fun = []
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:Symbol>
                  }
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        ClassDef{
          name = UnresolvedConstantLit{
            scope = EmptyTree
            cnst = <constant:Mutator>
          }<<constant:<todo sym>>>
          ancestors = []
          rhs = [
            Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = ::Sorbet
                typeAlias = nullptr
              }
              fun = sig
              block = Block {
                args = [
                ]
                body = Send{
                  recv = Send{
                    recv = Self{ claz = ::<todo sym> }
                    fun = params
                    block = nullptr
                    args = [
                      Hash{
                        pairs = [
                          [
                            key = Literal{ value = :"arg0" }
                            value = Send{
                              recv = UnresolvedConstantLit{
                                scope = UnresolvedConstantLit{
                                  scope = EmptyTree
                                  cnst = <constant:T>
                                }
                                cnst = <constant:Hash>
                              }
                              fun = []
                              block = nullptr
                              args = [
                                UnresolvedConstantLit{
                                  scope = EmptyTree
                                  cnst = <constant:Symbol>
                                }
                                UnresolvedConstantLit{
                                  scope = EmptyTree
                                  cnst = <constant:String>
                                }
                              ]
                            }
                          ]
                        ]
                      }
                    ]
                  }
                  fun = returns
                  block = nullptr
                  args = [
                    Send{
                      recv = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <constant:T>
                        }
                        cnst = <constant:Hash>
                      }
                      fun = []
                      block = nullptr
                      args = [
                        UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <constant:Symbol>
                        }
                        UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <constant:String>
                        }
                      ]
                    }
                  ]
                }
              }
              args = [
              ]
            }

            MethodDef{
              flags = dsl
              name = hash_of=<<constant:<todo sym>>>
              args = [UnresolvedIdent{
                  kind = Local
                  name = arg0
                }]
              rhs = Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = cast
                block = nullptr
                args = [
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = ::T
                      typeAlias = nullptr
                    }
                    fun = unsafe
                    block = nullptr
                    args = [
                      Literal{ value = nil }
                    ]
                  }
                  Send{
                    recv = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <constant:T>
                      }
                      cnst = <constant:Hash>
                    }
                    fun = []
                    block = nullptr
                    args = [
                      UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <constant:Symbol>
                      }
                      UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <constant:String>
                      }
                    ]
                  }
                ]
              }
            }

            Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = ::Sorbet
                typeAlias = nullptr
              }
              fun = sig
              block = Block {
                args = [
                ]
                body = Send{
                  recv = Self{ claz = ::<todo sym> }
                  fun = returns
                  block = nullptr
                  args = [
                    Send{
                      recv = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = UnresolvedConstantLit{
                                scope = ConstantLit{
                                  orig = nullptr
                                  symbol = ::<root>
                                  typeAlias = nullptr
                                }
                                cnst = <constant:Chalk>
                              }
                              cnst = <constant:ODM>
                            }
                            cnst = <constant:Mutator>
                          }
                          cnst = <constant:Private>
                        }
                        cnst = <constant:HashMutator>
                      }
                      fun = []
                      block = nullptr
                      args = [
                        UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <constant:Symbol>
                        }
                        UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <constant:String>
                        }
                      ]
                    }
                  ]
                }
              }
              args = [
              ]
            }

            MethodDef{
              flags = dsl
              name = hash_of<<constant:<todo sym>>>
              args = []
              rhs = Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = cast
                block = nullptr
                args = [
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = ::T
                      typeAlias = nullptr
                    }
                    fun = unsafe
                    block = nullptr
                    args = [
                      Literal{ value = nil }
                    ]
                  }
                  Send{
                    recv = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = ConstantLit{
                                orig = nullptr
                                symbol = ::<root>
                                typeAlias = nullptr
                              }
                              cnst = <constant:Chalk>
                            }
                            cnst = <constant:ODM>
                          }
                          cnst = <constant:Mutator>
                        }
                        cnst = <constant:Private>
                      }
                      cnst = <constant:HashMutator>
                    }
                    fun = []
                    block = nullptr
                    args = [
                      UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <constant:Symbol>
                      }
                      UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <constant:String>
                      }
                    ]
                  }
                ]
              }
            }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = optional_explicit<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                            typeAlias = nullptr
                          }
                          fun = nilable
                          block = nullptr
                          args = [
                            UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <constant:String>
                            }
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = optional_explicit=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = optional_existing<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <constant:String>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = optional_existing=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = optional<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                            typeAlias = nullptr
                          }
                          fun = nilable
                          block = nullptr
                          args = [
                            UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <constant:String>
                            }
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = optional=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:T>
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = optional_nilable<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                            typeAlias = nullptr
                          }
                          fun = nilable
                          block = nullptr
                          args = [
                            Send{
                              recv = UnresolvedConstantLit{
                                scope = EmptyTree
                                cnst = <constant:T>
                              }
                              fun = nilable
                              block = nullptr
                              args = [
                                UnresolvedConstantLit{
                                  scope = EmptyTree
                                  cnst = <constant:String>
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    Send{
                      recv = UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <constant:T>
                      }
                      fun = nilable
                      block = nullptr
                      args = [
                        UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <constant:String>
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = optional_nilable=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = nilable
                block = nullptr
                args = [
                  Send{
                    recv = UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:T>
                    }
                    fun = nilable
                    block = nullptr
                    args = [
                      UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <constant:String>
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = const_explicit<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = const<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:Array>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = no_class_arg<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:Array>
                  }
                ]
              }
            ]
          }
        }

        ClassDef{
          name = UnresolvedConstantLit{
            scope = EmptyTree
            cnst = <constant:Mutator>
          }<<constant:<todo sym>>>
          ancestors = []
          rhs = [
            Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = ::Sorbet
                typeAlias = nullptr
              }
              fun = sig
              block = Block {
                args = [
                ]
                body = Send{
                  recv = Send{
                    recv = Self{ claz = ::<todo sym> }
                    fun = params
                    block = nullptr
                    args = [
                      Hash{
                        pairs = [
                          [
                            key = Literal{ value = :"arg0" }
                            value = Send{
                              recv = ConstantLit{
                                orig = nullptr
                                symbol = ::T
                                typeAlias = nullptr
                              }
                              fun = nilable
                              block = nullptr
                              args = [
                                UnresolvedConstantLit{
                                  scope = EmptyTree
                                  cnst = <constant:Array>
                                }
                              ]
                            }
                          ]
                        ]
                      }
                    ]
                  }
                  fun = returns
                  block = nullptr
                  args = [
                    Send{
                      recv = ConstantLit{
                        orig = nullptr
                        symbol = ::T
                        typeAlias = nullptr
                      }
                      fun = nilable
                      block = nullptr
                      args = [
                        UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <constant:Array>
                        }
                      ]
                    }
                  ]
                }
              }
              args = [
              ]
            }

            MethodDef{
              flags = dsl
              name = no_class_arg=<<constant:<todo sym>>>
              args = [UnresolvedIdent{
                  kind = Local
                  name = arg0
                }]
              rhs = Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = cast
                block = nullptr
                args = [
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = ::T
                      typeAlias = nullptr
                    }
                    fun = unsafe
                    block = nullptr
                    args = [
                      Literal{ value = nil }
                    ]
                  }
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = ::T
                      typeAlias = nullptr
                    }
                    fun = nilable
                    block = nullptr
                    args = [
                      UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <constant:Array>
                      }
                    ]
                  }
                ]
              }
            }

            Send{
              recv = ConstantLit{
                orig = nullptr
                symbol = ::Sorbet
                typeAlias = nullptr
              }
              fun = sig
              block = Block {
                args = [
                ]
                body = Send{
                  recv = Self{ claz = ::<todo sym> }
                  fun = returns
                  block = nullptr
                  args = [
                    Send{
                      recv = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = UnresolvedConstantLit{
                                scope = ConstantLit{
                                  orig = nullptr
                                  symbol = ::<root>
                                  typeAlias = nullptr
                                }
                                cnst = <constant:Chalk>
                              }
                              cnst = <constant:ODM>
                            }
                            cnst = <constant:Mutator>
                          }
                          cnst = <constant:Private>
                        }
                        cnst = <constant:ArrayMutator>
                      }
                      fun = []
                      block = nullptr
                      args = [
                        Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                            typeAlias = nullptr
                          }
                          fun = untyped
                          block = nullptr
                          args = [
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
              args = [
              ]
            }

            MethodDef{
              flags = dsl
              name = no_class_arg<<constant:<todo sym>>>
              args = []
              rhs = Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = cast
                block = nullptr
                args = [
                  Send{
                    recv = ConstantLit{
                      orig = nullptr
                      symbol = ::T
                      typeAlias = nullptr
                    }
                    fun = unsafe
                    block = nullptr
                    args = [
                      Literal{ value = nil }
                    ]
                  }
                  Send{
                    recv = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = ConstantLit{
                                orig = nullptr
                                symbol = ::<root>
                                typeAlias = nullptr
                              }
                              cnst = <constant:Chalk>
                            }
                            cnst = <constant:ODM>
                          }
                          cnst = <constant:Mutator>
                        }
                        cnst = <constant:Private>
                      }
                      cnst = <constant:ArrayMutator>
                    }
                    fun = []
                    block = nullptr
                    args = [
                      Send{
                        recv = ConstantLit{
                          orig = nullptr
                          symbol = ::T
                          typeAlias = nullptr
                        }
                        fun = untyped
                        block = nullptr
                        args = [
                        ]
                      }
                    ]
                  }
                ]
              }
            }
          ]
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = untyped
                  block = nullptr
                  args = [
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = enum_prop<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = unsafe
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <constant:String>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"opts" }
                        value = Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                            typeAlias = nullptr
                          }
                          fun = untyped
                          block = nullptr
                          args = [
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:ForeignClass>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign_<<constant:<todo sym>>>
          args = [RestArg{ expr = KeywordArg{ expr = UnresolvedIdent{
              kind = Local
              name = opts
            } } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = unsafe
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign_lazy<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <constant:String>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign_lazy=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"opts" }
                        value = Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                            typeAlias = nullptr
                          }
                          fun = untyped
                          block = nullptr
                          args = [
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:ForeignClass>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign_lazy_<<constant:<todo sym>>>
          args = [RestArg{ expr = KeywordArg{ expr = UnresolvedIdent{
              kind = Local
              name = opts
            } } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = unsafe
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign_proc<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <constant:String>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign_proc=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"opts" }
                        value = Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                            typeAlias = nullptr
                          }
                          fun = untyped
                          block = nullptr
                          args = [
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:ForeignClass>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign_proc_<<constant:<todo sym>>>
          args = [RestArg{ expr = KeywordArg{ expr = UnresolvedIdent{
              kind = Local
              name = opts
            } } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = unsafe
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign_invalid<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = UnresolvedConstantLit{
                          scope = EmptyTree
                          cnst = <constant:String>
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign_invalid=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"opts" }
                        value = Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                            typeAlias = nullptr
                          }
                          fun = untyped
                          block = nullptr
                          args = [
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = untyped
                  block = nullptr
                  args = [
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign_invalid_<<constant:<todo sym>>>
          args = [RestArg{ expr = KeywordArg{ expr = UnresolvedIdent{
              kind = Local
              name = opts
            } } }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = unsafe
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
        }
      ]
    }

    ClassDef{
      name = UnresolvedConstantLit{
        scope = EmptyTree
        cnst = <constant:PropHelpers>
      }<<constant:<todo sym>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = ::<todo sym>
          typeAlias = nullptr
        }]
      rhs = [
        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = ::String
                  typeAlias = nullptr
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = token<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                orig = nullptr
                symbol = ::String
                typeAlias = nullptr
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = ConstantLit{
                          orig = nullptr
                          symbol = ::String
                          typeAlias = nullptr
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = ::String
                  typeAlias = nullptr
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = token=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                orig = nullptr
                symbol = ::String
                typeAlias = nullptr
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = ::Float
                  typeAlias = nullptr
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = created<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                orig = nullptr
                symbol = ::Float
                typeAlias = nullptr
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = ConstantLit{
                          orig = nullptr
                          symbol = ::Float
                          typeAlias = nullptr
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = ::Float
                  typeAlias = nullptr
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = created=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                orig = nullptr
                symbol = ::Float
                typeAlias = nullptr
              }
            ]
          }
        }
      ]
    }

    ClassDef{
      name = UnresolvedConstantLit{
        scope = EmptyTree
        cnst = <constant:PropHelpers2>
      }<<constant:<todo sym>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = ::<todo sym>
          typeAlias = nullptr
        }]
      rhs = [
        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = ::String
                  typeAlias = nullptr
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = token<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                orig = nullptr
                symbol = ::String
                typeAlias = nullptr
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = ConstantLit{
                          orig = nullptr
                          symbol = ::String
                          typeAlias = nullptr
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = ::String
                  typeAlias = nullptr
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = token=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                orig = nullptr
                symbol = ::String
                typeAlias = nullptr
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = ::Float
                  typeAlias = nullptr
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = created<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                orig = nullptr
                symbol = ::Float
                typeAlias = nullptr
              }
            ]
          }
        }
      ]
    }

    ClassDef{
      name = UnresolvedConstantLit{
        scope = EmptyTree
        cnst = <constant:ShardingProp>
      }<<constant:<todo sym>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = ::<todo sym>
          typeAlias = nullptr
        }]
      rhs = [
        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                ConstantLit{
                  orig = nullptr
                  symbol = ::String
                  typeAlias = nullptr
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = merchant<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                orig = nullptr
                symbol = ::String
                typeAlias = nullptr
              }
            ]
          }
        }
      ]
    }

    ClassDef{
      name = UnresolvedConstantLit{
        scope = EmptyTree
        cnst = <constant:EncryptedProp>
      }<<constant:<todo sym>>>
      ancestors = [ConstantLit{
          orig = nullptr
          symbol = ::<todo sym>
          typeAlias = nullptr
        }]
      rhs = [
        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    ConstantLit{
                      orig = nullptr
                      symbol = ::String
                      typeAlias = nullptr
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = foo<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    orig = nullptr
                    symbol = ::String
                    typeAlias = nullptr
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = UnresolvedConstantLit{
                                scope = EmptyTree
                                cnst = <constant:Opus>
                              }
                              cnst = <constant:DB>
                            }
                            cnst = <constant:Model>
                          }
                          cnst = <constant:Mixins>
                        }
                        cnst = <constant:Encryptable>
                      }
                      cnst = <constant:EncryptedValue>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = encrypted_foo<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <constant:Opus>
                            }
                            cnst = <constant:DB>
                          }
                          cnst = <constant:Model>
                        }
                        cnst = <constant:Mixins>
                      }
                      cnst = <constant:Encryptable>
                    }
                    cnst = <constant:EncryptedValue>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                            typeAlias = nullptr
                          }
                          fun = nilable
                          block = nullptr
                          args = [
                            ConstantLit{
                              orig = nullptr
                              symbol = ::String
                              typeAlias = nullptr
                            }
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    ConstantLit{
                      orig = nullptr
                      symbol = ::String
                      typeAlias = nullptr
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = foo=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    orig = nullptr
                    symbol = ::String
                    typeAlias = nullptr
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                      [
                        key = Literal{ value = :"arg0" }
                        value = Send{
                          recv = ConstantLit{
                            orig = nullptr
                            symbol = ::T
                            typeAlias = nullptr
                          }
                          fun = nilable
                          block = nullptr
                          args = [
                            UnresolvedConstantLit{
                              scope = UnresolvedConstantLit{
                                scope = UnresolvedConstantLit{
                                  scope = UnresolvedConstantLit{
                                    scope = UnresolvedConstantLit{
                                      scope = UnresolvedConstantLit{
                                        scope = EmptyTree
                                        cnst = <constant:Opus>
                                      }
                                      cnst = <constant:DB>
                                    }
                                    cnst = <constant:Model>
                                  }
                                  cnst = <constant:Mixins>
                                }
                                cnst = <constant:Encryptable>
                              }
                              cnst = <constant:EncryptedValue>
                            }
                          ]
                        }
                      ]
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = UnresolvedConstantLit{
                                scope = EmptyTree
                                cnst = <constant:Opus>
                              }
                              cnst = <constant:DB>
                            }
                            cnst = <constant:Model>
                          }
                          cnst = <constant:Mixins>
                        }
                        cnst = <constant:Encryptable>
                      }
                      cnst = <constant:EncryptedValue>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = encrypted_foo=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <constant:Opus>
                            }
                            cnst = <constant:DB>
                          }
                          cnst = <constant:Model>
                        }
                        cnst = <constant:Mixins>
                      }
                      cnst = <constant:Encryptable>
                    }
                    cnst = <constant:EncryptedValue>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    ConstantLit{
                      orig = nullptr
                      symbol = ::String
                      typeAlias = nullptr
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = bar<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    orig = nullptr
                    symbol = ::String
                    typeAlias = nullptr
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = ConstantLit{
            orig = nullptr
            symbol = ::Sorbet
            typeAlias = nullptr
          }
          fun = sig
          block = Block {
            args = [
            ]
            body = Send{
              recv = Send{
                recv = Self{ claz = ::<todo sym> }
                fun = params
                block = nullptr
                args = [
                  Hash{
                    pairs = [
                    ]
                  }
                ]
              }
              fun = returns
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    orig = nullptr
                    symbol = ::T
                    typeAlias = nullptr
                  }
                  fun = nilable
                  block = nullptr
                  args = [
                    UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = UnresolvedConstantLit{
                                scope = EmptyTree
                                cnst = <constant:Opus>
                              }
                              cnst = <constant:DB>
                            }
                            cnst = <constant:Model>
                          }
                          cnst = <constant:Mixins>
                        }
                        cnst = <constant:Encryptable>
                      }
                      cnst = <constant:EncryptedValue>
                    }
                  ]
                }
              ]
            }
          }
          args = [
          ]
        }

        MethodDef{
          flags = dsl
          name = encrypted_bar<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              orig = nullptr
              symbol = ::T
              typeAlias = nullptr
            }
            fun = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  orig = nullptr
                  symbol = ::T
                  typeAlias = nullptr
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <constant:Opus>
                            }
                            cnst = <constant:DB>
                          }
                          cnst = <constant:Model>
                        }
                        cnst = <constant:Mixins>
                      }
                      cnst = <constant:Encryptable>
                    }
                    cnst = <constant:EncryptedValue>
                  }
                ]
              }
            ]
          }
        }
      ]
    }

    MethodDef{
      flags = 0
      name = main<<constant:<todo sym>>>
      args = []
      rhs = InsSeq{
        stats = [
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:SomeODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = foo
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:SomeODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = foo
                block = nullptr
                args = [
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:SomeODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = foo=
                block = nullptr
                args = [
                  Literal{ value = "b" }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:SomeODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = foo2
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:SomeODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = foo2
                block = nullptr
                args = [
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:SomeODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = foo2=
                block = nullptr
                args = [
                  Literal{ value = "b" }
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = default_without_optional_false
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = optional_false
                block = nullptr
                args = [
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = nodefault
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = nodefault
                block = nullptr
                args = [
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = type
                block = nullptr
                args = [
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = object
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:Object>
                  }
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = array
                block = nullptr
                args = [
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:Array>
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = array_of
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:T>
                  }
                  cnst = <constant:Array>
                }
                fun = []
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = array_of_explicit
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:T>
                  }
                  cnst = <constant:Array>
                }
                fun = []
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = t_array
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:T>
                  }
                  cnst = <constant:Array>
                }
                fun = []
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = hash_of
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:T>
                  }
                  cnst = <constant:Hash>
                }
                fun = []
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:Symbol>
                  }
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = optional_explicit
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = optional_existing
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:AdvancedODM>
              }
              fun = new
              block = nullptr
              args = [
              ]
            }
            fun = optional_existing=
            block = nullptr
            args = [
              Literal{ value = "b" }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:AdvancedODM>
              }
              fun = new
              block = nullptr
              args = [
              ]
            }
            fun = optional_existing=
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = optional_false
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = optional
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:AdvancedODM>
              }
              fun = new
              block = nullptr
              args = [
              ]
            }
            fun = optional=
            block = nullptr
            args = [
              Literal{ value = "b" }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:AdvancedODM>
              }
              fun = new
              block = nullptr
              args = [
              ]
            }
            fun = optional=
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = optional_nilable
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = const_explicit
                block = nullptr
                args = [
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:AdvancedODM>
              }
              fun = new
              block = nullptr
              args = [
              ]
            }
            fun = const_explicit=
            block = nullptr
            args = [
              Literal{ value = "b" }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = const
                block = nullptr
                args = [
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:AdvancedODM>
              }
              fun = new
              block = nullptr
              args = [
              ]
            }
            fun = const=
            block = nullptr
            args = [
              Literal{ value = "b" }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = no_class_arg
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                fun = nilable
                block = nullptr
                args = [
                  Send{
                    recv = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <constant:T>
                      }
                      cnst = <constant:Array>
                    }
                    fun = []
                    block = nullptr
                    args = [
                      UnresolvedConstantLit{
                        scope = EmptyTree
                        cnst = <constant:String>
                      }
                    ]
                  }
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:AdvancedODM>
              }
              fun = new
              block = nullptr
              args = [
              ]
            }
            fun = no_class_arg=
            block = nullptr
            args = [
              Array{
                elems = [
                  Literal{ value = "b" }
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:AdvancedODM>
              }
              fun = new
              block = nullptr
              args = [
              ]
            }
            fun = enum_prop=
            block = nullptr
            args = [
              Literal{ value = "hello" }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = foreign_
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:ForeignClass>
                  }
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = foreign_
                block = nullptr
                args = [
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:ForeignClass>
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = foreign_lazy_
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:ForeignClass>
                  }
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:AdvancedODM>
              }
              fun = new
              block = nullptr
              args = [
              ]
            }
            fun = foreign_invalid_
            block = nullptr
            args = [
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:PropHelpers>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = token
                block = nullptr
                args = [
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:PropHelpers>
              }
              fun = new
              block = nullptr
              args = [
              ]
            }
            fun = token=
            block = nullptr
            args = [
              Literal{ value = "tok_token" }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:PropHelpers>
              }
              fun = new
              block = nullptr
              args = [
              ]
            }
            fun = token=
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:PropHelpers>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = created
                block = nullptr
                args = [
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:Float>
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:PropHelpers>
              }
              fun = new
              block = nullptr
              args = [
              ]
            }
            fun = created=
            block = nullptr
            args = [
              Literal{ value = 0.000000 }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:PropHelpers>
              }
              fun = new
              block = nullptr
              args = [
              ]
            }
            fun = created=
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:PropHelpers2>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = token
                block = nullptr
                args = [
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:PropHelpers2>
              }
              fun = new
              block = nullptr
              args = [
              ]
            }
            fun = token=
            block = nullptr
            args = [
              Literal{ value = "tok_token" }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:PropHelpers2>
              }
              fun = new
              block = nullptr
              args = [
              ]
            }
            fun = token=
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:PropHelpers2>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = created
                block = nullptr
                args = [
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:Float>
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:PropHelpers2>
              }
              fun = new
              block = nullptr
              args = [
              ]
            }
            fun = created=
            block = nullptr
            args = [
              Literal{ value = 0.000000 }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:ShardingProp>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = merchant
                block = nullptr
                args = [
                ]
              }
              UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:ShardingProp>
              }
              fun = new
              block = nullptr
              args = [
              ]
            }
            fun = merchant=
            block = nullptr
            args = [
              Literal{ value = "hi" }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:EncryptedProp>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = foo
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            fun = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = UnresolvedConstantLit{
                    scope = EmptyTree
                    cnst = <constant:EncryptedProp>
                  }
                  fun = new
                  block = nullptr
                  args = [
                  ]
                }
                fun = encrypted_foo
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = UnresolvedConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                fun = nilable
                block = nullptr
                args = [
                  UnresolvedConstantLit{
                    scope = UnresolvedConstantLit{
                      scope = UnresolvedConstantLit{
                        scope = UnresolvedConstantLit{
                          scope = UnresolvedConstantLit{
                            scope = UnresolvedConstantLit{
                              scope = EmptyTree
                              cnst = <constant:Opus>
                            }
                            cnst = <constant:DB>
                          }
                          cnst = <constant:Model>
                        }
                        cnst = <constant:Mixins>
                      }
                      cnst = <constant:Encryptable>
                    }
                    cnst = <constant:EncryptedValue>
                  }
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:EncryptedProp>
              }
              fun = new
              block = nullptr
              args = [
              ]
            }
            fun = foo=
            block = nullptr
            args = [
              Literal{ value = "hello" }
            ]
          }
          Send{
            recv = Send{
              recv = UnresolvedConstantLit{
                scope = EmptyTree
                cnst = <constant:EncryptedProp>
              }
              fun = new
              block = nullptr
              args = [
              ]
            }
            fun = foo=
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
        ],
        expr = Send{
          recv = Send{
            recv = UnresolvedConstantLit{
              scope = EmptyTree
              cnst = <constant:EncryptedProp>
            }
            fun = new
            block = nullptr
            args = [
            ]
          }
          fun = bar=
          block = nullptr
          args = [
            Literal{ value = "hello" }
          ]
        }
      }
    }
  ]
}
