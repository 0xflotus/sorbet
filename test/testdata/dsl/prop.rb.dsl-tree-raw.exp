ClassDef{
  name = EmptyTree<<constant:<root>>>
  ancestors = []
  rhs = [
    ClassDef{
      name = ConstantLit{
        scope = EmptyTree
        cnst = <constant:NotAODM>
      }<<constant:<todo sym>>>
      ancestors = [Ident{
          symbol = <constant:<todo sym>>
        }]
      rhs = [
        MethodDef{
          flags = self
          name = prop<<constant:<todo sym>>>
          args = [RestArg{ expr = UnresolvedIdent{
              kind = Local
              name = args
            } }]
          rhs = EmptyTree
        }

        Send{
          recv = Self{ claz = ::<todo sym> }
          name = prop
          block = nullptr
          args = [
          ]
        }

        Send{
          recv = Self{ claz = ::<todo sym> }
          name = prop
          block = nullptr
          args = [
            Literal{ value = :"foo" }
            Literal{ value = :"not_a_string" }
          ]
        }

        Send{
          recv = Self{ claz = ::<todo sym> }
          name = prop
          block = nullptr
          args = [
            Literal{ value = "not_a_symbol" }
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
          ]
        }

        Send{
          recv = Self{ claz = ::<todo sym> }
          name = prop
          block = nullptr
          args = [
            Literal{ value = :"foo" }
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
            Literal{ value = "not_a_hash" }
          ]
        }

        Send{
          recv = Self{ claz = ::<todo sym> }
          name = prop
          block = nullptr
          args = [
            Literal{ value = "too" }
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
            Hash{
              pairs = [
              ]
            }
            Literal{ value = "many" }
          ]
        }

        Send{
          recv = Self{ claz = ::<todo sym> }
          name = optional
          block = nullptr
          args = [
            Literal{ value = :"company_name" }
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
            Literal{ value = :"nonempty_string" }
          ]
        }

        Send{
          recv = Self{ claz = ::<todo sym> }
          name = optional
          block = nullptr
          args = [
            Literal{ value = :"day" }
            Send{
              recv = ConstantLit{
                scope = EmptyTree
                cnst = <constant:IntegerParam>
              }
              name = new
              block = nullptr
              args = [
                Hash{
                  pairs = [
                    [
                      key = Literal{ value = :"min" }
                      value = Literal{ value = 1 }
                    ]
                    [
                      key = Literal{ value = :"max" }
                      value = Literal{ value = 31 }
                    ]
                  ]
                }
              ]
            }
          ]
        }

        Send{
          recv = Self{ claz = ::<todo sym> }
          name = optional
          block = nullptr
          args = [
            Literal{ value = :"name" }
            Send{
              recv = ConstantLit{
                scope = EmptyTree
                cnst = <constant:StringParam>
              }
              name = alphanumeric
              block = nullptr
              args = [
              ]
            }
          ]
        }

        Send{
          recv = Self{ claz = ::<todo sym> }
          name = optional
          block = nullptr
          args = [
            Literal{ value = :"how_many" }
            Send{
              recv = ConstantLit{
                scope = ConstantLit{
                  scope = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:Opus>
                  }
                  cnst = <constant:Param>
                }
                cnst = <constant:CaseParam>
              }
              name = new
              block = nullptr
              args = [
                Send{
                  recv = Self{ claz = ::<todo sym> }
                  name = how_many_cases
                  block = nullptr
                  args = [
                  ]
                }
                Send{
                  recv = ConstantLit{
                    scope = ConstantLit{
                      scope = ConstantLit{
                        scope = EmptyTree
                        cnst = <constant:Opus>
                      }
                      cnst = <constant:Param>
                    }
                    cnst = <constant:ParamSpecsParam>
                  }
                  name = new
                  block = nullptr
                  args = [
                    ConstantLit{
                      scope = EmptyTree
                      cnst = <constant:Default>
                    }
                  ]
                }
              ]
            }
          ]
        }

        Send{
          recv = Self{ claz = ::<todo sym> }
          name = optional
          block = nullptr
          args = [
            Literal{ value = :"optional_param" }
            Send{
              recv = ConstantLit{
                scope = EmptyTree
                cnst = <constant:IntegerParam>
              }
              name = new
              block = nullptr
              args = [
              ]
            }
          ]
        }
      ]
    }

    ClassDef{
      name = ConstantLit{
        scope = EmptyTree
        cnst = <constant:SomeODM>
      }<<constant:<todo sym>>>
      ancestors = [Ident{
          symbol = <constant:<todo sym>>
        }]
      rhs = [
        Send{
          recv = Self{ claz = ::<todo sym> }
          name = extend
          block = nullptr
          args = [
            ConstantLit{
              scope = ConstantLit{
                scope = EmptyTree
                cnst = <constant:T>
              }
              cnst = <constant:Helpers>
            }
          ]
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = Ident{
                symbol = <constant:T>
              }
              name = nilable
              block = nullptr
              args = [
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = foo<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                  [
                    key = Literal{ value = :"arg0" }
                    value = ConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = foo=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = sig
            block = nullptr
            args = [
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = ConstantLit{
                scope = EmptyTree
                cnst = <constant:T>
              }
              name = nilable
              block = nullptr
              args = [
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = 0
          name = foo2<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = sig
            block = nullptr
            args = [
              Hash{
                pairs = [
                  [
                    key = Literal{ value = :"arg0" }
                    value = ConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
          ]
        }

        MethodDef{
          flags = 0
          name = foo2=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Literal{ value = nil }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }
      ]
    }

    ClassDef{
      name = ConstantLit{
        scope = EmptyTree
        cnst = <constant:ForeignClass>
      }<<constant:<todo sym>>>
      ancestors = [Ident{
          symbol = <constant:<todo sym>>
        }]
      rhs = [
        EmptyTree
      ]
    }

    ClassDef{
      name = ConstantLit{
        scope = EmptyTree
        cnst = <constant:AdvancedODM>
      }<<constant:<todo sym>>>
      ancestors = [Ident{
          symbol = <constant:<todo sym>>
        }]
      rhs = [
        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = Ident{
                symbol = <constant:T>
              }
              name = nilable
              block = nullptr
              args = [
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = default_without_optional_false<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                  [
                    key = Literal{ value = :"arg0" }
                    value = ConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = default_without_optional_false=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = optional_false<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                  [
                    key = Literal{ value = :"arg0" }
                    value = ConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = optional_false=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = Ident{
                symbol = <constant:T>
              }
              name = nilable
              block = nullptr
              args = [
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = nodefault<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                  [
                    key = Literal{ value = :"arg0" }
                    value = ConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = nodefault=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = type<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                  [
                    key = Literal{ value = :"arg0" }
                    value = ConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = type=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = Ident{
                symbol = <constant:T>
              }
              name = nilable
              block = nullptr
              args = [
                Ident{
                  symbol = <constant:Object>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = object<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  Ident{
                    symbol = <constant:Object>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                  [
                    key = Literal{ value = :"arg0" }
                    value = Ident{
                      symbol = <constant:Object>
                    }
                  ]
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Ident{
              symbol = <constant:Object>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = object=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Ident{
                symbol = <constant:Object>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:Array>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = array<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:Array>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                  [
                    key = Literal{ value = :"arg0" }
                    value = ConstantLit{
                      scope = EmptyTree
                      cnst = <constant:Array>
                    }
                  ]
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:Array>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = array=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:Array>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = Ident{
                symbol = <constant:Array>
              }
              name = []
              block = nullptr
              args = [
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = array_of<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = Ident{
                  symbol = <constant:Array>
                }
                name = []
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                  [
                    key = Literal{ value = :"arg0" }
                    value = Send{
                      recv = Ident{
                        symbol = <constant:Array>
                      }
                      name = []
                      block = nullptr
                      args = [
                        ConstantLit{
                          scope = EmptyTree
                          cnst = <constant:String>
                        }
                      ]
                    }
                  ]
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = Ident{
                symbol = <constant:Array>
              }
              name = []
              block = nullptr
              args = [
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = array_of=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = Ident{
                  symbol = <constant:Array>
                }
                name = []
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:Array>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = array_of_explicit<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:Array>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                  [
                    key = Literal{ value = :"arg0" }
                    value = ConstantLit{
                      scope = EmptyTree
                      cnst = <constant:Array>
                    }
                  ]
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:Array>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = array_of_explicit=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:Array>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = ConstantLit{
                scope = ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                cnst = <constant:Array>
              }
              name = []
              block = nullptr
              args = [
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = t_array<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  scope = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:T>
                  }
                  cnst = <constant:Array>
                }
                name = []
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                  [
                    key = Literal{ value = :"arg0" }
                    value = Send{
                      recv = ConstantLit{
                        scope = ConstantLit{
                          scope = EmptyTree
                          cnst = <constant:T>
                        }
                        cnst = <constant:Array>
                      }
                      name = []
                      block = nullptr
                      args = [
                        ConstantLit{
                          scope = EmptyTree
                          cnst = <constant:String>
                        }
                      ]
                    }
                  ]
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = ConstantLit{
                scope = ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                cnst = <constant:Array>
              }
              name = []
              block = nullptr
              args = [
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = t_array=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  scope = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:T>
                  }
                  cnst = <constant:Array>
                }
                name = []
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = ConstantLit{
                scope = ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                cnst = <constant:Hash>
              }
              name = []
              block = nullptr
              args = [
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:Symbol>
                }
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = hash_of<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  scope = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:T>
                  }
                  cnst = <constant:Hash>
                }
                name = []
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:Symbol>
                  }
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                  [
                    key = Literal{ value = :"arg0" }
                    value = Send{
                      recv = ConstantLit{
                        scope = ConstantLit{
                          scope = EmptyTree
                          cnst = <constant:T>
                        }
                        cnst = <constant:Hash>
                      }
                      name = []
                      block = nullptr
                      args = [
                        ConstantLit{
                          scope = EmptyTree
                          cnst = <constant:Symbol>
                        }
                        ConstantLit{
                          scope = EmptyTree
                          cnst = <constant:String>
                        }
                      ]
                    }
                  ]
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = ConstantLit{
                scope = ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                cnst = <constant:Hash>
              }
              name = []
              block = nullptr
              args = [
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:Symbol>
                }
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = hash_of=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  scope = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:T>
                  }
                  cnst = <constant:Hash>
                }
                name = []
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:Symbol>
                  }
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = Ident{
                symbol = <constant:T>
              }
              name = nilable
              block = nullptr
              args = [
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = optional_explicit<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                  [
                    key = Literal{ value = :"arg0" }
                    value = Send{
                      recv = Ident{
                        symbol = <constant:T>
                      }
                      name = nilable
                      block = nullptr
                      args = [
                        ConstantLit{
                          scope = EmptyTree
                          cnst = <constant:String>
                        }
                      ]
                    }
                  ]
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = Ident{
                symbol = <constant:T>
              }
              name = nilable
              block = nullptr
              args = [
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = optional_explicit=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = Ident{
                symbol = <constant:T>
              }
              name = nilable
              block = nullptr
              args = [
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = optional_existing<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                  [
                    key = Literal{ value = :"arg0" }
                    value = ConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = optional_existing=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = optional<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                  [
                    key = Literal{ value = :"arg0" }
                    value = Send{
                      recv = Ident{
                        symbol = <constant:T>
                      }
                      name = nilable
                      block = nullptr
                      args = [
                        ConstantLit{
                          scope = EmptyTree
                          cnst = <constant:String>
                        }
                      ]
                    }
                  ]
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = Ident{
                symbol = <constant:T>
              }
              name = nilable
              block = nullptr
              args = [
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = optional=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = ConstantLit{
                scope = EmptyTree
                cnst = <constant:T>
              }
              name = nilable
              block = nullptr
              args = [
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = optional_nilable<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                  [
                    key = Literal{ value = :"arg0" }
                    value = Send{
                      recv = Ident{
                        symbol = <constant:T>
                      }
                      name = nilable
                      block = nullptr
                      args = [
                        Send{
                          recv = ConstantLit{
                            scope = EmptyTree
                            cnst = <constant:T>
                          }
                          name = nilable
                          block = nullptr
                          args = [
                            ConstantLit{
                              scope = EmptyTree
                              cnst = <constant:String>
                            }
                          ]
                        }
                      ]
                    }
                  ]
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = Ident{
                symbol = <constant:T>
              }
              name = nilable
              block = nullptr
              args = [
                Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:T>
                  }
                  name = nilable
                  block = nullptr
                  args = [
                    ConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = optional_nilable=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  Send{
                    recv = ConstantLit{
                      scope = EmptyTree
                      cnst = <constant:T>
                    }
                    name = nilable
                    block = nullptr
                    args = [
                      ConstantLit{
                        scope = EmptyTree
                        cnst = <constant:String>
                      }
                    ]
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = const_explicit<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = const<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = Ident{
                symbol = <constant:T>
              }
              name = nilable
              block = nullptr
              args = [
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:Array>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = no_class_arg<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:Array>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = Ident{
                symbol = <constant:T>
              }
              name = untyped
              block = nullptr
              args = [
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = enum_prop<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = unsafe
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = Ident{
                symbol = <constant:T>
              }
              name = nilable
              block = nullptr
              args = [
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                  [
                    key = Literal{ value = :"arg0" }
                    value = ConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = Ident{
                symbol = <constant:T>
              }
              name = nilable
              block = nullptr
              args = [
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:ForeignClass>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign_<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = unsafe
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = Ident{
                symbol = <constant:T>
              }
              name = nilable
              block = nullptr
              args = [
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign_lazy<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                  [
                    key = Literal{ value = :"arg0" }
                    value = ConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign_lazy=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = Ident{
                symbol = <constant:T>
              }
              name = nilable
              block = nullptr
              args = [
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:ForeignClass>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign_lazy_<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = unsafe
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = Ident{
                symbol = <constant:T>
              }
              name = nilable
              block = nullptr
              args = [
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign_proc<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                  [
                    key = Literal{ value = :"arg0" }
                    value = ConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign_proc=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = Ident{
                symbol = <constant:T>
              }
              name = nilable
              block = nullptr
              args = [
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:ForeignClass>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign_proc_<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = unsafe
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = Ident{
                symbol = <constant:T>
              }
              name = nilable
              block = nullptr
              args = [
                ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:String>
                }
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign_invalid<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                  [
                    key = Literal{ value = :"arg0" }
                    value = ConstantLit{
                      scope = EmptyTree
                      cnst = <constant:String>
                    }
                  ]
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            ConstantLit{
              scope = EmptyTree
              cnst = <constant:String>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign_invalid=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
            ]
          }
          name = returns
          block = nullptr
          args = [
            Send{
              recv = Ident{
                symbol = <constant:T>
              }
              name = untyped
              block = nullptr
              args = [
              ]
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = foreign_invalid_<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = unsafe
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
        }
      ]
    }

    ClassDef{
      name = ConstantLit{
        scope = EmptyTree
        cnst = <constant:PropHelpers>
      }<<constant:<todo sym>>>
      ancestors = [Ident{
          symbol = <constant:<todo sym>>
        }]
      rhs = [
        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Ident{
              symbol = <constant:String>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = token<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Ident{
                symbol = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                  [
                    key = Literal{ value = :"arg0" }
                    value = Ident{
                      symbol = <constant:String>
                    }
                  ]
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Ident{
              symbol = <constant:String>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = token=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Ident{
                symbol = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Ident{
              symbol = <constant:Float>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = created<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Ident{
                symbol = <constant:Float>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                  [
                    key = Literal{ value = :"arg0" }
                    value = Ident{
                      symbol = <constant:Float>
                    }
                  ]
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Ident{
              symbol = <constant:Float>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = created=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Ident{
                symbol = <constant:Float>
              }
            ]
          }
        }
      ]
    }

    ClassDef{
      name = ConstantLit{
        scope = EmptyTree
        cnst = <constant:PropHelpers2>
      }<<constant:<todo sym>>>
      ancestors = [Ident{
          symbol = <constant:<todo sym>>
        }]
      rhs = [
        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Ident{
              symbol = <constant:String>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = token<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Ident{
                symbol = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                  [
                    key = Literal{ value = :"arg0" }
                    value = Ident{
                      symbol = <constant:String>
                    }
                  ]
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Ident{
              symbol = <constant:String>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = token=<<constant:<todo sym>>>
          args = [UnresolvedIdent{
              kind = Local
              name = arg0
            }]
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Ident{
                symbol = <constant:String>
              }
            ]
          }
        }

        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Ident{
              symbol = <constant:Float>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = created<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Ident{
                symbol = <constant:Float>
              }
            ]
          }
        }
      ]
    }

    ClassDef{
      name = ConstantLit{
        scope = EmptyTree
        cnst = <constant:ShardingProp>
      }<<constant:<todo sym>>>
      ancestors = [Ident{
          symbol = <constant:<todo sym>>
        }]
      rhs = [
        Send{
          recv = Send{
            recv = Self{ claz = ::<todo sym> }
            name = <dslSig>
            block = nullptr
            args = [
              Hash{
                pairs = [
                ]
              }
            ]
          }
          name = returns
          block = nullptr
          args = [
            Ident{
              symbol = <constant:String>
            }
          ]
        }

        MethodDef{
          flags = dsl
          name = merchant<<constant:<todo sym>>>
          args = []
          rhs = Send{
            recv = Ident{
              symbol = <constant:T>
            }
            name = cast
            block = nullptr
            args = [
              Send{
                recv = Ident{
                  symbol = <constant:T>
                }
                name = unsafe
                block = nullptr
                args = [
                  Literal{ value = nil }
                ]
              }
              Ident{
                symbol = <constant:String>
              }
            ]
          }
        }
      ]
    }

    MethodDef{
      flags = 0
      name = main<<constant:<todo sym>>>
      args = []
      rhs = InsSeq{
        stats = [
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:SomeODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = foo
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:SomeODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = foo
                block = nullptr
                args = [
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:SomeODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = foo=
                block = nullptr
                args = [
                  Literal{ value = "b" }
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:SomeODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = foo2
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:SomeODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = foo2
                block = nullptr
                args = [
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:SomeODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = foo2=
                block = nullptr
                args = [
                  Literal{ value = "b" }
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = default_without_optional_false
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = optional_false
                block = nullptr
                args = [
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = nodefault
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = nodefault
                block = nullptr
                args = [
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = type
                block = nullptr
                args = [
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = object
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:Object>
                  }
                ]
              }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = array
                block = nullptr
                args = [
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:Array>
              }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = array_of
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = ConstantLit{
                  scope = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:T>
                  }
                  cnst = <constant:Array>
                }
                name = []
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = array_of_explicit
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = ConstantLit{
                  scope = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:T>
                  }
                  cnst = <constant:Array>
                }
                name = []
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = t_array
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = ConstantLit{
                  scope = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:T>
                  }
                  cnst = <constant:Array>
                }
                name = []
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = hash_of
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = ConstantLit{
                  scope = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:T>
                  }
                  cnst = <constant:Hash>
                }
                name = []
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:Symbol>
                  }
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = optional_explicit
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = optional_existing
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = ConstantLit{
                scope = EmptyTree
                cnst = <constant:AdvancedODM>
              }
              name = new
              block = nullptr
              args = [
              ]
            }
            name = optional_existing=
            block = nullptr
            args = [
              Literal{ value = "b" }
            ]
          }
          Send{
            recv = Send{
              recv = ConstantLit{
                scope = EmptyTree
                cnst = <constant:AdvancedODM>
              }
              name = new
              block = nullptr
              args = [
              ]
            }
            name = optional_existing=
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = optional_false
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = optional
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = ConstantLit{
                scope = EmptyTree
                cnst = <constant:AdvancedODM>
              }
              name = new
              block = nullptr
              args = [
              ]
            }
            name = optional=
            block = nullptr
            args = [
              Literal{ value = "b" }
            ]
          }
          Send{
            recv = Send{
              recv = ConstantLit{
                scope = EmptyTree
                cnst = <constant:AdvancedODM>
              }
              name = new
              block = nullptr
              args = [
              ]
            }
            name = optional=
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = optional_nilable
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:String>
                  }
                ]
              }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = const_explicit
                block = nullptr
                args = [
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
          Send{
            recv = Send{
              recv = ConstantLit{
                scope = EmptyTree
                cnst = <constant:AdvancedODM>
              }
              name = new
              block = nullptr
              args = [
              ]
            }
            name = const_explicit=
            block = nullptr
            args = [
              Literal{ value = "b" }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = const
                block = nullptr
                args = [
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
          Send{
            recv = Send{
              recv = ConstantLit{
                scope = EmptyTree
                cnst = <constant:AdvancedODM>
              }
              name = new
              block = nullptr
              args = [
              ]
            }
            name = const=
            block = nullptr
            args = [
              Literal{ value = "b" }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = no_class_arg
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  Send{
                    recv = ConstantLit{
                      scope = ConstantLit{
                        scope = EmptyTree
                        cnst = <constant:T>
                      }
                      cnst = <constant:Array>
                    }
                    name = []
                    block = nullptr
                    args = [
                      ConstantLit{
                        scope = EmptyTree
                        cnst = <constant:String>
                      }
                    ]
                  }
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = ConstantLit{
                scope = EmptyTree
                cnst = <constant:AdvancedODM>
              }
              name = new
              block = nullptr
              args = [
              ]
            }
            name = no_class_arg=
            block = nullptr
            args = [
              Array{
                elems = [
                  Literal{ value = "b" }
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = ConstantLit{
                scope = EmptyTree
                cnst = <constant:AdvancedODM>
              }
              name = new
              block = nullptr
              args = [
              ]
            }
            name = enum_prop=
            block = nullptr
            args = [
              Literal{ value = "hello" }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = foreign_
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:ForeignClass>
                  }
                ]
              }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = foreign_
                block = nullptr
                args = [
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:ForeignClass>
              }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:AdvancedODM>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = foreign_lazy_
                block = nullptr
                args = [
                ]
              }
              Send{
                recv = ConstantLit{
                  scope = EmptyTree
                  cnst = <constant:T>
                }
                name = nilable
                block = nullptr
                args = [
                  ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:ForeignClass>
                  }
                ]
              }
            ]
          }
          Send{
            recv = Send{
              recv = ConstantLit{
                scope = EmptyTree
                cnst = <constant:AdvancedODM>
              }
              name = new
              block = nullptr
              args = [
              ]
            }
            name = foreign_invalid_
            block = nullptr
            args = [
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:PropHelpers>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = token
                block = nullptr
                args = [
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
          Send{
            recv = Send{
              recv = ConstantLit{
                scope = EmptyTree
                cnst = <constant:PropHelpers>
              }
              name = new
              block = nullptr
              args = [
              ]
            }
            name = token=
            block = nullptr
            args = [
              Literal{ value = "tok_token" }
            ]
          }
          Send{
            recv = Send{
              recv = ConstantLit{
                scope = EmptyTree
                cnst = <constant:PropHelpers>
              }
              name = new
              block = nullptr
              args = [
              ]
            }
            name = token=
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:PropHelpers>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = created
                block = nullptr
                args = [
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:Float>
              }
            ]
          }
          Send{
            recv = Send{
              recv = ConstantLit{
                scope = EmptyTree
                cnst = <constant:PropHelpers>
              }
              name = new
              block = nullptr
              args = [
              ]
            }
            name = created=
            block = nullptr
            args = [
              Literal{ value = 0.000000 }
            ]
          }
          Send{
            recv = Send{
              recv = ConstantLit{
                scope = EmptyTree
                cnst = <constant:PropHelpers>
              }
              name = new
              block = nullptr
              args = [
              ]
            }
            name = created=
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:PropHelpers2>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = token
                block = nullptr
                args = [
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
          Send{
            recv = Send{
              recv = ConstantLit{
                scope = EmptyTree
                cnst = <constant:PropHelpers2>
              }
              name = new
              block = nullptr
              args = [
              ]
            }
            name = token=
            block = nullptr
            args = [
              Literal{ value = "tok_token" }
            ]
          }
          Send{
            recv = Send{
              recv = ConstantLit{
                scope = EmptyTree
                cnst = <constant:PropHelpers2>
              }
              name = new
              block = nullptr
              args = [
              ]
            }
            name = token=
            block = nullptr
            args = [
              Literal{ value = nil }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:PropHelpers2>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = created
                block = nullptr
                args = [
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:Float>
              }
            ]
          }
          Send{
            recv = Send{
              recv = ConstantLit{
                scope = EmptyTree
                cnst = <constant:PropHelpers2>
              }
              name = new
              block = nullptr
              args = [
              ]
            }
            name = created=
            block = nullptr
            args = [
              Literal{ value = 0.000000 }
            ]
          }
          Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:T>
            }
            name = assert_type!
            block = nullptr
            args = [
              Send{
                recv = Send{
                  recv = ConstantLit{
                    scope = EmptyTree
                    cnst = <constant:ShardingProp>
                  }
                  name = new
                  block = nullptr
                  args = [
                  ]
                }
                name = merchant
                block = nullptr
                args = [
                ]
              }
              ConstantLit{
                scope = EmptyTree
                cnst = <constant:String>
              }
            ]
          }
        ],
        expr = Send{
          recv = Send{
            recv = ConstantLit{
              scope = EmptyTree
              cnst = <constant:ShardingProp>
            }
            name = new
            block = nullptr
            args = [
            ]
          }
          name = merchant=
          block = nullptr
          args = [
            Literal{ value = "hi" }
          ]
        }
      }
    }
  ]
}
