class <emptyTree><<constant:<root>>> < ()
  begin
    self(<constant:<todo sym>>).require_relative("../../t")
    module <emptyTree>::<constant:Foo><<constant:<todo sym>>> < ()
      class <emptyTree>::<constant:Struct><<constant:<todo sym>>> < (::<constant:<todo sym>>)
        <emptyTree>
      end
    end
    class <emptyTree>::<constant:NotStruct><<constant:<todo sym>>> < (::<constant:<todo sym>>)
      <emptyTree>::<constant:B> = <emptyTree>::<constant:Foo>::<constant:Struct>.new()

      var = <emptyTree>::<constant:Struct>.new(:foo)
    end
    class <emptyTree>::<constant:RealStruct><<constant:<todo sym>>> < (::<constant:<todo sym>>)
      class <emptyTree>::<constant:A><<constant:<todo sym>>> < (::<constant:Struct>)
        self(<constant:<todo sym>>).declare_variables({:@foo => ::<constant:BasicObject>, :@bar => ::<constant:BasicObject>})

        self(<constant:<todo sym>>).attr_accessor(:foo)

        self(<constant:<todo sym>>).attr_accessor(:bar)

        self(<constant:<todo sym>>).sig({:foo => ::<constant:BasicObject>, :bar => ::<constant:BasicObject>}).returns(<emptyTree>::<constant:A>)

        def self.new<<constant:<todo sym>>>(foo = ::<constant:nil>, bar = ::<constant:nil>)
          ::<constant:T>.cast(::<constant:nil>, <emptyTree>::<constant:A>)
        end
      end
    end
    class <emptyTree>::<constant:RealStructDesugar><<constant:<todo sym>>> < (::<constant:<todo sym>>)
      class <emptyTree>::<constant:A><<constant:<todo sym>>> < (<emptyTree>::<constant:Struct>)
        self(<constant:<todo sym>>).declare_variables({:@foo => <emptyTree>::<constant:BasicObject>, :@bar => <emptyTree>::<constant:BasicObject>})

        def foo<<constant:<todo sym>>>()
          @foo
        end

        def foo=<<constant:<todo sym>>>(arg0)
          @foo = arg0
        end

        def bar<<constant:<todo sym>>>()
          @bar
        end

        def bar=<<constant:<todo sym>>>(arg0)
          @bar = arg0
        end

        self(<constant:<todo sym>>).sig({:foo => <emptyTree>::<constant:BasicObject>, :bar => <emptyTree>::<constant:BasicObject>}).returns(<emptyTree>::<constant:A>)

        def self.new<<constant:<todo sym>>>(foo = ::<constant:nil>, bar = ::<constant:nil>)
          <emptyTree>::<constant:T>.cast(::<constant:nil>, <emptyTree>::<constant:A>)
        end
      end
    end
    class <emptyTree>::<constant:TwoStructs><<constant:<todo sym>>> < (::<constant:<todo sym>>)
      class <emptyTree>::<constant:A><<constant:<todo sym>>> < (::<constant:Struct>)
        self(<constant:<todo sym>>).declare_variables({:@foo => ::<constant:BasicObject>})

        self(<constant:<todo sym>>).attr_accessor(:foo)

        self(<constant:<todo sym>>).sig({:foo => ::<constant:BasicObject>}).returns(<emptyTree>::<constant:A>)

        def self.new<<constant:<todo sym>>>(foo = ::<constant:nil>)
          ::<constant:T>.cast(::<constant:nil>, <emptyTree>::<constant:A>)
        end
      end

      class <emptyTree>::<constant:B><<constant:<todo sym>>> < (::<constant:Struct>)
        self(<constant:<todo sym>>).declare_variables({:@foo => ::<constant:BasicObject>})

        self(<constant:<todo sym>>).attr_accessor(:foo)

        self(<constant:<todo sym>>).sig({:foo => ::<constant:BasicObject>}).returns(<emptyTree>::<constant:B>)

        def self.new<<constant:<todo sym>>>(foo = ::<constant:nil>)
          ::<constant:T>.cast(::<constant:nil>, <emptyTree>::<constant:B>)
        end
      end
    end
    class <emptyTree>::<constant:AccidentallyStruct><<constant:<todo sym>>> < (::<constant:<todo sym>>)
      class <emptyTree>::<constant:Struct><<constant:<todo sym>>> < (::<constant:<todo sym>>)
        <emptyTree>
      end

      class <emptyTree>::<constant:A><<constant:<todo sym>>> < (::<constant:Struct>)
        self(<constant:<todo sym>>).declare_variables({:@foo => ::<constant:BasicObject>, :@bar => ::<constant:BasicObject>})

        self(<constant:<todo sym>>).attr_accessor(:foo)

        self(<constant:<todo sym>>).attr_accessor(:bar)

        self(<constant:<todo sym>>).sig({:foo => ::<constant:BasicObject>, :bar => ::<constant:BasicObject>}).returns(<emptyTree>::<constant:A>)

        def self.new<<constant:<todo sym>>>(foo = ::<constant:nil>, bar = ::<constant:nil>)
          ::<constant:T>.cast(::<constant:nil>, <emptyTree>::<constant:A>)
        end
      end
    end
    class <emptyTree>::<constant:Main><<constant:<todo sym>>> < (::<constant:<todo sym>>)
      def main<<constant:<todo sym>>>()
        begin
          a = <emptyTree>::<constant:Struct>.new(:foo)
          <emptyTree>::<constant:T>.assert_type!(a, <emptyTree>::<constant:Class>)
          <emptyTree>::<constant:T>.assert_type!(a.new(), <emptyTree>::<constant:Struct>)
          <emptyTree>::<constant:T>.assert_type!(a.new(2), <emptyTree>::<constant:Struct>)
          <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:RealStruct>::<constant:A>.new(2, 3), <emptyTree>::<constant:RealStruct>::<constant:A>)
          <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:RealStruct>::<constant:A>.new(2), <emptyTree>::<constant:RealStruct>::<constant:A>)
          <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:RealStructDesugar>::<constant:A>.new(2, 3), <emptyTree>::<constant:RealStructDesugar>::<constant:A>)
        end
      end
    end
    self(<constant:<todo sym>>).puts(<emptyTree>::<constant:Main>.new().main())
  end
end
