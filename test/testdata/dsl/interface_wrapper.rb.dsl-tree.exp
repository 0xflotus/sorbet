class <emptyTree><<constant:<root>>> < ()
  begin
    module <emptyTree>::<constant:Interface><<constant:<todo sym>>> < ()
      def some_method<<constant:<todo sym>>>()
        <emptyTree>
      end
    end
    class <emptyTree>::<constant:SomeClass><<constant:<todo sym>>> < (::<todo sym>)
      self(<constant:<todo sym>>).include(<emptyTree>::<constant:Interface>)

      def other_method<<constant:<todo sym>>>()
        <emptyTree>
      end
    end
    class <emptyTree>::<constant:Other><<constant:<todo sym>>> < (::<todo sym>)
      def self.wrap_instance<<constant:<todo sym>>>(x, y = nil)
        <emptyTree>
      end
    end
    def testit<<constant:<todo sym>>>()
      begin
        s = <emptyTree>::<constant:SomeClass>.new()
        wrap = ::T.let(s, <emptyTree>::<constant:Interface>)
        <emptyTree>::<constant:T>.assert_type!(wrap, <emptyTree>::<constant:Interface>)
        wrap.other_method()
        wrap.some_method()
        <emptyTree>::<constant:Other>.wrap_instance("hi", "there")
        o = <emptyTree>::<constant:Other>
        o.wrap_instance("hi")
      end
    end
  end
end
