class <emptyTree><<constant:<root>>> < ()
  class <emptyTree>::<constant:Opus>::<constant:Command><<constant:<todo sym>>> < (::<todo sym>)
    self(<constant:<todo sym>>).extend(<emptyTree>::<constant:T>::<constant:Helpers>)
  end

  class <emptyTree>::<constant:MyCommand><<constant:<todo sym>>> < (<emptyTree>::<constant:Opus>::<constant:Command>)
    self(<constant:<todo sym>>).sig({:"x" => <emptyTree>::<constant:Integer>}).returns(<emptyTree>::<constant:String>)

    def call<<constant:<todo sym>>>(x)
      x.to_s()
    end

    self(<constant:<todo sym>>).sig({:"x" => <emptyTree>::<constant:Integer>}).returns(<emptyTree>::<constant:String>)

    def self.call<<constant:<todo sym>>>(x)
      ::T.untyped()
    end
  end

  <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:MyCommand>.call(7), <emptyTree>::<constant:String>)

  class <emptyTree>::<constant:OtherCommand><<constant:<todo sym>>> < (::<root>::<constant:Opus>::<constant:Command>)
    self(<constant:<todo sym>>).sig({:"x" => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:Integer>)

    def call<<constant:<todo sym>>>(x)
      self(<constant:<todo sym>>).Integer(x)
    end

    self(<constant:<todo sym>>).sig({:"x" => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:Integer>)

    def self.call<<constant:<todo sym>>>(x)
      ::T.untyped()
    end
  end

  <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:OtherCommand>.call("8"), <emptyTree>::<constant:Integer>)

  class <emptyTree>::<constant:NotACommand><<constant:<todo sym>>> < (<emptyTree>::<constant:Llamas>::<constant:Opus>::<constant:Command>)
    self(<constant:<todo sym>>).extend(<emptyTree>::<constant:T>::<constant:Helpers>)

    self(<constant:<todo sym>>).sig({:"x" => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:Integer>)

    def call<<constant:<todo sym>>>(x)
      self(<constant:<todo sym>>).Integer(x)
    end
  end

  <emptyTree>::<constant:NotACommand>.call()

  class <emptyTree>::<constant:CallNoSig><<constant:<todo sym>>> < (<emptyTree>::<constant:Opus>::<constant:Command>)
    def call<<constant:<todo sym>>>(x)
      self(<constant:<todo sym>>).Integer(x)
    end
  end

  <emptyTree>::<constant:CallNoSig>.call()
end
