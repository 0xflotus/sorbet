class <emptyTree><<constant:<root>>> < ()
  class <emptyTree>::<constant:Other><<constant:<todo sym>>> < (::<todo sym>)
    <emptyTree>
  end

  class <emptyTree>::<constant:SomeDataInterface><<constant:<todo sym>>> < (::<todo sym>)
    self(<constant:<todo sym>>).sig({}).returns(::T.nilable(<emptyTree>::<constant:String>))

    def foo<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), ::T.nilable(<emptyTree>::<constant:String>))
    end

    self(<constant:<todo sym>>).sig({:"arg0" => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:String>)

    def foo=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:String>)
    end

    self(<constant:<todo sym>>).sig().returns(::T.nilable(<emptyTree>::<constant:Other>))

    def foo_<<constant:<todo sym>>>()
      ::T.unsafe(nil)
    end
  end

  def test<<constant:<todo sym>>>()
    begin
      di = <emptyTree>::<constant:SomeDataInterface>.new()
      <emptyTree>::<constant:T>.assert_type!(di.foo(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
      <emptyTree>::<constant:T>.assert_type!(di.foo(), <emptyTree>::<constant:String>)
      <emptyTree>::<constant:T>.assert_type!(di.foo_(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:Other>))
      <emptyTree>::<constant:T>.assert_type!(di.foo_(), <emptyTree>::<constant:Other>)
    end
  end
end
