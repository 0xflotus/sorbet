class <emptyTree><<constant:<root>>> < ()
  begin
    class <emptyTree>::<constant:Other><<constant:<todo sym>>> < (::<constant:<todo sym>>)
      <emptyTree>
    end
    class <emptyTree>::<constant:SomeDataInterface><<constant:<todo sym>>> < (::<constant:<todo sym>>)
      self(<constant:<todo sym>>).sig({}).returns(::<constant:T>.nilable(<emptyTree>::<constant:String>))

      def foo<<constant:<todo sym>>>()
        ::<constant:T>.cast(nil, ::<constant:T>.nilable(<emptyTree>::<constant:String>))
      end

      self(<constant:<todo sym>>).sig({:"arg0" => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:String>)

      def foo=<<constant:<todo sym>>>(arg0)
        ::<constant:T>.cast(nil, <emptyTree>::<constant:String>)
      end

      self(<constant:<todo sym>>).sig({:"opts" => ::<constant:T>.untyped()}).returns(::<constant:T>.nilable(<emptyTree>::<constant:Other>))

      def foo_<<constant:<todo sym>>>(*opts:)
        ::<constant:T>.unsafe(nil)
      end
    end
    def test<<constant:<todo sym>>>()
      begin
        di = <emptyTree>::<constant:SomeDataInterface>.new()
        <emptyTree>::<constant:T>.assert_type!(di.foo(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
        <emptyTree>::<constant:T>.assert_type!(di.foo(), <emptyTree>::<constant:String>)
        <emptyTree>::<constant:T>.assert_type!(di.foo_(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:Other>))
        <emptyTree>::<constant:T>.assert_type!(di.foo_(), <emptyTree>::<constant:Other>)
      end
    end
  end
end
