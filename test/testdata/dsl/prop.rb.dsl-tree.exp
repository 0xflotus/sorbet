class <emptyTree><<constant:<root>>> < ()
  class <emptyTree>::<constant:NotAODM><<constant:<todo sym>>> < (::<todo sym>)
    def self.prop<<constant:<todo sym>>>(*args)
      <emptyTree>
    end

    self(<constant:<todo sym>>).prop()

    self(<constant:<todo sym>>).prop(:"foo", :"not_a_string")

    self(<constant:<todo sym>>).prop("not_a_symbol", <emptyTree>::<constant:String>)

    self(<constant:<todo sym>>).prop(:"foo", <emptyTree>::<constant:String>, "not_a_hash")

    self(<constant:<todo sym>>).prop("too", <emptyTree>::<constant:String>, {}, "many")

    self(<constant:<todo sym>>).optional(:"company_name", <emptyTree>::<constant:String>, :"nonempty_string")

    self(<constant:<todo sym>>).optional(:"day", <emptyTree>::<constant:IntegerParam>.new({:"min" => 1, :"max" => 31}))

    self(<constant:<todo sym>>).optional(:"name", <emptyTree>::<constant:StringParam>.alphanumeric())

    self(<constant:<todo sym>>).optional(:"how_many", <emptyTree>::<constant:Opus>::<constant:Param>::<constant:CaseParam>.new(self(<constant:<todo sym>>).how_many_cases(), <emptyTree>::<constant:Opus>::<constant:Param>::<constant:ParamSpecsParam>.new(<emptyTree>::<constant:Default>)))

    self(<constant:<todo sym>>).optional(:"optional_param", <emptyTree>::<constant:IntegerParam>.new())
  end

  class <emptyTree>::<constant:SomeODM><<constant:<todo sym>>> < (::<todo sym>)
    self(<constant:<todo sym>>).extend(<emptyTree>::<constant:T>::<constant:Sig>)

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(::T.nilable(<emptyTree>::<constant:String>))
    end

    def foo<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), ::T.nilable(<emptyTree>::<constant:String>))
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:String>)
    end

    def foo=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:String>)
    end

    self(<constant:<todo sym>>).sig() do ||
      self(<constant:<todo sym>>).returns(<emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
    end

    def foo2<<constant:<todo sym>>>()
      <emptyTree>::<constant:T>.cast(<emptyTree>::<constant:T>.unsafe(nil), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
    end

    self(<constant:<todo sym>>).sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:String>)
    end

    def foo2=<<constant:<todo sym>>>(arg0)
      <emptyTree>::<constant:T>.cast(nil, <emptyTree>::<constant:String>)
    end
  end

  class <emptyTree>::<constant:ForeignClass><<constant:<todo sym>>> < (::<todo sym>)
    <emptyTree>
  end

  class <emptyTree>::<constant:AdvancedODM><<constant:<todo sym>>> < (::<todo sym>)
    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(::T.nilable(<emptyTree>::<constant:String>))
    end

    def default_without_optional_false<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), ::T.nilable(<emptyTree>::<constant:String>))
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:String>)
    end

    def default_without_optional_false=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:String>)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(<emptyTree>::<constant:String>)
    end

    def optional_false<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:String>)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:String>)
    end

    def optional_false=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:String>)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(::T.nilable(<emptyTree>::<constant:String>))
    end

    def nodefault<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), ::T.nilable(<emptyTree>::<constant:String>))
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:String>)
    end

    def nodefault=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:String>)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(<emptyTree>::<constant:String>)
    end

    def type<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:String>)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:String>)
    end

    def type=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:String>)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(::T.nilable(::Object))
    end

    def object<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), ::T.nilable(::Object))
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => ::Object}).returns(::Object)
    end

    def object=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), ::Object)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(<emptyTree>::<constant:Array>)
    end

    def array<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:Array>)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => <emptyTree>::<constant:Array>}).returns(<emptyTree>::<constant:Array>)
    end

    def array=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:Array>)
    end

    class <emptyTree>::<constant:Mutator><<constant:<todo sym>>> < ()
      ::Sorbet.sig() do ||
        self(<constant:<todo sym>>).params({:"arg0" => <emptyTree>::<constant:Array>}).returns(<emptyTree>::<constant:Array>)
      end

      def array=<<constant:<todo sym>>>(arg0)
        ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:Array>)
      end

      ::Sorbet.sig() do ||
        self(<constant:<todo sym>>).returns(::<root>::<constant:Chalk>::<constant:ODM>::<constant:Mutator>::<constant:Private>::<constant:ArrayMutator>.[](::T.untyped()))
      end

      def array<<constant:<todo sym>>>()
        ::T.cast(::T.unsafe(nil), ::<root>::<constant:Chalk>::<constant:ODM>::<constant:Mutator>::<constant:Private>::<constant:ArrayMutator>.[](::T.untyped()))
      end
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(::T::Array.[](<emptyTree>::<constant:String>))
    end

    def array_of<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), ::T::Array.[](<emptyTree>::<constant:String>))
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => ::T::Array.[](<emptyTree>::<constant:String>)}).returns(::T::Array.[](<emptyTree>::<constant:String>))
    end

    def array_of=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), ::T::Array.[](<emptyTree>::<constant:String>))
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(<emptyTree>::<constant:Array>)
    end

    def array_of_explicit<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:Array>)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => <emptyTree>::<constant:Array>}).returns(<emptyTree>::<constant:Array>)
    end

    def array_of_explicit=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:Array>)
    end

    class <emptyTree>::<constant:Mutator><<constant:<todo sym>>> < ()
      ::Sorbet.sig() do ||
        self(<constant:<todo sym>>).params({:"arg0" => <emptyTree>::<constant:Array>}).returns(<emptyTree>::<constant:Array>)
      end

      def array_of_explicit=<<constant:<todo sym>>>(arg0)
        ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:Array>)
      end

      ::Sorbet.sig() do ||
        self(<constant:<todo sym>>).returns(::<root>::<constant:Chalk>::<constant:ODM>::<constant:Mutator>::<constant:Private>::<constant:ArrayMutator>.[](::T.untyped()))
      end

      def array_of_explicit<<constant:<todo sym>>>()
        ::T.cast(::T.unsafe(nil), ::<root>::<constant:Chalk>::<constant:ODM>::<constant:Mutator>::<constant:Private>::<constant:ArrayMutator>.[](::T.untyped()))
      end
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(<emptyTree>::<constant:T>::<constant:Array>.[](<emptyTree>::<constant:String>))
    end

    def t_array<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:T>::<constant:Array>.[](<emptyTree>::<constant:String>))
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => <emptyTree>::<constant:T>::<constant:Array>.[](<emptyTree>::<constant:String>)}).returns(<emptyTree>::<constant:T>::<constant:Array>.[](<emptyTree>::<constant:String>))
    end

    def t_array=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:T>::<constant:Array>.[](<emptyTree>::<constant:String>))
    end

    class <emptyTree>::<constant:Mutator><<constant:<todo sym>>> < ()
      ::Sorbet.sig() do ||
        self(<constant:<todo sym>>).params({:"arg0" => <emptyTree>::<constant:T>::<constant:Array>.[](<emptyTree>::<constant:String>)}).returns(<emptyTree>::<constant:T>::<constant:Array>.[](<emptyTree>::<constant:String>))
      end

      def t_array=<<constant:<todo sym>>>(arg0)
        ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:T>::<constant:Array>.[](<emptyTree>::<constant:String>))
      end

      ::Sorbet.sig() do ||
        self(<constant:<todo sym>>).returns(::<root>::<constant:Chalk>::<constant:ODM>::<constant:Mutator>::<constant:Private>::<constant:ArrayMutator>.[](<emptyTree>::<constant:String>))
      end

      def t_array<<constant:<todo sym>>>()
        ::T.cast(::T.unsafe(nil), ::<root>::<constant:Chalk>::<constant:ODM>::<constant:Mutator>::<constant:Private>::<constant:ArrayMutator>.[](<emptyTree>::<constant:String>))
      end
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(<emptyTree>::<constant:T>::<constant:Hash>.[](<emptyTree>::<constant:Symbol>, <emptyTree>::<constant:String>))
    end

    def hash_of<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:T>::<constant:Hash>.[](<emptyTree>::<constant:Symbol>, <emptyTree>::<constant:String>))
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => <emptyTree>::<constant:T>::<constant:Hash>.[](<emptyTree>::<constant:Symbol>, <emptyTree>::<constant:String>)}).returns(<emptyTree>::<constant:T>::<constant:Hash>.[](<emptyTree>::<constant:Symbol>, <emptyTree>::<constant:String>))
    end

    def hash_of=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:T>::<constant:Hash>.[](<emptyTree>::<constant:Symbol>, <emptyTree>::<constant:String>))
    end

    class <emptyTree>::<constant:Mutator><<constant:<todo sym>>> < ()
      ::Sorbet.sig() do ||
        self(<constant:<todo sym>>).params({:"arg0" => <emptyTree>::<constant:T>::<constant:Hash>.[](<emptyTree>::<constant:Symbol>, <emptyTree>::<constant:String>)}).returns(<emptyTree>::<constant:T>::<constant:Hash>.[](<emptyTree>::<constant:Symbol>, <emptyTree>::<constant:String>))
      end

      def hash_of=<<constant:<todo sym>>>(arg0)
        ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:T>::<constant:Hash>.[](<emptyTree>::<constant:Symbol>, <emptyTree>::<constant:String>))
      end

      ::Sorbet.sig() do ||
        self(<constant:<todo sym>>).returns(::<root>::<constant:Chalk>::<constant:ODM>::<constant:Mutator>::<constant:Private>::<constant:HashMutator>.[](<emptyTree>::<constant:Symbol>, <emptyTree>::<constant:String>))
      end

      def hash_of<<constant:<todo sym>>>()
        ::T.cast(::T.unsafe(nil), ::<root>::<constant:Chalk>::<constant:ODM>::<constant:Mutator>::<constant:Private>::<constant:HashMutator>.[](<emptyTree>::<constant:Symbol>, <emptyTree>::<constant:String>))
      end
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(::T.nilable(<emptyTree>::<constant:String>))
    end

    def optional_explicit<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), ::T.nilable(<emptyTree>::<constant:String>))
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => ::T.nilable(<emptyTree>::<constant:String>)}).returns(::T.nilable(<emptyTree>::<constant:String>))
    end

    def optional_explicit=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), ::T.nilable(<emptyTree>::<constant:String>))
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(::T.nilable(<emptyTree>::<constant:String>))
    end

    def optional_existing<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), ::T.nilable(<emptyTree>::<constant:String>))
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:String>)
    end

    def optional_existing=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:String>)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(<emptyTree>::<constant:String>)
    end

    def optional<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:String>)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => ::T.nilable(<emptyTree>::<constant:String>)}).returns(::T.nilable(<emptyTree>::<constant:String>))
    end

    def optional=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), ::T.nilable(<emptyTree>::<constant:String>))
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(<emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
    end

    def optional_nilable<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => ::T.nilable(<emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))}).returns(::T.nilable(<emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>)))
    end

    def optional_nilable=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), ::T.nilable(<emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>)))
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(<emptyTree>::<constant:String>)
    end

    def const_explicit<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:String>)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(<emptyTree>::<constant:String>)
    end

    def const<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:String>)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(::T.nilable(<emptyTree>::<constant:Array>))
    end

    def no_class_arg<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), ::T.nilable(<emptyTree>::<constant:Array>))
    end

    class <emptyTree>::<constant:Mutator><<constant:<todo sym>>> < ()
      ::Sorbet.sig() do ||
        self(<constant:<todo sym>>).params({:"arg0" => ::T.nilable(<emptyTree>::<constant:Array>)}).returns(::T.nilable(<emptyTree>::<constant:Array>))
      end

      def no_class_arg=<<constant:<todo sym>>>(arg0)
        ::T.cast(::T.unsafe(nil), ::T.nilable(<emptyTree>::<constant:Array>))
      end

      ::Sorbet.sig() do ||
        self(<constant:<todo sym>>).returns(::<root>::<constant:Chalk>::<constant:ODM>::<constant:Mutator>::<constant:Private>::<constant:ArrayMutator>.[](::T.untyped()))
      end

      def no_class_arg<<constant:<todo sym>>>()
        ::T.cast(::T.unsafe(nil), ::<root>::<constant:Chalk>::<constant:ODM>::<constant:Mutator>::<constant:Private>::<constant:ArrayMutator>.[](::T.untyped()))
      end
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(::T.untyped())
    end

    def enum_prop<<constant:<todo sym>>>()
      ::T.unsafe(nil)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(::T.nilable(<emptyTree>::<constant:String>))
    end

    def foreign<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), ::T.nilable(<emptyTree>::<constant:String>))
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:String>)
    end

    def foreign=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:String>)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"opts" => ::T.untyped()}).returns(::T.nilable(<emptyTree>::<constant:ForeignClass>))
    end

    def foreign_<<constant:<todo sym>>>(*opts:)
      ::T.unsafe(nil)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(::T.nilable(<emptyTree>::<constant:String>))
    end

    def foreign_lazy<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), ::T.nilable(<emptyTree>::<constant:String>))
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:String>)
    end

    def foreign_lazy=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:String>)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"opts" => ::T.untyped()}).returns(::T.nilable(<emptyTree>::<constant:ForeignClass>))
    end

    def foreign_lazy_<<constant:<todo sym>>>(*opts:)
      ::T.unsafe(nil)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(::T.nilable(<emptyTree>::<constant:String>))
    end

    def foreign_proc<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), ::T.nilable(<emptyTree>::<constant:String>))
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:String>)
    end

    def foreign_proc=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:String>)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"opts" => ::T.untyped()}).returns(::T.nilable(<emptyTree>::<constant:ForeignClass>))
    end

    def foreign_proc_<<constant:<todo sym>>>(*opts:)
      ::T.unsafe(nil)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(::T.nilable(<emptyTree>::<constant:String>))
    end

    def foreign_invalid<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), ::T.nilable(<emptyTree>::<constant:String>))
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:String>)
    end

    def foreign_invalid=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), <emptyTree>::<constant:String>)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"opts" => ::T.untyped()}).returns(::T.untyped())
    end

    def foreign_invalid_<<constant:<todo sym>>>(*opts:)
      ::T.unsafe(nil)
    end
  end

  class <emptyTree>::<constant:PropHelpers><<constant:<todo sym>>> < (::<todo sym>)
    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(::String)
    end

    def token<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), ::String)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => ::String}).returns(::String)
    end

    def token=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), ::String)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(::Float)
    end

    def created<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), ::Float)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => ::Float}).returns(::Float)
    end

    def created=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), ::Float)
    end
  end

  class <emptyTree>::<constant:PropHelpers2><<constant:<todo sym>>> < (::<todo sym>)
    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(::String)
    end

    def token<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), ::String)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => ::String}).returns(::String)
    end

    def token=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), ::String)
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(::Float)
    end

    def created<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), ::Float)
    end
  end

  class <emptyTree>::<constant:ShardingProp><<constant:<todo sym>>> < (::<todo sym>)
    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(::String)
    end

    def merchant<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), ::String)
    end
  end

  class <emptyTree>::<constant:EncryptedProp><<constant:<todo sym>>> < (::<todo sym>)
    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(::T.nilable(::String))
    end

    def foo<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), ::T.nilable(::String))
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(::T.nilable(<emptyTree>::<constant:Opus>::<constant:DB>::<constant:Model>::<constant:Mixins>::<constant:Encryptable>::<constant:EncryptedValue>))
    end

    def encrypted_foo<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), ::T.nilable(<emptyTree>::<constant:Opus>::<constant:DB>::<constant:Model>::<constant:Mixins>::<constant:Encryptable>::<constant:EncryptedValue>))
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => ::T.nilable(::String)}).returns(::T.nilable(::String))
    end

    def foo=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), ::T.nilable(::String))
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({:"arg0" => ::T.nilable(<emptyTree>::<constant:Opus>::<constant:DB>::<constant:Model>::<constant:Mixins>::<constant:Encryptable>::<constant:EncryptedValue>)}).returns(::T.nilable(<emptyTree>::<constant:Opus>::<constant:DB>::<constant:Model>::<constant:Mixins>::<constant:Encryptable>::<constant:EncryptedValue>))
    end

    def encrypted_foo=<<constant:<todo sym>>>(arg0)
      ::T.cast(::T.unsafe(nil), ::T.nilable(<emptyTree>::<constant:Opus>::<constant:DB>::<constant:Model>::<constant:Mixins>::<constant:Encryptable>::<constant:EncryptedValue>))
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(::T.nilable(::String))
    end

    def bar<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), ::T.nilable(::String))
    end

    ::Sorbet.sig() do ||
      self(<constant:<todo sym>>).params({}).returns(::T.nilable(<emptyTree>::<constant:Opus>::<constant:DB>::<constant:Model>::<constant:Mixins>::<constant:Encryptable>::<constant:EncryptedValue>))
    end

    def encrypted_bar<<constant:<todo sym>>>()
      ::T.cast(::T.unsafe(nil), ::T.nilable(<emptyTree>::<constant:Opus>::<constant:DB>::<constant:Model>::<constant:Mixins>::<constant:Encryptable>::<constant:EncryptedValue>))
    end
  end

  def main<<constant:<todo sym>>>()
    begin
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:SomeODM>.new().foo(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:SomeODM>.new().foo(), <emptyTree>::<constant:String>)
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:SomeODM>.new().foo=("b"), <emptyTree>::<constant:String>)
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:SomeODM>.new().foo2(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:SomeODM>.new().foo2(), <emptyTree>::<constant:String>)
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:SomeODM>.new().foo2=("b"), <emptyTree>::<constant:String>)
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().default_without_optional_false(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().optional_false(), <emptyTree>::<constant:String>)
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().nodefault(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().nodefault(), <emptyTree>::<constant:String>)
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().type(), <emptyTree>::<constant:String>)
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().object(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:Object>))
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().array(), <emptyTree>::<constant:Array>)
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().array_of(), <emptyTree>::<constant:T>::<constant:Array>.[](<emptyTree>::<constant:String>))
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().array_of_explicit(), <emptyTree>::<constant:T>::<constant:Array>.[](<emptyTree>::<constant:String>))
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().t_array(), <emptyTree>::<constant:T>::<constant:Array>.[](<emptyTree>::<constant:String>))
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().hash_of(), <emptyTree>::<constant:T>::<constant:Hash>.[](<emptyTree>::<constant:Symbol>, <emptyTree>::<constant:String>))
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().optional_explicit(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().optional_existing(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
      <emptyTree>::<constant:AdvancedODM>.new().optional_existing=("b")
      <emptyTree>::<constant:AdvancedODM>.new().optional_existing=(nil)
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().optional_false(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().optional(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
      <emptyTree>::<constant:AdvancedODM>.new().optional=("b")
      <emptyTree>::<constant:AdvancedODM>.new().optional=(nil)
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().optional_nilable(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().const_explicit(), <emptyTree>::<constant:String>)
      <emptyTree>::<constant:AdvancedODM>.new().const_explicit=("b")
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().const(), <emptyTree>::<constant:String>)
      <emptyTree>::<constant:AdvancedODM>.new().const=("b")
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().no_class_arg(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:T>::<constant:Array>.[](<emptyTree>::<constant:String>)))
      <emptyTree>::<constant:AdvancedODM>.new().no_class_arg=(["b"])
      <emptyTree>::<constant:AdvancedODM>.new().enum_prop=("hello")
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().foreign_(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:ForeignClass>))
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().foreign_(), <emptyTree>::<constant:ForeignClass>)
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().foreign_lazy_(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:ForeignClass>))
      <emptyTree>::<constant:AdvancedODM>.new().foreign_invalid_()
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:PropHelpers>.new().token(), <emptyTree>::<constant:String>)
      <emptyTree>::<constant:PropHelpers>.new().token=("tok_token")
      <emptyTree>::<constant:PropHelpers>.new().token=(nil)
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:PropHelpers>.new().created(), <emptyTree>::<constant:Float>)
      <emptyTree>::<constant:PropHelpers>.new().created=(0.000000)
      <emptyTree>::<constant:PropHelpers>.new().created=(nil)
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:PropHelpers2>.new().token(), <emptyTree>::<constant:String>)
      <emptyTree>::<constant:PropHelpers2>.new().token=("tok_token")
      <emptyTree>::<constant:PropHelpers2>.new().token=(nil)
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:PropHelpers2>.new().created(), <emptyTree>::<constant:Float>)
      <emptyTree>::<constant:PropHelpers2>.new().created=(0.000000)
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:ShardingProp>.new().merchant(), <emptyTree>::<constant:String>)
      <emptyTree>::<constant:ShardingProp>.new().merchant=("hi")
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:EncryptedProp>.new().foo(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
      <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:EncryptedProp>.new().encrypted_foo(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:Opus>::<constant:DB>::<constant:Model>::<constant:Mixins>::<constant:Encryptable>::<constant:EncryptedValue>))
      <emptyTree>::<constant:EncryptedProp>.new().foo=("hello")
      <emptyTree>::<constant:EncryptedProp>.new().foo=(nil)
      <emptyTree>::<constant:EncryptedProp>.new().bar=("hello")
    end
  end
end
