class <emptyTree><<constant:<root>>> < ()
  begin
    class <emptyTree>::<constant:NotAODM><<constant:<todo sym>>> < (::<constant:<todo sym>>)
      def self.prop<<constant:<todo sym>>>(*args)
        <emptyTree>
      end

      self(<constant:<todo sym>>).prop()

      self(<constant:<todo sym>>).prop(:foo, :not_a_string)

      self(<constant:<todo sym>>).prop("not_a_symbol", <emptyTree>::<constant:String>)

      self(<constant:<todo sym>>).prop(:foo, <emptyTree>::<constant:String>, "not_a_hash")

      self(<constant:<todo sym>>).prop("too", <emptyTree>::<constant:String>, {}, "many")

      self(<constant:<todo sym>>).optional(:company_name, <emptyTree>::<constant:String>, :nonempty_string)

      self(<constant:<todo sym>>).optional(:day, <emptyTree>::<constant:IntegerParam>.new({:min => 1, :max => 31}))

      self(<constant:<todo sym>>).optional(:how_many, <emptyTree>::<constant:Opus>::<constant:Param>::<constant:CaseParam>.new(self(<constant:<todo sym>>).how_many_cases(), <emptyTree>::<constant:Opus>::<constant:Param>::<constant:ParamSpecsParam>.new(<emptyTree>::<constant:Default>)))

      self(<constant:<todo sym>>).optional(:optional_param, <emptyTree>::<constant:IntegerParam>.new())
    end
    class <emptyTree>::<constant:SomeODM><<constant:<todo sym>>> < (::<constant:<todo sym>>)
      self(<constant:<todo sym>>).sig().returns(<emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))

      def foo2<<constant:<todo sym>>>()
        <emptyTree>::<constant:T>.cast(::<constant:nil>, <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
      end

      self(<constant:<todo sym>>).sig({:arg0 => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:NilClass>)

      def foo2=<<constant:<todo sym>>>(arg0)
        <emptyTree>
      end

      self(<constant:<todo sym>>).sig({}).returns(<emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))

      def foo<<constant:<todo sym>>>()
        <emptyTree>::<constant:T>.cast(<emptyTree>::<constant:nil>, <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
      end

      self(<constant:<todo sym>>).sig({:arg0 => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:NilClass>)

      def foo=<<constant:<todo sym>>>(arg0)
        <emptyTree>
      end
    end
    class <emptyTree>::<constant:AdvancedODM><<constant:<todo sym>>> < (::<constant:<todo sym>>)
      self(<constant:<todo sym>>).sig({}).returns(<emptyTree>::<constant:String>)

      def default<<constant:<todo sym>>>()
        <emptyTree>::<constant:T>.cast(<emptyTree>::<constant:nil>, <emptyTree>::<constant:String>)
      end

      self(<constant:<todo sym>>).sig({:arg0 => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:NilClass>)

      def default=<<constant:<todo sym>>>(arg0)
        <emptyTree>
      end

      self(<constant:<todo sym>>).sig({}).returns(<emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))

      def nodefault<<constant:<todo sym>>>()
        <emptyTree>::<constant:T>.cast(<emptyTree>::<constant:nil>, <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
      end

      self(<constant:<todo sym>>).sig({:arg0 => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:NilClass>)

      def nodefault=<<constant:<todo sym>>>(arg0)
        <emptyTree>
      end

      self(<constant:<todo sym>>).sig({}).returns(<emptyTree>::<constant:String>)

      def factory<<constant:<todo sym>>>()
        <emptyTree>::<constant:T>.cast(<emptyTree>::<constant:nil>, <emptyTree>::<constant:String>)
      end

      self(<constant:<todo sym>>).sig({:arg0 => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:NilClass>)

      def factory=<<constant:<todo sym>>>(arg0)
        <emptyTree>
      end

      self(<constant:<todo sym>>).sig({}).returns(<emptyTree>::<constant:String>)

      def type<<constant:<todo sym>>>()
        <emptyTree>::<constant:T>.cast(<emptyTree>::<constant:nil>, <emptyTree>::<constant:String>)
      end

      self(<constant:<todo sym>>).sig({:arg0 => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:NilClass>)

      def type=<<constant:<todo sym>>>(arg0)
        <emptyTree>
      end

      self(<constant:<todo sym>>).sig({}).returns(<emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:Object>))

      def object<<constant:<todo sym>>>()
        <emptyTree>::<constant:T>.cast(<emptyTree>::<constant:nil>, <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:Object>))
      end

      self(<constant:<todo sym>>).sig({:arg0 => <emptyTree>::<constant:Object>}).returns(<emptyTree>::<constant:NilClass>)

      def object=<<constant:<todo sym>>>(arg0)
        <emptyTree>
      end

      self(<constant:<todo sym>>).sig({}).returns(<emptyTree>::<constant:Array>)

      def array<<constant:<todo sym>>>()
        <emptyTree>::<constant:T>.cast(<emptyTree>::<constant:nil>, <emptyTree>::<constant:Array>)
      end

      self(<constant:<todo sym>>).sig({:arg0 => <emptyTree>::<constant:Array>}).returns(<emptyTree>::<constant:NilClass>)

      def array=<<constant:<todo sym>>>(arg0)
        <emptyTree>
      end

      self(<constant:<todo sym>>).sig({}).returns(<emptyTree>::<constant:Array>.[](<emptyTree>::<constant:String>))

      def array_of<<constant:<todo sym>>>()
        <emptyTree>::<constant:T>.cast(<emptyTree>::<constant:nil>, <emptyTree>::<constant:Array>.[](<emptyTree>::<constant:String>))
      end

      self(<constant:<todo sym>>).sig({:arg0 => <emptyTree>::<constant:Array>.[](<emptyTree>::<constant:String>)}).returns(<emptyTree>::<constant:NilClass>)

      def array_of=<<constant:<todo sym>>>(arg0)
        <emptyTree>
      end

      self(<constant:<todo sym>>).sig({}).returns(<emptyTree>::<constant:Array>)

      def array_of_explicit<<constant:<todo sym>>>()
        <emptyTree>::<constant:T>.cast(<emptyTree>::<constant:nil>, <emptyTree>::<constant:Array>)
      end

      self(<constant:<todo sym>>).sig({:arg0 => <emptyTree>::<constant:Array>}).returns(<emptyTree>::<constant:NilClass>)

      def array_of_explicit=<<constant:<todo sym>>>(arg0)
        <emptyTree>
      end

      self(<constant:<todo sym>>).sig({}).returns(<emptyTree>::<constant:T>::<constant:Array>.[](<emptyTree>::<constant:String>))

      def t_array<<constant:<todo sym>>>()
        <emptyTree>::<constant:T>.cast(<emptyTree>::<constant:nil>, <emptyTree>::<constant:T>::<constant:Array>.[](<emptyTree>::<constant:String>))
      end

      self(<constant:<todo sym>>).sig({:arg0 => <emptyTree>::<constant:T>::<constant:Array>.[](<emptyTree>::<constant:String>)}).returns(<emptyTree>::<constant:NilClass>)

      def t_array=<<constant:<todo sym>>>(arg0)
        <emptyTree>
      end

      self(<constant:<todo sym>>).sig({}).returns(<emptyTree>::<constant:T>::<constant:Hash>.[](<emptyTree>::<constant:Symbol>, <emptyTree>::<constant:String>))

      def hash_of<<constant:<todo sym>>>()
        <emptyTree>::<constant:T>.cast(<emptyTree>::<constant:nil>, <emptyTree>::<constant:T>::<constant:Hash>.[](<emptyTree>::<constant:Symbol>, <emptyTree>::<constant:String>))
      end

      self(<constant:<todo sym>>).sig({:arg0 => <emptyTree>::<constant:T>::<constant:Hash>.[](<emptyTree>::<constant:Symbol>, <emptyTree>::<constant:String>)}).returns(<emptyTree>::<constant:NilClass>)

      def hash_of=<<constant:<todo sym>>>(arg0)
        <emptyTree>
      end

      self(<constant:<todo sym>>).sig({}).returns(<emptyTree>::<constant:String>)

      def optional_explicit<<constant:<todo sym>>>()
        <emptyTree>::<constant:T>.cast(<emptyTree>::<constant:nil>, <emptyTree>::<constant:String>)
      end

      self(<constant:<todo sym>>).sig({:arg0 => <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>)}).returns(<emptyTree>::<constant:NilClass>)

      def optional_explicit=<<constant:<todo sym>>>(arg0)
        <emptyTree>
      end

      self(<constant:<todo sym>>).sig({}).returns(<emptyTree>::<constant:String>)

      def optional_existing<<constant:<todo sym>>>()
        <emptyTree>::<constant:T>.cast(<emptyTree>::<constant:nil>, <emptyTree>::<constant:String>)
      end

      self(<constant:<todo sym>>).sig({:arg0 => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:NilClass>)

      def optional_existing=<<constant:<todo sym>>>(arg0)
        <emptyTree>
      end

      self(<constant:<todo sym>>).sig({}).returns(<emptyTree>::<constant:String>)

      def optional_false<<constant:<todo sym>>>()
        <emptyTree>::<constant:T>.cast(<emptyTree>::<constant:nil>, <emptyTree>::<constant:String>)
      end

      self(<constant:<todo sym>>).sig({:arg0 => <emptyTree>::<constant:String>}).returns(<emptyTree>::<constant:NilClass>)

      def optional_false=<<constant:<todo sym>>>(arg0)
        <emptyTree>
      end

      self(<constant:<todo sym>>).sig({}).returns(<emptyTree>::<constant:String>)

      def optional<<constant:<todo sym>>>()
        <emptyTree>::<constant:T>.cast(<emptyTree>::<constant:nil>, <emptyTree>::<constant:String>)
      end

      self(<constant:<todo sym>>).sig({:arg0 => <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>)}).returns(<emptyTree>::<constant:NilClass>)

      def optional=<<constant:<todo sym>>>(arg0)
        <emptyTree>
      end

      self(<constant:<todo sym>>).sig({}).returns(<emptyTree>::<constant:String>)

      def const_explicit<<constant:<todo sym>>>()
        <emptyTree>::<constant:T>.cast(<emptyTree>::<constant:nil>, <emptyTree>::<constant:String>)
      end

      self(<constant:<todo sym>>).sig({}).returns(<emptyTree>::<constant:String>)

      def const<<constant:<todo sym>>>()
        <emptyTree>::<constant:T>.cast(<emptyTree>::<constant:nil>, <emptyTree>::<constant:String>)
      end

      self(<constant:<todo sym>>).sig({}).returns(<emptyTree>::<constant:Array>)

      def no_class_arg<<constant:<todo sym>>>()
        <emptyTree>::<constant:T>.cast(<emptyTree>::<constant:nil>, <emptyTree>::<constant:Array>)
      end
    end
    def main<<constant:<todo sym>>>()
      begin
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:SomeODM>.new().foo(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:SomeODM>.new().foo(), <emptyTree>::<constant:String>)
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:SomeODM>.new().foo=("b"), <emptyTree>::<constant:NilClass>)
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:SomeODM>.new().foo2(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:SomeODM>.new().foo2(), <emptyTree>::<constant:String>)
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:SomeODM>.new().foo2=("b"), <emptyTree>::<constant:NilClass>)
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().default(), <emptyTree>::<constant:String>)
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().nodefault(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().nodefault(), <emptyTree>::<constant:String>)
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().factory(), <emptyTree>::<constant:String>)
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().type(), <emptyTree>::<constant:String>)
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().object(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:Object>))
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().array(), <emptyTree>::<constant:Array>)
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().array_of(), <emptyTree>::<constant:T>::<constant:Array>.[](<emptyTree>::<constant:String>))
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().array_of_explicit(), <emptyTree>::<constant:T>::<constant:Array>.[](<emptyTree>::<constant:String>))
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().t_array(), <emptyTree>::<constant:T>::<constant:Array>.[](<emptyTree>::<constant:String>))
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().hash_of(), <emptyTree>::<constant:T>::<constant:Hash>.[](<emptyTree>::<constant:Symbol>, <emptyTree>::<constant:String>))
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().optional_explicit(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().optional_existing(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
        <emptyTree>::<constant:AdvancedODM>.new().optional_existing=("b")
        <emptyTree>::<constant:AdvancedODM>.new().optional_existing=(::<constant:nil>)
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().optional_false(), <emptyTree>::<constant:String>)
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().optional(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:String>))
        <emptyTree>::<constant:AdvancedODM>.new().optional=("b")
        <emptyTree>::<constant:AdvancedODM>.new().optional=(::<constant:nil>)
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().const_explicit(), <emptyTree>::<constant:String>)
        <emptyTree>::<constant:AdvancedODM>.new().const_explicit=("b")
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().const(), <emptyTree>::<constant:String>)
        <emptyTree>::<constant:AdvancedODM>.new().const=("b")
        <emptyTree>::<constant:T>.assert_type!(<emptyTree>::<constant:AdvancedODM>.new().no_class_arg(), <emptyTree>::<constant:T>.nilable(<emptyTree>::<constant:T>::<constant:Array>.[](<emptyTree>::<constant:String>)))
        <emptyTree>::<constant:AdvancedODM>.new().no_class_arg=(["b"])
      end
    end
  end
end
