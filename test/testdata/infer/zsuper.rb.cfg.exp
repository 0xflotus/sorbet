digraph "zsuper.rb"{
subgraph "cluster_#<static-init>" {
    label = "#<static-init>";
    color = blue;
    "bb#<static-init>_0" [shape = invhouse];
    "bb#<static-init>_1" [shape = parallelogram];

    "bb#<static-init>_0" [label = "block[id=0]()
<finalReturn> = return <returnMethodTemp>$2 : <impossible>
<unconditional>"];

    "bb#<static-init>_0" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_1" [label = "block[id=1]()
<unconditional>"];

    "bb#<static-init>_1" -> "bb#<static-init>_1" [style="bold"];
}

subgraph "cluster_::Foo#baz" {
    label = "::Foo#baz";
    color = blue;
    "bb::Foo#baz_0" [shape = invhouse];
    "bb::Foo#baz_1" [shape = parallelogram];

    "bb::Foo#baz_0" [label = "block[id=0]()
<selfMethodTemp>$3 = self : Foo
a = load_arg(<selfMethodTemp>$3#baz, 0) : untyped
<statTemp>$4 = self : Foo
<returnMethodTemp>$2 = <statTemp>$4.puts(a) : NilClass
<finalReturn> = return <returnMethodTemp>$2 : <impossible>
<unconditional>"];

    "bb::Foo#baz_0" -> "bb::Foo#baz_1" [style="bold"];
    "bb::Foo#baz_1" [label = "block[id=1]()
<unconditional>"];

    "bb::Foo#baz_1" -> "bb::Foo#baz_1" [style="bold"];
}

subgraph "cluster_::Bar#baz" {
    label = "::Bar#baz";
    color = blue;
    "bb::Bar#baz_0" [shape = invhouse];
    "bb::Bar#baz_1" [shape = parallelogram];

    "bb::Bar#baz_0" [label = "block[id=0]()
<selfMethodTemp>$4 = self : Bar
b = load_arg(<selfMethodTemp>$4#baz, 0) : untyped
<statTemp>$5 = self : Bar
<returnMethodTemp>$3 = <statTemp>$5.super(b) : untyped
<unconditional>"];

    "bb::Bar#baz_0" -> "bb::Bar#baz_2" [style="bold"];
    "bb::Bar#baz_1" [label = "block[id=1]()
<unconditional>"];

    "bb::Bar#baz_1" -> "bb::Bar#baz_1" [style="bold"];
    "bb::Bar#baz_2" [label = "block[id=2](<returnMethodTemp>$3)
outerLoops: 1
<block-call>"];

    "bb::Bar#baz_2" -> "bb::Bar#baz_4" [style="bold"];
    "bb::Bar#baz_2" -> "bb::Bar#baz_3" [style="tapered"];

    "bb::Bar#baz_3" [label = "block[id=3](<returnMethodTemp>$3)
<finalReturn> = return <returnMethodTemp>$3 : <impossible>
<unconditional>"];

    "bb::Bar#baz_3" -> "bb::Bar#baz_1" [style="bold"];
    "bb::Bar#baz_4" [label = "block[id=4](<returnMethodTemp>$3)
outerLoops: 1
a$2 = load_yield_param(::Bar#baz#<block>, 0) : untyped
<statTemp>$8 = self : Bar
<blockReturnTemp>$7 = <statTemp>$8.puts(a$2) : NilClass
<blockReturnTemp>$10 = blockreturn<::Bar#baz#<block>> <blockReturnTemp>$7 : <impossible>
<unconditional>"];

    "bb::Bar#baz_4" -> "bb::Bar#baz_2" [style="bold"];
}

}

