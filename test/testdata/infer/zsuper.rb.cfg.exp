digraph "zsuper.rb" {
subgraph "cluster_#<static-init>" {
    label = "#<static-init>";
    color = blue;
    "bb#<static-init>_0" [shape = invhouse];
    "bb#<static-init>_1" [shape = parallelogram];

    "bb#<static-init>_0" [
        label = "block[id=0]()\l<constant:RubyTyper>$6 = alias <constant:RubyTyper> : <Class:RubyTyper>\l<constant:Foo>$8 = alias <constant:Foo> : <Class:Foo>\l<statTemp>$4 = <constant:RubyTyper>$6.keep_for_ide(<constant:Foo>$8) : T.untyped\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb#<static-init>_0" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb#<static-init>_1" -> "bb#<static-init>_1" [style="bold"];
}

subgraph "cluster_::Foo#baz" {
    label = "::Foo#baz";
    color = blue;
    "bb::Foo#baz_0" [shape = invhouse];
    "bb::Foo#baz_1" [shape = parallelogram];

    "bb::Foo#baz_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3 = self : Foo\la = load_arg(<selfMethodTemp>$3#baz, 0) : T.untyped\l<statTemp>$4 = self : Foo\l<returnMethodTemp>$2 = <statTemp>$4.puts(a) : NilClass\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::Foo#baz_0" -> "bb::Foo#baz_1" [style="bold"];
    "bb::Foo#baz_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Foo#baz_1" -> "bb::Foo#baz_1" [style="bold"];
}

subgraph "cluster_::Bar#baz" {
    label = "::Bar#baz";
    color = blue;
    "bb::Bar#baz_0" [shape = invhouse];
    "bb::Bar#baz_1" [shape = parallelogram];

    "bb::Bar#baz_0" [
        label = "block[id=0]()\l<selfMethodTemp>$4 = self : Bar\lb = load_arg(<selfMethodTemp>$4#baz, 0) : T.untyped\l<statTemp>$5 = self : Bar\l<block-pre-call-temp>$7 = <statTemp>$5.super(b) : T.untyped\l<unconditional>\l"
    ];

    "bb::Bar#baz_0" -> "bb::Bar#baz_2" [style="bold"];
    "bb::Bar#baz_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Bar#baz_1" -> "bb::Bar#baz_1" [style="bold"];
    "bb::Bar#baz_2" [
        label = "block[id=2]()\louterLoops: 1\l<block-call>\l"
    ];

    "bb::Bar#baz_2" -> "bb::Bar#baz_4" [style="bold"];
    "bb::Bar#baz_2" -> "bb::Bar#baz_3" [style="tapered"];

    "bb::Bar#baz_3" [
        label = "block[id=3]()\l<returnMethodTemp>$3 = Solve<::Bar#baz#<block>> : T.untyped\l<finalReturn> = return <returnMethodTemp>$3 : <impossible>\l<unconditional>\l"
    ];

    "bb::Bar#baz_3" -> "bb::Bar#baz_1" [style="bold"];
    "bb::Bar#baz_4" [
        label = "block[id=4]()\louterLoops: 1\l<blk>$8 = load_yield_params(::Bar#baz#<block>, Bar#baz#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$9 = 0 : Integer(0)\la$2 = <blk>$8.[](<blk>$9) : T.untyped\l<statTemp>$11 = self : Bar\l<blockReturnTemp>$10 = <statTemp>$11.puts(a$2) : NilClass\l<blockReturnTemp>$13 = blockreturn<::Bar#baz#<block>> <blockReturnTemp>$10 : <impossible>\l<unconditional>\l"
    ];

    "bb::Bar#baz_4" -> "bb::Bar#baz_2" [style="bold"];
}

}

