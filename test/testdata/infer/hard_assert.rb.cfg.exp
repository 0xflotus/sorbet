digraph "hard_assert.rb" {
subgraph "cluster_::Main#basic" {
    label = "::Main#basic";
    color = blue;
    "bb::Main#basic_0" [shape = invhouse];
    "bb::Main#basic_1" [shape = parallelogram];

    "bb::Main#basic_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3: Main = self\la: T.any(Integer, String) = load_arg(<selfMethodTemp>$3, Main#basic#a)\l<statTemp>$5: Main = self\l<statTemp>$8: <Class:String> = alias <constant:String>\l<statTemp>$6: T.any(TrueClass, FalseClass) = a: T.any(Integer, String).is_a?(<statTemp>$8: <Class:String>)\l<statTemp>$4: NilClass = <statTemp>$5: Main.hard_assert(<statTemp>$6: T.any(TrueClass, FalseClass))\l<statTemp>$11: <Class:RubyTyper> = alias <constant:RubyTyper>\l<statTemp>$12: <Class:String> = alias <constant:String>\l<statTemp>$10: RubyTyper::Void = <statTemp>$11: <Class:RubyTyper>.keep_for_typechecking(<statTemp>$12: <Class:String>)\l<castTemp>$13: String = a\l<statTemp>$9: String = cast(<castTemp>$13: String, String);\l<returnMethodTemp>$2: NilClass = nil\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::Main#basic_0" -> "bb::Main#basic_1" [style="bold"];
    "bb::Main#basic_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Main#basic_1" -> "bb::Main#basic_1" [style="bold"];
}

subgraph "cluster_::Main#not" {
    label = "::Main#not";
    color = blue;
    "bb::Main#not_0" [shape = invhouse];
    "bb::Main#not_1" [shape = parallelogram];

    "bb::Main#not_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3: Main = self\la: T.nilable(String) = load_arg(<selfMethodTemp>$3, Main#not#a)\l<statTemp>$5: Main = self\l<statTemp>$7: T.any(TrueClass, FalseClass) = a: T.nilable(String).nil?()\l<statTemp>$6: T.any(TrueClass, FalseClass) = <statTemp>$7: T.any(TrueClass, FalseClass).!()\l<statTemp>$4: NilClass = <statTemp>$5: Main.hard_assert(<statTemp>$6: T.any(TrueClass, FalseClass))\l<statTemp>$11: <Class:RubyTyper> = alias <constant:RubyTyper>\l<statTemp>$12: <Class:String> = alias <constant:String>\l<statTemp>$10: RubyTyper::Void = <statTemp>$11: <Class:RubyTyper>.keep_for_typechecking(<statTemp>$12: <Class:String>)\l<castTemp>$13: String = a\l<statTemp>$9: String = cast(<castTemp>$13: String, String);\l<returnMethodTemp>$2: NilClass = nil\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::Main#not_0" -> "bb::Main#not_1" [style="bold"];
    "bb::Main#not_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Main#not_1" -> "bb::Main#not_1" [style="bold"];
}

subgraph "cluster_::Main#with_and" {
    label = "::Main#with_and";
    color = blue;
    "bb::Main#with_and_0" [shape = invhouse];
    "bb::Main#with_and_1" [shape = parallelogram];

    "bb::Main#with_and_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3: Main = self\la: T.nilable(String) = load_arg(<selfMethodTemp>$3, Main#with_and#a)\l<statTemp>$5: Main = self\l&&$2: T.any(TrueClass, FalseClass) = a: T.nilable(String).nil?()\l&&$2: T.any(TrueClass, FalseClass)\l"
    ];

    "bb::Main#with_and_0" -> "bb::Main#with_and_2" [style="bold"];
    "bb::Main#with_and_0" -> "bb::Main#with_and_3" [style="tapered"];

    "bb::Main#with_and_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Main#with_and_1" -> "bb::Main#with_and_1" [style="bold"];
    "bb::Main#with_and_2" [
        label = "block[id=2](<statTemp>$5: Main, a: NilClass)\l<statTemp>$10: Integer(1) = 1\l<statTemp>$11: Integer(1) = 1\l<statTemp>$6: T.any(TrueClass, FalseClass) = <statTemp>$10: Integer(1).==(<statTemp>$11: Integer(1))\l<unconditional>\l"
    ];

    "bb::Main#with_and_2" -> "bb::Main#with_and_4" [style="bold"];
    "bb::Main#with_and_3" [
        label = "block[id=3](<statTemp>$5: Main, a: String, &&$2: FalseClass)\l<statTemp>$6: FalseClass = &&$2\l<unconditional>\l"
    ];

    "bb::Main#with_and_3" -> "bb::Main#with_and_4" [style="bold"];
    "bb::Main#with_and_4" [
        label = "block[id=4](<statTemp>$5: Main, <statTemp>$6: T.any(TrueClass, FalseClass), a: T.nilable(String))\l<statTemp>$4: NilClass = <statTemp>$5: Main.hard_assert(<statTemp>$6: T.any(TrueClass, FalseClass))\l<statTemp>$14: <Class:RubyTyper> = alias <constant:RubyTyper>\l<statTemp>$15: <Class:NilClass> = alias <constant:NilClass>\l<statTemp>$13: RubyTyper::Void = <statTemp>$14: <Class:RubyTyper>.keep_for_typechecking(<statTemp>$15: <Class:NilClass>)\l<castTemp>$16: NilClass = a\l<statTemp>$12: NilClass = cast(<castTemp>$16: NilClass, NilClass);\l<returnMethodTemp>$2: NilClass = nil\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::Main#with_and_4" -> "bb::Main#with_and_1" [style="bold"];
}

subgraph "cluster_::Main#with_storytime" {
    label = "::Main#with_storytime";
    color = blue;
    "bb::Main#with_storytime_0" [shape = invhouse];
    "bb::Main#with_storytime_1" [shape = parallelogram];

    "bb::Main#with_storytime_0" [
        label = "block[id=0]()\l<statTemp>$4: Main = self\l<statTemp>$5: FalseClass = false\l<hashTemp>$7: Symbol(:\"storytime\") = :\"storytime\"\l<hashTemp>$8: Integer(42) = 42\l<magic>$9: <Magic> = alias <constant:<Magic>>\l<statTemp>$6: {storytime: Integer(42)} = <magic>$9: <Magic>.<build-hash>(<hashTemp>$7: Symbol(:\"storytime\"), <hashTemp>$8: Integer(42))\l<returnMethodTemp>$2: NilClass = <statTemp>$4: Main.hard_assert(<statTemp>$5: FalseClass, <statTemp>$6: {storytime: Integer(42)})\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::Main#with_storytime_0" -> "bb::Main#with_storytime_1" [style="bold"];
    "bb::Main#with_storytime_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Main#with_storytime_1" -> "bb::Main#with_storytime_1" [style="bold"];
}

subgraph "cluster_::Main#<static-init>" {
    label = "::Main#<static-init>";
    color = blue;
    "bb::Main#<static-init>_0" [shape = invhouse];
    "bb::Main#<static-init>_1" [shape = parallelogram];

    "bb::Main#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$6: <Class:Main> = self\l<hashTemp>$8: Symbol(:\"a\") = :\"a\"\l<statTemp>$10: <Class:T> = alias <constant:T>\l<statTemp>$11: <Class:Integer> = alias <constant:Integer>\l<statTemp>$12: <Class:String> = alias <constant:String>\l<hashTemp>$9: <Type: T.any(Integer, String)> = <statTemp>$10: <Class:T>.any(<statTemp>$11: <Class:Integer>, <statTemp>$12: <Class:String>)\l<magic>$13: <Magic> = alias <constant:<Magic>>\l<statTemp>$7: {a: <Type: T.any(Integer, String)>} = <magic>$13: <Magic>.<build-hash>(<hashTemp>$8: Symbol(:\"a\"), <hashTemp>$9: <Type: T.any(Integer, String)>)\l<statTemp>$5: Sorbet::Private::Builder = <statTemp>$6: <Class:Main>.sig(<statTemp>$7: {a: <Type: T.any(Integer, String)>})\l<statTemp>$14: <Class:NilClass> = alias <constant:NilClass>\l<statTemp>$4: Sorbet::Private::Builder = <statTemp>$5: Sorbet::Private::Builder.returns(<statTemp>$14: <Class:NilClass>)\l<statTemp>$17: <Class:Main> = self\l<hashTemp>$19: Symbol(:\"a\") = :\"a\"\l<statTemp>$21: <Class:T> = alias <constant:T>\l<statTemp>$22: <Class:String> = alias <constant:String>\l<statTemp>$23: <Class:NilClass> = alias <constant:NilClass>\l<hashTemp>$20: <Type: T.nilable(String)> = <statTemp>$21: <Class:T>.any(<statTemp>$22: <Class:String>, <statTemp>$23: <Class:NilClass>)\l<magic>$24: <Magic> = alias <constant:<Magic>>\l<statTemp>$18: {a: <Type: T.nilable(String)>} = <magic>$24: <Magic>.<build-hash>(<hashTemp>$19: Symbol(:\"a\"), <hashTemp>$20: <Type: T.nilable(String)>)\l<statTemp>$16: Sorbet::Private::Builder = <statTemp>$17: <Class:Main>.sig(<statTemp>$18: {a: <Type: T.nilable(String)>})\l<statTemp>$25: <Class:NilClass> = alias <constant:NilClass>\l<statTemp>$15: Sorbet::Private::Builder = <statTemp>$16: Sorbet::Private::Builder.returns(<statTemp>$25: <Class:NilClass>)\l<statTemp>$28: <Class:Main> = self\l<hashTemp>$30: Symbol(:\"a\") = :\"a\"\l<statTemp>$32: <Class:T> = alias <constant:T>\l<statTemp>$33: <Class:String> = alias <constant:String>\l<statTemp>$34: <Class:NilClass> = alias <constant:NilClass>\l<hashTemp>$31: <Type: T.nilable(String)> = <statTemp>$32: <Class:T>.any(<statTemp>$33: <Class:String>, <statTemp>$34: <Class:NilClass>)\l<magic>$35: <Magic> = alias <constant:<Magic>>\l<statTemp>$29: {a: <Type: T.nilable(String)>} = <magic>$35: <Magic>.<build-hash>(<hashTemp>$30: Symbol(:\"a\"), <hashTemp>$31: <Type: T.nilable(String)>)\l<statTemp>$27: Sorbet::Private::Builder = <statTemp>$28: <Class:Main>.sig(<statTemp>$29: {a: <Type: T.nilable(String)>})\l<statTemp>$36: <Class:NilClass> = alias <constant:NilClass>\l<statTemp>$26: Sorbet::Private::Builder = <statTemp>$27: Sorbet::Private::Builder.returns(<statTemp>$36: <Class:NilClass>)\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::Main#<static-init>_0" -> "bb::Main#<static-init>_1" [style="bold"];
    "bb::Main#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Main#<static-init>_1" -> "bb::Main#<static-init>_1" [style="bold"];
}

}

