digraph "transitive.rb" {
subgraph "cluster_#<static-init>" {
    label = "#<static-init>";
    color = blue;
    "bb#<static-init>_0" [shape = invhouse];
    "bb#<static-init>_1" [shape = parallelogram];

    "bb#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$6: <Class:RubyTyper> = alias <constant:RubyTyper>\l<statTemp>$7: <Class:A> = alias <constant:A>\l<statTemp>$5: RubyTyper::Void = <statTemp>$6: <Class:RubyTyper>.keep_for_ide(<statTemp>$7: <Class:A>)\l<statTemp>$10: <Class:RubyTyper> = alias <constant:RubyTyper>\l<statTemp>$11: <Class:Bar> = alias <constant:Bar>\l<statTemp>$9: RubyTyper::Void = <statTemp>$10: <Class:RubyTyper>.keep_for_ide(<statTemp>$11: <Class:Bar>)\l<statTemp>$13: <Class:RubyTyper> = alias <constant:RubyTyper>\l<statTemp>$14: <Class:A> = alias <constant:A>\l<statTemp>$12: RubyTyper::Void = <statTemp>$13: <Class:RubyTyper>.keep_for_ide(<statTemp>$14: <Class:A>)\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb#<static-init>_0" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb#<static-init>_1" -> "bb#<static-init>_1" [style="bold"];
}

subgraph "cluster_::A#foo" {
    label = "::A#foo";
    color = blue;
    "bb::A#foo_0" [shape = invhouse];
    "bb::A#foo_1" [shape = parallelogram];

    "bb::A#foo_0" [
        label = "block[id=0]()\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::A#foo_0" -> "bb::A#foo_1" [style="bold"];
    "bb::A#foo_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::A#foo_1" -> "bb::A#foo_1" [style="bold"];
}

subgraph "cluster_::A#<static-init>" {
    label = "::A#<static-init>";
    color = blue;
    "bb::A#<static-init>_0" [shape = invhouse];
    "bb::A#<static-init>_1" [shape = parallelogram];

    "bb::A#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$5: <Class:A> = self\l<statTemp>$4: Sorbet::Private::Builder = <statTemp>$5: <Class:A>.sig()\l<statTemp>$6: <Class:Integer> = alias <constant:Integer>\l<returnMethodTemp>$2: Sorbet::Private::Builder = <statTemp>$4: Sorbet::Private::Builder.returns(<statTemp>$6: <Class:Integer>)\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::A#<static-init>_0" -> "bb::A#<static-init>_1" [style="bold"];
    "bb::A#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::A#<static-init>_1" -> "bb::A#<static-init>_1" [style="bold"];
}

subgraph "cluster_::Bar#baz" {
    label = "::Bar#baz";
    color = blue;
    "bb::Bar#baz_0" [shape = invhouse];
    "bb::Bar#baz_1" [shape = parallelogram];

    "bb::Bar#baz_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3: Bar = self\l<statTemp>$4: Bar = self\l<returnMethodTemp>$2: Integer = <statTemp>$4: Bar.foo()\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: Integer\l<unconditional>\l"
    ];

    "bb::Bar#baz_0" -> "bb::Bar#baz_1" [style="bold"];
    "bb::Bar#baz_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Bar#baz_1" -> "bb::Bar#baz_1" [style="bold"];
}

subgraph "cluster_::Bar#<static-init>" {
    label = "::Bar#<static-init>";
    color = blue;
    "bb::Bar#<static-init>_0" [shape = invhouse];
    "bb::Bar#<static-init>_1" [shape = parallelogram];

    "bb::Bar#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$5: <Class:Bar> = self\l<hashTemp>$7: Symbol(:\"arg\") = :\"arg\"\l<hashTemp>$8: <Class:Integer> = alias <constant:Integer>\l<magic>$9: <Magic> = alias <constant:<Magic>>\l<statTemp>$6: {arg: <Class:Integer>} = <magic>$9: <Magic>.<build-hash>(<hashTemp>$7: Symbol(:\"arg\"), <hashTemp>$8: <Class:Integer>)\l<statTemp>$4: Sorbet::Private::Builder = <statTemp>$5: <Class:Bar>.sig(<statTemp>$6: {arg: <Class:Integer>})\l<statTemp>$10: <Class:Integer> = alias <constant:Integer>\l<returnMethodTemp>$2: Sorbet::Private::Builder = <statTemp>$4: Sorbet::Private::Builder.returns(<statTemp>$10: <Class:Integer>)\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::Bar#<static-init>_0" -> "bb::Bar#<static-init>_1" [style="bold"];
    "bb::Bar#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Bar#<static-init>_1" -> "bb::Bar#<static-init>_1" [style="bold"];
}

}

