digraph "transitive.rb" {
subgraph "cluster_#<static-init>" {
    label = "#<static-init>";
    color = blue;
    "bb#<static-init>_0" [shape = invhouse];
    "bb#<static-init>_1" [shape = parallelogram];

    "bb#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$6: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$7: T.class_of(A) = alias <constant:A>\l<statTemp>$5: RubyTyper::Void = <statTemp>$6: T.class_of(RubyTyper).keep_for_ide(<statTemp>$7: T.class_of(A))\l<statTemp>$10: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$11: T.class_of(Bar) = alias <constant:Bar>\l<statTemp>$9: RubyTyper::Void = <statTemp>$10: T.class_of(RubyTyper).keep_for_ide(<statTemp>$11: T.class_of(Bar))\l<statTemp>$13: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$14: T.class_of(A) = alias <constant:A>\l<statTemp>$12: RubyTyper::Void = <statTemp>$13: T.class_of(RubyTyper).keep_for_ide(<statTemp>$14: T.class_of(A))\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb#<static-init>_0" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb#<static-init>_1" -> "bb#<static-init>_1" [style="bold"];
}

subgraph "cluster_::A#foo" {
    label = "::A#foo";
    color = blue;
    "bb::A#foo_0" [shape = invhouse];
    "bb::A#foo_1" [shape = parallelogram];

    "bb::A#foo_0" [
        label = "block[id=0]()\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::A#foo_0" -> "bb::A#foo_1" [style="bold"];
    "bb::A#foo_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::A#foo_1" -> "bb::A#foo_1" [style="bold"];
}

subgraph "cluster_::A#<static-init>" {
    label = "::A#<static-init>";
    color = blue;
    "bb::A#<static-init>_0" [shape = invhouse];
    "bb::A#<static-init>_1" [shape = parallelogram];

    "bb::A#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$4: T.class_of(A) = self\l<block-pre-call-temp>$5: Sorbet::Private::Builder = <statTemp>$4: T.class_of(A).sig()\l<unconditional>\l"
    ];

    "bb::A#<static-init>_0" -> "bb::A#<static-init>_2" [style="bold"];
    "bb::A#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::A#<static-init>_1" -> "bb::A#<static-init>_1" [style="bold"];
    "bb::A#<static-init>_2" [
        label = "block[id=2]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::A#<static-init>_2" -> "bb::A#<static-init>_4" [style="bold"];
    "bb::A#<static-init>_2" -> "bb::A#<static-init>_3" [style="tapered"];

    "bb::A#<static-init>_3" [
        label = "block[id=3]()\l<returnMethodTemp>$2: T.untyped = Solve<::<Class:A>#<block>>\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::A#<static-init>_3" -> "bb::A#<static-init>_1" [style="bold"];
    "bb::A#<static-init>_4" [
        label = "block[id=4]()\louterLoops: 1\l<statTemp>$9: Sorbet::Private::Builder = self\l<statTemp>$10: T.class_of(Integer) = alias <constant:Integer>\l<blockReturnTemp>$8: Sorbet::Private::Builder = <statTemp>$9: Sorbet::Private::Builder.returns(<statTemp>$10: T.class_of(Integer))\l<blockReturnTemp>$11: <impossible> = blockreturn<::<Class:A>#<block>> <blockReturnTemp>$8: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::A#<static-init>_4" -> "bb::A#<static-init>_2" [style="bold"];
}

subgraph "cluster_::Bar#baz" {
    label = "::Bar#baz";
    color = blue;
    "bb::Bar#baz_0" [shape = invhouse];
    "bb::Bar#baz_1" [shape = parallelogram];

    "bb::Bar#baz_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3: Bar = self\l<statTemp>$4: Bar = self\l<returnMethodTemp>$2: Integer = <statTemp>$4: Bar.foo()\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: Integer\l<unconditional>\l"
    ];

    "bb::Bar#baz_0" -> "bb::Bar#baz_1" [style="bold"];
    "bb::Bar#baz_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Bar#baz_1" -> "bb::Bar#baz_1" [style="bold"];
}

subgraph "cluster_::Bar#<static-init>" {
    label = "::Bar#<static-init>";
    color = blue;
    "bb::Bar#<static-init>_0" [shape = invhouse];
    "bb::Bar#<static-init>_1" [shape = parallelogram];

    "bb::Bar#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$4: T.class_of(Bar) = self\l<block-pre-call-temp>$5: Sorbet::Private::Builder = <statTemp>$4: T.class_of(Bar).sig()\l<unconditional>\l"
    ];

    "bb::Bar#<static-init>_0" -> "bb::Bar#<static-init>_2" [style="bold"];
    "bb::Bar#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Bar#<static-init>_1" -> "bb::Bar#<static-init>_1" [style="bold"];
    "bb::Bar#<static-init>_2" [
        label = "block[id=2]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::Bar#<static-init>_2" -> "bb::Bar#<static-init>_4" [style="bold"];
    "bb::Bar#<static-init>_2" -> "bb::Bar#<static-init>_3" [style="tapered"];

    "bb::Bar#<static-init>_3" [
        label = "block[id=3]()\l<returnMethodTemp>$2: T.untyped = Solve<::<Class:Bar>#<block>>\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::Bar#<static-init>_3" -> "bb::Bar#<static-init>_1" [style="bold"];
    "bb::Bar#<static-init>_4" [
        label = "block[id=4]()\louterLoops: 1\l<statTemp>$10: Sorbet::Private::Builder = self\l<hashTemp>$12: Symbol(:\"arg\") = :\"arg\"\l<hashTemp>$13: T.class_of(Integer) = alias <constant:Integer>\l<magic>$14: <Magic> = alias <constant:<Magic>>\l<statTemp>$11: {arg: T.class_of(Integer)} = <magic>$14: <Magic>.<build-hash>(<hashTemp>$12: Symbol(:\"arg\"), <hashTemp>$13: T.class_of(Integer))\l<statTemp>$9: Sorbet::Private::Builder = <statTemp>$10: Sorbet::Private::Builder.params(<statTemp>$11: {arg: T.class_of(Integer)})\l<statTemp>$15: T.class_of(Integer) = alias <constant:Integer>\l<blockReturnTemp>$8: Sorbet::Private::Builder = <statTemp>$9: Sorbet::Private::Builder.returns(<statTemp>$15: T.class_of(Integer))\l<blockReturnTemp>$16: <impossible> = blockreturn<::<Class:Bar>#<block>> <blockReturnTemp>$8: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::Bar#<static-init>_4" -> "bb::Bar#<static-init>_2" [style="bold"];
}

}

