digraph "transitive.rb" {
subgraph "cluster_#<static-init>" {
    label = "#<static-init>";
    color = blue;
    "bb#<static-init>_0" [shape = invhouse];
    "bb#<static-init>_1" [shape = parallelogram];

    "bb#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$6 = alias <constant:RubyTyper> : <Class:RubyTyper>\l<statTemp>$7 = alias <constant:A> : <Class:A>\l<statTemp>$5 = <statTemp>$6.keep_for_ide(<statTemp>$7) : RubyTyper::Void\l<statTemp>$10 = alias <constant:RubyTyper> : <Class:RubyTyper>\l<statTemp>$11 = alias <constant:Bar> : <Class:Bar>\l<statTemp>$9 = <statTemp>$10.keep_for_ide(<statTemp>$11) : RubyTyper::Void\l<statTemp>$13 = alias <constant:RubyTyper> : <Class:RubyTyper>\l<statTemp>$14 = alias <constant:A> : <Class:A>\l<statTemp>$12 = <statTemp>$13.keep_for_ide(<statTemp>$14) : RubyTyper::Void\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb#<static-init>_0" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb#<static-init>_1" -> "bb#<static-init>_1" [style="bold"];
}

subgraph "cluster_::A#foo" {
    label = "::A#foo";
    color = blue;
    "bb::A#foo_0" [shape = invhouse];
    "bb::A#foo_1" [shape = parallelogram];

    "bb::A#foo_0" [
        label = "block[id=0]()\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::A#foo_0" -> "bb::A#foo_1" [style="bold"];
    "bb::A#foo_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::A#foo_1" -> "bb::A#foo_1" [style="bold"];
}

subgraph "cluster_::A#<static-init>" {
    label = "::A#<static-init>";
    color = blue;
    "bb::A#<static-init>_0" [shape = invhouse];
    "bb::A#<static-init>_1" [shape = parallelogram];

    "bb::A#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$5 = self : <Class:A>\l<statTemp>$4 = <statTemp>$5.sig() : Sorbet::Private::Builder\l<statTemp>$6 = alias <constant:Integer> : <Class:Integer>\l<returnMethodTemp>$2 = <statTemp>$4.returns(<statTemp>$6) : Sorbet::Private::Builder\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::A#<static-init>_0" -> "bb::A#<static-init>_1" [style="bold"];
    "bb::A#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::A#<static-init>_1" -> "bb::A#<static-init>_1" [style="bold"];
}

subgraph "cluster_::Bar#baz" {
    label = "::Bar#baz";
    color = blue;
    "bb::Bar#baz_0" [shape = invhouse];
    "bb::Bar#baz_1" [shape = parallelogram];

    "bb::Bar#baz_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3 = self : Bar\l<statTemp>$4 = self : Bar\l<returnMethodTemp>$2 = <statTemp>$4.foo() : Integer\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::Bar#baz_0" -> "bb::Bar#baz_1" [style="bold"];
    "bb::Bar#baz_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Bar#baz_1" -> "bb::Bar#baz_1" [style="bold"];
}

subgraph "cluster_::Bar#<static-init>" {
    label = "::Bar#<static-init>";
    color = blue;
    "bb::Bar#<static-init>_0" [shape = invhouse];
    "bb::Bar#<static-init>_1" [shape = parallelogram];

    "bb::Bar#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$5 = self : <Class:Bar>\l<hashTemp>$7 = :\"arg\" : Symbol(:\"arg\")\l<hashTemp>$8 = alias <constant:Integer> : <Class:Integer>\l<magic>$9 = alias <constant:<Magic>> : <Magic>\l<statTemp>$6 = <magic>$9.<build-hash>(<hashTemp>$7, <hashTemp>$8) : ShapeType {\l  Symbol(:\"arg\") => <Class:Integer>\l}\l<statTemp>$4 = <statTemp>$5.sig(<statTemp>$6) : Sorbet::Private::Builder\l<statTemp>$10 = alias <constant:Integer> : <Class:Integer>\l<returnMethodTemp>$2 = <statTemp>$4.returns(<statTemp>$10) : Sorbet::Private::Builder\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::Bar#<static-init>_0" -> "bb::Bar#<static-init>_1" [style="bold"];
    "bb::Bar#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Bar#<static-init>_1" -> "bb::Bar#<static-init>_1" [style="bold"];
}

}

