digraph "blocks2.rb"{
subgraph "cluster_::<constant:Foo>#bar" {
    label = "::<constant:Foo>#bar";
    color = blue;
    "bb::<constant:Foo>#bar_0" [shape = invhouse];
    "bb::<constant:Foo>#bar_1" [shape = parallelogram];

    "bb::<constant:Foo>#bar_0" [label = "block[id=0]()
returnMethodTemp$1 = NotSupported(ruby_typer::ast::Yield) : untyped
returnMethodTemp$3 = return returnMethodTemp$1 : <bottom>
<unconditional>"];

    "bb::<constant:Foo>#bar_0" -> "bb::<constant:Foo>#bar_1" [style="bold"];
    "bb::<constant:Foo>#bar_1" [label = "block[id=1]()
<unconditional>"];

    "bb::<constant:Foo>#bar_1" -> "bb::<constant:Foo>#bar_1" [style="bold"];
}

subgraph "cluster_::<constant:Foo>#baz" {
    label = "::<constant:Foo>#baz";
    color = blue;
    "bb::<constant:Foo>#baz_0" [shape = invhouse];
    "bb::<constant:Foo>#baz_1" [shape = parallelogram];

    "bb::<constant:Foo>#baz_0" [label = "block[id=0](statTemp$3)
statTemp$3 = self : Foo
<unconditional>"];

    "bb::<constant:Foo>#baz_0" -> "bb::<constant:Foo>#baz_2" [style="bold"];
    "bb::<constant:Foo>#baz_1" [label = "block[id=1]()
<unconditional>"];

    "bb::<constant:Foo>#baz_1" -> "bb::<constant:Foo>#baz_1" [style="bold"];
    "bb::<constant:Foo>#baz_2" [label = "block[id=2](statTemp$3)
outerLoops: 1
<block-call>"];

    "bb::<constant:Foo>#baz_2" -> "bb::<constant:Foo>#baz_4" [style="bold"];
    "bb::<constant:Foo>#baz_2" -> "bb::<constant:Foo>#baz_3" [style="tapered"];

    "bb::<constant:Foo>#baz_3" [label = "block[id=3](statTemp$3)
returnMethodTemp$1 = statTemp$3.bar() : untyped
returnMethodTemp$7 = return returnMethodTemp$1 : <bottom>
<unconditional>"];

    "bb::<constant:Foo>#baz_3" -> "bb::<constant:Foo>#baz_1" [style="bold"];
    "bb::<constant:Foo>#baz_4" [label = "block[id=4](statTemp$3)
outerLoops: 1
<block-nested: r> = load_arg(statTemp$3#bar, 0) : untyped
statTemp$5 = self : Foo
blockReturnTemp$4 = statTemp$5.puts(<block-nested: r>) : NilClass
<unconditional>"];

    "bb::<constant:Foo>#baz_4" -> "bb::<constant:Foo>#baz_2" [style="bold"];
}

}

