digraph "blocks2.rb" {
subgraph "cluster_::Foo#bar" {
    label = "::Foo#bar";
    color = blue;
    "bb::Foo#bar_0" [shape = invhouse];
    "bb::Foo#bar_1" [shape = parallelogram];

    "bb::Foo#bar_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3 = self : Foo\l<blk> = load_arg(<selfMethodTemp>$3#bar, 0) : T.untyped\l<statTemp>$5 = 1 : Integer(1)\l<returnMethodTemp>$2 = <blk>.call(<statTemp>$5) : T.untyped\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::Foo#bar_0" -> "bb::Foo#bar_1" [style="bold"];
    "bb::Foo#bar_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Foo#bar_1" -> "bb::Foo#bar_1" [style="bold"];
}

subgraph "cluster_::Foo#baz" {
    label = "::Foo#baz";
    color = blue;
    "bb::Foo#baz_0" [shape = invhouse];
    "bb::Foo#baz_1" [shape = parallelogram];

    "bb::Foo#baz_0" [
        label = "block[id=0]()\l<statTemp>$5 = self : Foo\l<block-pre-call-temp>$6 = <statTemp>$5.bar() : T.untyped\l<unconditional>\l"
    ];

    "bb::Foo#baz_0" -> "bb::Foo#baz_2" [style="bold"];
    "bb::Foo#baz_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Foo#baz_1" -> "bb::Foo#baz_1" [style="bold"];
    "bb::Foo#baz_2" [
        label = "block[id=2]()\louterLoops: 1\l<block-call>\l"
    ];

    "bb::Foo#baz_2" -> "bb::Foo#baz_4" [style="bold"];
    "bb::Foo#baz_2" -> "bb::Foo#baz_3" [style="tapered"];

    "bb::Foo#baz_3" [
        label = "block[id=3]()\l<returnMethodTemp>$3 = Solve<::Foo#baz#<block>> : T.untyped\l<finalReturn> = return <returnMethodTemp>$3 : <impossible>\l<unconditional>\l"
    ];

    "bb::Foo#baz_3" -> "bb::Foo#baz_1" [style="bold"];
    "bb::Foo#baz_4" [
        label = "block[id=4]()\louterLoops: 1\l<blk>$7 = load_yield_params(::Foo#baz#<block>, Foo#baz#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$8 = 0 : Integer(0)\lr$3 = <blk>$7.[](<blk>$8) : T.untyped\l<statTemp>$10 = self : Foo\l<blockReturnTemp>$9 = <statTemp>$10.puts(r$3) : NilClass\l<blockReturnTemp>$12 = blockreturn<::Foo#baz#<block>> <blockReturnTemp>$9 : <impossible>\l<unconditional>\l"
    ];

    "bb::Foo#baz_4" -> "bb::Foo#baz_2" [style="bold"];
}

}

