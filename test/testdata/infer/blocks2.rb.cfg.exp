digraph "blocks2.rb" {
subgraph "cluster_::Foo#bar" {
    label = "::Foo#bar";
    color = blue;
    "bb::Foo#bar_0" [shape = invhouse];
    "bb::Foo#bar_1" [shape = parallelogram];

    "bb::Foo#bar_0" [
        label = "block[id=0]()\l<U <self>>: Foo = cast(<U <self>>: NilClass, Foo);\l<U <blk>>: T.untyped = load_arg(Foo#bar#<blk>)\l<U <statTemp>>$4: Integer(1) = 1\l<U <returnMethodTemp>>$2: T.untyped = <U <blk>>: T.untyped.<U call>(<U <statTemp>>$4: Integer(1))\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::Foo#bar_0" -> "bb::Foo#bar_1" [style="bold"];
    "bb::Foo#bar_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Foo#bar_1" -> "bb::Foo#bar_1" [style="bold"];
}

subgraph "cluster_::Foo#baz" {
    label = "::Foo#baz";
    color = blue;
    "bb::Foo#baz_0" [shape = invhouse];
    "bb::Foo#baz_1" [shape = parallelogram];

    "bb::Foo#baz_0" [
        label = "block[id=0]()\l<U <self>>: Foo = cast(<U <self>>: NilClass, Foo);\l<U <block-pre-call-temp>>$4: T.untyped = <U <self>>: Foo.<U bar>()\l<U <selfRestore>>$5: Foo = <U <self>>\l<unconditional>\l"
    ];

    "bb::Foo#baz_0" -> "bb::Foo#baz_2" [style="bold"];
    "bb::Foo#baz_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Foo#baz_1" -> "bb::Foo#baz_1" [style="bold"];
    "bb::Foo#baz_2" [
        label = "block[id=2](<U <self>>: Foo, <U <selfRestore>>$5: Foo)\louterLoops: 1\l<U <block-call>>: NilClass\l"
    ];

    "bb::Foo#baz_2" -> "bb::Foo#baz_5" [style="bold"];
    "bb::Foo#baz_2" -> "bb::Foo#baz_3" [style="tapered"];

    "bb::Foo#baz_3" [
        label = "block[id=3](<U <selfRestore>>$5: Foo)\l<U <returnMethodTemp>>$2: T.untyped = Solve<::Foo#baz#<block>>\l<U <self>>: Foo = <U <selfRestore>>$5\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::Foo#baz_3" -> "bb::Foo#baz_1" [style="bold"];
    "bb::Foo#baz_5" [
        label = "block[id=5](<U <self>>: Foo, <U <selfRestore>>$5: Foo)\louterLoops: 1\l<U <self>>: Foo = loadSelf\l<U <blk>>$6: T.untyped = load_yield_params(::Foo#baz#<block>, Foo#baz#<block>)\l<U <blk>>$7: Integer(0) = 0\l<U r>$1: T.untyped = <U <blk>>$6: T.untyped.<U []>(<U <blk>>$7: Integer(0))\l<U <blockReturnTemp>>$8: NilClass = <U <self>>: Foo.<U puts>(<U r>$1: T.untyped)\l<U <blockReturnTemp>>$11: T.noreturn = blockreturn<::Foo#baz#<block>> <U <blockReturnTemp>>$8: NilClass\l<unconditional>\l"
    ];

    "bb::Foo#baz_5" -> "bb::Foo#baz_2" [style="bold"];
}

}

