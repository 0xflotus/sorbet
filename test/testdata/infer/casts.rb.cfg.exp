digraph "casts.rb" {
subgraph "cluster_::TestCasts#untyped" {
    label = "::TestCasts#untyped";
    color = blue;
    "bb::TestCasts#untyped_0" [shape = invhouse];
    "bb::TestCasts#untyped_1" [shape = parallelogram];

    "bb::TestCasts#untyped_0" [
        label = "block[id=0]()\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::TestCasts#untyped_0" -> "bb::TestCasts#untyped_1" [style="bold"];
    "bb::TestCasts#untyped_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestCasts#untyped_1" -> "bb::TestCasts#untyped_1" [style="bold"];
}

subgraph "cluster_::TestCasts#test_casts" {
    label = "::TestCasts#test_casts";
    color = blue;
    "bb::TestCasts#test_casts_0" [shape = invhouse];
    "bb::TestCasts#test_casts_1" [shape = parallelogram];

    "bb::TestCasts#test_casts_0" [
        label = "block[id=0]()\l<statTemp>$6: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$7: T.class_of(Integer) = alias <constant:Integer>\l<statTemp>$5: RubyTyper::Void = <statTemp>$6: T.class_of(RubyTyper).keep_for_typechecking(<statTemp>$7: T.class_of(Integer))\l<statTemp>$9: TestCasts = self\l<castTemp>$8: T.untyped = <statTemp>$9: TestCasts.untyped()\lt: Integer = cast(<castTemp>$8: T.untyped, Integer);\l<statTemp>$12: Integer(4) = 4\l<statTemp>$10: Integer = t: Integer.+(<statTemp>$12: Integer(4))\l<statTemp>$15: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$16: T.class_of(Integer) = alias <constant:Integer>\l<statTemp>$14: RubyTyper::Void = <statTemp>$15: T.class_of(RubyTyper).keep_for_typechecking(<statTemp>$16: T.class_of(Integer))\l<castTemp>$17: String(\"hi\") = \"hi\"\lt1: Integer = cast(<castTemp>$17: String(\"hi\"), Integer);\l<statTemp>$20: Integer(1) = 1\l<statTemp>$18: Integer = t1: Integer.+(<statTemp>$20: Integer(1))\l<statTemp>$23: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$24: T.class_of(String) = alias <constant:String>\l<statTemp>$22: RubyTyper::Void = <statTemp>$23: T.class_of(RubyTyper).keep_for_typechecking(<statTemp>$24: T.class_of(String))\l<statTemp>$26: TestCasts = self\l<castTemp>$25: T.untyped = <statTemp>$26: TestCasts.untyped()\ls: String = cast(<castTemp>$25: T.untyped, String);\l<statTemp>$29: String(\"hi\") = \"hi\"\l<statTemp>$27: String = s: String.+(<statTemp>$29: String(\"hi\"))\l<statTemp>$32: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$33: T.class_of(String) = alias <constant:String>\l<statTemp>$31: RubyTyper::Void = <statTemp>$32: T.class_of(RubyTyper).keep_for_typechecking(<statTemp>$33: T.class_of(String))\l<castTemp>$34: Integer(6) = 6\ls: String = cast(<castTemp>$34: Integer(6), String);\l<statTemp>$37: String(\"hi\") = \"hi\"\l<statTemp>$35: String = s: String.+(<statTemp>$37: String(\"hi\"))\l<statTemp>$40: Integer(3) = 3\l<statTemp>$38: String = s: String.+(<statTemp>$40: Integer(3))\l<statTemp>$43: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$44: T.class_of(Integer) = alias <constant:Integer>\l<statTemp>$42: RubyTyper::Void = <statTemp>$43: T.class_of(RubyTyper).keep_for_typechecking(<statTemp>$44: T.class_of(Integer))\l<castTemp>$45: Integer(6) = 6\ls: Integer = cast(<castTemp>$45: Integer(6), Integer);\l<statTemp>$48: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$50: T.class_of(T) = alias <constant:T>\l<statTemp>$49: T.untyped = <statTemp>$50: T.class_of(T).untyped()\l<statTemp>$47: RubyTyper::Void = <statTemp>$48: T.class_of(RubyTyper).keep_for_typechecking(<statTemp>$49: T.untyped)\l<castTemp>$51: Integer(6) = 6\ls: T.untyped = cast(<castTemp>$51: Integer(6), T.untyped);\l<statTemp>$54: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$55: Integer(7) = 7\l<statTemp>$53: RubyTyper::Void = <statTemp>$54: T.class_of(RubyTyper).keep_for_typechecking(<statTemp>$55: Integer(7))\l<castTemp>$56: Integer(6) = 6\ls: T.untyped = cast(<castTemp>$56: Integer(6), T.untyped);\l<statTemp>$59: String(\"hi\") = \"hi\"\l<statTemp>$57: T.untyped = s: T.untyped.+(<statTemp>$59: String(\"hi\"))\l<statTemp>$61: Integer(3) = 3\l<returnMethodTemp>$2: T.untyped = s: T.untyped.+(<statTemp>$61: Integer(3))\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::TestCasts#test_casts_0" -> "bb::TestCasts#test_casts_1" [style="bold"];
    "bb::TestCasts#test_casts_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestCasts#test_casts_1" -> "bb::TestCasts#test_casts_1" [style="bold"];
}

}

