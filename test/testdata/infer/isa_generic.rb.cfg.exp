digraph "isa_generic.rb" {
subgraph "cluster_::Object#f" {
    label = "::Object#f";
    color = blue;
    "bb::Object#f_0" [shape = invhouse];
    "bb::Object#f_1" [shape = parallelogram];

    "bb::Object#f_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3: Object = self\lx: T.any(Concrete, Other) = load_arg(<selfMethodTemp>$3, Object#f#x)\l<statTemp>$7: T.class_of(Concrete)[String] = alias <constant:Concrete>\l<ifTemp>$6: T.any(TrueClass, FalseClass) = <statTemp>$7: T.class_of(Concrete)[String].===(x: T.any(Concrete, Other))\l<ifTemp>$6: T.any(TrueClass, FalseClass)\l"
    ];

    "bb::Object#f_0" -> "bb::Object#f_2" [style="bold"];
    "bb::Object#f_0" -> "bb::Object#f_3" [style="tapered"];

    "bb::Object#f_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Object#f_1" -> "bb::Object#f_1" [style="bold"];
    "bb::Object#f_2" [
        label = "block[id=2](x: Concrete)\l<statTemp>$10: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$11: T.class_of(Concrete)[String] = alias <constant:Concrete>\l<statTemp>$9: RubyTyper::Void = <statTemp>$10: T.class_of(RubyTyper).keep_for_typechecking(<statTemp>$11: T.class_of(Concrete)[String])\l<castTemp>$12: Concrete = x\l<statTemp>$4: Concrete = cast(<castTemp>$12: Concrete, Concrete);\l<unconditional>\l"
    ];

    "bb::Object#f_2" -> "bb::Object#f_7" [style="bold"];
    "bb::Object#f_3" [
        label = "block[id=3](x: Other)\l<statTemp>$14: T.class_of(Other) = alias <constant:Other>\l<ifTemp>$13: T.any(TrueClass, FalseClass) = <statTemp>$14: T.class_of(Other).===(x: Other)\l<ifTemp>$13: T.any(TrueClass, FalseClass)\l"
    ];

    "bb::Object#f_3" -> "bb::Object#f_4" [style="bold"];
    "bb::Object#f_3" -> "bb::Object#f_7" [style="tapered"];

    "bb::Object#f_4" [
        label = "block[id=4](x: Other)\l<statTemp>$17: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$18: T.class_of(Other) = alias <constant:Other>\l<statTemp>$16: RubyTyper::Void = <statTemp>$17: T.class_of(RubyTyper).keep_for_typechecking(<statTemp>$18: T.class_of(Other))\l<castTemp>$19: Other = x\l<statTemp>$4: Other = cast(<castTemp>$19: Other, Other);\l<unconditional>\l"
    ];

    "bb::Object#f_4" -> "bb::Object#f_7" [style="bold"];
    "bb::Object#f_7" [
        label = "block[id=7](x: T.any(Concrete, Other))\l<statTemp>$23: T.class_of(Concrete)[String] = alias <constant:Concrete>\l<ifTemp>$21: T.any(TrueClass, FalseClass) = x: T.any(Concrete, Other).is_a?(<statTemp>$23: T.class_of(Concrete)[String])\l<ifTemp>$21: T.any(TrueClass, FalseClass)\l"
    ];

    "bb::Object#f_7" -> "bb::Object#f_8" [style="bold"];
    "bb::Object#f_7" -> "bb::Object#f_10" [style="tapered"];

    "bb::Object#f_8" [
        label = "block[id=8](x: Concrete)\l<statTemp>$25: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$26: T.class_of(Concrete)[String] = alias <constant:Concrete>\l<statTemp>$24: RubyTyper::Void = <statTemp>$25: T.class_of(RubyTyper).keep_for_typechecking(<statTemp>$26: T.class_of(Concrete)[String])\l<castTemp>$27: Concrete = x\l<statTemp>$20: Concrete = cast(<castTemp>$27: Concrete, Concrete);\l<unconditional>\l"
    ];

    "bb::Object#f_8" -> "bb::Object#f_10" [style="bold"];
    "bb::Object#f_10" [
        label = "block[id=10](x: T.any(Other, Concrete))\l<statTemp>$30: T.class_of(Other) = alias <constant:Other>\l<ifTemp>$28: T.any(TrueClass, FalseClass) = x: T.any(Other, Concrete).is_a?(<statTemp>$30: T.class_of(Other))\l<ifTemp>$28: T.any(TrueClass, FalseClass)\l"
    ];

    "bb::Object#f_10" -> "bb::Object#f_13" [style="bold"];
    "bb::Object#f_10" -> "bb::Object#f_12" [style="tapered"];

    "bb::Object#f_12" [
        label = "block[id=12](x: Concrete)\l<statTemp>$32: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$33: T.class_of(Concrete)[String] = alias <constant:Concrete>\l<statTemp>$31: RubyTyper::Void = <statTemp>$32: T.class_of(RubyTyper).keep_for_typechecking(<statTemp>$33: T.class_of(Concrete)[String])\l<castTemp>$34: Concrete = x\l<returnMethodTemp>$2: Concrete = cast(<castTemp>$34: Concrete, Concrete);\l<unconditional>\l"
    ];

    "bb::Object#f_12" -> "bb::Object#f_13" [style="bold"];
    "bb::Object#f_13" [
        label = "block[id=13](<returnMethodTemp>$2: T.nilable(Concrete))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.nilable(Concrete)\l<unconditional>\l"
    ];

    "bb::Object#f_13" -> "bb::Object#f_1" [style="bold"];
}

subgraph "cluster_#<static-init>" {
    label = "#<static-init>";
    color = blue;
    "bb#<static-init>_0" [shape = invhouse];
    "bb#<static-init>_1" [shape = parallelogram];

    "bb#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$6: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$7: T.class_of(Base)[T.untyped] = alias <constant:Base>\l<statTemp>$5: RubyTyper::Void = <statTemp>$6: T.class_of(RubyTyper).keep_for_ide(<statTemp>$7: T.class_of(Base)[T.untyped])\l<statTemp>$10: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$11: T.class_of(Concrete)[String] = alias <constant:Concrete>\l<statTemp>$9: RubyTyper::Void = <statTemp>$10: T.class_of(RubyTyper).keep_for_ide(<statTemp>$11: T.class_of(Concrete)[String])\l<statTemp>$13: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$14: T.class_of(Base)[T.untyped] = alias <constant:Base>\l<statTemp>$12: RubyTyper::Void = <statTemp>$13: T.class_of(RubyTyper).keep_for_ide(<statTemp>$14: T.class_of(Base)[T.untyped])\l<statTemp>$17: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$18: T.class_of(Other) = alias <constant:Other>\l<statTemp>$16: RubyTyper::Void = <statTemp>$17: T.class_of(RubyTyper).keep_for_ide(<statTemp>$18: T.class_of(Other))\l<statTemp>$20: T.class_of(<root>) = self\l<block-pre-call-temp>$21: Sorbet::Private::Builder = <statTemp>$20: T.class_of(<root>).sig()\l<unconditional>\l"
    ];

    "bb#<static-init>_0" -> "bb#<static-init>_2" [style="bold"];
    "bb#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb#<static-init>_1" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_2" [
        label = "block[id=2]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb#<static-init>_2" -> "bb#<static-init>_4" [style="bold"];
    "bb#<static-init>_2" -> "bb#<static-init>_3" [style="tapered"];

    "bb#<static-init>_3" [
        label = "block[id=3]()\l<statTemp>$19: T.untyped = Solve<#<static-init>#<block>>\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb#<static-init>_3" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_4" [
        label = "block[id=4]()\louterLoops: 1\l<statTemp>$26: Sorbet::Private::Builder = self\l<hashTemp>$28: Symbol(:\"x\") = :\"x\"\l<statTemp>$30: T.class_of(T) = alias <constant:T>\l<statTemp>$31: T.class_of(Concrete)[String] = alias <constant:Concrete>\l<statTemp>$32: T.class_of(Other) = alias <constant:Other>\l<hashTemp>$29: <Type: T.any(T.class_of(Concrete)[String], Other)> = <statTemp>$30: T.class_of(T).any(<statTemp>$31: T.class_of(Concrete)[String], <statTemp>$32: T.class_of(Other))\l<magic>$33: <Magic> = alias <constant:<Magic>>\l<statTemp>$27: {x: <Type: T.any(T.class_of(Concrete)[String], Other)>} = <magic>$33: <Magic>.<build-hash>(<hashTemp>$28: Symbol(:\"x\"), <hashTemp>$29: <Type: T.any(T.class_of(Concrete)[String], Other)>)\l<statTemp>$25: Sorbet::Private::Builder = <statTemp>$26: Sorbet::Private::Builder.params(<statTemp>$27: {x: <Type: T.any(T.class_of(Concrete)[String], Other)>})\l<blockReturnTemp>$24: Sorbet::Private::Builder = <statTemp>$25: Sorbet::Private::Builder.void()\l<blockReturnTemp>$34: T.noreturn = blockreturn<#<static-init>#<block>> <blockReturnTemp>$24: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb#<static-init>_4" -> "bb#<static-init>_2" [style="bold"];
}

subgraph "cluster_::Concrete#<static-init>" {
    label = "::Concrete#<static-init>";
    color = blue;
    "bb::Concrete#<static-init>_0" [shape = invhouse];
    "bb::Concrete#<static-init>_1" [shape = parallelogram];

    "bb::Concrete#<static-init>_0" [
        label = "block[id=0]()\l<constant:Klass>$4: String = alias <constant:Klass>\l<statTemp>$5: T.class_of(Concrete)[String] = self\l<hashTemp>$7: Symbol(:\"fixed\") = :\"fixed\"\l<hashTemp>$8: T.class_of(String) = alias <constant:String>\l<magic>$9: <Magic> = alias <constant:<Magic>>\l<statTemp>$6: {fixed: T.class_of(String)} = <magic>$9: <Magic>.<build-hash>(<hashTemp>$7: Symbol(:\"fixed\"), <hashTemp>$8: T.class_of(String))\l<constant:Klass>$4: T.untyped = <statTemp>$5: T.class_of(Concrete)[String].type_template(<statTemp>$6: {fixed: T.class_of(String)})\l<returnMethodTemp>$2: T.untyped = <constant:Klass>$4\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::Concrete#<static-init>_0" -> "bb::Concrete#<static-init>_1" [style="bold"];
    "bb::Concrete#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Concrete#<static-init>_1" -> "bb::Concrete#<static-init>_1" [style="bold"];
}

}

