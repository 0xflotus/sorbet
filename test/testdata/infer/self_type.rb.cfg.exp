digraph "self_type.rb" {
subgraph "cluster_::Object#rnd" {
    label = "::Object#rnd";
    color = blue;
    "bb::Object#rnd_0" [shape = invhouse];
    "bb::Object#rnd_1" [shape = parallelogram];

    "bb::Object#rnd_0" [
        label = "block[id=0]()\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::Object#rnd_0" -> "bb::Object#rnd_1" [style="bold"];
    "bb::Object#rnd_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Object#rnd_1" -> "bb::Object#rnd_1" [style="bold"];
}

subgraph "cluster_#<static-init>" {
    label = "#<static-init>";
    color = blue;
    "bb#<static-init>_0" [shape = invhouse];
    "bb#<static-init>_1" [shape = parallelogram];

    "bb#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$6: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$7: T.class_of(Parent) = alias <constant:Parent>\l<statTemp>$5: RubyTyper::Void = <statTemp>$6: T.class_of(RubyTyper).keep_for_ide(<statTemp>$7: T.class_of(Parent))\l<statTemp>$10: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$11: T.class_of(Normal) = alias <constant:Normal>\l<statTemp>$9: RubyTyper::Void = <statTemp>$10: T.class_of(RubyTyper).keep_for_ide(<statTemp>$11: T.class_of(Normal))\l<statTemp>$13: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$14: T.class_of(Parent) = alias <constant:Parent>\l<statTemp>$12: RubyTyper::Void = <statTemp>$13: T.class_of(RubyTyper).keep_for_ide(<statTemp>$14: T.class_of(Parent))\l<statTemp>$17: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$18: T.class_of(Generic) = alias <constant:Generic>\l<statTemp>$16: RubyTyper::Void = <statTemp>$17: T.class_of(RubyTyper).keep_for_ide(<statTemp>$18: T.class_of(Generic))\l<statTemp>$20: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$21: T.class_of(Parent) = alias <constant:Parent>\l<statTemp>$19: RubyTyper::Void = <statTemp>$20: T.class_of(RubyTyper).keep_for_ide(<statTemp>$21: T.class_of(Parent))\l<statTemp>$24: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$25: T.class_of(Normal) = alias <constant:Normal>\l<statTemp>$23: RubyTyper::Void = <statTemp>$24: T.class_of(RubyTyper).keep_for_typechecking(<statTemp>$25: T.class_of(Normal))\l<statTemp>$28: T.class_of(Normal) = alias <constant:Normal>\l<statTemp>$27: Normal = <statTemp>$28: T.class_of(Normal).new()\l<castTemp>$26: Normal = <statTemp>$27: Normal.returns_self()\l<statTemp>$22: Normal = cast(<castTemp>$26: Normal, Normal);\l<statTemp>$31: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$33: T.class_of(Generic) = alias <constant:Generic>\l<statTemp>$34: T.class_of(String) = alias <constant:String>\l<statTemp>$32: <Type: Generic[String]> = <statTemp>$33: T.class_of(Generic).[](<statTemp>$34: T.class_of(String))\l<statTemp>$30: RubyTyper::Void = <statTemp>$31: T.class_of(RubyTyper).keep_for_typechecking(<statTemp>$32: <Type: Generic[String]>)\l<statTemp>$38: T.class_of(Generic) = alias <constant:Generic>\l<statTemp>$39: T.class_of(String) = alias <constant:String>\l<statTemp>$37: <Type: Generic[String]> = <statTemp>$38: T.class_of(Generic).[](<statTemp>$39: T.class_of(String))\l<statTemp>$36: Generic[String] = <statTemp>$37: <Type: Generic[String]>.new()\l<castTemp>$35: Generic[String] = <statTemp>$36: Generic[String].returns_self()\l<statTemp>$29: Generic[String] = cast(<castTemp>$35: Generic[String], AppliedType {\l  klass = ::Generic\l  targs = [\l    <constant:TM> = String\l  ]\l});\l<statTemp>$42: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$43: T.class_of(B) = alias <constant:B>\l<statTemp>$41: RubyTyper::Void = <statTemp>$42: T.class_of(RubyTyper).keep_for_ide(<statTemp>$43: T.class_of(B))\l<statTemp>$46: T.class_of(Generic) = alias <constant:Generic>\l<statTemp>$47: T.class_of(String) = alias <constant:String>\l<statTemp>$45: <Type: Generic[String]> = <statTemp>$46: T.class_of(Generic).[](<statTemp>$47: T.class_of(String))\la: Generic[String] = <statTemp>$45: <Type: Generic[String]>.new()\l<statTemp>$51: T.class_of(B) = alias <constant:B>\l<ifTemp>$49: T.any(TrueClass, FalseClass) = a: Generic[String].is_a?(<statTemp>$51: T.class_of(B))\l<ifTemp>$49: T.any(TrueClass, FalseClass)\l"
    ];

    "bb#<static-init>_0" -> "bb#<static-init>_2" [style="bold"];
    "bb#<static-init>_0" -> "bb#<static-init>_4" [style="tapered"];

    "bb#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb#<static-init>_1" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_2" [
        label = "block[id=2](a: T.all(Generic[String], B))\l<statTemp>$53: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$55: T.class_of(T) = alias <constant:T>\l<statTemp>$57: T.class_of(Generic) = alias <constant:Generic>\l<statTemp>$58: T.class_of(String) = alias <constant:String>\l<statTemp>$56: <Type: Generic[String]> = <statTemp>$57: T.class_of(Generic).[](<statTemp>$58: T.class_of(String))\l<statTemp>$59: T.class_of(B) = alias <constant:B>\l<statTemp>$54: <Type: T.all(Generic[String], B)> = <statTemp>$55: T.class_of(T).all(<statTemp>$56: <Type: Generic[String]>, <statTemp>$59: T.class_of(B))\l<statTemp>$52: RubyTyper::Void = <statTemp>$53: T.class_of(RubyTyper).keep_for_typechecking(<statTemp>$54: <Type: T.all(Generic[String], B)>)\l<castTemp>$60: T.all(Generic[String], B) = a: T.all(Generic[String], B).returns_self()\l<statTemp>$48: T.all(Generic[String], B) = cast(<castTemp>$60: T.all(Generic[String], B), AppliedType {\l      klass = ::Generic\l      targs = [\l        <constant:TM> = String\l      ]\l    } & B);\l<unconditional>\l"
    ];

    "bb#<static-init>_2" -> "bb#<static-init>_4" [style="bold"];
    "bb#<static-init>_4" [
        label = "block[id=4]()\l<statTemp>$64: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$65: T.class_of(Array) = alias <constant:Array>\l<statTemp>$63: RubyTyper::Void = <statTemp>$64: T.class_of(RubyTyper).keep_for_ide(<statTemp>$65: T.class_of(Array))\l<statTemp>$68: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<arrayTemp>$70: T.class_of(Integer) = alias <constant:Integer>\l<arrayTemp>$71: T.class_of(Integer) = alias <constant:Integer>\l<magic>$72: <Magic> = alias <constant:<Magic>>\l<statTemp>$69: [T.class_of(Integer), T.class_of(Integer)] = <magic>$72: <Magic>.<build-array>(<arrayTemp>$70: T.class_of(Integer), <arrayTemp>$71: T.class_of(Integer))\l<statTemp>$67: RubyTyper::Void = <statTemp>$68: T.class_of(RubyTyper).keep_for_typechecking(<statTemp>$69: [T.class_of(Integer), T.class_of(Integer)])\l<arrayTemp>$75: Integer(1) = 1\l<arrayTemp>$76: Integer(2) = 2\l<magic>$77: <Magic> = alias <constant:<Magic>>\l<statTemp>$74: [Integer(1), Integer(2)] = <magic>$77: <Magic>.<build-array>(<arrayTemp>$75: Integer(1), <arrayTemp>$76: Integer(2))\l<castTemp>$73: [Integer(1), Integer(2)] = <statTemp>$74: [Integer(1), Integer(2)].returns_self()\l<statTemp>$66: [Integer, Integer] = cast(<castTemp>$73: [Integer(1), Integer(2)], TupleType {\l  0 = Integer\l  1 = Integer\l});\l<statTemp>$80: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$81: T.class_of(A) = alias <constant:A>\l<statTemp>$79: RubyTyper::Void = <statTemp>$80: T.class_of(RubyTyper).keep_for_ide(<statTemp>$81: T.class_of(A))\l<statTemp>$84: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$85: T.class_of(B) = alias <constant:B>\l<statTemp>$83: RubyTyper::Void = <statTemp>$84: T.class_of(RubyTyper).keep_for_ide(<statTemp>$85: T.class_of(B))\l<statTemp>$87: T.class_of(A) = alias <constant:A>\ls: A = <statTemp>$87: T.class_of(A).new()\l<unconditional>\l"
    ];

    "bb#<static-init>_4" -> "bb#<static-init>_5" [style="bold"];
    "bb#<static-init>_5" [
        label = "block[id=5](s: A)\louterLoops: 1\l<statTemp>$90: T.class_of(<root>) = self\l<whileTemp>$89: T.untyped = <statTemp>$90: T.class_of(<root>).rnd()\l<whileTemp>$89: T.untyped\l"
    ];

    "bb#<static-init>_5" -> "bb#<static-init>_7" [style="bold"];
    "bb#<static-init>_5" -> "bb#<static-init>_6" [style="tapered"];

    "bb#<static-init>_6" [
        label = "block[id=6](s: A)\l<statTemp>$97: T.class_of(<root>) = self\l<statTemp>$96: NilClass = <statTemp>$97: T.class_of(<root>).puts(s: A)\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb#<static-init>_6" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_7" [
        label = "block[id=7](s: A)\louterLoops: 1\l<statTemp>$94: T.class_of(B) = alias <constant:B>\l<ifTemp>$92: T.any(TrueClass, FalseClass) = s: A.is_a?(<statTemp>$94: T.class_of(B))\l<ifTemp>$92: T.any(TrueClass, FalseClass)\l"
    ];

    "bb#<static-init>_7" -> "bb#<static-init>_8" [style="bold"];
    "bb#<static-init>_7" -> "bb#<static-init>_5" [style="tapered"];

    "bb#<static-init>_8" [
        label = "block[id=8](s: T.all(A, B))\louterLoops: 1\l<statTemp>$95: T.all(A, B) = s\ls: T.all(A, B) = <statTemp>$95: T.all(A, B).returns_self()\l<unconditional>\l"
    ];

    "bb#<static-init>_8" -> "bb#<static-init>_5" [style="bold"];
}

subgraph "cluster_::Parent#returns_self" {
    label = "::Parent#returns_self";
    color = blue;
    "bb::Parent#returns_self_0" [shape = invhouse];
    "bb::Parent#returns_self_1" [shape = parallelogram];

    "bb::Parent#returns_self_0" [
        label = "block[id=0]()\l<returnMethodTemp>$2: Parent = self\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: Parent\l<unconditional>\l"
    ];

    "bb::Parent#returns_self_0" -> "bb::Parent#returns_self_1" [style="bold"];
    "bb::Parent#returns_self_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Parent#returns_self_1" -> "bb::Parent#returns_self_1" [style="bold"];
}

subgraph "cluster_::Parent#<static-init>" {
    label = "::Parent#<static-init>";
    color = blue;
    "bb::Parent#<static-init>_0" [shape = invhouse];
    "bb::Parent#<static-init>_1" [shape = parallelogram];

    "bb::Parent#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$4: T.class_of(Parent) = self\l<block-pre-call-temp>$5: Sorbet::Private::Builder = <statTemp>$4: T.class_of(Parent).sig()\l<unconditional>\l"
    ];

    "bb::Parent#<static-init>_0" -> "bb::Parent#<static-init>_2" [style="bold"];
    "bb::Parent#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Parent#<static-init>_1" -> "bb::Parent#<static-init>_1" [style="bold"];
    "bb::Parent#<static-init>_2" [
        label = "block[id=2]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::Parent#<static-init>_2" -> "bb::Parent#<static-init>_4" [style="bold"];
    "bb::Parent#<static-init>_2" -> "bb::Parent#<static-init>_3" [style="tapered"];

    "bb::Parent#<static-init>_3" [
        label = "block[id=3]()\l<returnMethodTemp>$2: T.untyped = Solve<::<Class:Parent>#<block>>\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::Parent#<static-init>_3" -> "bb::Parent#<static-init>_1" [style="bold"];
    "bb::Parent#<static-init>_4" [
        label = "block[id=4]()\louterLoops: 1\l<statTemp>$9: Sorbet::Private::Builder = self\l<statTemp>$11: T.class_of(T) = alias <constant:T>\l<statTemp>$10: T.untyped = <statTemp>$11: T.class_of(T).self_type()\l<blockReturnTemp>$8: Sorbet::Private::Builder = <statTemp>$9: Sorbet::Private::Builder.returns(<statTemp>$10: T.untyped)\l<blockReturnTemp>$12: <impossible> = blockreturn<::<Class:Parent>#<block>> <blockReturnTemp>$8: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::Parent#<static-init>_4" -> "bb::Parent#<static-init>_2" [style="bold"];
}

subgraph "cluster_::Generic#bad" {
    label = "::Generic#bad";
    color = blue;
    "bb::Generic#bad_0" [shape = invhouse];
    "bb::Generic#bad_1" [shape = parallelogram];

    "bb::Generic#bad_0" [
        label = "block[id=0]()\l<statTemp>$5: T.class_of(Generic) = alias <constant:Generic>\l<statTemp>$7: T.class_of(T) = alias <constant:T>\l<statTemp>$6: T.untyped = <statTemp>$7: T.class_of(T).untyped()\l<statTemp>$4: <Type: Generic[T.untyped]> = <statTemp>$5: T.class_of(Generic).[](<statTemp>$6: T.untyped)\l<returnMethodTemp>$2: Generic[T.untyped] = <statTemp>$4: <Type: Generic[T.untyped]>.new()\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: Generic[T.untyped]\l<unconditional>\l"
    ];

    "bb::Generic#bad_0" -> "bb::Generic#bad_1" [style="bold"];
    "bb::Generic#bad_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Generic#bad_1" -> "bb::Generic#bad_1" [style="bold"];
}

subgraph "cluster_::Generic#<static-init>" {
    label = "::Generic#<static-init>";
    color = blue;
    "bb::Generic#<static-init>_0" [shape = invhouse];
    "bb::Generic#<static-init>_1" [shape = parallelogram];

    "bb::Generic#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$4: T.class_of(Generic) = self\l<block-pre-call-temp>$5: Sorbet::Private::Builder = <statTemp>$4: T.class_of(Generic).sig()\l<unconditional>\l"
    ];

    "bb::Generic#<static-init>_0" -> "bb::Generic#<static-init>_2" [style="bold"];
    "bb::Generic#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Generic#<static-init>_1" -> "bb::Generic#<static-init>_1" [style="bold"];
    "bb::Generic#<static-init>_2" [
        label = "block[id=2]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::Generic#<static-init>_2" -> "bb::Generic#<static-init>_4" [style="bold"];
    "bb::Generic#<static-init>_2" -> "bb::Generic#<static-init>_3" [style="tapered"];

    "bb::Generic#<static-init>_3" [
        label = "block[id=3]()\l<returnMethodTemp>$2: T.untyped = Solve<::<Class:Generic>#<block>>\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::Generic#<static-init>_3" -> "bb::Generic#<static-init>_1" [style="bold"];
    "bb::Generic#<static-init>_4" [
        label = "block[id=4]()\louterLoops: 1\l<statTemp>$9: Sorbet::Private::Builder = self\l<statTemp>$11: T.class_of(Generic) = alias <constant:Generic>\l<statTemp>$13: T.class_of(T) = alias <constant:T>\l<statTemp>$12: T.untyped = <statTemp>$13: T.class_of(T).self_type()\l<statTemp>$10: <Type: Generic[T.untyped]> = <statTemp>$11: T.class_of(Generic).[](<statTemp>$12: T.untyped)\l<blockReturnTemp>$8: Sorbet::Private::Builder = <statTemp>$9: Sorbet::Private::Builder.returns(<statTemp>$10: <Type: Generic[T.untyped]>)\l<blockReturnTemp>$14: <impossible> = blockreturn<::<Class:Generic>#<block>> <blockReturnTemp>$8: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::Generic#<static-init>_4" -> "bb::Generic#<static-init>_2" [style="bold"];
}

subgraph "cluster_::Array#returns_self" {
    label = "::Array#returns_self";
    color = blue;
    "bb::Array#returns_self_0" [shape = invhouse];
    "bb::Array#returns_self_1" [shape = parallelogram];

    "bb::Array#returns_self_0" [
        label = "block[id=0]()\l<returnMethodTemp>$2: T::Array[Array#Elem] = self\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: T::Array[Array#Elem]\l<unconditional>\l"
    ];

    "bb::Array#returns_self_0" -> "bb::Array#returns_self_1" [style="bold"];
    "bb::Array#returns_self_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Array#returns_self_1" -> "bb::Array#returns_self_1" [style="bold"];
}

subgraph "cluster_::Array#<static-init>" {
    label = "::Array#<static-init>";
    color = blue;
    "bb::Array#<static-init>_0" [shape = invhouse];
    "bb::Array#<static-init>_1" [shape = parallelogram];

    "bb::Array#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$4: T.class_of(Array) = self\l<block-pre-call-temp>$5: Sorbet::Private::Builder = <statTemp>$4: T.class_of(Array).sig()\l<unconditional>\l"
    ];

    "bb::Array#<static-init>_0" -> "bb::Array#<static-init>_2" [style="bold"];
    "bb::Array#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Array#<static-init>_1" -> "bb::Array#<static-init>_1" [style="bold"];
    "bb::Array#<static-init>_2" [
        label = "block[id=2]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::Array#<static-init>_2" -> "bb::Array#<static-init>_4" [style="bold"];
    "bb::Array#<static-init>_2" -> "bb::Array#<static-init>_3" [style="tapered"];

    "bb::Array#<static-init>_3" [
        label = "block[id=3]()\l<returnMethodTemp>$2: T.untyped = Solve<::<Class:Array>#<block>>\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::Array#<static-init>_3" -> "bb::Array#<static-init>_1" [style="bold"];
    "bb::Array#<static-init>_4" [
        label = "block[id=4]()\louterLoops: 1\l<statTemp>$9: Sorbet::Private::Builder = self\l<statTemp>$11: T.class_of(T) = alias <constant:T>\l<statTemp>$10: T.untyped = <statTemp>$11: T.class_of(T).self_type()\l<blockReturnTemp>$8: Sorbet::Private::Builder = <statTemp>$9: Sorbet::Private::Builder.returns(<statTemp>$10: T.untyped)\l<blockReturnTemp>$12: <impossible> = blockreturn<::<Class:Array>#<block>> <blockReturnTemp>$8: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::Array#<static-init>_4" -> "bb::Array#<static-init>_2" [style="bold"];
}

subgraph "cluster_::B#returns_self" {
    label = "::B#returns_self";
    color = blue;
    "bb::B#returns_self_0" [shape = invhouse];
    "bb::B#returns_self_1" [shape = parallelogram];

    "bb::B#returns_self_0" [
        label = "block[id=0]()\l<returnMethodTemp>$2: B = self\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: B\l<unconditional>\l"
    ];

    "bb::B#returns_self_0" -> "bb::B#returns_self_1" [style="bold"];
    "bb::B#returns_self_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::B#returns_self_1" -> "bb::B#returns_self_1" [style="bold"];
}

subgraph "cluster_::B#<static-init>" {
    label = "::B#<static-init>";
    color = blue;
    "bb::B#<static-init>_0" [shape = invhouse];
    "bb::B#<static-init>_1" [shape = parallelogram];

    "bb::B#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$4: T.class_of(B) = self\l<block-pre-call-temp>$5: Sorbet::Private::Builder = <statTemp>$4: T.class_of(B).sig()\l<unconditional>\l"
    ];

    "bb::B#<static-init>_0" -> "bb::B#<static-init>_2" [style="bold"];
    "bb::B#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::B#<static-init>_1" -> "bb::B#<static-init>_1" [style="bold"];
    "bb::B#<static-init>_2" [
        label = "block[id=2]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::B#<static-init>_2" -> "bb::B#<static-init>_4" [style="bold"];
    "bb::B#<static-init>_2" -> "bb::B#<static-init>_3" [style="tapered"];

    "bb::B#<static-init>_3" [
        label = "block[id=3]()\l<returnMethodTemp>$2: T.untyped = Solve<::<Class:B>#<block>>\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::B#<static-init>_3" -> "bb::B#<static-init>_1" [style="bold"];
    "bb::B#<static-init>_4" [
        label = "block[id=4]()\louterLoops: 1\l<statTemp>$9: Sorbet::Private::Builder = self\l<statTemp>$11: T.class_of(T) = alias <constant:T>\l<statTemp>$10: T.untyped = <statTemp>$11: T.class_of(T).self_type()\l<blockReturnTemp>$8: Sorbet::Private::Builder = <statTemp>$9: Sorbet::Private::Builder.returns(<statTemp>$10: T.untyped)\l<blockReturnTemp>$12: <impossible> = blockreturn<::<Class:B>#<block>> <blockReturnTemp>$8: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::B#<static-init>_4" -> "bb::B#<static-init>_2" [style="bold"];
}

}

