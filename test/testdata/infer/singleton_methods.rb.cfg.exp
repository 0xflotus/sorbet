digraph "singleton_methods.rb" {
subgraph "cluster_#<static-init>" {
    label = "#<static-init>";
    color = blue;
    "bb#<static-init>_0" [shape = invhouse];
    "bb#<static-init>_1" [shape = parallelogram];

    "bb#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$6: <Class:RubyTyper> = alias <constant:RubyTyper>\l<statTemp>$7: <Class:Foo> = alias <constant:Foo>\l<statTemp>$5: RubyTyper::Void = <statTemp>$6: <Class:RubyTyper>.keep_for_ide(<statTemp>$7: <Class:Foo>)\l<statTemp>$10: <Class:RubyTyper> = alias <constant:RubyTyper>\l<statTemp>$11: <Class:Bar> = alias <constant:Bar>\l<statTemp>$9: RubyTyper::Void = <statTemp>$10: <Class:RubyTyper>.keep_for_ide(<statTemp>$11: <Class:Bar>)\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb#<static-init>_0" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb#<static-init>_1" -> "bb#<static-init>_1" [style="bold"];
}

subgraph "cluster_::<Class:Foo>#bar" {
    label = "::<Class:Foo>#bar";
    color = blue;
    "bb::<Class:Foo>#bar_0" [shape = invhouse];
    "bb::<Class:Foo>#bar_1" [shape = parallelogram];

    "bb::<Class:Foo>#bar_0" [
        label = "block[id=0]()\l<returnMethodTemp>$2: Integer(1) = 1\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: Integer(1)\l<unconditional>\l"
    ];

    "bb::<Class:Foo>#bar_0" -> "bb::<Class:Foo>#bar_1" [style="bold"];
    "bb::<Class:Foo>#bar_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:Foo>#bar_1" -> "bb::<Class:Foo>#bar_1" [style="bold"];
}

subgraph "cluster_::Bar#baz" {
    label = "::Bar#baz";
    color = blue;
    "bb::Bar#baz_0" [shape = invhouse];
    "bb::Bar#baz_1" [shape = parallelogram];

    "bb::Bar#baz_0" [
        label = "block[id=0]()\l<statTemp>$4: <Class:Foo> = alias <constant:Foo>\l<returnMethodTemp>$2: T.untyped = <statTemp>$4: <Class:Foo>.bar()\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::Bar#baz_0" -> "bb::Bar#baz_1" [style="bold"];
    "bb::Bar#baz_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Bar#baz_1" -> "bb::Bar#baz_1" [style="bold"];
}

}

