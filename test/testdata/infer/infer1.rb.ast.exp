begin
  class <emptyTree>::String<<todo sym>> < (::Object)
    self(TODO).standard_method({:i => <emptyTree>::Integer}, {:returns => <emptyTree>::Opus::Types.any(<emptyTree>::Integer, <emptyTree>::NilClass)})

    def getbyte<<todo sym>>(i)
      <emptyTree>

  end
  class <emptyTree>::Integer<<todo sym>> < (::Object)
    self(TODO).standard_method({:o => <emptyTree>::Integer}, {:returns => <emptyTree>::Opus::Types.any(<emptyTree>::Integer)})

    def +<<todo sym>>(o)
      <emptyTree>

  end
  def baz1<<todo sym>>()
    begin
      a = "foo"
      b = a.getbyte(a)
    end
  def baz2<<todo sym>>()
    begin
      a = "foo"
      b = a.getbyte("foo")
    end
  def baz3<<todo sym>>()
    b = "foo".getbyte("foo")
  def baz4<<todo sym>>()
    b = self(TODO).a().getbyte("foo")
  def baz5<<todo sym>>()
    begin
      if begin
          true
        end
        b = 1
      else
        b = "foo"
      end
      b = b.getbyte(1)
    end
  def baz6<<todo sym>>()
    begin
      if begin
          true
        end
        b = 1
      else
        b = "foo"
      end
      b = "foo".getbyte(b)
    end
  def baz7<<todo sym>>()
    begin
      if begin
          true
        end
        b = 1
      else
        <emptyTree>
      end
      b = "foo".getbyte(b)
    end
  def baz8<<todo sym>>()
    while begin
        true
      end
      b = 1
    end
end
