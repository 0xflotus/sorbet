class <emptyTree><<C <U <root>>>> < ()
  def <U baz1><<C <U <todo sym>>>>(&<U <blk>>)
    begin
      <U a> = "foo"
      <U b> = <U a>.<U getbyte>(<U a>)
    end
  end

  def <U baz2><<C <U <todo sym>>>>(&<U <blk>>)
    begin
      <U a> = "foo"
      <U b> = <U a>.<U getbyte>("foo")
    end
  end

  def <U baz3><<C <U <todo sym>>>>(&<U <blk>>)
    <U b> = "foo".<U getbyte>("foo")
  end

  def <U baz4><<C <U <todo sym>>>>(&<U <blk>>)
    <U b> = self(<C <U <todo sym>>>).<U a>().<U getbyte>("foo")
  end

  def <U baz5><<C <U <todo sym>>>>(<U cond>, &<U <blk>>)
    begin
      if <U cond>
        <U b> = 1
      else
        <U b> = "foo"
      end
      <U b> = <U b>.<U getbyte>(1)
    end
  end

  def <U baz6><<C <U <todo sym>>>>(<U cond>, &<U <blk>>)
    begin
      if <U cond>
        <U b> = 1
      else
        <U b> = "foo"
      end
      <U b> = "foo".<U getbyte>(<U b>)
    end
  end

  def <U baz7><<C <U <todo sym>>>>(<U cond>, &<U <blk>>)
    begin
      if <U cond>
        <U b> = 1
      else
        <emptyTree>
      end
      <U b> = "foo".<U getbyte>(<U b>)
    end
  end

  def <U baz8><<C <U <todo sym>>>>(&<U <blk>>)
    while true
      <U b> = 1
    end
  end
end
