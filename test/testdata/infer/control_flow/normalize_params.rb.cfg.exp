digraph "normalize_params.rb" {
subgraph "cluster_::Test#normalize_params" {
    label = "::Test#normalize_params";
    color = blue;
    "bb::Test#normalize_params_0" [shape = invhouse];
    "bb::Test#normalize_params_1" [shape = parallelogram];

    "bb::Test#normalize_params_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3: Test = self\lv: T.untyped = load_arg(<selfMethodTemp>$3, Test#normalize_params#v)\l<statTemp>$6: T.class_of(Hash) = alias <constant:Hash>\l<ifTemp>$4: T.untyped = v: T.untyped.is_a?(<statTemp>$6: T.class_of(Hash))\l<ifTemp>$4: T.untyped\l"
    ];

    "bb::Test#normalize_params_0" -> "bb::Test#normalize_params_2" [style="bold"];
    "bb::Test#normalize_params_0" -> "bb::Test#normalize_params_3" [style="tapered"];

    "bb::Test#normalize_params_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Test#normalize_params_1" -> "bb::Test#normalize_params_1" [style="bold"];
    "bb::Test#normalize_params_2" [
        label = "block[id=2](v: T::Hash[T.untyped, T.untyped])\l<statTemp>$8: Test = self\l<statTemp>$9: T::Array[[T.untyped, T.untyped]] = v: T::Hash[T.untyped, T.untyped].to_a()\l<statTemp>$7: T.untyped = <statTemp>$8: Test.normalize_params(<statTemp>$9: T::Array[[T.untyped, T.untyped]])\l<returnMethodTemp>$2: T.untyped = <statTemp>$7: T.untyped.sort()\l<unconditional>\l"
    ];

    "bb::Test#normalize_params_2" -> "bb::Test#normalize_params_10" [style="bold"];
    "bb::Test#normalize_params_3" [
        label = "block[id=3](v: T.untyped)\l<statTemp>$13: T.class_of(Array) = alias <constant:Array>\l<ifTemp>$11: T.untyped = v: T.untyped.is_a?(<statTemp>$13: T.class_of(Array))\l<ifTemp>$11: T.untyped\l"
    ];

    "bb::Test#normalize_params_3" -> "bb::Test#normalize_params_4" [style="bold"];
    "bb::Test#normalize_params_3" -> "bb::Test#normalize_params_5" [style="tapered"];

    "bb::Test#normalize_params_4" [
        label = "block[id=4](v: T::Array[T.untyped])\l<block-pre-call-temp>$15: T::Array[U$1] = v: T::Array[T.untyped].map()\l<unconditional>\l"
    ];

    "bb::Test#normalize_params_4" -> "bb::Test#normalize_params_6" [style="bold"];
    "bb::Test#normalize_params_5" [
        label = "block[id=5](v: T.untyped)\l<returnMethodTemp>$2: T.untyped = v\l<unconditional>\l"
    ];

    "bb::Test#normalize_params_5" -> "bb::Test#normalize_params_10" [style="bold"];
    "bb::Test#normalize_params_6" [
        label = "block[id=6]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::Test#normalize_params_6" -> "bb::Test#normalize_params_8" [style="bold"];
    "bb::Test#normalize_params_6" -> "bb::Test#normalize_params_7" [style="tapered"];

    "bb::Test#normalize_params_7" [
        label = "block[id=7]()\l<returnMethodTemp>$2: T::Array[T.untyped] = Solve<::Test#normalize_params#<block>>\l<unconditional>\l"
    ];

    "bb::Test#normalize_params_7" -> "bb::Test#normalize_params_10" [style="bold"];
    "bb::Test#normalize_params_8" [
        label = "block[id=8]()\louterLoops: 1\l<blk>$16: [T.untyped] = load_yield_params(::Test#normalize_params#<block>, Test#normalize_params#<block>)\l<blk>$17: Integer(0) = 0\le$2: T.untyped = <blk>$16: [T.untyped].[](<blk>$17: Integer(0))\l<statTemp>$19: Test = self\l<blockReturnTemp>$18: T.untyped = <statTemp>$19: Test.normalize_params(e$2: T.untyped)\l<blockReturnTemp>$21: T.noreturn = blockreturn<::Test#normalize_params#<block>> <blockReturnTemp>$18: T.untyped\l<unconditional>\l"
    ];

    "bb::Test#normalize_params_8" -> "bb::Test#normalize_params_6" [style="bold"];
    "bb::Test#normalize_params_10" [
        label = "block[id=10](<returnMethodTemp>$2: T.untyped)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::Test#normalize_params_10" -> "bb::Test#normalize_params_1" [style="bold"];
}

}

