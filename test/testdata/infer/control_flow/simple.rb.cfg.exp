digraph "simple.rb" {
subgraph "cluster_::ControlFlow#orZero0" {
    label = "::ControlFlow#orZero0";
    color = blue;
    "bb::ControlFlow#orZero0_0" [shape = invhouse];
    "bb::ControlFlow#orZero0_1" [shape = parallelogram];

    "bb::ControlFlow#orZero0_0" [
        label = "block[id=0]()\l<U a>: T.nilable(Integer) = load_arg(ControlFlow#orZero0#a)\l<U a>: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero0_0" -> "bb::ControlFlow#orZero0_2" [style="bold"];
    "bb::ControlFlow#orZero0_0" -> "bb::ControlFlow#orZero0_3" [style="tapered"];

    "bb::ControlFlow#orZero0_1" [
        label = "block[id=1](<U <returnMethodTemp>>$2)\l<U <finalReturn>> = return <U <returnMethodTemp>>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0_1" -> "bb::ControlFlow#orZero0_1" [style="bold"];
    "bb::ControlFlow#orZero0_2" [
        label = "block[id=2](<U a>: Integer)\l<U <returnMethodTemp>>$2: T.noreturn = return <U a>: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0_2" -> "bb::ControlFlow#orZero0_1" [style="bold"];
    "bb::ControlFlow#orZero0_3" [
        label = "block[id=3]()\l<U <returnTemp>>$5: Integer(0) = 0\l<U <returnMethodTemp>>$2: T.noreturn = return <U <returnTemp>>$5: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0_3" -> "bb::ControlFlow#orZero0_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero0a" {
    label = "::ControlFlow#orZero0a";
    color = blue;
    "bb::ControlFlow#orZero0a_0" [shape = invhouse];
    "bb::ControlFlow#orZero0a_1" [shape = parallelogram];

    "bb::ControlFlow#orZero0a_0" [
        label = "block[id=0]()\l<U a>: Integer = load_arg(ControlFlow#orZero0a#a)\l<U a>: Integer\l"
    ];

    "bb::ControlFlow#orZero0a_0" -> "bb::ControlFlow#orZero0a_2" [style="bold"];
    "bb::ControlFlow#orZero0a_0" -> "bb::ControlFlow#orZero0a_3" [style="tapered"];

    "bb::ControlFlow#orZero0a_1" [
        label = "block[id=1](<U <returnMethodTemp>>$2)\l<U <finalReturn>> = return <U <returnMethodTemp>>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0a_1" -> "bb::ControlFlow#orZero0a_1" [style="bold"];
    "bb::ControlFlow#orZero0a_2" [
        label = "block[id=2](<U a>: Integer)\l<U <returnMethodTemp>>$2: T.noreturn = return <U a>: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0a_2" -> "bb::ControlFlow#orZero0a_1" [style="bold"];
    "bb::ControlFlow#orZero0a_3" [
        label = "block[id=3]()\l<U <returnTemp>>$5 = 0\l<U <returnMethodTemp>>$2 = return <U <returnTemp>>$5\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0a_3" -> "bb::ControlFlow#orZero0a_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero0n" {
    label = "::ControlFlow#orZero0n";
    color = blue;
    "bb::ControlFlow#orZero0n_0" [shape = invhouse];
    "bb::ControlFlow#orZero0n_1" [shape = parallelogram];

    "bb::ControlFlow#orZero0n_0" [
        label = "block[id=0]()\l<U a>: T.nilable(Integer) = load_arg(ControlFlow#orZero0n#a)\l<U b>: T.any(TrueClass, FalseClass) = <U a>: T.nilable(Integer).<U !>()\l<U b>: T.any(TrueClass, FalseClass)\l"
    ];

    "bb::ControlFlow#orZero0n_0" -> "bb::ControlFlow#orZero0n_2" [style="bold"];
    "bb::ControlFlow#orZero0n_0" -> "bb::ControlFlow#orZero0n_3" [style="tapered"];

    "bb::ControlFlow#orZero0n_1" [
        label = "block[id=1](<U <returnMethodTemp>>$2)\l<U <finalReturn>> = return <U <returnMethodTemp>>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0n_1" -> "bb::ControlFlow#orZero0n_1" [style="bold"];
    "bb::ControlFlow#orZero0n_2" [
        label = "block[id=2]()\l<U <returnTemp>>$6: Integer(0) = 0\l<U <returnMethodTemp>>$2: T.noreturn = return <U <returnTemp>>$6: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0n_2" -> "bb::ControlFlow#orZero0n_1" [style="bold"];
    "bb::ControlFlow#orZero0n_3" [
        label = "block[id=3](<U a>: Integer)\l<U <returnMethodTemp>>$2: T.noreturn = return <U a>: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0n_3" -> "bb::ControlFlow#orZero0n_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero1n" {
    label = "::ControlFlow#orZero1n";
    color = blue;
    "bb::ControlFlow#orZero1n_0" [shape = invhouse];
    "bb::ControlFlow#orZero1n_1" [shape = parallelogram];

    "bb::ControlFlow#orZero1n_0" [
        label = "block[id=0]()\l<U a>: T.nilable(Integer) = load_arg(ControlFlow#orZero1n#a)\l<U <statTemp>>$6: T.class_of(Integer) = alias <C <U Integer>>\l<U <statTemp>>$4: T.any(TrueClass, FalseClass) = <U a>: T.nilable(Integer).<U is_a?>(<U <statTemp>>$6: T.class_of(Integer))\l<U b>: T.any(TrueClass, FalseClass) = <U <statTemp>>$4: T.any(TrueClass, FalseClass).<U !>()\l<U b>: T.any(TrueClass, FalseClass)\l"
    ];

    "bb::ControlFlow#orZero1n_0" -> "bb::ControlFlow#orZero1n_2" [style="bold"];
    "bb::ControlFlow#orZero1n_0" -> "bb::ControlFlow#orZero1n_3" [style="tapered"];

    "bb::ControlFlow#orZero1n_1" [
        label = "block[id=1](<U <returnMethodTemp>>$2)\l<U <finalReturn>> = return <U <returnMethodTemp>>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero1n_1" -> "bb::ControlFlow#orZero1n_1" [style="bold"];
    "bb::ControlFlow#orZero1n_2" [
        label = "block[id=2]()\l<U <returnTemp>>$8: Integer(0) = 0\l<U <returnMethodTemp>>$2: T.noreturn = return <U <returnTemp>>$8: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero1n_2" -> "bb::ControlFlow#orZero1n_1" [style="bold"];
    "bb::ControlFlow#orZero1n_3" [
        label = "block[id=3](<U a>: Integer)\l<U <returnMethodTemp>>$2: T.noreturn = return <U a>: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero1n_3" -> "bb::ControlFlow#orZero1n_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero2" {
    label = "::ControlFlow#orZero2";
    color = blue;
    "bb::ControlFlow#orZero2_0" [shape = invhouse];
    "bb::ControlFlow#orZero2_1" [shape = parallelogram];

    "bb::ControlFlow#orZero2_0" [
        label = "block[id=0]()\l<U a>: T.nilable(Integer) = load_arg(ControlFlow#orZero2#a)\l<U a>: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero2_0" -> "bb::ControlFlow#orZero2_4" [style="bold"];
    "bb::ControlFlow#orZero2_0" -> "bb::ControlFlow#orZero2_3" [style="tapered"];

    "bb::ControlFlow#orZero2_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero2_1" -> "bb::ControlFlow#orZero2_1" [style="bold"];
    "bb::ControlFlow#orZero2_3" [
        label = "block[id=3]()\l<U a>: Integer(0) = 0\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero2_3" -> "bb::ControlFlow#orZero2_4" [style="bold"];
    "bb::ControlFlow#orZero2_4" [
        label = "block[id=4](<U a>: Integer)\l<U <returnMethodTemp>>$2: Integer = <U a>\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero2_4" -> "bb::ControlFlow#orZero2_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero3" {
    label = "::ControlFlow#orZero3";
    color = blue;
    "bb::ControlFlow#orZero3_0" [shape = invhouse];
    "bb::ControlFlow#orZero3_1" [shape = parallelogram];

    "bb::ControlFlow#orZero3_0" [
        label = "block[id=0]()\l<U a>: T.nilable(Integer) = load_arg(ControlFlow#orZero3#a)\l<U a>: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero3_0" -> "bb::ControlFlow#orZero3_2" [style="bold"];
    "bb::ControlFlow#orZero3_0" -> "bb::ControlFlow#orZero3_3" [style="tapered"];

    "bb::ControlFlow#orZero3_1" [
        label = "block[id=1](<U <returnMethodTemp>>$2)\l<U <finalReturn>> = return <U <returnMethodTemp>>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3_1" -> "bb::ControlFlow#orZero3_1" [style="bold"];
    "bb::ControlFlow#orZero3_2" [
        label = "block[id=2]()\l<U <statTemp>>$5: Integer(1) = 1\l<U <statTemp>>$6: Integer(2) = 2\l<U <ifTemp>>$3: T.any(TrueClass, FalseClass) = <U <statTemp>>$5: Integer(1).<U ==>(<U <statTemp>>$6: Integer(2))\l<U <ifTemp>>$3: T.any(TrueClass, FalseClass)\l"
    ];

    "bb::ControlFlow#orZero3_2" -> "bb::ControlFlow#orZero3_5" [style="bold"];
    "bb::ControlFlow#orZero3_2" -> "bb::ControlFlow#orZero3_6" [style="tapered"];

    "bb::ControlFlow#orZero3_3" [
        label = "block[id=3](<U a>: NilClass)\l<U <ifTemp>>$3: NilClass = <U a>\l<U <ifTemp>>$3: NilClass\l"
    ];

    "bb::ControlFlow#orZero3_3" -> "bb::ControlFlow#orZero3_5" [style="bold"];
    "bb::ControlFlow#orZero3_3" -> "bb::ControlFlow#orZero3_6" [style="tapered"];

    "bb::ControlFlow#orZero3_5" [
        label = "block[id=5]()\l<U <returnTemp>>$7: Integer(1) = 1\l<U <returnMethodTemp>>$2: T.noreturn = return <U <returnTemp>>$7: Integer(1)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3_5" -> "bb::ControlFlow#orZero3_1" [style="bold"];
    "bb::ControlFlow#orZero3_6" [
        label = "block[id=6]()\l<U <returnTemp>>$8: Integer(0) = 0\l<U <returnMethodTemp>>$2: T.noreturn = return <U <returnTemp>>$8: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3_6" -> "bb::ControlFlow#orZero3_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero3n" {
    label = "::ControlFlow#orZero3n";
    color = blue;
    "bb::ControlFlow#orZero3n_0" [shape = invhouse];
    "bb::ControlFlow#orZero3n_1" [shape = parallelogram];

    "bb::ControlFlow#orZero3n_0" [
        label = "block[id=0]()\l<U a>: T.nilable(Integer) = load_arg(ControlFlow#orZero3n#a)\l<U a>: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero3n_0" -> "bb::ControlFlow#orZero3n_2" [style="bold"];
    "bb::ControlFlow#orZero3n_0" -> "bb::ControlFlow#orZero3n_3" [style="tapered"];

    "bb::ControlFlow#orZero3n_1" [
        label = "block[id=1](<U <returnMethodTemp>>$2)\l<U <finalReturn>> = return <U <returnMethodTemp>>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_1" -> "bb::ControlFlow#orZero3n_1" [style="bold"];
    "bb::ControlFlow#orZero3n_2" [
        label = "block[id=2]()\l<U <statTemp>>$6: Integer(1) = 1\l<U <statTemp>>$7: Integer(2) = 2\l<U <statTemp>>$4: T.any(TrueClass, FalseClass) = <U <statTemp>>$6: Integer(1).<U ==>(<U <statTemp>>$7: Integer(2))\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_2" -> "bb::ControlFlow#orZero3n_4" [style="bold"];
    "bb::ControlFlow#orZero3n_3" [
        label = "block[id=3](<U a>: NilClass)\l<U <statTemp>>$4: NilClass = <U a>\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_3" -> "bb::ControlFlow#orZero3n_4" [style="bold"];
    "bb::ControlFlow#orZero3n_4" [
        label = "block[id=4](<U <statTemp>>$4: T.nilable(T.any(TrueClass, FalseClass)))\l<U b>: T.any(TrueClass, FalseClass) = <U <statTemp>>$4: T.nilable(T.any(TrueClass, FalseClass)).<U !>()\l<U b>: T.any(TrueClass, FalseClass)\l"
    ];

    "bb::ControlFlow#orZero3n_4" -> "bb::ControlFlow#orZero3n_5" [style="bold"];
    "bb::ControlFlow#orZero3n_4" -> "bb::ControlFlow#orZero3n_6" [style="tapered"];

    "bb::ControlFlow#orZero3n_5" [
        label = "block[id=5]()\l<U <returnTemp>>$9: Integer(0) = 0\l<U <returnMethodTemp>>$2: T.noreturn = return <U <returnTemp>>$9: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_5" -> "bb::ControlFlow#orZero3n_1" [style="bold"];
    "bb::ControlFlow#orZero3n_6" [
        label = "block[id=6]()\l<U <returnTemp>>$10: Integer(1) = 1\l<U <returnMethodTemp>>$2: T.noreturn = return <U <returnTemp>>$10: Integer(1)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_6" -> "bb::ControlFlow#orZero3n_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero4" {
    label = "::ControlFlow#orZero4";
    color = blue;
    "bb::ControlFlow#orZero4_0" [shape = invhouse];
    "bb::ControlFlow#orZero4_1" [shape = parallelogram];

    "bb::ControlFlow#orZero4_0" [
        label = "block[id=0]()\l<U a>: T.nilable(Integer) = load_arg(ControlFlow#orZero4#a)\l<U a>: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero4_0" -> "bb::ControlFlow#orZero4_2" [style="bold"];
    "bb::ControlFlow#orZero4_0" -> "bb::ControlFlow#orZero4_3" [style="tapered"];

    "bb::ControlFlow#orZero4_1" [
        label = "block[id=1](<U <returnMethodTemp>>$2)\l<U <finalReturn>> = return <U <returnMethodTemp>>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero4_1" -> "bb::ControlFlow#orZero4_1" [style="bold"];
    "bb::ControlFlow#orZero4_2" [
        label = "block[id=2](<U a>: Integer)\l<U <ifTemp>>$3: Integer = <U a>\l<U <ifTemp>>$3: Integer\l"
    ];

    "bb::ControlFlow#orZero4_2" -> "bb::ControlFlow#orZero4_5" [style="bold"];
    "bb::ControlFlow#orZero4_2" -> "bb::ControlFlow#orZero4_6" [style="tapered"];

    "bb::ControlFlow#orZero4_3" [
        label = "block[id=3](<U a>: NilClass)\l<U <ifTemp>>$3: TrueClass = true\l<U <ifTemp>>$3: TrueClass\l"
    ];

    "bb::ControlFlow#orZero4_3" -> "bb::ControlFlow#orZero4_5" [style="bold"];
    "bb::ControlFlow#orZero4_3" -> "bb::ControlFlow#orZero4_6" [style="tapered"];

    "bb::ControlFlow#orZero4_5" [
        label = "block[id=5](<U a>: T.nilable(Integer))\l<U <returnMethodTemp>>$2: T.noreturn = return <U a>: T.nilable(Integer)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero4_5" -> "bb::ControlFlow#orZero4_1" [style="bold"];
    "bb::ControlFlow#orZero4_6" [
        label = "block[id=6]()\l<U <returnTemp>>$6 = 0\l<U <returnMethodTemp>>$2 = return <U <returnTemp>>$6\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero4_6" -> "bb::ControlFlow#orZero4_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero5" {
    label = "::ControlFlow#orZero5";
    color = blue;
    "bb::ControlFlow#orZero5_0" [shape = invhouse];
    "bb::ControlFlow#orZero5_1" [shape = parallelogram];

    "bb::ControlFlow#orZero5_0" [
        label = "block[id=0]()\l<U a>: T.nilable(Integer) = load_arg(ControlFlow#orZero5#a)\l<U a>: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero5_0" -> "bb::ControlFlow#orZero5_2" [style="bold"];
    "bb::ControlFlow#orZero5_0" -> "bb::ControlFlow#orZero5_3" [style="tapered"];

    "bb::ControlFlow#orZero5_1" [
        label = "block[id=1](<U <returnMethodTemp>>$2)\l<U <finalReturn>> = return <U <returnMethodTemp>>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero5_1" -> "bb::ControlFlow#orZero5_1" [style="bold"];
    "bb::ControlFlow#orZero5_2" [
        label = "block[id=2](<U a>: Integer)\l<U <ifTemp>>$3: TrueClass = true\l<U <ifTemp>>$3: TrueClass\l"
    ];

    "bb::ControlFlow#orZero5_2" -> "bb::ControlFlow#orZero5_5" [style="bold"];
    "bb::ControlFlow#orZero5_2" -> "bb::ControlFlow#orZero5_6" [style="tapered"];

    "bb::ControlFlow#orZero5_3" [
        label = "block[id=3](<U a>: NilClass)\l<U <ifTemp>>$3: NilClass = <U a>\l<U <ifTemp>>$3: NilClass\l"
    ];

    "bb::ControlFlow#orZero5_3" -> "bb::ControlFlow#orZero5_5" [style="bold"];
    "bb::ControlFlow#orZero5_3" -> "bb::ControlFlow#orZero5_6" [style="tapered"];

    "bb::ControlFlow#orZero5_5" [
        label = "block[id=5](<U a>: Integer)\l<U <returnMethodTemp>>$2: T.noreturn = return <U a>: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero5_5" -> "bb::ControlFlow#orZero5_1" [style="bold"];
    "bb::ControlFlow#orZero5_6" [
        label = "block[id=6]()\l<U <returnTemp>>$6: Integer(0) = 0\l<U <returnMethodTemp>>$2: T.noreturn = return <U <returnTemp>>$6: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero5_6" -> "bb::ControlFlow#orZero5_1" [style="bold"];
}

subgraph "cluster_::<Class:ControlFlow>#<static-init>" {
    label = "::<Class:ControlFlow>#<static-init>";
    color = blue;
    "bb::<Class:ControlFlow>#<static-init>_0" [shape = invhouse];
    "bb::<Class:ControlFlow>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:ControlFlow>#<static-init>_0" [
        label = "block[id=0]()\l<U <statTemp>>$4: T.class_of(ControlFlow) = self\l<U <block-pre-call-temp>>$5: RubyTyper::Void = <U <statTemp>>$4: T.class_of(ControlFlow).<U sig>()\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_0" -> "bb::<Class:ControlFlow>#<static-init>_2" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_1" -> "bb::<Class:ControlFlow>#<static-init>_1" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_2" [
        label = "block[id=2]()\louterLoops: 1\l<U <block-call>>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_2" -> "bb::<Class:ControlFlow>#<static-init>_5" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_2" -> "bb::<Class:ControlFlow>#<static-init>_3" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_3" [
        label = "block[id=3]()\l<U <statTemp>>$3: RubyTyper::Void = Solve<::<Class:ControlFlow>#<static-init>#<block>>\l<U <statTemp>>$21: T.class_of(ControlFlow) = self\l<U <block-pre-call-temp>>$22: RubyTyper::Void = <U <statTemp>>$21: T.class_of(ControlFlow).<U sig>()\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_3" -> "bb::<Class:ControlFlow>#<static-init>_6" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_5" [
        label = "block[id=5]()\louterLoops: 1\l<U <statTemp>>$10: Sorbet::Private::Builder = self\l<U <hashTemp>>$12: Symbol(:\"a\") = :\"a\"\l<U <statTemp>>$14: T.class_of(T) = alias <C <U T>>\l<U <statTemp>>$15: T.class_of(Integer) = alias <C <U Integer>>\l<U <statTemp>>$16: T.class_of(NilClass) = alias <C <U NilClass>>\l<U <hashTemp>>$13: <Type: T.nilable(Integer)> = <U <statTemp>>$14: T.class_of(T).<U any>(<U <statTemp>>$15: T.class_of(Integer), <U <statTemp>>$16: T.class_of(NilClass))\l<U <magic>>$17: T.class_of(<Magic>) = alias <C <U <Magic>>>\l<U <statTemp>>$11: {a: <Type: T.nilable(Integer)>} = <U <magic>>$17: T.class_of(<Magic>).<U <build-hash>>(<U <hashTemp>>$12: Symbol(:\"a\"), <U <hashTemp>>$13: <Type: T.nilable(Integer)>)\l<U <statTemp>>$9: Sorbet::Private::Builder = <U <statTemp>>$10: Sorbet::Private::Builder.<U params>(<U <statTemp>>$11: {a: <Type: T.nilable(Integer)>})\l<U <statTemp>>$18: T.class_of(Integer) = alias <C <U Integer>>\l<U <blockReturnTemp>>$8: Sorbet::Private::Builder = <U <statTemp>>$9: Sorbet::Private::Builder.<U returns>(<U <statTemp>>$18: T.class_of(Integer))\l<U <blockReturnTemp>>$19: T.noreturn = blockreturn<::<Class:ControlFlow>#<static-init>#<block>> <U <blockReturnTemp>>$8: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_5" -> "bb::<Class:ControlFlow>#<static-init>_2" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_6" [
        label = "block[id=6]()\louterLoops: 1\l<U <block-call>>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_6" -> "bb::<Class:ControlFlow>#<static-init>_9" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_6" -> "bb::<Class:ControlFlow>#<static-init>_7" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_7" [
        label = "block[id=7]()\l<U <statTemp>>$20: RubyTyper::Void = Solve<::<Class:ControlFlow>#<static-init>#<block>>\l<U <statTemp>>$35: T.class_of(ControlFlow) = self\l<U <block-pre-call-temp>>$36: RubyTyper::Void = <U <statTemp>>$35: T.class_of(ControlFlow).<U sig>()\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_7" -> "bb::<Class:ControlFlow>#<static-init>_10" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_9" [
        label = "block[id=9]()\louterLoops: 1\l<U <statTemp>>$27: Sorbet::Private::Builder = self\l<U <hashTemp>>$29: Symbol(:\"a\") = :\"a\"\l<U <hashTemp>>$30: T.class_of(Integer) = alias <C <U Integer>>\l<U <magic>>$31: T.class_of(<Magic>) = alias <C <U <Magic>>>\l<U <statTemp>>$28: {a: T.class_of(Integer)} = <U <magic>>$31: T.class_of(<Magic>).<U <build-hash>>(<U <hashTemp>>$29: Symbol(:\"a\"), <U <hashTemp>>$30: T.class_of(Integer))\l<U <statTemp>>$26: Sorbet::Private::Builder = <U <statTemp>>$27: Sorbet::Private::Builder.<U params>(<U <statTemp>>$28: {a: T.class_of(Integer)})\l<U <statTemp>>$32: T.class_of(Integer) = alias <C <U Integer>>\l<U <blockReturnTemp>>$25: Sorbet::Private::Builder = <U <statTemp>>$26: Sorbet::Private::Builder.<U returns>(<U <statTemp>>$32: T.class_of(Integer))\l<U <blockReturnTemp>>$33: T.noreturn = blockreturn<::<Class:ControlFlow>#<static-init>#<block>> <U <blockReturnTemp>>$25: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_9" -> "bb::<Class:ControlFlow>#<static-init>_6" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_10" [
        label = "block[id=10]()\louterLoops: 1\l<U <block-call>>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_10" -> "bb::<Class:ControlFlow>#<static-init>_13" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_10" -> "bb::<Class:ControlFlow>#<static-init>_11" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_11" [
        label = "block[id=11]()\l<U <statTemp>>$34: RubyTyper::Void = Solve<::<Class:ControlFlow>#<static-init>#<block>>\l<U <statTemp>>$52: T.class_of(ControlFlow) = self\l<U <block-pre-call-temp>>$53: RubyTyper::Void = <U <statTemp>>$52: T.class_of(ControlFlow).<U sig>()\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_11" -> "bb::<Class:ControlFlow>#<static-init>_14" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_13" [
        label = "block[id=13]()\louterLoops: 1\l<U <statTemp>>$41: Sorbet::Private::Builder = self\l<U <hashTemp>>$43: Symbol(:\"a\") = :\"a\"\l<U <statTemp>>$45: T.class_of(T) = alias <C <U T>>\l<U <statTemp>>$46: T.class_of(Integer) = alias <C <U Integer>>\l<U <statTemp>>$47: T.class_of(NilClass) = alias <C <U NilClass>>\l<U <hashTemp>>$44: <Type: T.nilable(Integer)> = <U <statTemp>>$45: T.class_of(T).<U any>(<U <statTemp>>$46: T.class_of(Integer), <U <statTemp>>$47: T.class_of(NilClass))\l<U <magic>>$48: T.class_of(<Magic>) = alias <C <U <Magic>>>\l<U <statTemp>>$42: {a: <Type: T.nilable(Integer)>} = <U <magic>>$48: T.class_of(<Magic>).<U <build-hash>>(<U <hashTemp>>$43: Symbol(:\"a\"), <U <hashTemp>>$44: <Type: T.nilable(Integer)>)\l<U <statTemp>>$40: Sorbet::Private::Builder = <U <statTemp>>$41: Sorbet::Private::Builder.<U params>(<U <statTemp>>$42: {a: <Type: T.nilable(Integer)>})\l<U <statTemp>>$49: T.class_of(Integer) = alias <C <U Integer>>\l<U <blockReturnTemp>>$39: Sorbet::Private::Builder = <U <statTemp>>$40: Sorbet::Private::Builder.<U returns>(<U <statTemp>>$49: T.class_of(Integer))\l<U <blockReturnTemp>>$50: T.noreturn = blockreturn<::<Class:ControlFlow>#<static-init>#<block>> <U <blockReturnTemp>>$39: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_13" -> "bb::<Class:ControlFlow>#<static-init>_10" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_14" [
        label = "block[id=14]()\louterLoops: 1\l<U <block-call>>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_14" -> "bb::<Class:ControlFlow>#<static-init>_17" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_14" -> "bb::<Class:ControlFlow>#<static-init>_15" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_15" [
        label = "block[id=15]()\l<U <statTemp>>$51: RubyTyper::Void = Solve<::<Class:ControlFlow>#<static-init>#<block>>\l<U <statTemp>>$69: T.class_of(ControlFlow) = self\l<U <block-pre-call-temp>>$70: RubyTyper::Void = <U <statTemp>>$69: T.class_of(ControlFlow).<U sig>()\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_15" -> "bb::<Class:ControlFlow>#<static-init>_18" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_17" [
        label = "block[id=17]()\louterLoops: 1\l<U <statTemp>>$58: Sorbet::Private::Builder = self\l<U <hashTemp>>$60: Symbol(:\"a\") = :\"a\"\l<U <statTemp>>$62: T.class_of(T) = alias <C <U T>>\l<U <statTemp>>$63: T.class_of(Integer) = alias <C <U Integer>>\l<U <statTemp>>$64: T.class_of(NilClass) = alias <C <U NilClass>>\l<U <hashTemp>>$61: <Type: T.nilable(Integer)> = <U <statTemp>>$62: T.class_of(T).<U any>(<U <statTemp>>$63: T.class_of(Integer), <U <statTemp>>$64: T.class_of(NilClass))\l<U <magic>>$65: T.class_of(<Magic>) = alias <C <U <Magic>>>\l<U <statTemp>>$59: {a: <Type: T.nilable(Integer)>} = <U <magic>>$65: T.class_of(<Magic>).<U <build-hash>>(<U <hashTemp>>$60: Symbol(:\"a\"), <U <hashTemp>>$61: <Type: T.nilable(Integer)>)\l<U <statTemp>>$57: Sorbet::Private::Builder = <U <statTemp>>$58: Sorbet::Private::Builder.<U params>(<U <statTemp>>$59: {a: <Type: T.nilable(Integer)>})\l<U <statTemp>>$66: T.class_of(Integer) = alias <C <U Integer>>\l<U <blockReturnTemp>>$56: Sorbet::Private::Builder = <U <statTemp>>$57: Sorbet::Private::Builder.<U returns>(<U <statTemp>>$66: T.class_of(Integer))\l<U <blockReturnTemp>>$67: T.noreturn = blockreturn<::<Class:ControlFlow>#<static-init>#<block>> <U <blockReturnTemp>>$56: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_17" -> "bb::<Class:ControlFlow>#<static-init>_14" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_18" [
        label = "block[id=18]()\louterLoops: 1\l<U <block-call>>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_18" -> "bb::<Class:ControlFlow>#<static-init>_21" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_18" -> "bb::<Class:ControlFlow>#<static-init>_19" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_19" [
        label = "block[id=19]()\l<U <statTemp>>$68: RubyTyper::Void = Solve<::<Class:ControlFlow>#<static-init>#<block>>\l<U <statTemp>>$86: T.class_of(ControlFlow) = self\l<U <block-pre-call-temp>>$87: RubyTyper::Void = <U <statTemp>>$86: T.class_of(ControlFlow).<U sig>()\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_19" -> "bb::<Class:ControlFlow>#<static-init>_22" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_21" [
        label = "block[id=21]()\louterLoops: 1\l<U <statTemp>>$75: Sorbet::Private::Builder = self\l<U <hashTemp>>$77: Symbol(:\"a\") = :\"a\"\l<U <statTemp>>$79: T.class_of(T) = alias <C <U T>>\l<U <statTemp>>$80: T.class_of(Integer) = alias <C <U Integer>>\l<U <statTemp>>$81: T.class_of(NilClass) = alias <C <U NilClass>>\l<U <hashTemp>>$78: <Type: T.nilable(Integer)> = <U <statTemp>>$79: T.class_of(T).<U any>(<U <statTemp>>$80: T.class_of(Integer), <U <statTemp>>$81: T.class_of(NilClass))\l<U <magic>>$82: T.class_of(<Magic>) = alias <C <U <Magic>>>\l<U <statTemp>>$76: {a: <Type: T.nilable(Integer)>} = <U <magic>>$82: T.class_of(<Magic>).<U <build-hash>>(<U <hashTemp>>$77: Symbol(:\"a\"), <U <hashTemp>>$78: <Type: T.nilable(Integer)>)\l<U <statTemp>>$74: Sorbet::Private::Builder = <U <statTemp>>$75: Sorbet::Private::Builder.<U params>(<U <statTemp>>$76: {a: <Type: T.nilable(Integer)>})\l<U <statTemp>>$83: T.class_of(Integer) = alias <C <U Integer>>\l<U <blockReturnTemp>>$73: Sorbet::Private::Builder = <U <statTemp>>$74: Sorbet::Private::Builder.<U returns>(<U <statTemp>>$83: T.class_of(Integer))\l<U <blockReturnTemp>>$84: T.noreturn = blockreturn<::<Class:ControlFlow>#<static-init>#<block>> <U <blockReturnTemp>>$73: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_21" -> "bb::<Class:ControlFlow>#<static-init>_18" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_22" [
        label = "block[id=22]()\louterLoops: 1\l<U <block-call>>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_22" -> "bb::<Class:ControlFlow>#<static-init>_25" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_22" -> "bb::<Class:ControlFlow>#<static-init>_23" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_23" [
        label = "block[id=23]()\l<U <statTemp>>$85: RubyTyper::Void = Solve<::<Class:ControlFlow>#<static-init>#<block>>\l<U <statTemp>>$103: T.class_of(ControlFlow) = self\l<U <block-pre-call-temp>>$104: RubyTyper::Void = <U <statTemp>>$103: T.class_of(ControlFlow).<U sig>()\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_23" -> "bb::<Class:ControlFlow>#<static-init>_26" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_25" [
        label = "block[id=25]()\louterLoops: 1\l<U <statTemp>>$92: Sorbet::Private::Builder = self\l<U <hashTemp>>$94: Symbol(:\"a\") = :\"a\"\l<U <statTemp>>$96: T.class_of(T) = alias <C <U T>>\l<U <statTemp>>$97: T.class_of(Integer) = alias <C <U Integer>>\l<U <statTemp>>$98: T.class_of(NilClass) = alias <C <U NilClass>>\l<U <hashTemp>>$95: <Type: T.nilable(Integer)> = <U <statTemp>>$96: T.class_of(T).<U any>(<U <statTemp>>$97: T.class_of(Integer), <U <statTemp>>$98: T.class_of(NilClass))\l<U <magic>>$99: T.class_of(<Magic>) = alias <C <U <Magic>>>\l<U <statTemp>>$93: {a: <Type: T.nilable(Integer)>} = <U <magic>>$99: T.class_of(<Magic>).<U <build-hash>>(<U <hashTemp>>$94: Symbol(:\"a\"), <U <hashTemp>>$95: <Type: T.nilable(Integer)>)\l<U <statTemp>>$91: Sorbet::Private::Builder = <U <statTemp>>$92: Sorbet::Private::Builder.<U params>(<U <statTemp>>$93: {a: <Type: T.nilable(Integer)>})\l<U <statTemp>>$100: T.class_of(Integer) = alias <C <U Integer>>\l<U <blockReturnTemp>>$90: Sorbet::Private::Builder = <U <statTemp>>$91: Sorbet::Private::Builder.<U returns>(<U <statTemp>>$100: T.class_of(Integer))\l<U <blockReturnTemp>>$101: T.noreturn = blockreturn<::<Class:ControlFlow>#<static-init>#<block>> <U <blockReturnTemp>>$90: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_25" -> "bb::<Class:ControlFlow>#<static-init>_22" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_26" [
        label = "block[id=26]()\louterLoops: 1\l<U <block-call>>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_26" -> "bb::<Class:ControlFlow>#<static-init>_29" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_26" -> "bb::<Class:ControlFlow>#<static-init>_27" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_27" [
        label = "block[id=27]()\l<U <statTemp>>$102: RubyTyper::Void = Solve<::<Class:ControlFlow>#<static-init>#<block>>\l<U <statTemp>>$120: T.class_of(ControlFlow) = self\l<U <block-pre-call-temp>>$121: RubyTyper::Void = <U <statTemp>>$120: T.class_of(ControlFlow).<U sig>()\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_27" -> "bb::<Class:ControlFlow>#<static-init>_30" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_29" [
        label = "block[id=29]()\louterLoops: 1\l<U <statTemp>>$109: Sorbet::Private::Builder = self\l<U <hashTemp>>$111: Symbol(:\"a\") = :\"a\"\l<U <statTemp>>$113: T.class_of(T) = alias <C <U T>>\l<U <statTemp>>$114: T.class_of(Integer) = alias <C <U Integer>>\l<U <statTemp>>$115: T.class_of(NilClass) = alias <C <U NilClass>>\l<U <hashTemp>>$112: <Type: T.nilable(Integer)> = <U <statTemp>>$113: T.class_of(T).<U any>(<U <statTemp>>$114: T.class_of(Integer), <U <statTemp>>$115: T.class_of(NilClass))\l<U <magic>>$116: T.class_of(<Magic>) = alias <C <U <Magic>>>\l<U <statTemp>>$110: {a: <Type: T.nilable(Integer)>} = <U <magic>>$116: T.class_of(<Magic>).<U <build-hash>>(<U <hashTemp>>$111: Symbol(:\"a\"), <U <hashTemp>>$112: <Type: T.nilable(Integer)>)\l<U <statTemp>>$108: Sorbet::Private::Builder = <U <statTemp>>$109: Sorbet::Private::Builder.<U params>(<U <statTemp>>$110: {a: <Type: T.nilable(Integer)>})\l<U <statTemp>>$117: T.class_of(Integer) = alias <C <U Integer>>\l<U <blockReturnTemp>>$107: Sorbet::Private::Builder = <U <statTemp>>$108: Sorbet::Private::Builder.<U returns>(<U <statTemp>>$117: T.class_of(Integer))\l<U <blockReturnTemp>>$118: T.noreturn = blockreturn<::<Class:ControlFlow>#<static-init>#<block>> <U <blockReturnTemp>>$107: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_29" -> "bb::<Class:ControlFlow>#<static-init>_26" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_30" [
        label = "block[id=30]()\louterLoops: 1\l<U <block-call>>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_30" -> "bb::<Class:ControlFlow>#<static-init>_33" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_30" -> "bb::<Class:ControlFlow>#<static-init>_31" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_31" [
        label = "block[id=31]()\l<U <statTemp>>$119: RubyTyper::Void = Solve<::<Class:ControlFlow>#<static-init>#<block>>\l<U <statTemp>>$137: T.class_of(ControlFlow) = self\l<U <block-pre-call-temp>>$138: RubyTyper::Void = <U <statTemp>>$137: T.class_of(ControlFlow).<U sig>()\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_31" -> "bb::<Class:ControlFlow>#<static-init>_34" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_33" [
        label = "block[id=33]()\louterLoops: 1\l<U <statTemp>>$126: Sorbet::Private::Builder = self\l<U <hashTemp>>$128: Symbol(:\"a\") = :\"a\"\l<U <statTemp>>$130: T.class_of(T) = alias <C <U T>>\l<U <statTemp>>$131: T.class_of(Integer) = alias <C <U Integer>>\l<U <statTemp>>$132: T.class_of(NilClass) = alias <C <U NilClass>>\l<U <hashTemp>>$129: <Type: T.nilable(Integer)> = <U <statTemp>>$130: T.class_of(T).<U any>(<U <statTemp>>$131: T.class_of(Integer), <U <statTemp>>$132: T.class_of(NilClass))\l<U <magic>>$133: T.class_of(<Magic>) = alias <C <U <Magic>>>\l<U <statTemp>>$127: {a: <Type: T.nilable(Integer)>} = <U <magic>>$133: T.class_of(<Magic>).<U <build-hash>>(<U <hashTemp>>$128: Symbol(:\"a\"), <U <hashTemp>>$129: <Type: T.nilable(Integer)>)\l<U <statTemp>>$125: Sorbet::Private::Builder = <U <statTemp>>$126: Sorbet::Private::Builder.<U params>(<U <statTemp>>$127: {a: <Type: T.nilable(Integer)>})\l<U <statTemp>>$134: T.class_of(Integer) = alias <C <U Integer>>\l<U <blockReturnTemp>>$124: Sorbet::Private::Builder = <U <statTemp>>$125: Sorbet::Private::Builder.<U returns>(<U <statTemp>>$134: T.class_of(Integer))\l<U <blockReturnTemp>>$135: T.noreturn = blockreturn<::<Class:ControlFlow>#<static-init>#<block>> <U <blockReturnTemp>>$124: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_33" -> "bb::<Class:ControlFlow>#<static-init>_30" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_34" [
        label = "block[id=34]()\louterLoops: 1\l<U <block-call>>: NilClass\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_34" -> "bb::<Class:ControlFlow>#<static-init>_37" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_34" -> "bb::<Class:ControlFlow>#<static-init>_35" [style="tapered"];

    "bb::<Class:ControlFlow>#<static-init>_35" [
        label = "block[id=35]()\l<U <statTemp>>$136: RubyTyper::Void = Solve<::<Class:ControlFlow>#<static-init>#<block>>\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_35" -> "bb::<Class:ControlFlow>#<static-init>_1" [style="bold"];
    "bb::<Class:ControlFlow>#<static-init>_37" [
        label = "block[id=37]()\louterLoops: 1\l<U <statTemp>>$143: Sorbet::Private::Builder = self\l<U <hashTemp>>$145: Symbol(:\"a\") = :\"a\"\l<U <statTemp>>$147: T.class_of(T) = alias <C <U T>>\l<U <statTemp>>$148: T.class_of(Integer) = alias <C <U Integer>>\l<U <statTemp>>$149: T.class_of(NilClass) = alias <C <U NilClass>>\l<U <hashTemp>>$146: <Type: T.nilable(Integer)> = <U <statTemp>>$147: T.class_of(T).<U any>(<U <statTemp>>$148: T.class_of(Integer), <U <statTemp>>$149: T.class_of(NilClass))\l<U <magic>>$150: T.class_of(<Magic>) = alias <C <U <Magic>>>\l<U <statTemp>>$144: {a: <Type: T.nilable(Integer)>} = <U <magic>>$150: T.class_of(<Magic>).<U <build-hash>>(<U <hashTemp>>$145: Symbol(:\"a\"), <U <hashTemp>>$146: <Type: T.nilable(Integer)>)\l<U <statTemp>>$142: Sorbet::Private::Builder = <U <statTemp>>$143: Sorbet::Private::Builder.<U params>(<U <statTemp>>$144: {a: <Type: T.nilable(Integer)>})\l<U <statTemp>>$151: T.class_of(Integer) = alias <C <U Integer>>\l<U <blockReturnTemp>>$141: Sorbet::Private::Builder = <U <statTemp>>$142: Sorbet::Private::Builder.<U returns>(<U <statTemp>>$151: T.class_of(Integer))\l<U <blockReturnTemp>>$152: T.noreturn = blockreturn<::<Class:ControlFlow>#<static-init>#<block>> <U <blockReturnTemp>>$141: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::<Class:ControlFlow>#<static-init>_37" -> "bb::<Class:ControlFlow>#<static-init>_34" [style="bold"];
}

}

