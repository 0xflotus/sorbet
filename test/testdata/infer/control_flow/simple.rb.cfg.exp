digraph "simple.rb" {
subgraph "cluster_::ControlFlow#orZero0" {
    label = "::ControlFlow#orZero0";
    color = blue;
    "bb::ControlFlow#orZero0_0" [shape = invhouse];
    "bb::ControlFlow#orZero0_1" [shape = parallelogram];

    "bb::ControlFlow#orZero0_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3: ControlFlow = self\la: T.nilable(Integer) = load_arg(<selfMethodTemp>$3, ControlFlow#orZero0#a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero0_0" -> "bb::ControlFlow#orZero0_2" [style="bold"];
    "bb::ControlFlow#orZero0_0" -> "bb::ControlFlow#orZero0_3" [style="tapered"];

    "bb::ControlFlow#orZero0_1" [
        label = "block[id=1](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0_1" -> "bb::ControlFlow#orZero0_1" [style="bold"];
    "bb::ControlFlow#orZero0_2" [
        label = "block[id=2](a: Integer)\l<returnMethodTemp>$2: <impossible> = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0_2" -> "bb::ControlFlow#orZero0_1" [style="bold"];
    "bb::ControlFlow#orZero0_3" [
        label = "block[id=3]()\l<returnTemp>$6: Integer(0) = 0\l<returnMethodTemp>$2: <impossible> = return <returnTemp>$6: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0_3" -> "bb::ControlFlow#orZero0_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero0a" {
    label = "::ControlFlow#orZero0a";
    color = blue;
    "bb::ControlFlow#orZero0a_0" [shape = invhouse];
    "bb::ControlFlow#orZero0a_1" [shape = parallelogram];

    "bb::ControlFlow#orZero0a_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3: ControlFlow = self\la: Integer = load_arg(<selfMethodTemp>$3, ControlFlow#orZero0a#a)\la: Integer\l"
    ];

    "bb::ControlFlow#orZero0a_0" -> "bb::ControlFlow#orZero0a_2" [style="bold"];
    "bb::ControlFlow#orZero0a_0" -> "bb::ControlFlow#orZero0a_3" [style="tapered"];

    "bb::ControlFlow#orZero0a_1" [
        label = "block[id=1](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0a_1" -> "bb::ControlFlow#orZero0a_1" [style="bold"];
    "bb::ControlFlow#orZero0a_2" [
        label = "block[id=2](a: Integer)\l<returnMethodTemp>$2: <impossible> = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0a_2" -> "bb::ControlFlow#orZero0a_1" [style="bold"];
    "bb::ControlFlow#orZero0a_3" [
        label = "block[id=3]()\l<returnTemp>$6 = 0\l<returnMethodTemp>$2 = return <returnTemp>$6\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0a_3" -> "bb::ControlFlow#orZero0a_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero0n" {
    label = "::ControlFlow#orZero0n";
    color = blue;
    "bb::ControlFlow#orZero0n_0" [shape = invhouse];
    "bb::ControlFlow#orZero0n_1" [shape = parallelogram];

    "bb::ControlFlow#orZero0n_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3: ControlFlow = self\la: T.nilable(Integer) = load_arg(<selfMethodTemp>$3, ControlFlow#orZero0n#a)\lb: T.any(TrueClass, FalseClass) = a: T.nilable(Integer).!()\lb: T.any(TrueClass, FalseClass)\l"
    ];

    "bb::ControlFlow#orZero0n_0" -> "bb::ControlFlow#orZero0n_2" [style="bold"];
    "bb::ControlFlow#orZero0n_0" -> "bb::ControlFlow#orZero0n_3" [style="tapered"];

    "bb::ControlFlow#orZero0n_1" [
        label = "block[id=1](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0n_1" -> "bb::ControlFlow#orZero0n_1" [style="bold"];
    "bb::ControlFlow#orZero0n_2" [
        label = "block[id=2]()\l<returnTemp>$7: Integer(0) = 0\l<returnMethodTemp>$2: <impossible> = return <returnTemp>$7: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0n_2" -> "bb::ControlFlow#orZero0n_1" [style="bold"];
    "bb::ControlFlow#orZero0n_3" [
        label = "block[id=3](a: Integer)\l<returnMethodTemp>$2: <impossible> = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero0n_3" -> "bb::ControlFlow#orZero0n_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero1n" {
    label = "::ControlFlow#orZero1n";
    color = blue;
    "bb::ControlFlow#orZero1n_0" [shape = invhouse];
    "bb::ControlFlow#orZero1n_1" [shape = parallelogram];

    "bb::ControlFlow#orZero1n_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3: ControlFlow = self\la: T.nilable(Integer) = load_arg(<selfMethodTemp>$3, ControlFlow#orZero1n#a)\l<statTemp>$7: <Class:Integer> = alias <constant:Integer>\l<statTemp>$5: T.any(TrueClass, FalseClass) = a: T.nilable(Integer).is_a?(<statTemp>$7: <Class:Integer>)\lb: T.any(TrueClass, FalseClass) = <statTemp>$5: T.any(TrueClass, FalseClass).!()\lb: T.any(TrueClass, FalseClass)\l"
    ];

    "bb::ControlFlow#orZero1n_0" -> "bb::ControlFlow#orZero1n_2" [style="bold"];
    "bb::ControlFlow#orZero1n_0" -> "bb::ControlFlow#orZero1n_3" [style="tapered"];

    "bb::ControlFlow#orZero1n_1" [
        label = "block[id=1](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero1n_1" -> "bb::ControlFlow#orZero1n_1" [style="bold"];
    "bb::ControlFlow#orZero1n_2" [
        label = "block[id=2]()\l<returnTemp>$9: Integer(0) = 0\l<returnMethodTemp>$2: <impossible> = return <returnTemp>$9: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero1n_2" -> "bb::ControlFlow#orZero1n_1" [style="bold"];
    "bb::ControlFlow#orZero1n_3" [
        label = "block[id=3](a: Integer)\l<returnMethodTemp>$2: <impossible> = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero1n_3" -> "bb::ControlFlow#orZero1n_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero2" {
    label = "::ControlFlow#orZero2";
    color = blue;
    "bb::ControlFlow#orZero2_0" [shape = invhouse];
    "bb::ControlFlow#orZero2_1" [shape = parallelogram];

    "bb::ControlFlow#orZero2_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3: ControlFlow = self\la: T.nilable(Integer) = load_arg(<selfMethodTemp>$3, ControlFlow#orZero2#a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero2_0" -> "bb::ControlFlow#orZero2_4" [style="bold"];
    "bb::ControlFlow#orZero2_0" -> "bb::ControlFlow#orZero2_3" [style="tapered"];

    "bb::ControlFlow#orZero2_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero2_1" -> "bb::ControlFlow#orZero2_1" [style="bold"];
    "bb::ControlFlow#orZero2_3" [
        label = "block[id=3]()\la: Integer(0) = 0\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero2_3" -> "bb::ControlFlow#orZero2_4" [style="bold"];
    "bb::ControlFlow#orZero2_4" [
        label = "block[id=4](a: Integer)\l<returnMethodTemp>$2: Integer = a\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero2_4" -> "bb::ControlFlow#orZero2_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero3" {
    label = "::ControlFlow#orZero3";
    color = blue;
    "bb::ControlFlow#orZero3_0" [shape = invhouse];
    "bb::ControlFlow#orZero3_1" [shape = parallelogram];

    "bb::ControlFlow#orZero3_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3: ControlFlow = self\la: T.nilable(Integer) = load_arg(<selfMethodTemp>$3, ControlFlow#orZero3#a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero3_0" -> "bb::ControlFlow#orZero3_2" [style="bold"];
    "bb::ControlFlow#orZero3_0" -> "bb::ControlFlow#orZero3_3" [style="tapered"];

    "bb::ControlFlow#orZero3_1" [
        label = "block[id=1](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3_1" -> "bb::ControlFlow#orZero3_1" [style="bold"];
    "bb::ControlFlow#orZero3_2" [
        label = "block[id=2]()\l<statTemp>$6: Integer(1) = 1\l<statTemp>$7: Integer(2) = 2\l<ifTemp>$4: T.any(TrueClass, FalseClass) = <statTemp>$6: Integer(1).==(<statTemp>$7: Integer(2))\l<ifTemp>$4: T.any(TrueClass, FalseClass)\l"
    ];

    "bb::ControlFlow#orZero3_2" -> "bb::ControlFlow#orZero3_5" [style="bold"];
    "bb::ControlFlow#orZero3_2" -> "bb::ControlFlow#orZero3_6" [style="tapered"];

    "bb::ControlFlow#orZero3_3" [
        label = "block[id=3](a: NilClass)\l<ifTemp>$4: NilClass = a\l<ifTemp>$4: NilClass\l"
    ];

    "bb::ControlFlow#orZero3_3" -> "bb::ControlFlow#orZero3_5" [style="bold"];
    "bb::ControlFlow#orZero3_3" -> "bb::ControlFlow#orZero3_6" [style="tapered"];

    "bb::ControlFlow#orZero3_5" [
        label = "block[id=5]()\l<returnTemp>$8: Integer(1) = 1\l<returnMethodTemp>$2: <impossible> = return <returnTemp>$8: Integer(1)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3_5" -> "bb::ControlFlow#orZero3_1" [style="bold"];
    "bb::ControlFlow#orZero3_6" [
        label = "block[id=6]()\l<returnTemp>$9: Integer(0) = 0\l<returnMethodTemp>$2: <impossible> = return <returnTemp>$9: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3_6" -> "bb::ControlFlow#orZero3_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero3n" {
    label = "::ControlFlow#orZero3n";
    color = blue;
    "bb::ControlFlow#orZero3n_0" [shape = invhouse];
    "bb::ControlFlow#orZero3n_1" [shape = parallelogram];

    "bb::ControlFlow#orZero3n_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3: ControlFlow = self\la: T.nilable(Integer) = load_arg(<selfMethodTemp>$3, ControlFlow#orZero3n#a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero3n_0" -> "bb::ControlFlow#orZero3n_2" [style="bold"];
    "bb::ControlFlow#orZero3n_0" -> "bb::ControlFlow#orZero3n_3" [style="tapered"];

    "bb::ControlFlow#orZero3n_1" [
        label = "block[id=1](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_1" -> "bb::ControlFlow#orZero3n_1" [style="bold"];
    "bb::ControlFlow#orZero3n_2" [
        label = "block[id=2]()\l<statTemp>$7: Integer(1) = 1\l<statTemp>$8: Integer(2) = 2\l<statTemp>$5: T.any(TrueClass, FalseClass) = <statTemp>$7: Integer(1).==(<statTemp>$8: Integer(2))\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_2" -> "bb::ControlFlow#orZero3n_4" [style="bold"];
    "bb::ControlFlow#orZero3n_3" [
        label = "block[id=3](a: NilClass)\l<statTemp>$5: NilClass = a\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_3" -> "bb::ControlFlow#orZero3n_4" [style="bold"];
    "bb::ControlFlow#orZero3n_4" [
        label = "block[id=4](<statTemp>$5: T.nilable(T.any(TrueClass, FalseClass)))\lb: T.any(TrueClass, FalseClass) = <statTemp>$5: T.nilable(T.any(TrueClass, FalseClass)).!()\lb: T.any(TrueClass, FalseClass)\l"
    ];

    "bb::ControlFlow#orZero3n_4" -> "bb::ControlFlow#orZero3n_5" [style="bold"];
    "bb::ControlFlow#orZero3n_4" -> "bb::ControlFlow#orZero3n_6" [style="tapered"];

    "bb::ControlFlow#orZero3n_5" [
        label = "block[id=5]()\l<returnTemp>$10: Integer(0) = 0\l<returnMethodTemp>$2: <impossible> = return <returnTemp>$10: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_5" -> "bb::ControlFlow#orZero3n_1" [style="bold"];
    "bb::ControlFlow#orZero3n_6" [
        label = "block[id=6]()\l<returnTemp>$11: Integer(1) = 1\l<returnMethodTemp>$2: <impossible> = return <returnTemp>$11: Integer(1)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero3n_6" -> "bb::ControlFlow#orZero3n_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero4" {
    label = "::ControlFlow#orZero4";
    color = blue;
    "bb::ControlFlow#orZero4_0" [shape = invhouse];
    "bb::ControlFlow#orZero4_1" [shape = parallelogram];

    "bb::ControlFlow#orZero4_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3: ControlFlow = self\la: T.nilable(Integer) = load_arg(<selfMethodTemp>$3, ControlFlow#orZero4#a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero4_0" -> "bb::ControlFlow#orZero4_2" [style="bold"];
    "bb::ControlFlow#orZero4_0" -> "bb::ControlFlow#orZero4_3" [style="tapered"];

    "bb::ControlFlow#orZero4_1" [
        label = "block[id=1](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero4_1" -> "bb::ControlFlow#orZero4_1" [style="bold"];
    "bb::ControlFlow#orZero4_2" [
        label = "block[id=2](a: Integer)\l<ifTemp>$4: Integer = a\l<ifTemp>$4: Integer\l"
    ];

    "bb::ControlFlow#orZero4_2" -> "bb::ControlFlow#orZero4_5" [style="bold"];
    "bb::ControlFlow#orZero4_2" -> "bb::ControlFlow#orZero4_6" [style="tapered"];

    "bb::ControlFlow#orZero4_3" [
        label = "block[id=3](a: NilClass)\l<ifTemp>$4: TrueClass = true\l<ifTemp>$4: TrueClass\l"
    ];

    "bb::ControlFlow#orZero4_3" -> "bb::ControlFlow#orZero4_5" [style="bold"];
    "bb::ControlFlow#orZero4_3" -> "bb::ControlFlow#orZero4_6" [style="tapered"];

    "bb::ControlFlow#orZero4_5" [
        label = "block[id=5](a: T.nilable(Integer))\l<returnMethodTemp>$2: <impossible> = return a: T.nilable(Integer)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero4_5" -> "bb::ControlFlow#orZero4_1" [style="bold"];
    "bb::ControlFlow#orZero4_6" [
        label = "block[id=6]()\l<returnTemp>$7 = 0\l<returnMethodTemp>$2 = return <returnTemp>$7\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero4_6" -> "bb::ControlFlow#orZero4_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#orZero5" {
    label = "::ControlFlow#orZero5";
    color = blue;
    "bb::ControlFlow#orZero5_0" [shape = invhouse];
    "bb::ControlFlow#orZero5_1" [shape = parallelogram];

    "bb::ControlFlow#orZero5_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3: ControlFlow = self\la: T.nilable(Integer) = load_arg(<selfMethodTemp>$3, ControlFlow#orZero5#a)\la: T.nilable(Integer)\l"
    ];

    "bb::ControlFlow#orZero5_0" -> "bb::ControlFlow#orZero5_2" [style="bold"];
    "bb::ControlFlow#orZero5_0" -> "bb::ControlFlow#orZero5_3" [style="tapered"];

    "bb::ControlFlow#orZero5_1" [
        label = "block[id=1](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero5_1" -> "bb::ControlFlow#orZero5_1" [style="bold"];
    "bb::ControlFlow#orZero5_2" [
        label = "block[id=2](a: Integer)\l<ifTemp>$4: TrueClass = true\l<ifTemp>$4: TrueClass\l"
    ];

    "bb::ControlFlow#orZero5_2" -> "bb::ControlFlow#orZero5_5" [style="bold"];
    "bb::ControlFlow#orZero5_2" -> "bb::ControlFlow#orZero5_6" [style="tapered"];

    "bb::ControlFlow#orZero5_3" [
        label = "block[id=3](a: NilClass)\l<ifTemp>$4: NilClass = a\l<ifTemp>$4: NilClass\l"
    ];

    "bb::ControlFlow#orZero5_3" -> "bb::ControlFlow#orZero5_5" [style="bold"];
    "bb::ControlFlow#orZero5_3" -> "bb::ControlFlow#orZero5_6" [style="tapered"];

    "bb::ControlFlow#orZero5_5" [
        label = "block[id=5](a: Integer)\l<returnMethodTemp>$2: <impossible> = return a: Integer\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero5_5" -> "bb::ControlFlow#orZero5_1" [style="bold"];
    "bb::ControlFlow#orZero5_6" [
        label = "block[id=6]()\l<returnTemp>$7: Integer(0) = 0\l<returnMethodTemp>$2: <impossible> = return <returnTemp>$7: Integer(0)\l<unconditional>\l"
    ];

    "bb::ControlFlow#orZero5_6" -> "bb::ControlFlow#orZero5_1" [style="bold"];
}

subgraph "cluster_::ControlFlow#<static-init>" {
    label = "::ControlFlow#<static-init>";
    color = blue;
    "bb::ControlFlow#<static-init>_0" [shape = invhouse];
    "bb::ControlFlow#<static-init>_1" [shape = parallelogram];

    "bb::ControlFlow#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$5: <Class:ControlFlow> = self\l<block-pre-call-temp>$6: Sorbet::Private::Builder = <statTemp>$5: <Class:ControlFlow>.sig()\l<unconditional>\l"
    ];

    "bb::ControlFlow#<static-init>_0" -> "bb::ControlFlow#<static-init>_2" [style="bold"];
    "bb::ControlFlow#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::ControlFlow#<static-init>_1" -> "bb::ControlFlow#<static-init>_1" [style="bold"];
    "bb::ControlFlow#<static-init>_2" [
        label = "block[id=2]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::ControlFlow#<static-init>_2" -> "bb::ControlFlow#<static-init>_4" [style="bold"];
    "bb::ControlFlow#<static-init>_2" -> "bb::ControlFlow#<static-init>_3" [style="tapered"];

    "bb::ControlFlow#<static-init>_3" [
        label = "block[id=3]()\l<statTemp>$4: T.untyped = Solve<::<Class:ControlFlow>#<block>>\l<statTemp>$22: <Class:ControlFlow> = self\l<block-pre-call-temp>$23: Sorbet::Private::Builder = <statTemp>$22: <Class:ControlFlow>.sig()\l<unconditional>\l"
    ];

    "bb::ControlFlow#<static-init>_3" -> "bb::ControlFlow#<static-init>_5" [style="bold"];
    "bb::ControlFlow#<static-init>_4" [
        label = "block[id=4]()\louterLoops: 1\l<statTemp>$11: Sorbet::Private::Builder = self\l<hashTemp>$13: Symbol(:\"a\") = :\"a\"\l<statTemp>$15: <Class:T> = alias <constant:T>\l<statTemp>$16: <Class:Integer> = alias <constant:Integer>\l<statTemp>$17: <Class:NilClass> = alias <constant:NilClass>\l<hashTemp>$14: <Type: T.nilable(Integer)> = <statTemp>$15: <Class:T>.any(<statTemp>$16: <Class:Integer>, <statTemp>$17: <Class:NilClass>)\l<magic>$18: <Magic> = alias <constant:<Magic>>\l<statTemp>$12: {a: <Type: T.nilable(Integer)>} = <magic>$18: <Magic>.<build-hash>(<hashTemp>$13: Symbol(:\"a\"), <hashTemp>$14: <Type: T.nilable(Integer)>)\l<statTemp>$10: Sorbet::Private::Builder = <statTemp>$11: Sorbet::Private::Builder.params(<statTemp>$12: {a: <Type: T.nilable(Integer)>})\l<statTemp>$19: <Class:Integer> = alias <constant:Integer>\l<blockReturnTemp>$9: Sorbet::Private::Builder = <statTemp>$10: Sorbet::Private::Builder.returns(<statTemp>$19: <Class:Integer>)\l<blockReturnTemp>$20: <impossible> = blockreturn<::<Class:ControlFlow>#<block>> <blockReturnTemp>$9: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::ControlFlow#<static-init>_4" -> "bb::ControlFlow#<static-init>_2" [style="bold"];
    "bb::ControlFlow#<static-init>_5" [
        label = "block[id=5]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::ControlFlow#<static-init>_5" -> "bb::ControlFlow#<static-init>_7" [style="bold"];
    "bb::ControlFlow#<static-init>_5" -> "bb::ControlFlow#<static-init>_6" [style="tapered"];

    "bb::ControlFlow#<static-init>_6" [
        label = "block[id=6]()\l<statTemp>$21: T.untyped = Solve<::<Class:ControlFlow>#<block>>\l<statTemp>$36: <Class:ControlFlow> = self\l<block-pre-call-temp>$37: Sorbet::Private::Builder = <statTemp>$36: <Class:ControlFlow>.sig()\l<unconditional>\l"
    ];

    "bb::ControlFlow#<static-init>_6" -> "bb::ControlFlow#<static-init>_8" [style="bold"];
    "bb::ControlFlow#<static-init>_7" [
        label = "block[id=7]()\louterLoops: 1\l<statTemp>$28: Sorbet::Private::Builder = self\l<hashTemp>$30: Symbol(:\"a\") = :\"a\"\l<hashTemp>$31: <Class:Integer> = alias <constant:Integer>\l<magic>$32: <Magic> = alias <constant:<Magic>>\l<statTemp>$29: {a: <Class:Integer>} = <magic>$32: <Magic>.<build-hash>(<hashTemp>$30: Symbol(:\"a\"), <hashTemp>$31: <Class:Integer>)\l<statTemp>$27: Sorbet::Private::Builder = <statTemp>$28: Sorbet::Private::Builder.params(<statTemp>$29: {a: <Class:Integer>})\l<statTemp>$33: <Class:Integer> = alias <constant:Integer>\l<blockReturnTemp>$26: Sorbet::Private::Builder = <statTemp>$27: Sorbet::Private::Builder.returns(<statTemp>$33: <Class:Integer>)\l<blockReturnTemp>$34: <impossible> = blockreturn<::<Class:ControlFlow>#<block>> <blockReturnTemp>$26: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::ControlFlow#<static-init>_7" -> "bb::ControlFlow#<static-init>_5" [style="bold"];
    "bb::ControlFlow#<static-init>_8" [
        label = "block[id=8]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::ControlFlow#<static-init>_8" -> "bb::ControlFlow#<static-init>_10" [style="bold"];
    "bb::ControlFlow#<static-init>_8" -> "bb::ControlFlow#<static-init>_9" [style="tapered"];

    "bb::ControlFlow#<static-init>_9" [
        label = "block[id=9]()\l<statTemp>$35: T.untyped = Solve<::<Class:ControlFlow>#<block>>\l<statTemp>$53: <Class:ControlFlow> = self\l<block-pre-call-temp>$54: Sorbet::Private::Builder = <statTemp>$53: <Class:ControlFlow>.sig()\l<unconditional>\l"
    ];

    "bb::ControlFlow#<static-init>_9" -> "bb::ControlFlow#<static-init>_11" [style="bold"];
    "bb::ControlFlow#<static-init>_10" [
        label = "block[id=10]()\louterLoops: 1\l<statTemp>$42: Sorbet::Private::Builder = self\l<hashTemp>$44: Symbol(:\"a\") = :\"a\"\l<statTemp>$46: <Class:T> = alias <constant:T>\l<statTemp>$47: <Class:Integer> = alias <constant:Integer>\l<statTemp>$48: <Class:NilClass> = alias <constant:NilClass>\l<hashTemp>$45: <Type: T.nilable(Integer)> = <statTemp>$46: <Class:T>.any(<statTemp>$47: <Class:Integer>, <statTemp>$48: <Class:NilClass>)\l<magic>$49: <Magic> = alias <constant:<Magic>>\l<statTemp>$43: {a: <Type: T.nilable(Integer)>} = <magic>$49: <Magic>.<build-hash>(<hashTemp>$44: Symbol(:\"a\"), <hashTemp>$45: <Type: T.nilable(Integer)>)\l<statTemp>$41: Sorbet::Private::Builder = <statTemp>$42: Sorbet::Private::Builder.params(<statTemp>$43: {a: <Type: T.nilable(Integer)>})\l<statTemp>$50: <Class:Integer> = alias <constant:Integer>\l<blockReturnTemp>$40: Sorbet::Private::Builder = <statTemp>$41: Sorbet::Private::Builder.returns(<statTemp>$50: <Class:Integer>)\l<blockReturnTemp>$51: <impossible> = blockreturn<::<Class:ControlFlow>#<block>> <blockReturnTemp>$40: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::ControlFlow#<static-init>_10" -> "bb::ControlFlow#<static-init>_8" [style="bold"];
    "bb::ControlFlow#<static-init>_11" [
        label = "block[id=11]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::ControlFlow#<static-init>_11" -> "bb::ControlFlow#<static-init>_13" [style="bold"];
    "bb::ControlFlow#<static-init>_11" -> "bb::ControlFlow#<static-init>_12" [style="tapered"];

    "bb::ControlFlow#<static-init>_12" [
        label = "block[id=12]()\l<statTemp>$52: T.untyped = Solve<::<Class:ControlFlow>#<block>>\l<statTemp>$70: <Class:ControlFlow> = self\l<block-pre-call-temp>$71: Sorbet::Private::Builder = <statTemp>$70: <Class:ControlFlow>.sig()\l<unconditional>\l"
    ];

    "bb::ControlFlow#<static-init>_12" -> "bb::ControlFlow#<static-init>_14" [style="bold"];
    "bb::ControlFlow#<static-init>_13" [
        label = "block[id=13]()\louterLoops: 1\l<statTemp>$59: Sorbet::Private::Builder = self\l<hashTemp>$61: Symbol(:\"a\") = :\"a\"\l<statTemp>$63: <Class:T> = alias <constant:T>\l<statTemp>$64: <Class:Integer> = alias <constant:Integer>\l<statTemp>$65: <Class:NilClass> = alias <constant:NilClass>\l<hashTemp>$62: <Type: T.nilable(Integer)> = <statTemp>$63: <Class:T>.any(<statTemp>$64: <Class:Integer>, <statTemp>$65: <Class:NilClass>)\l<magic>$66: <Magic> = alias <constant:<Magic>>\l<statTemp>$60: {a: <Type: T.nilable(Integer)>} = <magic>$66: <Magic>.<build-hash>(<hashTemp>$61: Symbol(:\"a\"), <hashTemp>$62: <Type: T.nilable(Integer)>)\l<statTemp>$58: Sorbet::Private::Builder = <statTemp>$59: Sorbet::Private::Builder.params(<statTemp>$60: {a: <Type: T.nilable(Integer)>})\l<statTemp>$67: <Class:Integer> = alias <constant:Integer>\l<blockReturnTemp>$57: Sorbet::Private::Builder = <statTemp>$58: Sorbet::Private::Builder.returns(<statTemp>$67: <Class:Integer>)\l<blockReturnTemp>$68: <impossible> = blockreturn<::<Class:ControlFlow>#<block>> <blockReturnTemp>$57: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::ControlFlow#<static-init>_13" -> "bb::ControlFlow#<static-init>_11" [style="bold"];
    "bb::ControlFlow#<static-init>_14" [
        label = "block[id=14]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::ControlFlow#<static-init>_14" -> "bb::ControlFlow#<static-init>_16" [style="bold"];
    "bb::ControlFlow#<static-init>_14" -> "bb::ControlFlow#<static-init>_15" [style="tapered"];

    "bb::ControlFlow#<static-init>_15" [
        label = "block[id=15]()\l<statTemp>$69: T.untyped = Solve<::<Class:ControlFlow>#<block>>\l<statTemp>$87: <Class:ControlFlow> = self\l<block-pre-call-temp>$88: Sorbet::Private::Builder = <statTemp>$87: <Class:ControlFlow>.sig()\l<unconditional>\l"
    ];

    "bb::ControlFlow#<static-init>_15" -> "bb::ControlFlow#<static-init>_17" [style="bold"];
    "bb::ControlFlow#<static-init>_16" [
        label = "block[id=16]()\louterLoops: 1\l<statTemp>$76: Sorbet::Private::Builder = self\l<hashTemp>$78: Symbol(:\"a\") = :\"a\"\l<statTemp>$80: <Class:T> = alias <constant:T>\l<statTemp>$81: <Class:Integer> = alias <constant:Integer>\l<statTemp>$82: <Class:NilClass> = alias <constant:NilClass>\l<hashTemp>$79: <Type: T.nilable(Integer)> = <statTemp>$80: <Class:T>.any(<statTemp>$81: <Class:Integer>, <statTemp>$82: <Class:NilClass>)\l<magic>$83: <Magic> = alias <constant:<Magic>>\l<statTemp>$77: {a: <Type: T.nilable(Integer)>} = <magic>$83: <Magic>.<build-hash>(<hashTemp>$78: Symbol(:\"a\"), <hashTemp>$79: <Type: T.nilable(Integer)>)\l<statTemp>$75: Sorbet::Private::Builder = <statTemp>$76: Sorbet::Private::Builder.params(<statTemp>$77: {a: <Type: T.nilable(Integer)>})\l<statTemp>$84: <Class:Integer> = alias <constant:Integer>\l<blockReturnTemp>$74: Sorbet::Private::Builder = <statTemp>$75: Sorbet::Private::Builder.returns(<statTemp>$84: <Class:Integer>)\l<blockReturnTemp>$85: <impossible> = blockreturn<::<Class:ControlFlow>#<block>> <blockReturnTemp>$74: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::ControlFlow#<static-init>_16" -> "bb::ControlFlow#<static-init>_14" [style="bold"];
    "bb::ControlFlow#<static-init>_17" [
        label = "block[id=17]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::ControlFlow#<static-init>_17" -> "bb::ControlFlow#<static-init>_19" [style="bold"];
    "bb::ControlFlow#<static-init>_17" -> "bb::ControlFlow#<static-init>_18" [style="tapered"];

    "bb::ControlFlow#<static-init>_18" [
        label = "block[id=18]()\l<statTemp>$86: T.untyped = Solve<::<Class:ControlFlow>#<block>>\l<statTemp>$104: <Class:ControlFlow> = self\l<block-pre-call-temp>$105: Sorbet::Private::Builder = <statTemp>$104: <Class:ControlFlow>.sig()\l<unconditional>\l"
    ];

    "bb::ControlFlow#<static-init>_18" -> "bb::ControlFlow#<static-init>_20" [style="bold"];
    "bb::ControlFlow#<static-init>_19" [
        label = "block[id=19]()\louterLoops: 1\l<statTemp>$93: Sorbet::Private::Builder = self\l<hashTemp>$95: Symbol(:\"a\") = :\"a\"\l<statTemp>$97: <Class:T> = alias <constant:T>\l<statTemp>$98: <Class:Integer> = alias <constant:Integer>\l<statTemp>$99: <Class:NilClass> = alias <constant:NilClass>\l<hashTemp>$96: <Type: T.nilable(Integer)> = <statTemp>$97: <Class:T>.any(<statTemp>$98: <Class:Integer>, <statTemp>$99: <Class:NilClass>)\l<magic>$100: <Magic> = alias <constant:<Magic>>\l<statTemp>$94: {a: <Type: T.nilable(Integer)>} = <magic>$100: <Magic>.<build-hash>(<hashTemp>$95: Symbol(:\"a\"), <hashTemp>$96: <Type: T.nilable(Integer)>)\l<statTemp>$92: Sorbet::Private::Builder = <statTemp>$93: Sorbet::Private::Builder.params(<statTemp>$94: {a: <Type: T.nilable(Integer)>})\l<statTemp>$101: <Class:Integer> = alias <constant:Integer>\l<blockReturnTemp>$91: Sorbet::Private::Builder = <statTemp>$92: Sorbet::Private::Builder.returns(<statTemp>$101: <Class:Integer>)\l<blockReturnTemp>$102: <impossible> = blockreturn<::<Class:ControlFlow>#<block>> <blockReturnTemp>$91: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::ControlFlow#<static-init>_19" -> "bb::ControlFlow#<static-init>_17" [style="bold"];
    "bb::ControlFlow#<static-init>_20" [
        label = "block[id=20]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::ControlFlow#<static-init>_20" -> "bb::ControlFlow#<static-init>_22" [style="bold"];
    "bb::ControlFlow#<static-init>_20" -> "bb::ControlFlow#<static-init>_21" [style="tapered"];

    "bb::ControlFlow#<static-init>_21" [
        label = "block[id=21]()\l<statTemp>$103: T.untyped = Solve<::<Class:ControlFlow>#<block>>\l<statTemp>$121: <Class:ControlFlow> = self\l<block-pre-call-temp>$122: Sorbet::Private::Builder = <statTemp>$121: <Class:ControlFlow>.sig()\l<unconditional>\l"
    ];

    "bb::ControlFlow#<static-init>_21" -> "bb::ControlFlow#<static-init>_23" [style="bold"];
    "bb::ControlFlow#<static-init>_22" [
        label = "block[id=22]()\louterLoops: 1\l<statTemp>$110: Sorbet::Private::Builder = self\l<hashTemp>$112: Symbol(:\"a\") = :\"a\"\l<statTemp>$114: <Class:T> = alias <constant:T>\l<statTemp>$115: <Class:Integer> = alias <constant:Integer>\l<statTemp>$116: <Class:NilClass> = alias <constant:NilClass>\l<hashTemp>$113: <Type: T.nilable(Integer)> = <statTemp>$114: <Class:T>.any(<statTemp>$115: <Class:Integer>, <statTemp>$116: <Class:NilClass>)\l<magic>$117: <Magic> = alias <constant:<Magic>>\l<statTemp>$111: {a: <Type: T.nilable(Integer)>} = <magic>$117: <Magic>.<build-hash>(<hashTemp>$112: Symbol(:\"a\"), <hashTemp>$113: <Type: T.nilable(Integer)>)\l<statTemp>$109: Sorbet::Private::Builder = <statTemp>$110: Sorbet::Private::Builder.params(<statTemp>$111: {a: <Type: T.nilable(Integer)>})\l<statTemp>$118: <Class:Integer> = alias <constant:Integer>\l<blockReturnTemp>$108: Sorbet::Private::Builder = <statTemp>$109: Sorbet::Private::Builder.returns(<statTemp>$118: <Class:Integer>)\l<blockReturnTemp>$119: <impossible> = blockreturn<::<Class:ControlFlow>#<block>> <blockReturnTemp>$108: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::ControlFlow#<static-init>_22" -> "bb::ControlFlow#<static-init>_20" [style="bold"];
    "bb::ControlFlow#<static-init>_23" [
        label = "block[id=23]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::ControlFlow#<static-init>_23" -> "bb::ControlFlow#<static-init>_25" [style="bold"];
    "bb::ControlFlow#<static-init>_23" -> "bb::ControlFlow#<static-init>_24" [style="tapered"];

    "bb::ControlFlow#<static-init>_24" [
        label = "block[id=24]()\l<statTemp>$120: T.untyped = Solve<::<Class:ControlFlow>#<block>>\l<statTemp>$138: <Class:ControlFlow> = self\l<block-pre-call-temp>$139: Sorbet::Private::Builder = <statTemp>$138: <Class:ControlFlow>.sig()\l<unconditional>\l"
    ];

    "bb::ControlFlow#<static-init>_24" -> "bb::ControlFlow#<static-init>_26" [style="bold"];
    "bb::ControlFlow#<static-init>_25" [
        label = "block[id=25]()\louterLoops: 1\l<statTemp>$127: Sorbet::Private::Builder = self\l<hashTemp>$129: Symbol(:\"a\") = :\"a\"\l<statTemp>$131: <Class:T> = alias <constant:T>\l<statTemp>$132: <Class:Integer> = alias <constant:Integer>\l<statTemp>$133: <Class:NilClass> = alias <constant:NilClass>\l<hashTemp>$130: <Type: T.nilable(Integer)> = <statTemp>$131: <Class:T>.any(<statTemp>$132: <Class:Integer>, <statTemp>$133: <Class:NilClass>)\l<magic>$134: <Magic> = alias <constant:<Magic>>\l<statTemp>$128: {a: <Type: T.nilable(Integer)>} = <magic>$134: <Magic>.<build-hash>(<hashTemp>$129: Symbol(:\"a\"), <hashTemp>$130: <Type: T.nilable(Integer)>)\l<statTemp>$126: Sorbet::Private::Builder = <statTemp>$127: Sorbet::Private::Builder.params(<statTemp>$128: {a: <Type: T.nilable(Integer)>})\l<statTemp>$135: <Class:Integer> = alias <constant:Integer>\l<blockReturnTemp>$125: Sorbet::Private::Builder = <statTemp>$126: Sorbet::Private::Builder.returns(<statTemp>$135: <Class:Integer>)\l<blockReturnTemp>$136: <impossible> = blockreturn<::<Class:ControlFlow>#<block>> <blockReturnTemp>$125: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::ControlFlow#<static-init>_25" -> "bb::ControlFlow#<static-init>_23" [style="bold"];
    "bb::ControlFlow#<static-init>_26" [
        label = "block[id=26]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::ControlFlow#<static-init>_26" -> "bb::ControlFlow#<static-init>_28" [style="bold"];
    "bb::ControlFlow#<static-init>_26" -> "bb::ControlFlow#<static-init>_27" [style="tapered"];

    "bb::ControlFlow#<static-init>_27" [
        label = "block[id=27]()\l<statTemp>$137: T.untyped = Solve<::<Class:ControlFlow>#<block>>\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::ControlFlow#<static-init>_27" -> "bb::ControlFlow#<static-init>_1" [style="bold"];
    "bb::ControlFlow#<static-init>_28" [
        label = "block[id=28]()\louterLoops: 1\l<statTemp>$144: Sorbet::Private::Builder = self\l<hashTemp>$146: Symbol(:\"a\") = :\"a\"\l<statTemp>$148: <Class:T> = alias <constant:T>\l<statTemp>$149: <Class:Integer> = alias <constant:Integer>\l<statTemp>$150: <Class:NilClass> = alias <constant:NilClass>\l<hashTemp>$147: <Type: T.nilable(Integer)> = <statTemp>$148: <Class:T>.any(<statTemp>$149: <Class:Integer>, <statTemp>$150: <Class:NilClass>)\l<magic>$151: <Magic> = alias <constant:<Magic>>\l<statTemp>$145: {a: <Type: T.nilable(Integer)>} = <magic>$151: <Magic>.<build-hash>(<hashTemp>$146: Symbol(:\"a\"), <hashTemp>$147: <Type: T.nilable(Integer)>)\l<statTemp>$143: Sorbet::Private::Builder = <statTemp>$144: Sorbet::Private::Builder.params(<statTemp>$145: {a: <Type: T.nilable(Integer)>})\l<statTemp>$152: <Class:Integer> = alias <constant:Integer>\l<blockReturnTemp>$142: Sorbet::Private::Builder = <statTemp>$143: Sorbet::Private::Builder.returns(<statTemp>$152: <Class:Integer>)\l<blockReturnTemp>$153: <impossible> = blockreturn<::<Class:ControlFlow>#<block>> <blockReturnTemp>$142: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::ControlFlow#<static-init>_28" -> "bb::ControlFlow#<static-init>_26" [style="bold"];
}

}

