digraph "redefines_object.rb" {
subgraph "cluster_#<static-init>" {
    label = "#<static-init>";
    color = blue;
    "bb#<static-init>_0" [shape = invhouse];
    "bb#<static-init>_1" [shape = parallelogram];

    "bb#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$6 = alias <constant:RubyTyper> : <Class:RubyTyper>\l<statTemp>$7 = alias <constant:Object> : <Class:Object>\l<statTemp>$5 = <statTemp>$6.keep_for_ide(<statTemp>$7) : T.untyped\l<statTemp>$10 = alias <constant:RubyTyper> : <Class:RubyTyper>\l<statTemp>$11 = alias <constant:Trigger> : <Class:Trigger>\l<statTemp>$9 = <statTemp>$10.keep_for_ide(<statTemp>$11) : T.untyped\l<statTemp>$14 = alias <constant:RubyTyper> : <Class:RubyTyper>\l<statTemp>$15 = alias <constant:Foo> : <Class:Foo>\l<statTemp>$13 = <statTemp>$14.keep_for_ide(<statTemp>$15) : T.untyped\l<statTemp>$17 = alias <constant:RubyTyper> : <Class:RubyTyper>\l<statTemp>$18 = alias <constant:Bar> : <Class:Bar>\l<statTemp>$16 = <statTemp>$17.keep_for_ide(<statTemp>$18) : T.untyped\l<statTemp>$21 = alias <constant:RubyTyper> : <Class:RubyTyper>\l<statTemp>$22 = alias <constant:Bar> : <Class:Bar>\l<statTemp>$20 = <statTemp>$21.keep_for_ide(<statTemp>$22) : T.untyped\l<statTemp>$24 = alias <constant:RubyTyper> : <Class:RubyTyper>\l<statTemp>$25 = alias <constant:Foo> : <Class:Foo>\l<statTemp>$23 = <statTemp>$24.keep_for_ide(<statTemp>$25) : T.untyped\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb#<static-init>_0" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb#<static-init>_1" -> "bb#<static-init>_1" [style="bold"];
}

subgraph "cluster_::Trigger#trigger" {
    label = "::Trigger#trigger";
    color = blue;
    "bb::Trigger#trigger_0" [shape = invhouse];
    "bb::Trigger#trigger_1" [shape = parallelogram];

    "bb::Trigger#trigger_0" [
        label = "block[id=0]()\l@__fake_logger$4 = alias @__fake_logger : T.untyped\l<returnMethodTemp>$2 = @__fake_logger$4 : T.untyped\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::Trigger#trigger_0" -> "bb::Trigger#trigger_1" [style="bold"];
    "bb::Trigger#trigger_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Trigger#trigger_1" -> "bb::Trigger#trigger_1" [style="bold"];
}

}

