digraph "redefines_object.rb" {
subgraph "cluster_#<static-init>" {
    label = "#<static-init>";
    color = blue;
    "bb#<static-init>_0" [shape = invhouse];
    "bb#<static-init>_1" [shape = parallelogram];

    "bb#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$5: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$6: T.class_of(Object) = alias <constant:Object>\l<statTemp>$4: RubyTyper::Void = <statTemp>$5: T.class_of(RubyTyper).keep_for_ide(<statTemp>$6: T.class_of(Object))\l<statTemp>$9: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$10: T.class_of(Trigger) = alias <constant:Trigger>\l<statTemp>$8: RubyTyper::Void = <statTemp>$9: T.class_of(RubyTyper).keep_for_ide(<statTemp>$10: T.class_of(Trigger))\l<statTemp>$13: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$14: T.class_of(Foo) = alias <constant:Foo>\l<statTemp>$12: RubyTyper::Void = <statTemp>$13: T.class_of(RubyTyper).keep_for_ide(<statTemp>$14: T.class_of(Foo))\l<statTemp>$16: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$17: T.class_of(Bar) = alias <constant:Bar>\l<statTemp>$15: RubyTyper::Void = <statTemp>$16: T.class_of(RubyTyper).keep_for_ide(<statTemp>$17: T.class_of(Bar))\l<statTemp>$20: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$21: T.class_of(Bar) = alias <constant:Bar>\l<statTemp>$19: RubyTyper::Void = <statTemp>$20: T.class_of(RubyTyper).keep_for_ide(<statTemp>$21: T.class_of(Bar))\l<statTemp>$23: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$24: T.class_of(Foo) = alias <constant:Foo>\l<statTemp>$22: RubyTyper::Void = <statTemp>$23: T.class_of(RubyTyper).keep_for_ide(<statTemp>$24: T.class_of(Foo))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb#<static-init>_0" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb#<static-init>_1" -> "bb#<static-init>_1" [style="bold"];
}

subgraph "cluster_::Trigger#trigger" {
    label = "::Trigger#trigger";
    color = blue;
    "bb::Trigger#trigger_0" [shape = invhouse];
    "bb::Trigger#trigger_1" [shape = parallelogram];

    "bb::Trigger#trigger_0" [
        label = "block[id=0]()\l@__fake_logger$3: T.untyped = alias <constant:<undeclared-field-stub>>\l<returnMethodTemp>$2: T.untyped = @__fake_logger$3\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::Trigger#trigger_0" -> "bb::Trigger#trigger_1" [style="bold"];
    "bb::Trigger#trigger_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Trigger#trigger_1" -> "bb::Trigger#trigger_1" [style="bold"];
}

}

