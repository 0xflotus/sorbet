class <emptyTree><<C <U <root>>>> < ()
  class <emptyTree>::<C <U NormalClass>><<C <U <todo sym>>>> < (::<todo sym>)
    def <U normal_method><<C <U <todo sym>>>>(&<U <blk>>)
      <emptyTree>
    end

    def self.<U normal_static_method><<C <U <todo sym>>>>(&<U <blk>>)
      <emptyTree>
    end

    class <emptyTree>::<C <U InnerClass>><<C <U <todo sym>>>> < (::<todo sym>)
      <emptyTree>
    end

    module <emptyTree>::<C <U InnerModule>><<C <U <todo sym>>>> < ()
      <emptyTree>
    end
  end

  module <emptyTree>::<C <U ANamespace>><<C <U <todo sym>>>> < ()
    class <emptyTree>::<C <U ObviousChild>><<C <U <todo sym>>>> < (::<todo sym>)
      <emptyTree>
    end
  end

  class <emptyTree>::<C <U ANamespace>>::<C <U ClassInNamespace>><<C <U <todo sym>>>> < (::<todo sym>)
    <emptyTree>
  end

  class <emptyTree>::<C <U Parent>><<C <U <todo sym>>>> < (::<todo sym>)
    <emptyTree>
  end

  module <emptyTree>::<C <U Mixin>><<C <U <todo sym>>>> < ()
    <emptyTree>
  end

  module <emptyTree>::<C <U OtherMixin>><<C <U <todo sym>>>> < ()
    <emptyTree>
  end

  class <emptyTree>::<C <U Child>><<C <U <todo sym>>>> < (<emptyTree>::<C <U Parent>>)
    self(<C <U <todo sym>>>).<U include>(<emptyTree>::<C <U Mixin>>)

    self(<C <U <todo sym>>>).<U include>(<emptyTree>)

    self(<C <U <todo sym>>>).<U include>(<emptyTree>::<C <U Mixin>>) do ||
      <emptyTree>
    end

    self(<C <U <todo sym>>>).<U whatever>().<U include>(<emptyTree>::<C <U OtherMixin>>)
  end
end
