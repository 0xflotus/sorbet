begin
  class <emptyTree><<constant:<root>>> < ()
    <emptyTree>

    <emptyTree>

    <emptyTree>

    <emptyTree>

    <emptyTree>

    <emptyTree>

    <emptyTree>

    def self.<static-init><<static-init>$74>()
      begin
        ::RubyTyper.keep_for_ide(::Parent)
        <emptyTree>
      end
    end
  end
  class ::NormalClass<<constant:NormalClass>> < (::<todo sym>)
    <emptyTree>

    <emptyTree>

    <emptyTree>

    <emptyTree>

    def normal_method<normal_method>()
      <emptyTree>
    end

    def self.normal_static_method<normal_static_method>()
      <emptyTree>
    end
  end
  class ::NormalClass::InnerClass<<constant:InnerClass>> < (::<todo sym>)  end
  module ::NormalClass::InnerModule<<constant:InnerModule>> < ()  end
  module ::ANamespace<<constant:ANamespace>> < ()
    <emptyTree>
  end
  class ::ANamespace::ObviousChild<<constant:ObviousChild>> < (::<todo sym>)  end
  class ::ANamespace::ClassInNamespace<<constant:ClassInNamespace>> < (::<todo sym>)  end
  class ::Parent<<constant:Parent>> < (::<todo sym>)  end
  module ::Mixin<<constant:Mixin>> < ()  end
  module ::OtherMixin<<constant:OtherMixin>> < ()  end
  class ::Child<<constant:Child>> < (::Parent, ::Mixin)
    def self.<static-init><<static-init>>()
      begin
        self(<singleton class:<constant:Child>>).include(3)
        self(<singleton class:<constant:Child>>).include(::Mixin) do ||
          <emptyTree>
        end
        self(<singleton class:<constant:Child>>).whatever().include(::OtherMixin)
        ::RubyTyper.keep_for_ide(::Mixin)
        <emptyTree>
      end
    end
  end
  <emptyTree>
end
