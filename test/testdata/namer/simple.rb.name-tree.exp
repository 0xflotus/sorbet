begin
  class <emptyTree><<constant:<root>>> < ()
    def self.<static-init><<static-init>$65>()
      begin
        <emptyTree>
        <emptyTree>
        <emptyTree>
        <emptyTree>
        <emptyTree>
        <emptyTree>
        <emptyTree>
      end
    end
  end
  class <emptyTree>::<constant:NormalClass><<constant:NormalClass>> < (::<todo sym>)
    <emptyTree>

    <emptyTree>

    <emptyTree>

    <emptyTree>

    def normal_method<normal_method>()
      <emptyTree>
    end

    def self.normal_static_method<normal_static_method>()
      <emptyTree>
    end
  end
  class <emptyTree>::<constant:InnerClass><<constant:InnerClass>> < (::<todo sym>)  end
  module <emptyTree>::<constant:InnerModule><<constant:InnerModule>> < ()  end
  module <emptyTree>::<constant:ANamespace><<constant:ANamespace>> < ()
    <emptyTree>
  end
  class <emptyTree>::<constant:ObviousChild><<constant:ObviousChild>> < (::<todo sym>)  end
  class <emptyTree>::<constant:ANamespace>::<constant:ClassInNamespace><<constant:ClassInNamespace>> < (::<todo sym>)  end
  class <emptyTree>::<constant:Parent><<constant:Parent>> < (::<todo sym>)  end
  module <emptyTree>::<constant:Mixin><<constant:Mixin>> < ()  end
  module <emptyTree>::<constant:OtherMixin><<constant:OtherMixin>> < ()  end
  class <emptyTree>::<constant:Child><<constant:Child>> < (::Parent, ::Mixin)
    def self.<static-init><<static-init>>()
      begin
        self(<singleton class:<constant:Child>>).include(3)
        self(<singleton class:<constant:Child>>).include(::Mixin) do ||
          <emptyTree>
        end
        self(<singleton class:<constant:Child>>).whatever().include(::OtherMixin)
        <emptyTree>
      end
    end
  end
  <emptyTree>
end
