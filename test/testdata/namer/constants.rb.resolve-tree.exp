begin
  class <emptyTree><<C <U <root>>>> < ()
    def self.<U <static-init>><<N <U <static-init>> $87>>(<blk>)
      begin
        begin
          ::RubyTyper.<U keep_for_ide>(::A)
          <emptyTree>
        end
        ::A::B::C
        ::A::B::D
        ::A
        <emptyTree>
      end
    end
  end
  module ::A<<C <U A>>> < ()
    def self.<U <static-init>><<U <static-init>>>(<blk>)
      begin
        ::A::B::C = 1
        begin
          ::RubyTyper.<U keep_for_ide>(::A::B)
          <emptyTree>
        end
        <emptyTree>
      end
    end
  end
  module ::A::B<<C <U B>>> < ()
    def self.<U <static-init>><<U <static-init>>>(<blk>)
      begin
        ::A::B::C
        ::A::B::D = 1
        <emptyTree>
      end
    end
  end
  <emptyTree>
end
