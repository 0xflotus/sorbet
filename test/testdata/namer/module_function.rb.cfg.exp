digraph "module_function.rb" {
subgraph "cluster_#<static-init>" {
    label = "#<static-init>";
    color = blue;
    "bb#<static-init>_0" [shape = invhouse];
    "bb#<static-init>_1" [shape = parallelogram];

    "bb#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$6: <Class:RubyTyper> = alias <constant:RubyTyper>\l<statTemp>$7: <Class:Funcs> = alias <constant:Funcs>\l<statTemp>$5: RubyTyper::Void = <statTemp>$6: <Class:RubyTyper>.keep_for_ide(<statTemp>$7: <Class:Funcs>)\l<statTemp>$10: <Class:RubyTyper> = alias <constant:RubyTyper>\l<statTemp>$11: <Class:C> = alias <constant:C>\l<statTemp>$9: RubyTyper::Void = <statTemp>$10: <Class:RubyTyper>.keep_for_ide(<statTemp>$11: <Class:C>)\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb#<static-init>_0" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb#<static-init>_1" -> "bb#<static-init>_1" [style="bold"];
}

subgraph "cluster_::Funcs#f" {
    label = "::Funcs#f";
    color = blue;
    "bb::Funcs#f_0" [shape = invhouse];
    "bb::Funcs#f_1" [shape = parallelogram];

    "bb::Funcs#f_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3: Funcs = self\lx: Integer = load_arg(<selfMethodTemp>$3, Funcs#f#x)\l<returnMethodTemp>$2: Integer = x\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: Integer\l<unconditional>\l"
    ];

    "bb::Funcs#f_0" -> "bb::Funcs#f_1" [style="bold"];
    "bb::Funcs#f_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Funcs#f_1" -> "bb::Funcs#f_1" [style="bold"];
}

subgraph "cluster_::Funcs#g" {
    label = "::Funcs#g";
    color = blue;
    "bb::Funcs#g_0" [shape = invhouse];
    "bb::Funcs#g_1" [shape = parallelogram];

    "bb::Funcs#g_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3: Funcs = self\ls: Symbol = load_arg(<selfMethodTemp>$3, Funcs#g#s)\l<returnMethodTemp>$2: Symbol = s\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: Symbol\l<unconditional>\l"
    ];

    "bb::Funcs#g_0" -> "bb::Funcs#g_1" [style="bold"];
    "bb::Funcs#g_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Funcs#g_1" -> "bb::Funcs#g_1" [style="bold"];
}

subgraph "cluster_::Funcs#h" {
    label = "::Funcs#h";
    color = blue;
    "bb::Funcs#h_0" [shape = invhouse];
    "bb::Funcs#h_1" [shape = parallelogram];

    "bb::Funcs#h_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3: Funcs = self\ls: String = load_arg(<selfMethodTemp>$3, Funcs#h#s)\l<returnMethodTemp>$2: String = s\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: String\l<unconditional>\l"
    ];

    "bb::Funcs#h_0" -> "bb::Funcs#h_1" [style="bold"];
    "bb::Funcs#h_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Funcs#h_1" -> "bb::Funcs#h_1" [style="bold"];
}

subgraph "cluster_::Funcs#<static-init>" {
    label = "::Funcs#<static-init>";
    color = blue;
    "bb::Funcs#<static-init>_0" [shape = invhouse];
    "bb::Funcs#<static-init>_1" [shape = parallelogram];

    "bb::Funcs#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$5: <Class:Funcs> = self\l<block-pre-call-temp>$6: Sorbet::Private::Builder = <statTemp>$5: <Class:Funcs>.sig()\l<unconditional>\l"
    ];

    "bb::Funcs#<static-init>_0" -> "bb::Funcs#<static-init>_2" [style="bold"];
    "bb::Funcs#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Funcs#<static-init>_1" -> "bb::Funcs#<static-init>_1" [style="bold"];
    "bb::Funcs#<static-init>_2" [
        label = "block[id=2]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::Funcs#<static-init>_2" -> "bb::Funcs#<static-init>_4" [style="bold"];
    "bb::Funcs#<static-init>_2" -> "bb::Funcs#<static-init>_3" [style="tapered"];

    "bb::Funcs#<static-init>_3" [
        label = "block[id=3]()\l<statTemp>$4: T.untyped = Solve<::<Class:Funcs>#<block>>\l<statTemp>$19: <Class:Funcs> = self\l<statTemp>$20: Symbol(:\"f\") = :\"f\"\l<statTemp>$18: <Class:Funcs> = <statTemp>$19: <Class:Funcs>.module_function(<statTemp>$20: Symbol(:\"f\"))\l<statTemp>$22: <Class:Funcs> = self\l<block-pre-call-temp>$23: Sorbet::Private::Builder = <statTemp>$22: <Class:Funcs>.sig()\l<unconditional>\l"
    ];

    "bb::Funcs#<static-init>_3" -> "bb::Funcs#<static-init>_5" [style="bold"];
    "bb::Funcs#<static-init>_4" [
        label = "block[id=4]()\louterLoops: 1\l<statTemp>$11: Sorbet::Private::Builder = self\l<hashTemp>$13: Symbol(:\"x\") = :\"x\"\l<hashTemp>$14: <Class:Integer> = alias <constant:Integer>\l<magic>$15: <Magic> = alias <constant:<Magic>>\l<statTemp>$12: {x: <Class:Integer>} = <magic>$15: <Magic>.<build-hash>(<hashTemp>$13: Symbol(:\"x\"), <hashTemp>$14: <Class:Integer>)\l<statTemp>$10: Sorbet::Private::Builder = <statTemp>$11: Sorbet::Private::Builder.params(<statTemp>$12: {x: <Class:Integer>})\l<statTemp>$16: <Class:Integer> = alias <constant:Integer>\l<blockReturnTemp>$9: Sorbet::Private::Builder = <statTemp>$10: Sorbet::Private::Builder.returns(<statTemp>$16: <Class:Integer>)\l<blockReturnTemp>$17: <impossible> = blockreturn<::<Class:Funcs>#<block>> <blockReturnTemp>$9: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::Funcs#<static-init>_4" -> "bb::Funcs#<static-init>_2" [style="bold"];
    "bb::Funcs#<static-init>_5" [
        label = "block[id=5]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::Funcs#<static-init>_5" -> "bb::Funcs#<static-init>_7" [style="bold"];
    "bb::Funcs#<static-init>_5" -> "bb::Funcs#<static-init>_6" [style="tapered"];

    "bb::Funcs#<static-init>_6" [
        label = "block[id=6]()\l<statTemp>$21: T.untyped = Solve<::<Class:Funcs>#<block>>\l<statTemp>$36: <Class:Funcs> = self\l<statTemp>$35: <Class:Funcs> = <statTemp>$36: <Class:Funcs>.module_function()\l<statTemp>$38: <Class:Funcs> = self\l<block-pre-call-temp>$39: Sorbet::Private::Builder = <statTemp>$38: <Class:Funcs>.sig()\l<unconditional>\l"
    ];

    "bb::Funcs#<static-init>_6" -> "bb::Funcs#<static-init>_8" [style="bold"];
    "bb::Funcs#<static-init>_7" [
        label = "block[id=7]()\louterLoops: 1\l<statTemp>$28: Sorbet::Private::Builder = self\l<hashTemp>$30: Symbol(:\"s\") = :\"s\"\l<hashTemp>$31: <Class:Symbol> = alias <constant:Symbol>\l<magic>$32: <Magic> = alias <constant:<Magic>>\l<statTemp>$29: {s: <Class:Symbol>} = <magic>$32: <Magic>.<build-hash>(<hashTemp>$30: Symbol(:\"s\"), <hashTemp>$31: <Class:Symbol>)\l<statTemp>$27: Sorbet::Private::Builder = <statTemp>$28: Sorbet::Private::Builder.params(<statTemp>$29: {s: <Class:Symbol>})\l<statTemp>$33: <Class:Symbol> = alias <constant:Symbol>\l<blockReturnTemp>$26: Sorbet::Private::Builder = <statTemp>$27: Sorbet::Private::Builder.returns(<statTemp>$33: <Class:Symbol>)\l<blockReturnTemp>$34: <impossible> = blockreturn<::<Class:Funcs>#<block>> <blockReturnTemp>$26: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::Funcs#<static-init>_7" -> "bb::Funcs#<static-init>_5" [style="bold"];
    "bb::Funcs#<static-init>_8" [
        label = "block[id=8]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::Funcs#<static-init>_8" -> "bb::Funcs#<static-init>_10" [style="bold"];
    "bb::Funcs#<static-init>_8" -> "bb::Funcs#<static-init>_9" [style="tapered"];

    "bb::Funcs#<static-init>_9" [
        label = "block[id=9]()\l<statTemp>$37: T.untyped = Solve<::<Class:Funcs>#<block>>\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::Funcs#<static-init>_9" -> "bb::Funcs#<static-init>_1" [style="bold"];
    "bb::Funcs#<static-init>_10" [
        label = "block[id=10]()\louterLoops: 1\l<statTemp>$44: Sorbet::Private::Builder = self\l<hashTemp>$46: Symbol(:\"s\") = :\"s\"\l<hashTemp>$47: <Class:String> = alias <constant:String>\l<magic>$48: <Magic> = alias <constant:<Magic>>\l<statTemp>$45: {s: <Class:String>} = <magic>$48: <Magic>.<build-hash>(<hashTemp>$46: Symbol(:\"s\"), <hashTemp>$47: <Class:String>)\l<statTemp>$43: Sorbet::Private::Builder = <statTemp>$44: Sorbet::Private::Builder.params(<statTemp>$45: {s: <Class:String>})\l<statTemp>$49: <Class:String> = alias <constant:String>\l<blockReturnTemp>$42: Sorbet::Private::Builder = <statTemp>$43: Sorbet::Private::Builder.returns(<statTemp>$49: <Class:String>)\l<blockReturnTemp>$50: <impossible> = blockreturn<::<Class:Funcs>#<block>> <blockReturnTemp>$42: Sorbet::Private::Builder\l<unconditional>\l"
    ];

    "bb::Funcs#<static-init>_10" -> "bb::Funcs#<static-init>_8" [style="bold"];
}

subgraph "cluster_::C#test_calls" {
    label = "::C#test_calls";
    color = blue;
    "bb::C#test_calls_0" [shape = invhouse];
    "bb::C#test_calls_1" [shape = parallelogram];

    "bb::C#test_calls_0" [
        label = "block[id=0]()\l<statTemp>$5: C = self\l<statTemp>$6: Integer(0) = 0\l<statTemp>$4: Integer = <statTemp>$5: C.f(<statTemp>$6: Integer(0))\l<statTemp>$8: <Class:Funcs> = alias <constant:Funcs>\l<statTemp>$9: Integer(0) = 0\l<statTemp>$7: Integer = <statTemp>$8: <Class:Funcs>.f(<statTemp>$9: Integer(0))\l<statTemp>$11: C = self\l<statTemp>$12: Symbol(:\"f\") = :\"f\"\l<statTemp>$10: Symbol = <statTemp>$11: C.g(<statTemp>$12: Symbol(:\"f\"))\l<statTemp>$14: <Class:Funcs> = alias <constant:Funcs>\l<statTemp>$15: Symbol(:\"f\") = :\"f\"\l<statTemp>$13: Symbol = <statTemp>$14: <Class:Funcs>.g(<statTemp>$15: Symbol(:\"f\"))\l<statTemp>$17: C = self\l<statTemp>$18: String(\"hello\") = \"hello\"\l<statTemp>$16: String = <statTemp>$17: C.h(<statTemp>$18: String(\"hello\"))\l<statTemp>$20: <Class:Funcs> = alias <constant:Funcs>\l<statTemp>$21: String(\"world\") = \"world\"\l<statTemp>$19: String = <statTemp>$20: <Class:Funcs>.h(<statTemp>$21: String(\"world\"))\l<statTemp>$22: <Class:C> = alias <constant:C>\l<returnMethodTemp>$2: T.untyped = <statTemp>$22: <Class:C>.f()\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::C#test_calls_0" -> "bb::C#test_calls_1" [style="bold"];
    "bb::C#test_calls_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::C#test_calls_1" -> "bb::C#test_calls_1" [style="bold"];
}

subgraph "cluster_::C#<static-init>" {
    label = "::C#<static-init>";
    color = blue;
    "bb::C#<static-init>_0" [shape = invhouse];
    "bb::C#<static-init>_1" [shape = parallelogram];

    "bb::C#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$4: <Class:RubyTyper> = alias <constant:RubyTyper>\l<statTemp>$5: <Class:Funcs> = alias <constant:Funcs>\l<returnMethodTemp>$2: RubyTyper::Void = <statTemp>$4: <Class:RubyTyper>.keep_for_ide(<statTemp>$5: <Class:Funcs>)\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: RubyTyper::Void\l<unconditional>\l"
    ];

    "bb::C#<static-init>_0" -> "bb::C#<static-init>_1" [style="bold"];
    "bb::C#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::C#<static-init>_1" -> "bb::C#<static-init>_1" [style="bold"];
}

}

