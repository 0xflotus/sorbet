digraph "yield.rb" {
subgraph "cluster_#<static-init>" {
    label = "#<static-init>";
    color = blue;
    "bb#<static-init>_0" [shape = invhouse];
    "bb#<static-init>_1" [shape = parallelogram];

    "bb#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$6: <Class:RubyTyper> = alias <constant:RubyTyper>\l<statTemp>$7: <Class:Main> = alias <constant:Main>\l<statTemp>$5: RubyTyper::Void = <statTemp>$6: <Class:RubyTyper>.keep_for_ide(<statTemp>$7: <Class:Main>)\l<statTemp>$10: <Class:Main> = alias <constant:Main>\l<statTemp>$9: Main = <statTemp>$10: <Class:Main>.new()\l<statTemp>$8: T.untyped = <statTemp>$9: Main.main()\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb#<static-init>_0" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb#<static-init>_1" -> "bb#<static-init>_1" [style="bold"];
}

subgraph "cluster_::Main#yielder" {
    label = "::Main#yielder";
    color = blue;
    "bb::Main#yielder_0" [shape = invhouse];
    "bb::Main#yielder_1" [shape = parallelogram];

    "bb::Main#yielder_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3: Main = self\l<blk>: T.untyped = load_arg(<selfMethodTemp>$3: Main#yielder, 0)\l<statTemp>$6: Integer(1) = 1\la: T.untyped = <blk>: T.untyped.call(<statTemp>$6: Integer(1))\l<returnMethodTemp>$2: T.untyped = <blk>: T.untyped.call(a: T.untyped)\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::Main#yielder_0" -> "bb::Main#yielder_1" [style="bold"];
    "bb::Main#yielder_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Main#yielder_1" -> "bb::Main#yielder_1" [style="bold"];
}

subgraph "cluster_::Main#blockpass" {
    label = "::Main#blockpass";
    color = blue;
    "bb::Main#blockpass_0" [shape = invhouse];
    "bb::Main#blockpass_1" [shape = parallelogram];

    "bb::Main#blockpass_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3: Main = self\lblk: T.untyped = load_arg(<selfMethodTemp>$3: Main#blockpass, 0)\l<statTemp>$6: Integer(1) = 1\la: T.untyped = blk: T.untyped.call(<statTemp>$6: Integer(1))\l<returnMethodTemp>$2: T.untyped = blk: T.untyped.call(a: T.untyped)\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::Main#blockpass_0" -> "bb::Main#blockpass_1" [style="bold"];
    "bb::Main#blockpass_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Main#blockpass_1" -> "bb::Main#blockpass_1" [style="bold"];
}

subgraph "cluster_::Main#mixed" {
    label = "::Main#mixed";
    color = blue;
    "bb::Main#mixed_0" [shape = invhouse];
    "bb::Main#mixed_1" [shape = parallelogram];

    "bb::Main#mixed_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3: Main = self\lblk: T.untyped = load_arg(<selfMethodTemp>$3: Main#mixed, 0)\l<statTemp>$6: Integer(1) = 1\la: T.untyped = blk: T.untyped.call(<statTemp>$6: Integer(1))\l<returnMethodTemp>$2: T.untyped = blk: T.untyped.call(a: T.untyped)\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::Main#mixed_0" -> "bb::Main#mixed_1" [style="bold"];
    "bb::Main#mixed_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Main#mixed_1" -> "bb::Main#mixed_1" [style="bold"];
}

subgraph "cluster_::Main#blockyield" {
    label = "::Main#blockyield";
    color = blue;
    "bb::Main#blockyield_0" [shape = invhouse];
    "bb::Main#blockyield_1" [shape = parallelogram];

    "bb::Main#blockyield_0" [
        label = "block[id=0]()\l<statTemp>$4: Main = self\l<block-pre-call-temp>$5: T.untyped = <statTemp>$4: Main.yielder()\l<unconditional>\l"
    ];

    "bb::Main#blockyield_0" -> "bb::Main#blockyield_2" [style="bold"];
    "bb::Main#blockyield_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Main#blockyield_1" -> "bb::Main#blockyield_1" [style="bold"];
    "bb::Main#blockyield_2" [
        label = "block[id=2]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::Main#blockyield_2" -> "bb::Main#blockyield_4" [style="bold"];
    "bb::Main#blockyield_2" -> "bb::Main#blockyield_3" [style="tapered"];

    "bb::Main#blockyield_3" [
        label = "block[id=3]()\l<returnMethodTemp>$2: T.untyped = Solve<::Main#blockyield#<block>>\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::Main#blockyield_3" -> "bb::Main#blockyield_1" [style="bold"];
    "bb::Main#blockyield_4" [
        label = "block[id=4]()\louterLoops: 1\l<blk>$6: [T.untyped, T.untyped] = load_yield_params(::Main#blockyield#<block>, Main#blockyield#<block>)\l<blk>$7: Integer(0) = 0\li$5: T.untyped = <blk>$6: [T.untyped, T.untyped].[](<blk>$7: Integer(0))\l<blk>$7: Integer(1) = 1\l<blk>$5: T.untyped = <blk>$6: [T.untyped, T.untyped].[](<blk>$7: Integer(1))\l<blockReturnTemp>$8: T.untyped = <blk>$5: T.untyped.call(i$5: T.untyped)\l<blockReturnTemp>$11: <impossible> = blockreturn<::Main#blockyield#<block>> <blockReturnTemp>$8: T.untyped\l<unconditional>\l"
    ];

    "bb::Main#blockyield_4" -> "bb::Main#blockyield_2" [style="bold"];
}

subgraph "cluster_::Main#main" {
    label = "::Main#main";
    color = blue;
    "bb::Main#main_0" [shape = invhouse];
    "bb::Main#main_1" [shape = parallelogram];

    "bb::Main#main_0" [
        label = "block[id=0]()\l<statTemp>$5: Main = self\l<block-pre-call-temp>$6: Proc1[T.untyped, T.untyped] = <statTemp>$5: Main.lambda()\l<unconditional>\l"
    ];

    "bb::Main#main_0" -> "bb::Main#main_2" [style="bold"];
    "bb::Main#main_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Main#main_1" -> "bb::Main#main_1" [style="bold"];
    "bb::Main#main_2" [
        label = "block[id=2]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::Main#main_2" -> "bb::Main#main_4" [style="bold"];
    "bb::Main#main_2" -> "bb::Main#main_3" [style="tapered"];

    "bb::Main#main_3" [
        label = "block[id=3]()\ll: Proc1[T.untyped, T.untyped] = Solve<::Main#main#<block>>\l<statTemp>$15: Main = self\l<block-pre-call-temp>$16: T.untyped = <statTemp>$15: Main.yielder()\l<unconditional>\l"
    ];

    "bb::Main#main_3" -> "bb::Main#main_5" [style="bold"];
    "bb::Main#main_4" [
        label = "block[id=4]()\louterLoops: 1\l<blk>$7: [T.untyped] = load_yield_params(::Main#main#<block>, Main#main#<block>)\l<blk>$8: Integer(0) = 0\lx$7: T.untyped = <blk>$7: [T.untyped].[](<blk>$8: Integer(0))\l<statTemp>$11: Main = self\l<statTemp>$10: NilClass = <statTemp>$11: Main.puts(x$7: T.untyped)\l<blockReturnTemp>$9: Integer(3) = 3\l<blockReturnTemp>$13: <impossible> = blockreturn<::Main#main#<block>> <blockReturnTemp>$9: Integer(3)\l<unconditional>\l"
    ];

    "bb::Main#main_4" -> "bb::Main#main_2" [style="bold"];
    "bb::Main#main_5" [
        label = "block[id=5](l: Proc1[T.untyped, T.untyped])\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::Main#main_5" -> "bb::Main#main_7" [style="bold"];
    "bb::Main#main_5" -> "bb::Main#main_6" [style="tapered"];

    "bb::Main#main_6" [
        label = "block[id=6](l: Proc1[T.untyped, T.untyped])\l<statTemp>$14: T.untyped = Solve<::Main#main#<block>>\l<statTemp>$23: Main = self\l<block-pre-call-temp>$24: T.untyped = <statTemp>$23: Main.blockpass()\l<unconditional>\l"
    ];

    "bb::Main#main_6" -> "bb::Main#main_8" [style="bold"];
    "bb::Main#main_7" [
        label = "block[id=7](l: Proc1[T.untyped, T.untyped])\louterLoops: 1\l<blk>$17: [T.untyped] = load_yield_params(::Main#main#<block>, Main#main#<block>)\l<blk>$18: Integer(0) = 0\l<block-pass>$2$8: T.untyped = <blk>$17: [T.untyped].[](<blk>$18: Integer(0))\l<blockReturnTemp>$19: Proc1[T.untyped, T.untyped] = l: Proc1[T.untyped, T.untyped].to_proc()\l<blockReturnTemp>$21: <impossible> = blockreturn<::Main#main#<block>> <blockReturnTemp>$19: Proc1[T.untyped, T.untyped]\l<unconditional>\l"
    ];

    "bb::Main#main_7" -> "bb::Main#main_5" [style="bold"];
    "bb::Main#main_8" [
        label = "block[id=8](l: Proc1[T.untyped, T.untyped])\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::Main#main_8" -> "bb::Main#main_10" [style="bold"];
    "bb::Main#main_8" -> "bb::Main#main_9" [style="tapered"];

    "bb::Main#main_9" [
        label = "block[id=9](l: Proc1[T.untyped, T.untyped])\l<statTemp>$22: T.untyped = Solve<::Main#main#<block>>\l<statTemp>$31: Main = self\l<block-pre-call-temp>$32: T.untyped = <statTemp>$31: Main.mixed()\l<unconditional>\l"
    ];

    "bb::Main#main_9" -> "bb::Main#main_11" [style="bold"];
    "bb::Main#main_10" [
        label = "block[id=10](l: Proc1[T.untyped, T.untyped])\louterLoops: 1\l<blk>$25: [T.untyped] = load_yield_params(::Main#main#<block>, Main#main#<block>)\l<blk>$26: Integer(0) = 0\l<block-pass>$3$9: T.untyped = <blk>$25: [T.untyped].[](<blk>$26: Integer(0))\l<blockReturnTemp>$27: Proc1[T.untyped, T.untyped] = l: Proc1[T.untyped, T.untyped].to_proc()\l<blockReturnTemp>$29: <impossible> = blockreturn<::Main#main#<block>> <blockReturnTemp>$27: Proc1[T.untyped, T.untyped]\l<unconditional>\l"
    ];

    "bb::Main#main_10" -> "bb::Main#main_8" [style="bold"];
    "bb::Main#main_11" [
        label = "block[id=11](l: Proc1[T.untyped, T.untyped])\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::Main#main_11" -> "bb::Main#main_13" [style="bold"];
    "bb::Main#main_11" -> "bb::Main#main_12" [style="tapered"];

    "bb::Main#main_12" [
        label = "block[id=12](l: Proc1[T.untyped, T.untyped])\l<statTemp>$30: T.untyped = Solve<::Main#main#<block>>\l<statTemp>$38: Main = self\l<block-pre-call-temp>$39: T.untyped = <statTemp>$38: Main.blockyield()\l<unconditional>\l"
    ];

    "bb::Main#main_12" -> "bb::Main#main_14" [style="bold"];
    "bb::Main#main_13" [
        label = "block[id=13](l: Proc1[T.untyped, T.untyped])\louterLoops: 1\l<blk>$33: [T.untyped] = load_yield_params(::Main#main#<block>, Main#main#<block>)\l<blk>$34: Integer(0) = 0\l<block-pass>$4$10: T.untyped = <blk>$33: [T.untyped].[](<blk>$34: Integer(0))\l<blockReturnTemp>$35: Proc1[T.untyped, T.untyped] = l: Proc1[T.untyped, T.untyped].to_proc()\l<blockReturnTemp>$37: <impossible> = blockreturn<::Main#main#<block>> <blockReturnTemp>$35: Proc1[T.untyped, T.untyped]\l<unconditional>\l"
    ];

    "bb::Main#main_13" -> "bb::Main#main_11" [style="bold"];
    "bb::Main#main_14" [
        label = "block[id=14](l: Proc1[T.untyped, T.untyped])\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::Main#main_14" -> "bb::Main#main_16" [style="bold"];
    "bb::Main#main_14" -> "bb::Main#main_15" [style="tapered"];

    "bb::Main#main_15" [
        label = "block[id=15]()\l<returnMethodTemp>$2: T.untyped = Solve<::Main#main#<block>>\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::Main#main_15" -> "bb::Main#main_1" [style="bold"];
    "bb::Main#main_16" [
        label = "block[id=16](l: Proc1[T.untyped, T.untyped])\louterLoops: 1\l<blk>$40: [T.untyped] = load_yield_params(::Main#main#<block>, Main#main#<block>)\l<blk>$41: Integer(0) = 0\l<block-pass>$5$11: T.untyped = <blk>$40: [T.untyped].[](<blk>$41: Integer(0))\l<blockReturnTemp>$42: Proc1[T.untyped, T.untyped] = l: Proc1[T.untyped, T.untyped].to_proc()\l<blockReturnTemp>$44: <impossible> = blockreturn<::Main#main#<block>> <blockReturnTemp>$42: Proc1[T.untyped, T.untyped]\l<unconditional>\l"
    ];

    "bb::Main#main_16" -> "bb::Main#main_14" [style="bold"];
}

}

