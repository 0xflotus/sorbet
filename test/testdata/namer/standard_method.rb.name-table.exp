class <constant:<root>> < ::<constant:Object> () -> <Class:<root>>
  class <constant:A> < ::<constant:Object> () -> <Class:A>
    method bad (a, b, c, d, e, f, g) -> T2
      argument a<> -> untyped
      argument b<> -> untyped
      argument c<> -> <bottom>
      argument d<> -> untyped
      argument e<> -> untyped
      argument f<> -> untyped
      argument g<> -> <bottom>
    method f1 (x) -> T1
      argument x<> -> untyped
    method f2 (x) -> T2
      argument x<> -> T1
    method f3 () -> T1
    method f4 (y) -> T1
      argument y<> -> T1
    method good (a, b, c, d, e, f, g, h, i) -> T2
      argument a<> -> TupleType {
        0 = T1
        1 = T2
      }
      argument b<> -> T1
      argument c<> -> T1 | NilClass
      argument d<> -> T1 | T2
      argument e<> -> untyped
      argument f<> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = T1
        ]
      }
      argument g<> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = T1
          <constant:V> = T2
          <constant:Elem> = untyped
        ]
      }
      argument h<> -> FalseClass | Integer | Float | String | Symbol
      argument i<> -> T1
    method no_params () -> T1
    method noreturn () -> <bottom>
    method private : private (x) -> T1
      argument x<> -> T1
    method protected : protected (x) -> T1
      argument x<> -> T1
    method public (x) -> T1
      argument x<> -> T1
    method test_abstract () -> T1
    method test_abstract_untyped ()
    method test_implementation (x, y)
      argument x<> -> untyped
      argument y<> -> untyped
    method test_kwargs (returns) -> T2
      argument returns<> -> T1
    method test_overridable () -> T1
    method test_overridable_implementation () -> T1
    method test_override () -> T1
    method test_standard_untyped ()
    method test_yield_no_block_type (x, <blk>) -> Integer
      argument <blk><block> -> untyped
      argument x<> -> Integer
  class <constant:T1> < ::<constant:Object> () -> <Class:T1>
  class <constant:T2> < ::<constant:Object> () -> <Class:T2>
  class <singleton class:<constant:A>> < ::<singleton class:<constant:Object>> ()
    method static : private (x) -> T1
      argument x<> -> T1
  class <singleton class:<constant:T1>> < ::<singleton class:<constant:Object>> ()
  class <singleton class:<constant:T2>> < ::<singleton class:<constant:Object>> ()
  method <static-init>$6 ()
  static-field <constant:A1> -> <Class:T1>

