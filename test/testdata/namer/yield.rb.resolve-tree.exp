begin
  class <emptyTree><<C <U <root>>>> < ()
    def self.<U <static-init>><<N <U <static-init>> $86>>(<blk>)
      begin
        begin
          ::RubyTyper.<U keep_for_ide>(::Main)
          <emptyTree>
        end
        ::Main.<U new>().<U main>()
        <emptyTree>
      end
    end
  end
  class ::Main<<C <U Main>>> < (::<todo sym>)
    <emptyTree>

    <emptyTree>

    <emptyTree>

    <emptyTree>

    <emptyTree>

    def <U yielder><<U yielder>>(<blk>)
      begin
        <U a> = <U <blk>>.<U call>(1)
        <U <blk>>.<U call>(<U a>)
      end
    end

    def <U blockpass><<U blockpass>>(&blk)
      begin
        <U a> = <U blk>.<U call>(1)
        <U blk>.<U call>(<U a>)
      end
    end

    def <U mixed><<U mixed>>(&blk)
      begin
        <U a> = <U blk>.<U call>(1)
        <U blk>.<U call>(<U a>)
      end
    end

    def <U blockyield><<U blockyield>>(<blk>)
      self(<C <U Main>>).<U yielder>() do |i|
        <U <blk>>.<U call>(<U i>$5)
      end
    end

    def <U main><<U main>>(<blk>)
      begin
        <U l> = self(<C <U Main>>).<U lambda>() do |x|
          begin
            self(<C <U Main>>).<U puts>(<U x>$7)
            3
          end
        end
        self(<C <U Main>>).<U yielder>() do |*l|
          ::<Magic>.<U <call-with-splat>>(<U l>.<U to_proc>(), :"call", <D <U <block-pass>> $2>$8)
        end
        self(<C <U Main>>).<U blockpass>() do |*l|
          ::<Magic>.<U <call-with-splat>>(<U l>.<U to_proc>(), :"call", <D <U <block-pass>> $3>$9)
        end
        self(<C <U Main>>).<U mixed>() do |*l|
          ::<Magic>.<U <call-with-splat>>(<U l>.<U to_proc>(), :"call", <D <U <block-pass>> $4>$10)
        end
        self(<C <U Main>>).<U blockyield>() do |*l|
          ::<Magic>.<U <call-with-splat>>(<U l>.<U to_proc>(), :"call", <D <U <block-pass>> $5>$11)
        end
      end
    end
  end
  <emptyTree>
end
