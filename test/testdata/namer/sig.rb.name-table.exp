class <constant:<root>> < ::<constant:Object> () -> <Class:<root>> @ test/testdata/namer/sig.rb:2
  class <constant:A> < ::<constant:Object> () -> <Class:A> @ test/testdata/namer/sig.rb:7
    method bad (a, b, c, d, e, f, g, h, i, j, k, l, m) -> T2 @ test/testdata/namer/sig.rb:49
      argument a<> -> untyped @ test/testdata/namer/sig.rb:34
      argument b<> -> untyped @ test/testdata/namer/sig.rb:35
      argument c<> -> <bottom> @ test/testdata/namer/sig.rb:36
      argument d<> -> untyped @ test/testdata/namer/sig.rb:37
      argument e<> -> untyped @ test/testdata/namer/sig.rb:38
      argument f<> -> untyped @ test/testdata/namer/sig.rb:39
      argument g<> -> <bottom> @ test/testdata/namer/sig.rb:40
      argument h<> -> untyped @ test/testdata/namer/sig.rb:41
      argument i<> -> untyped @ test/testdata/namer/sig.rb:42
      argument j<> -> untyped @ test/testdata/namer/sig.rb:43
      argument k<> -> untyped @ test/testdata/namer/sig.rb:44
      argument l<> -> ShapeType {
      } @ test/testdata/namer/sig.rb:45
      argument m<> -> ShapeType {
        Symbol(:"foo") => untyped
      } @ test/testdata/namer/sig.rb:46
    method f1 (x) -> T1 @ test/testdata/namer/sig.rb:66
      argument x<> -> untyped @ test/testdata/namer/sig.rb:66
    method f2 (x) -> T2 @ test/testdata/namer/sig.rb:70
      argument x<> -> T1 @ test/testdata/namer/sig.rb:69
    method f3 () -> T1 @ test/testdata/namer/sig.rb:74
    method f4 (y) -> T1 @ test/testdata/namer/sig.rb:99
      argument y<> -> T1 @ test/testdata/namer/sig.rb:97
    method good (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) -> T2 @ test/testdata/namer/sig.rb:30
      argument a<> -> TupleType {
        0 = T1
        1 = T2
      } @ test/testdata/namer/sig.rb:9
      argument b<> -> T1 @ test/testdata/namer/sig.rb:10
      argument c<> -> T1 | NilClass @ test/testdata/namer/sig.rb:11
      argument d<> -> T1 | T2 @ test/testdata/namer/sig.rb:12
      argument e<> -> untyped @ test/testdata/namer/sig.rb:13
      argument f<> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = T1
        ]
      } @ test/testdata/namer/sig.rb:14
      argument g<> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = T1
          <constant:V> = T2
          <constant:Elem> = untyped
        ]
      } @ test/testdata/namer/sig.rb:15
      argument h<> -> FalseClass | Integer | Float | String | Symbol @ test/testdata/namer/sig.rb:16
      argument i<> -> T1 @ test/testdata/namer/sig.rb:17
      argument j<> -> <Class:T1> @ test/testdata/namer/sig.rb:18
      argument k<> -> <Class:T1> @ test/testdata/namer/sig.rb:19
      argument l<> -> <Class:T1> @ test/testdata/namer/sig.rb:20
      argument m<> -> <Class:T1> @ test/testdata/namer/sig.rb:21
      argument n<> -> <Class:M1> @ test/testdata/namer/sig.rb:22
      argument o<> -> ShapeType {
        Symbol(:"foo") => String
        Symbol(:"bar") => Integer | NilClass
      } @ test/testdata/namer/sig.rb:23
      argument p<> -> ShapeType {
      } @ test/testdata/namer/sig.rb:27
    method no_params () -> T1 @ test/testdata/namer/sig.rb:57
    method noreturn () -> <bottom> @ test/testdata/namer/sig.rb:53
    method private : private (x) -> T1 @ test/testdata/namer/sig.rb:78
      argument x<> -> T1 @ test/testdata/namer/sig.rb:77
    method protected : protected (x) -> T1 @ test/testdata/namer/sig.rb:83
      argument x<> -> T1 @ test/testdata/namer/sig.rb:82
    method public (x) -> T1 @ test/testdata/namer/sig.rb:88
      argument x<> -> T1 @ test/testdata/namer/sig.rb:87
    method test_abstract () -> T1 @ test/testdata/namer/sig.rb:108
    method test_abstract_untyped () @ test/testdata/namer/sig.rb:122
    method test_implementation (x, y) @ test/testdata/namer/sig.rb:111
      argument x<> -> untyped @ test/testdata/namer/sig.rb:111
      argument y<> -> untyped @ test/testdata/namer/sig.rb:111
    method test_kwargs (returns) -> T2 @ test/testdata/namer/sig.rb:62
      argument returns<> -> T1 @ test/testdata/namer/sig.rb:60
    method test_overridable () -> T1 @ test/testdata/namer/sig.rb:117
    method test_overridable_implementation () -> T1 @ test/testdata/namer/sig.rb:120
    method test_override () -> T1 @ test/testdata/namer/sig.rb:114
    method test_standard_untyped () @ test/testdata/namer/sig.rb:123
    method test_yield_no_block_type (x, <blk>) -> Integer @ test/testdata/namer/sig.rb:103
      argument <blk><block> -> untyped @ test/testdata/namer/sig.rb:104
      argument x<> -> Integer @ test/testdata/namer/sig.rb:102
  class <constant:M1> (<constant:BasicObject>) -> <Class:M1> @ test/testdata/namer/sig.rb:4
  class <constant:T1> < ::<constant:Object> () -> <Class:T1> @ test/testdata/namer/sig.rb:2
  class <constant:T2> < ::<constant:Object> () -> <Class:T2> @ test/testdata/namer/sig.rb:3
  class <singleton class:<constant:A>> < ::<singleton class:<constant:Object>> () @ test/testdata/namer/sig.rb:7
    method static : private (x) -> T1 @ test/testdata/namer/sig.rb:93
      argument x<> -> T1 @ test/testdata/namer/sig.rb:92
  class <singleton class:<constant:M1>> < ::<constant:Module> () @ test/testdata/namer/sig.rb:4
  class <singleton class:<constant:T1>> < ::<singleton class:<constant:Object>> () @ test/testdata/namer/sig.rb:2
  class <singleton class:<constant:T2>> < ::<singleton class:<constant:Object>> () @ test/testdata/namer/sig.rb:3
  method <static-init>$8 () @ test/testdata/namer/sig.rb:2
  static-field <constant:A1> -> AliasType { symbol = ::<constant:T1> } @ test/testdata/namer/sig.rb:5

