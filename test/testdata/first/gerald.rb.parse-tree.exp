Begin {
  stmts = [
    Send {
      receiver = NULL
      method = require_relative
      args = [
        DString {
          nodes = [
            String {
              val = ../../../extn
            }
          ]
        }
      ]
    }
    Send {
      receiver = Const {
        scope = Const {
          scope = NULL
          name = <constant:Opus>
        }
        name = <constant:AutogenLoader>
      }
      method = init
      args = [
        FileLiteral {
        }
      ]
    }
    Module {
      name = Const {
        scope = Const {
          scope = Const {
            scope = NULL
            name = <constant:Opus>
          }
          name = <constant:CIBot>
        }
        name = <constant:Gerald>
      }
      body = Begin {
        stmts = [
          Class {
            name = Const {
              scope = NULL
              name = <constant:MatchTimeout>
            }
            superclass = Const {
              scope = NULL
              name = <constant:StandardError>
            }
            body = Begin {
              stmts = [
                Send {
                  receiver = NULL
                  method = attr_reader
                  args = [
                    Symbol {
                      val = rule_token
                    }
                  ]
                }
                DefMethod {
                  name = initialize
                  args = Args {
                    args = [
                      Arg {
                        name = message
                      }
                      Kwoptarg {
                        name = rule_token
                        default_ = DString {
                          nodes = [
                            String {
                              val = 
                            }
                          ]
                        }
                      }
                    ]
                  }
                  body = Begin {
                    stmts = [
                      Super {
                        args = [
                          LVar {
                            name = message
                          }
                        ]
                      }
                      Assign {
                        lhs = IVarLhs {
                          name = @rule_token
                        }
                        rhs = LVar {
                          name = rule_token
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
          Class {
            name = Const {
              scope = NULL
              name = <constant:Matcher>
            }
            superclass = NULL
            body = Begin {
              stmts = [
                Send {
                  receiver = NULL
                  method = include
                  args = [
                    Const {
                      scope = Const {
                        scope = NULL
                        name = <constant:Chalk>
                      }
                      name = <constant:Log>
                    }
                  ]
                }
                Assign {
                  lhs = ConstLhs {
                    scope = NULL
                    name = <constant:MAX_AFFECTED_FILES>
                  }
                  rhs = Integer {
                    val = "100"
                  }
                }
                DefMethod {
                  name = initialize
                  args = NULL
                  body = Begin {
                    stmts = [
                      Masgn {
                        lhs = Mlhs {
                          exprs = [
                            IVarLhs {
                              name = @rules
                            }
                            LVarLhs {
                              name = invalid_rules
                            }
                          ]
                        }
                        rhs = Send {
                          receiver = Send {
                            receiver = Send {
                              receiver = Const {
                                scope = Const {
                                  scope = Const {
                                    scope = Const {
                                      scope = NULL
                                      name = <constant:Opus>
                                    }
                                    name = <constant:CIBot>
                                  }
                                  name = <constant:Model>
                                }
                                name = <constant:GeraldRule>
                              }
                              method = query_by
                              args = [
                                Symbol {
                                  val = deleted_at_is_nil
                                }
                              ]
                            }
                            method = load_all
                            args = [
                              Hash {
                                pairs = [
                                ]
                              }
                            ]
                          }
                          method = partition
                          args = [
                            BlockPass {
                              block = Symbol {
                                val = valid?
                              }
                            }
                          ]
                        }
                      }
                      If {
                        condition = Send {
                          receiver = Send {
                            receiver = LVar {
                              name = invalid_rules
                            }
                            method = empty?
                            args = [
                            ]
                          }
                          method = !
                          args = [
                          ]
                        }
                        then_ = Begin {
                          stmts = [
                            Assign {
                              lhs = LVarLhs {
                                name = invalid_rule_ids
                              }
                              rhs = Send {
                                receiver = Send {
                                  receiver = LVar {
                                    name = invalid_rules
                                  }
                                  method = map
                                  args = [
                                    BlockPass {
                                      block = Symbol {
                                        val = token
                                      }
                                    }
                                  ]
                                }
                                method = join
                                args = [
                                  DString {
                                    nodes = [
                                      String {
                                        val = ,
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                            Send {
                              receiver = Send {
                                receiver = NULL
                                method = log
                                args = [
                                ]
                              }
                              method = warn
                              args = [
                                Send {
                                  receiver = DString {
                                    nodes = [
                                      String {
                                        val = Gerald skipping invalid rules: 
                                      }
                                    ]
                                  }
                                  method = +
                                  args = [
                                    LVar {
                                      name = invalid_rule_ids
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                        else_ = NULL
                      }
                    ]
                  }
                }
                DefMethod {
                  name = match
                  args = Args {
                    args = [
                      Arg {
                        name = match_context
                      }
                    ]
                  }
                  body = Begin {
                    stmts = [
                      If {
                        condition = Send {
                          receiver = Send {
                            receiver = Send {
                              receiver = Send {
                                receiver = LVar {
                                  name = match_context
                                }
                                method = diff
                                args = [
                                ]
                              }
                              method = affected_files
                              args = [
                              ]
                            }
                            method = count
                            args = [
                            ]
                          }
                          method = >
                          args = [
                            Const {
                              scope = NULL
                              name = <constant:MAX_AFFECTED_FILES>
                            }
                          ]
                        }
                        then_ = Begin {
                          stmts = [
                            Send {
                              receiver = Send {
                                receiver = NULL
                                method = log
                                args = [
                                ]
                              }
                              method = warn
                              args = [
                                DString {
                                  nodes = [
                                    DString {
                                      nodes = [
                                        String {
                                          val = Gerald skipping large PR with 
                                        }
                                        Begin {
                                          stmts = [
                                            Send {
                                              receiver = Send {
                                                receiver = Send {
                                                  receiver = LVar {
                                                    name = match_context
                                                  }
                                                  method = diff
                                                  args = [
                                                  ]
                                                }
                                                method = affected_files
                                                args = [
                                                ]
                                              }
                                              method = count
                                              args = [
                                              ]
                                            }
                                          ]
                                        }
                                        String {
                                          val =  affected files
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                            Return {
                              exprs = [
                                Array {
                                  elts = [
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                        else_ = NULL
                      }
                      Assign {
                        lhs = LVarLhs {
                          name = budget
                        }
                        rhs = Send {
                          receiver = Const {
                            scope = NULL
                            name = <constant:MatchTimeBudget>
                          }
                          method = new
                          args = [
                          ]
                        }
                      }
                      Block {
                        send = Send {
                          receiver = IVar {
                            name = @rules
                          }
                          method = select
                          args = [
                          ]
                        }
                        args = Args {
                          args = [
                            Arg {
                              name = r
                            }
                          ]
                        }
                        body = Block {
                          send = Send {
                            receiver = LVar {
                              name = budget
                            }
                            method = time_rule
                            args = [
                              LVar {
                                name = r
                              }
                            ]
                          }
                          args = NULL
                          body = Send {
                            receiver = LVar {
                              name = r
                            }
                            method = matches?
                            args = [
                              LVar {
                                name = match_context
                              }
                            ]
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
          Class {
            name = Const {
              scope = NULL
              name = <constant:MatchContext>
            }
            superclass = NULL
            body = Begin {
              stmts = [
                Send {
                  receiver = NULL
                  method = attr_reader
                  args = [
                    Symbol {
                      val = repo
                    }
                  ]
                }
                Send {
                  receiver = NULL
                  method = attr_reader
                  args = [
                    Symbol {
                      val = assignee
                    }
                  ]
                }
                Send {
                  receiver = NULL
                  method = attr_reader
                  args = [
                    Symbol {
                      val = gh_user
                    }
                  ]
                }
                Send {
                  receiver = NULL
                  method = attr_reader
                  args = [
                    Symbol {
                      val = merge_branch
                    }
                  ]
                }
                Send {
                  receiver = NULL
                  method = attr_reader
                  args = [
                    Symbol {
                      val = body
                    }
                  ]
                }
                Send {
                  receiver = NULL
                  method = attr_reader
                  args = [
                    Symbol {
                      val = title
                    }
                  ]
                }
                Send {
                  receiver = NULL
                  method = attr_reader
                  args = [
                    Symbol {
                      val = diff
                    }
                  ]
                }
                Send {
                  receiver = NULL
                  method = attr_reader
                  args = [
                    Symbol {
                      val = openapi_diff
                    }
                  ]
                }
                DefMethod {
                  name = initialize
                  args = Args {
                    args = [
                      Arg {
                        name = repo
                      }
                      Arg {
                        name = assignee
                      }
                      Arg {
                        name = gh_user
                      }
                      Arg {
                        name = merge_branch
                      }
                      Arg {
                        name = body
                      }
                      Arg {
                        name = title
                      }
                      Arg {
                        name = diff
                      }
                      Arg {
                        name = openapi_diff
                      }
                    ]
                  }
                  body = Begin {
                    stmts = [
                      Assign {
                        lhs = IVarLhs {
                          name = @repo
                        }
                        rhs = LVar {
                          name = repo
                        }
                      }
                      Assign {
                        lhs = IVarLhs {
                          name = @assignee
                        }
                        rhs = LVar {
                          name = assignee
                        }
                      }
                      Assign {
                        lhs = IVarLhs {
                          name = @gh_user
                        }
                        rhs = LVar {
                          name = gh_user
                        }
                      }
                      Assign {
                        lhs = IVarLhs {
                          name = @merge_branch
                        }
                        rhs = LVar {
                          name = merge_branch
                        }
                      }
                      Assign {
                        lhs = IVarLhs {
                          name = @body
                        }
                        rhs = LVar {
                          name = body
                        }
                      }
                      Assign {
                        lhs = IVarLhs {
                          name = @title
                        }
                        rhs = LVar {
                          name = title
                        }
                      }
                      Assign {
                        lhs = IVarLhs {
                          name = @diff
                        }
                        rhs = LVar {
                          name = diff
                        }
                      }
                      Assign {
                        lhs = IVarLhs {
                          name = @openapi_diff
                        }
                        rhs = LVar {
                          name = openapi_diff
                        }
                      }
                    ]
                  }
                }
                DefMethod {
                  name = user_stripe_suffix?
                  args = NULL
                  body = Send {
                    receiver = Send {
                      receiver = IVar {
                        name = @repo
                      }
                      method = start_with?
                      args = [
                        DString {
                          nodes = [
                            String {
                              val = stripe-internal/
                            }
                          ]
                        }
                      ]
                    }
                    method = !
                    args = [
                    ]
                  }
                }
              ]
            }
          }
          Class {
            name = Const {
              scope = NULL
              name = <constant:MatchTimeBudget>
            }
            superclass = NULL
            body = Begin {
              stmts = [
                Assign {
                  lhs = ConstLhs {
                    scope = NULL
                    name = <constant:TOTAL_TIME_MS>
                  }
                  rhs = Integer {
                    val = "10000"
                  }
                }
                Assign {
                  lhs = ConstLhs {
                    scope = NULL
                    name = <constant:PER_RULE_MS>
                  }
                  rhs = Integer {
                    val = "2000"
                  }
                }
                DefMethod {
                  name = initialize
                  args = NULL
                  body = Assign {
                    lhs = IVarLhs {
                      name = @start
                    }
                    rhs = Send {
                      receiver = Const {
                        scope = NULL
                        name = <constant:Time>
                      }
                      method = now
                      args = [
                      ]
                    }
                  }
                }
                DefMethod {
                  name = check!
                  args = NULL
                  body = Begin {
                    stmts = [
                      Assign {
                        lhs = LVarLhs {
                          name = dur_ms
                        }
                        rhs = Send {
                          receiver = Begin {
                            stmts = [
                              Send {
                                receiver = Send {
                                  receiver = Const {
                                    scope = NULL
                                    name = <constant:Time>
                                  }
                                  method = now
                                  args = [
                                  ]
                                }
                                method = -
                                args = [
                                  IVar {
                                    name = @start
                                  }
                                ]
                              }
                            ]
                          }
                          method = *
                          args = [
                            Integer {
                              val = "1000"
                            }
                          ]
                        }
                      }
                      If {
                        condition = Send {
                          receiver = LVar {
                            name = dur_ms
                          }
                          method = >
                          args = [
                            Const {
                              scope = NULL
                              name = <constant:TOTAL_TIME_MS>
                            }
                          ]
                        }
                        then_ = Send {
                          receiver = NULL
                          method = raise
                          args = [
                            Send {
                              receiver = Const {
                                scope = NULL
                                name = <constant:MatchTimeout>
                              }
                              method = new
                              args = [
                                DString {
                                  nodes = [
                                    DString {
                                      nodes = [
                                        String {
                                          val = Gerald match time budged exceeded 
                                        }
                                        Begin {
                                          stmts = [
                                            Const {
                                              scope = NULL
                                              name = <constant:TOTAL_TIME_MS>
                                            }
                                          ]
                                        }
                                        String {
                                          val = ms
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                        else_ = NULL
                      }
                    ]
                  }
                }
                DefMethod {
                  name = time_rule
                  args = Args {
                    args = [
                      Arg {
                        name = rule
                      }
                    ]
                  }
                  body = Begin {
                    stmts = [
                      Assign {
                        lhs = LVarLhs {
                          name = rule_start
                        }
                        rhs = Send {
                          receiver = Const {
                            scope = NULL
                            name = <constant:Time>
                          }
                          method = now
                          args = [
                          ]
                        }
                      }
                      Assign {
                        lhs = LVarLhs {
                          name = res
                        }
                        rhs = Yield {
                          exprs = [
                          ]
                        }
                      }
                      Assign {
                        lhs = LVarLhs {
                          name = dur_ms
                        }
                        rhs = Send {
                          receiver = Begin {
                            stmts = [
                              Send {
                                receiver = Send {
                                  receiver = Const {
                                    scope = NULL
                                    name = <constant:Time>
                                  }
                                  method = now
                                  args = [
                                  ]
                                }
                                method = -
                                args = [
                                  LVar {
                                    name = rule_start
                                  }
                                ]
                              }
                            ]
                          }
                          method = *
                          args = [
                            Integer {
                              val = "1000"
                            }
                          ]
                        }
                      }
                      If {
                        condition = Send {
                          receiver = LVar {
                            name = dur_ms
                          }
                          method = >
                          args = [
                            Const {
                              scope = NULL
                              name = <constant:PER_RULE_MS>
                            }
                          ]
                        }
                        then_ = Send {
                          receiver = NULL
                          method = raise
                          args = [
                            Send {
                              receiver = Const {
                                scope = NULL
                                name = <constant:MatchTimeout>
                              }
                              method = new
                              args = [
                                DString {
                                  nodes = [
                                    DString {
                                      nodes = [
                                        String {
                                          val = Gerald rule '
                                        }
                                        Begin {
                                          stmts = [
                                            Send {
                                              receiver = LVar {
                                                name = rule
                                              }
                                              method = token
                                              args = [
                                              ]
                                            }
                                          ]
                                        }
                                        String {
                                          val = ' exceeded per-rule time budget actual=
                                        }
                                        Begin {
                                          stmts = [
                                            Send {
                                              receiver = LVar {
                                                name = dur_ms
                                              }
                                              method = to_i
                                              args = [
                                              ]
                                            }
                                          ]
                                        }
                                        String {
                                          val = ms budget=
                                        }
                                        Begin {
                                          stmts = [
                                            Const {
                                              scope = NULL
                                              name = <constant:PER_RULE_MS>
                                            }
                                          ]
                                        }
                                        String {
                                          val = ms
                                        }
                                      ]
                                    }
                                  ]
                                }
                                Hash {
                                  pairs = [
                                    Pair {
                                      key = Symbol {
                                        val = rule_token
                                      }
                                      value = Send {
                                        receiver = LVar {
                                          name = rule
                                        }
                                        method = token
                                        args = [
                                        ]
                                      }
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                        else_ = NULL
                      }
                      Send {
                        receiver = NULL
                        method = check!
                        args = [
                        ]
                      }
                      LVar {
                        name = res
                      }
                    ]
                  }
                }
              ]
            }
          }
          Class {
            name = Const {
              scope = NULL
              name = <constant:Diff>
            }
            superclass = NULL
            body = Begin {
              stmts = [
                DefMethod {
                  name = initialize
                  args = Args {
                    args = [
                      Arg {
                        name = raw_diff
                      }
                    ]
                  }
                  body = Begin {
                    stmts = [
                      Assign {
                        lhs = IVarLhs {
                          name = @raw
                        }
                        rhs = LVar {
                          name = raw_diff
                        }
                      }
                      Assign {
                        lhs = IVarLhs {
                          name = @parsed
                        }
                        rhs = Send {
                          receiver = NULL
                          method = parse
                          args = [
                            LVar {
                              name = raw_diff
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
                DefMethod {
                  name = affected_files
                  args = NULL
                  body = Send {
                    receiver = Send {
                      receiver = Send {
                        receiver = NULL
                        method = added_files
                        args = [
                        ]
                      }
                      method = +
                      args = [
                        Send {
                          receiver = NULL
                          method = deleted_files
                          args = [
                          ]
                        }
                      ]
                    }
                    method = +
                    args = [
                      Send {
                        receiver = NULL
                        method = changed_files
                        args = [
                        ]
                      }
                    ]
                  }
                }
                DefMethod {
                  name = added_files
                  args = NULL
                  body = Block {
                    send = Send {
                      receiver = Block {
                        send = Send {
                          receiver = IVar {
                            name = @parsed
                          }
                          method = select
                          args = [
                          ]
                        }
                        args = Args {
                          args = [
                            Arg {
                              name = part
                            }
                          ]
                        }
                        body = Send {
                          receiver = Send {
                            receiver = LVar {
                              name = part
                            }
                            method = []
                            args = [
                              Symbol {
                                val = a_name
                              }
                            ]
                          }
                          method = ==
                          args = [
                            DString {
                              nodes = [
                                String {
                                  val = /dev/null
                                }
                              ]
                            }
                          ]
                        }
                      }
                      method = map
                      args = [
                      ]
                    }
                    args = Args {
                      args = [
                        Arg {
                          name = part
                        }
                      ]
                    }
                    body = Send {
                      receiver = LVar {
                        name = part
                      }
                      method = []
                      args = [
                        Symbol {
                          val = b_name
                        }
                      ]
                    }
                  }
                }
                DefMethod {
                  name = deleted_files
                  args = NULL
                  body = Block {
                    send = Send {
                      receiver = Block {
                        send = Send {
                          receiver = IVar {
                            name = @parsed
                          }
                          method = select
                          args = [
                          ]
                        }
                        args = Args {
                          args = [
                            Arg {
                              name = part
                            }
                          ]
                        }
                        body = Send {
                          receiver = Send {
                            receiver = LVar {
                              name = part
                            }
                            method = []
                            args = [
                              Symbol {
                                val = b_name
                              }
                            ]
                          }
                          method = ==
                          args = [
                            DString {
                              nodes = [
                                String {
                                  val = /dev/null
                                }
                              ]
                            }
                          ]
                        }
                      }
                      method = map
                      args = [
                      ]
                    }
                    args = Args {
                      args = [
                        Arg {
                          name = part
                        }
                      ]
                    }
                    body = Send {
                      receiver = LVar {
                        name = part
                      }
                      method = []
                      args = [
                        Symbol {
                          val = a_name
                        }
                      ]
                    }
                  }
                }
                DefMethod {
                  name = changed_files
                  args = NULL
                  body = Block {
                    send = Send {
                      receiver = Block {
                        send = Send {
                          receiver = IVar {
                            name = @parsed
                          }
                          method = select
                          args = [
                          ]
                        }
                        args = Args {
                          args = [
                            Arg {
                              name = part
                            }
                          ]
                        }
                        body = Send {
                          receiver = Send {
                            receiver = LVar {
                              name = part
                            }
                            method = []
                            args = [
                              Symbol {
                                val = a_name
                              }
                            ]
                          }
                          method = ==
                          args = [
                            Send {
                              receiver = LVar {
                                name = part
                              }
                              method = []
                              args = [
                                Symbol {
                                  val = b_name
                                }
                              ]
                            }
                          ]
                        }
                      }
                      method = map
                      args = [
                      ]
                    }
                    args = Args {
                      args = [
                        Arg {
                          name = part
                        }
                      ]
                    }
                    body = Send {
                      receiver = LVar {
                        name = part
                      }
                      method = []
                      args = [
                        Symbol {
                          val = b_name
                        }
                      ]
                    }
                  }
                }
                DefMethod {
                  name = added_lines
                  args = NULL
                  body = Send {
                    receiver = Block {
                      send = Send {
                        receiver = IVar {
                          name = @parsed
                        }
                        method = map
                        args = [
                        ]
                      }
                      args = Args {
                        args = [
                          Arg {
                            name = part
                          }
                        ]
                      }
                      body = Send {
                        receiver = LVar {
                          name = part
                        }
                        method = []
                        args = [
                          Symbol {
                            val = added_lines
                          }
                        ]
                      }
                    }
                    method = flatten
                    args = [
                    ]
                  }
                }
                DefMethod {
                  name = removed_lines
                  args = NULL
                  body = Send {
                    receiver = Block {
                      send = Send {
                        receiver = IVar {
                          name = @parsed
                        }
                        method = map
                        args = [
                        ]
                      }
                      args = Args {
                        args = [
                          Arg {
                            name = part
                          }
                        ]
                      }
                      body = Send {
                        receiver = LVar {
                          name = part
                        }
                        method = []
                        args = [
                          Symbol {
                            val = removed_lines
                          }
                        ]
                      }
                    }
                    method = flatten
                    args = [
                    ]
                  }
                }
                DefMethod {
                  name = changed_lines
                  args = NULL
                  body = Send {
                    receiver = Send {
                      receiver = NULL
                      method = added_lines
                      args = [
                      ]
                    }
                    method = +
                    args = [
                      Send {
                        receiver = NULL
                        method = removed_lines
                        args = [
                        ]
                      }
                    ]
                  }
                }
                DefMethod {
                  name = changed_openapi?
                  args = NULL
                  body = Send {
                    receiver = Send {
                      receiver = NULL
                      method = changed_files
                      args = [
                      ]
                    }
                    method = include?
                    args = [
                      Const {
                        scope = Const {
                          scope = Const {
                            scope = Const {
                              scope = Const {
                                scope = NULL
                                name = <constant:Opus>
                              }
                              name = <constant:CIBot>
                            }
                            name = <constant:Actions>
                          }
                          name = <constant:OpenAPI>
                        }
                        name = <constant:SPEC_PATH>
                      }
                    ]
                  }
                }
                Send {
                  receiver = NULL
                  method = private
                  args = [
                    DefMethod {
                      name = parse
                      args = Args {
                        args = [
                          Arg {
                            name = diff
                          }
                        ]
                      }
                      body = Begin {
                        stmts = [
                          Assign {
                            lhs = LVarLhs {
                              name = parts
                            }
                            rhs = Send {
                              receiver = Send {
                                receiver = LVar {
                                  name = diff
                                }
                                method = split
                                args = [
                                  Regexp {
                                    regex = [
                                      String {
                                        val = ^diff [^\n]*\n
                                      }
                                    ]
                                    opts = Regopt {
                                      opts = "m"
                                    }
                                  }
                                ]
                              }
                              method = []
                              args = [
                                IRange {
                                  from = Integer {
                                    val = "1"
                                  }
                                  to = Integer {
                                    val = "-1"
                                  }
                                }
                              ]
                            }
                          }
                          OrAsgn {
                            left = LVarLhs {
                              name = parts
                            }
                            right = Array {
                              elts = [
                              ]
                            }
                          }
                          Send {
                            receiver = Block {
                              send = Send {
                                receiver = LVar {
                                  name = parts
                                }
                                method = map
                                args = [
                                ]
                              }
                              args = Args {
                                args = [
                                  Arg {
                                    name = part
                                  }
                                ]
                              }
                              body = Begin {
                                stmts = [
                                  Assign {
                                    lhs = LVarLhs {
                                      name = lines
                                    }
                                    rhs = Send {
                                      receiver = LVar {
                                        name = part
                                      }
                                      method = split
                                      args = [
                                        DString {
                                          nodes = [
                                            String {
                                              val = 

                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  }
                                  Assign {
                                    lhs = LVarLhs {
                                      name = a_name
                                    }
                                    rhs = Assign {
                                      lhs = LVarLhs {
                                        name = b_name
                                      }
                                      rhs = Nil {
                                      }
                                    }
                                  }
                                  Assign {
                                    lhs = LVarLhs {
                                      name = added_lines
                                    }
                                    rhs = Array {
                                      elts = [
                                      ]
                                    }
                                  }
                                  Assign {
                                    lhs = LVarLhs {
                                      name = removed_lines
                                    }
                                    rhs = Array {
                                      elts = [
                                      ]
                                    }
                                  }
                                  Block {
                                    send = Send {
                                      receiver = LVar {
                                        name = lines
                                      }
                                      method = each
                                      args = [
                                      ]
                                    }
                                    args = Args {
                                      args = [
                                        Arg {
                                          name = line
                                        }
                                      ]
                                    }
                                    body = If {
                                      condition = Send {
                                        receiver = LVar {
                                          name = line
                                        }
                                        method = start_with?
                                        args = [
                                          DString {
                                            nodes = [
                                              String {
                                                val = index 
                                              }
                                            ]
                                          }
                                          DString {
                                            nodes = [
                                              String {
                                                val = @@
                                              }
                                            ]
                                          }
                                          DString {
                                            nodes = [
                                              String {
                                                val = new file mode
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                      then_ = Next {
                                        exprs = [
                                        ]
                                      }
                                      else_ = If {
                                        condition = Send {
                                          receiver = LVar {
                                            name = line
                                          }
                                          method = start_with?
                                          args = [
                                            DString {
                                              nodes = [
                                                String {
                                                  val = ---
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                        then_ = Begin {
                                          stmts = [
                                            Assign {
                                              lhs = LVarLhs {
                                                name = a_name
                                              }
                                              rhs = Send {
                                                receiver = LVar {
                                                  name = line
                                                }
                                                method = []
                                                args = [
                                                  IRange {
                                                    from = Integer {
                                                      val = "4"
                                                    }
                                                    to = Integer {
                                                      val = "-1"
                                                    }
                                                  }
                                                ]
                                              }
                                            }
                                            If {
                                              condition = And {
                                                left = LVar {
                                                  name = a_name
                                                }
                                                right = Send {
                                                  receiver = LVar {
                                                    name = a_name
                                                  }
                                                  method = start_with?
                                                  args = [
                                                    DString {
                                                      nodes = [
                                                        String {
                                                          val = a/
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                }
                                              }
                                              then_ = Assign {
                                                lhs = LVarLhs {
                                                  name = a_name
                                                }
                                                rhs = Send {
                                                  receiver = LVar {
                                                    name = a_name
                                                  }
                                                  method = []
                                                  args = [
                                                    IRange {
                                                      from = Integer {
                                                        val = "2"
                                                      }
                                                      to = Integer {
                                                        val = "-1"
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                              else_ = NULL
                                            }
                                          ]
                                        }
                                        else_ = If {
                                          condition = Send {
                                            receiver = LVar {
                                              name = line
                                            }
                                            method = start_with?
                                            args = [
                                              DString {
                                                nodes = [
                                                  String {
                                                    val = +++
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                          then_ = Begin {
                                            stmts = [
                                              Assign {
                                                lhs = LVarLhs {
                                                  name = b_name
                                                }
                                                rhs = Send {
                                                  receiver = LVar {
                                                    name = line
                                                  }
                                                  method = []
                                                  args = [
                                                    IRange {
                                                      from = Integer {
                                                        val = "4"
                                                      }
                                                      to = Integer {
                                                        val = "-1"
                                                      }
                                                    }
                                                  ]
                                                }
                                              }
                                              If {
                                                condition = And {
                                                  left = LVar {
                                                    name = b_name
                                                  }
                                                  right = Send {
                                                    receiver = LVar {
                                                      name = b_name
                                                    }
                                                    method = start_with?
                                                    args = [
                                                      DString {
                                                        nodes = [
                                                          String {
                                                            val = b/
                                                          }
                                                        ]
                                                      }
                                                    ]
                                                  }
                                                }
                                                then_ = Assign {
                                                  lhs = LVarLhs {
                                                    name = b_name
                                                  }
                                                  rhs = Send {
                                                    receiver = LVar {
                                                      name = b_name
                                                    }
                                                    method = []
                                                    args = [
                                                      IRange {
                                                        from = Integer {
                                                          val = "2"
                                                        }
                                                        to = Integer {
                                                          val = "-1"
                                                        }
                                                      }
                                                    ]
                                                  }
                                                }
                                                else_ = NULL
                                              }
                                            ]
                                          }
                                          else_ = If {
                                            condition = Send {
                                              receiver = LVar {
                                                name = line
                                              }
                                              method = start_with?
                                              args = [
                                                DString {
                                                  nodes = [
                                                    String {
                                                      val = +
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                            then_ = Send {
                                              receiver = LVar {
                                                name = added_lines
                                              }
                                              method = <<
                                              args = [
                                                Send {
                                                  receiver = LVar {
                                                    name = line
                                                  }
                                                  method = []
                                                  args = [
                                                    IRange {
                                                      from = Integer {
                                                        val = "1"
                                                      }
                                                      to = Integer {
                                                        val = "-1"
                                                      }
                                                    }
                                                  ]
                                                }
                                              ]
                                            }
                                            else_ = If {
                                              condition = Send {
                                                receiver = LVar {
                                                  name = line
                                                }
                                                method = start_with?
                                                args = [
                                                  DString {
                                                    nodes = [
                                                      String {
                                                        val = -
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                              then_ = Send {
                                                receiver = LVar {
                                                  name = removed_lines
                                                }
                                                method = <<
                                                args = [
                                                  Send {
                                                    receiver = LVar {
                                                      name = line
                                                    }
                                                    method = []
                                                    args = [
                                                      IRange {
                                                        from = Integer {
                                                          val = "1"
                                                        }
                                                        to = Integer {
                                                          val = "-1"
                                                        }
                                                      }
                                                    ]
                                                  }
                                                ]
                                              }
                                              else_ = NULL
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  If {
                                    condition = Send {
                                      receiver = LVar {
                                        name = a_name
                                      }
                                      method = nil?
                                      args = [
                                      ]
                                    }
                                    then_ = Next {
                                      exprs = [
                                      ]
                                    }
                                    else_ = NULL
                                  }
                                  Hash {
                                    pairs = [
                                      Pair {
                                        key = Symbol {
                                          val = a_name
                                        }
                                        value = LVar {
                                          name = a_name
                                        }
                                      }
                                      Pair {
                                        key = Symbol {
                                          val = b_name
                                        }
                                        value = LVar {
                                          name = b_name
                                        }
                                      }
                                      Pair {
                                        key = Symbol {
                                          val = added_lines
                                        }
                                        value = LVar {
                                          name = added_lines
                                        }
                                      }
                                      Pair {
                                        key = Symbol {
                                          val = removed_lines
                                        }
                                        value = LVar {
                                          name = removed_lines
                                        }
                                      }
                                    ]
                                  }
                                ]
                              }
                            }
                            method = compact
                            args = [
                            ]
                          }
                        ]
                      }
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    }
  ]
}
