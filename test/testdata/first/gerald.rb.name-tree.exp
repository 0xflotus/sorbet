begin
  <emptyTree>.require_relative("../../../extn")
  ::Opus::AutogenLoader.init("__FILE__")
  module <emptyTree>::Opus::CIBot::Gerald<Gerald> < ()
    class <emptyTree>::MatchTimeout<MatchTimeout> < (<emptyTree>::StandardError)
      <emptyTree>.attr_reader(:rule_token)

      def initialize<initialize>(message<todo lvar sym>, rule_token<todo lvar sym>: = "")
        begin
          super(message<todo lvar sym>)
          @rule_token<todo ivar sym> = ::Opus::CIBot::Gerald::MatchTimeout#initialize#rule_token
        end

    end

    class <emptyTree>::Matcher<Matcher> < (::Object, <emptyTree>::Chalk::Log)
      <emptyTree>::MAX_AFFECTED_FILES = 100

      def initialize<initialize>()
        begin
          begin
            #assignTmp$0 = ::Opus::CIBot::Model::GeraldRule.query_by(:deleted_at_is_nil).load_all({}).partition(<Not Supported (BlockPass)>)
            @rules<todo ivar sym> = #assignTmp$0.[](0)
            ::Opus::CIBot::Gerald::Matcher#initialize#invalid_rules = #assignTmp$0.[](1)
            #assignTmp$0
          end
          if ::Opus::CIBot::Gerald::Matcher#initialize#invalid_rules.empty?().!()
            begin
              ::Opus::CIBot::Gerald::Matcher#initialize#invalid_rule_ids = ::Opus::CIBot::Gerald::Matcher#initialize#invalid_rules.map(<Not Supported (BlockPass)>).join(",")
              <emptyTree>.log().warn("Gerald skipping invalid rules: ".+(::Opus::CIBot::Gerald::Matcher#initialize#invalid_rule_ids))
            end
          else
            <emptyTree>
          end
        end

      def match<match>(match_context<todo lvar sym>)
        begin
          if ::Opus::CIBot::Gerald::Matcher#match#match_context.diff().affected_files().count().>(<emptyTree>::MAX_AFFECTED_FILES)
            begin
              <emptyTree>.log().warn("Gerald skipping large PR with ".concat(begin
                    ::Opus::CIBot::Gerald::Matcher#match#match_context.diff().affected_files().count()
                  end.to_s()).concat(" affected files").to_s())
              return []
            end
          else
            <emptyTree>
          end
          ::Opus::CIBot::Gerald::Matcher#match#budget = ::Opus::CIBot::Gerald::MatchTimeBudget.new()
          @rules<todo ivar sym>.select() do |r<todo lvar sym>|
            budget<todo lvar sym>.time_rule(r<todo lvar sym>) do ||
              r<todo lvar sym>.matches?(match_context<todo lvar sym>)
            end
          end
        end

    end

    class <emptyTree>::MatchContext<MatchContext> < (::Object)
      <emptyTree>.attr_reader(:repo)

      <emptyTree>.attr_reader(:assignee)

      <emptyTree>.attr_reader(:gh_user)

      <emptyTree>.attr_reader(:merge_branch)

      <emptyTree>.attr_reader(:body)

      <emptyTree>.attr_reader(:title)

      <emptyTree>.attr_reader(:diff)

      <emptyTree>.attr_reader(:openapi_diff)

      def initialize<initialize>(repo<todo lvar sym>, assignee<todo lvar sym>, gh_user<todo lvar sym>, merge_branch<todo lvar sym>, body<todo lvar sym>, title<todo lvar sym>, diff<todo lvar sym>, openapi_diff<todo lvar sym>)
        begin
          @repo<todo ivar sym> = ::Opus::CIBot::Gerald::MatchContext#initialize#repo
          @assignee<todo ivar sym> = ::Opus::CIBot::Gerald::MatchContext#initialize#assignee
          @gh_user<todo ivar sym> = ::Opus::CIBot::Gerald::MatchContext#initialize#gh_user
          @merge_branch<todo ivar sym> = ::Opus::CIBot::Gerald::MatchContext#initialize#merge_branch
          @body<todo ivar sym> = ::Opus::CIBot::Gerald::MatchContext#initialize#body
          @title<todo ivar sym> = ::Opus::CIBot::Gerald::MatchContext#initialize#title
          @diff<todo ivar sym> = ::Opus::CIBot::Gerald::MatchContext#initialize#diff
          @openapi_diff<todo ivar sym> = ::Opus::CIBot::Gerald::MatchContext#initialize#openapi_diff
        end

      def user_stripe_suffix?<user_stripe_suffix?>()
        @repo<todo ivar sym>.start_with?("stripe-internal/").!()

    end

    class <emptyTree>::MatchTimeBudget<MatchTimeBudget> < (::Object)
      <emptyTree>::TOTAL_TIME_MS = 10000

      <emptyTree>::PER_RULE_MS = 2000

      def initialize<initialize>()
        @start<todo ivar sym> = <emptyTree>::Time.now()

      def check!<check!>()
        begin
          ::Opus::CIBot::Gerald::MatchTimeBudget#check!#dur_ms = begin
            <emptyTree>::Time.now().-(@start<todo ivar sym>)
          end.*(1000)
          if ::Opus::CIBot::Gerald::MatchTimeBudget#check!#dur_ms.>(<emptyTree>::TOTAL_TIME_MS)
            <emptyTree>.raise(::Opus::CIBot::Gerald::MatchTimeout.new("Gerald match time budged exceeded ".concat(begin
                    <emptyTree>::TOTAL_TIME_MS
                  end.to_s()).concat("ms").to_s()))
          else
            <emptyTree>
          end
        end

      def time_rule<time_rule>(rule<todo lvar sym>)
        begin
          ::Opus::CIBot::Gerald::MatchTimeBudget#time_rule#rule_start = <emptyTree>::Time.now()
          ::Opus::CIBot::Gerald::MatchTimeBudget#time_rule#res = yield(<emptyTree>)
          ::Opus::CIBot::Gerald::MatchTimeBudget#time_rule#dur_ms = begin
            <emptyTree>::Time.now().-(::Opus::CIBot::Gerald::MatchTimeBudget#time_rule#rule_start)
          end.*(1000)
          if ::Opus::CIBot::Gerald::MatchTimeBudget#time_rule#dur_ms.>(<emptyTree>::PER_RULE_MS)
            <emptyTree>.raise(::Opus::CIBot::Gerald::MatchTimeout.new("Gerald rule '".concat(begin
                    ::Opus::CIBot::Gerald::MatchTimeBudget#time_rule#rule.token()
                  end.to_s()).concat("' exceeded per-rule time budget actual=").concat(begin
                    ::Opus::CIBot::Gerald::MatchTimeBudget#time_rule#dur_ms.to_i()
                  end.to_s()).concat("ms budget=").concat(begin
                    <emptyTree>::PER_RULE_MS
                  end.to_s()).concat("ms").to_s(), {:rule_token => rule<todo lvar sym>.token()}))
          else
            <emptyTree>
          end
          <emptyTree>.check!()
          ::Opus::CIBot::Gerald::MatchTimeBudget#time_rule#res
        end

    end

    class <emptyTree>::Diff<Diff> < (::Object)
      def initialize<initialize>(raw_diff<todo lvar sym>)
        begin
          @raw<todo ivar sym> = ::Opus::CIBot::Gerald::Diff#initialize#raw_diff
          @parsed<todo ivar sym> = <emptyTree>.parse(::Opus::CIBot::Gerald::Diff#initialize#raw_diff)
        end

      def affected_files<affected_files>()
        <emptyTree>.added_files().+(<emptyTree>.deleted_files()).+(<emptyTree>.changed_files())

      def added_files<added_files>()
        @parsed<todo ivar sym>.select() do |part<todo lvar sym>|
          part<todo lvar sym>.[](:a_name).==("/dev/null")
        end.map() do |part<todo lvar sym>|
          part<todo lvar sym>.[](:b_name)
        end

      def deleted_files<deleted_files>()
        @parsed<todo ivar sym>.select() do |part<todo lvar sym>|
          part<todo lvar sym>.[](:b_name).==("/dev/null")
        end.map() do |part<todo lvar sym>|
          part<todo lvar sym>.[](:a_name)
        end

      def changed_files<changed_files>()
        @parsed<todo ivar sym>.select() do |part<todo lvar sym>|
          part<todo lvar sym>.[](:a_name).==(part<todo lvar sym>.[](:b_name))
        end.map() do |part<todo lvar sym>|
          part<todo lvar sym>.[](:b_name)
        end

      def added_lines<added_lines>()
        @parsed<todo ivar sym>.map() do |part<todo lvar sym>|
          part<todo lvar sym>.[](:added_lines)
        end.flatten()

      def removed_lines<removed_lines>()
        @parsed<todo ivar sym>.map() do |part<todo lvar sym>|
          part<todo lvar sym>.[](:removed_lines)
        end.flatten()

      def changed_lines<changed_lines>()
        <emptyTree>.added_lines().+(<emptyTree>.removed_lines())

      def changed_openapi?<changed_openapi?>()
        <emptyTree>.changed_files().include?(::Opus::CIBot::Actions::OpenAPI::SPEC_PATH)

      <emptyTree>.private(def parse<parse>(diff<todo lvar sym>)
          begin
            ::Opus::CIBot::Gerald::Diff#parse#parts = ::Opus::CIBot::Gerald::Diff#parse#diff.split(<Not Supported (Regexp)>).[](<Not Supported (IRange)>)
            if ::Opus::CIBot::Gerald::Diff#parse#parts
              ::Opus::CIBot::Gerald::Diff#parse#parts
            else
              ::Opus::CIBot::Gerald::Diff#parse#parts = []
            end
            ::Opus::CIBot::Gerald::Diff#parse#parts.map() do |part<todo lvar sym>|
              begin
                lines<todo lvar sym> = part<todo lvar sym>.split("
")
                a_name<todo lvar sym> = b_name<todo lvar sym> = nil
                added_lines<todo lvar sym> = []
                removed_lines<todo lvar sym> = []
                lines<todo lvar sym>.each() do |line<todo lvar sym>|
                  if line<todo lvar sym>.start_with?("index ", "@@", "new file mode")
                    next(<emptyTree>)
                  else
                    if line<todo lvar sym>.start_with?("---")
                      begin
                        a_name<todo lvar sym> = line<todo lvar sym>.[](<Not Supported (IRange)>)
                        if begin
                            #&&$1 = <emptyTree>
                            if #&&$1
                              <emptyTree>
                            else
                              #&&$1
                            end
                          end
                          a_name<todo lvar sym> = a_name<todo lvar sym>.[](<Not Supported (IRange)>)
                        else
                          <emptyTree>
                        end
                      end
                    else
                      if line<todo lvar sym>.start_with?("+++")
                        begin
                          b_name<todo lvar sym> = line<todo lvar sym>.[](<Not Supported (IRange)>)
                          if begin
                              #&&$2 = <emptyTree>
                              if #&&$2
                                <emptyTree>
                              else
                                #&&$2
                              end
                            end
                            b_name<todo lvar sym> = b_name<todo lvar sym>.[](<Not Supported (IRange)>)
                          else
                            <emptyTree>
                          end
                        end
                      else
                        if line<todo lvar sym>.start_with?("+")
                          added_lines<todo lvar sym>.<<(line<todo lvar sym>.[](<Not Supported (IRange)>))
                        else
                          if line<todo lvar sym>.start_with?("-")
                            removed_lines<todo lvar sym>.<<(line<todo lvar sym>.[](<Not Supported (IRange)>))
                          else
                            <emptyTree>
                          end
                        end
                      end
                    end
                  end
                end
                if a_name<todo lvar sym>.nil?()
                  next(<emptyTree>)
                else
                  <emptyTree>
                end
                {:a_name => a_name<todo lvar sym>, :b_name => b_name<todo lvar sym>, :added_lines => added_lines<todo lvar sym>, :removed_lines => removed_lines<todo lvar sym>}
              end
            end.compact()
          end)

    end

  end
end
