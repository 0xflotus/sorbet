begin
  self(<singleton class:<root>>).require_relative("../../../extn")
  ::untyped.init("__FILE__")
  module <emptyTree>::Opus::CIBot::Gerald<Gerald> < ()
    class <emptyTree>::MatchTimeout<MatchTimeout> < (::untyped)
      self(<singleton class:MatchTimeout>).attr_reader(:rule_token)

      def initialize<initialize>(message, rule_token)
        begin
          self(MatchTimeout).super(message)
          ::Opus::CIBot::Gerald::MatchTimeout#@rule_token = rule_token
        end

    end

    class <emptyTree>::Matcher<Matcher> < (::untyped)
      ::Opus::CIBot::Gerald::Matcher#MAX_AFFECTED_FILES = 100

      def initialize<initialize>()
        begin
          begin
            assignTmp$0 = ::untyped.query_by(:deleted_at_is_nil).load_all({}).partition(<Not Supported (BlockPass)>)
            ::Opus::CIBot::Gerald::Matcher#@rules = assignTmp$0.[](0)
            invalid_rules = assignTmp$0.[](1)
            assignTmp$0
          end
          if invalid_rules.empty?().!()
            begin
              invalid_rule_ids = invalid_rules.map(<Not Supported (BlockPass)>).join(",")
              self(Matcher).log().warn("Gerald skipping invalid rules: ".+(invalid_rule_ids))
            end
          else
            <emptyTree>
          end
        end

      def match<match>(match_context)
        begin
          if match_context.diff().affected_files().count().>(::Opus::CIBot::Gerald::Matcher#MAX_AFFECTED_FILES)
            begin
              self(Matcher).log().warn("Gerald skipping large PR with ".concat(begin
                    match_context.diff().affected_files().count()
                  end.to_s()).concat(" affected files").to_s())
              return []
            end
          else
            <emptyTree>
          end
          budget = ::Opus::CIBot::Gerald::MatchTimeBudget.new()
          ::Opus::CIBot::Gerald::Matcher#@rules.select() do |<block-nested: r$5>|
            budget.time_rule(<block-nested: r$5>) do ||
              <block-nested: r$5>.matches?(match_context)
            end
          end
        end

    end

    class <emptyTree>::MatchContext<MatchContext> < ()
      self(<singleton class:MatchContext>).attr_reader(:repo)

      self(<singleton class:MatchContext>).attr_reader(:assignee)

      self(<singleton class:MatchContext>).attr_reader(:gh_user)

      self(<singleton class:MatchContext>).attr_reader(:merge_branch)

      self(<singleton class:MatchContext>).attr_reader(:body)

      self(<singleton class:MatchContext>).attr_reader(:title)

      self(<singleton class:MatchContext>).attr_reader(:diff)

      self(<singleton class:MatchContext>).attr_reader(:openapi_diff)

      def initialize<initialize>(repo, assignee, gh_user, merge_branch, body, title, diff, openapi_diff)
        begin
          ::Opus::CIBot::Gerald::MatchContext#@repo = repo
          ::Opus::CIBot::Gerald::MatchContext#@assignee = assignee
          ::Opus::CIBot::Gerald::MatchContext#@gh_user = gh_user
          ::Opus::CIBot::Gerald::MatchContext#@merge_branch = merge_branch
          ::Opus::CIBot::Gerald::MatchContext#@body = body
          ::Opus::CIBot::Gerald::MatchContext#@title = title
          ::Opus::CIBot::Gerald::MatchContext#@diff = diff
          ::Opus::CIBot::Gerald::MatchContext#@openapi_diff = openapi_diff
        end

      def user_stripe_suffix?<user_stripe_suffix?>()
        ::Opus::CIBot::Gerald::MatchContext#@repo.start_with?("stripe-internal/").!()

    end

    class <emptyTree>::MatchTimeBudget<MatchTimeBudget> < ()
      ::Opus::CIBot::Gerald::MatchTimeBudget#TOTAL_TIME_MS = 10000

      ::Opus::CIBot::Gerald::MatchTimeBudget#PER_RULE_MS = 2000

      def initialize<initialize>()
        ::Opus::CIBot::Gerald::MatchTimeBudget#@start = ::untyped.now()

      def check!<check!>()
        begin
          dur_ms = begin
            ::untyped.now().-(::Opus::CIBot::Gerald::MatchTimeBudget#@start)
          end.*(1000)
          if dur_ms.>(::Opus::CIBot::Gerald::MatchTimeBudget#TOTAL_TIME_MS)
            self(MatchTimeBudget).raise(::Opus::CIBot::Gerald::MatchTimeout.new("Gerald match time budged exceeded ".concat(begin
                    ::Opus::CIBot::Gerald::MatchTimeBudget#TOTAL_TIME_MS
                  end.to_s()).concat("ms").to_s()))
          else
            <emptyTree>
          end
        end

      def time_rule<time_rule>(rule)
        begin
          rule_start = ::untyped.now()
          res = yield(<emptyTree>)
          dur_ms = begin
            ::untyped.now().-(rule_start)
          end.*(1000)
          if dur_ms.>(::Opus::CIBot::Gerald::MatchTimeBudget#PER_RULE_MS)
            self(MatchTimeBudget).raise(::Opus::CIBot::Gerald::MatchTimeout.new("Gerald rule '".concat(begin
                    rule.token()
                  end.to_s()).concat("' exceeded per-rule time budget actual=").concat(begin
                    dur_ms.to_i()
                  end.to_s()).concat("ms budget=").concat(begin
                    ::Opus::CIBot::Gerald::MatchTimeBudget#PER_RULE_MS
                  end.to_s()).concat("ms").to_s(), {:rule_token => rule.token()}))
          else
            <emptyTree>
          end
          self(MatchTimeBudget).check!()
          res
        end

    end

    class <emptyTree>::Diff<Diff> < ()
      def initialize<initialize>(raw_diff)
        begin
          ::Opus::CIBot::Gerald::Diff#@raw = raw_diff
          ::Opus::CIBot::Gerald::Diff#@parsed = self(Diff).parse(raw_diff)
        end

      def affected_files<affected_files>()
        self(Diff).added_files().+(self(Diff).deleted_files()).+(self(Diff).changed_files())

      def added_files<added_files>()
        ::Opus::CIBot::Gerald::Diff#@parsed.select() do |<block-nested: part$9>|
          <block-nested: part$9>.[](:a_name).==("/dev/null")
        end.map() do |<block-nested: part$11>|
          <block-nested: part$11>.[](:b_name)
        end

      def deleted_files<deleted_files>()
        ::Opus::CIBot::Gerald::Diff#@parsed.select() do |<block-nested: part$13>|
          <block-nested: part$13>.[](:b_name).==("/dev/null")
        end.map() do |<block-nested: part$15>|
          <block-nested: part$15>.[](:a_name)
        end

      def changed_files<changed_files>()
        ::Opus::CIBot::Gerald::Diff#@parsed.select() do |<block-nested: part$17>|
          <block-nested: part$17>.[](:a_name).==(<block-nested: part$17>.[](:b_name))
        end.map() do |<block-nested: part$19>|
          <block-nested: part$19>.[](:b_name)
        end

      def added_lines<added_lines>()
        ::Opus::CIBot::Gerald::Diff#@parsed.map() do |<block-nested: part$21>|
          <block-nested: part$21>.[](:added_lines)
        end.flatten()

      def removed_lines<removed_lines>()
        ::Opus::CIBot::Gerald::Diff#@parsed.map() do |<block-nested: part$23>|
          <block-nested: part$23>.[](:removed_lines)
        end.flatten()

      def changed_lines<changed_lines>()
        self(Diff).added_lines().+(self(Diff).removed_lines())

      def changed_openapi?<changed_openapi?>()
        self(Diff).changed_files().include?(::untyped)

      self(<singleton class:Diff>).private(def parse<parse>(diff)
          begin
            parts = diff.split(<Not Supported (Regexp)>).[](<Not Supported (IRange)>)
            if parts
              parts
            else
              parts = []
            end
            parts.map() do |<block-nested: part$26>|
              begin
                <block-nested: lines> = <block-nested: part$26>.split("
")
                <block-nested: a_name> = <block-nested: b_name> = nil
                <block-nested: added_lines> = []
                <block-nested: removed_lines> = []
                <block-nested: lines>.each() do |<block-nested: line$28>|
                  if <block-nested: line$28>.start_with?("index ", "@@", "new file mode")
                    next(<emptyTree>)
                  else
                    if <block-nested: line$28>.start_with?("---")
                      begin
                        <block-nested: a_name> = <block-nested: line$28>.[](<Not Supported (IRange)>)
                        if if <block-nested: a_name>
                            <block-nested: a_name>.start_with?("a/")
                          else
                            <block-nested: a_name>
                          end
                          <block-nested: a_name> = <block-nested: a_name>.[](<Not Supported (IRange)>)
                        else
                          <emptyTree>
                        end
                      end
                    else
                      if <block-nested: line$28>.start_with?("+++")
                        begin
                          <block-nested: b_name> = <block-nested: line$28>.[](<Not Supported (IRange)>)
                          if if <block-nested: b_name>
                              <block-nested: b_name>.start_with?("b/")
                            else
                              <block-nested: b_name>
                            end
                            <block-nested: b_name> = <block-nested: b_name>.[](<Not Supported (IRange)>)
                          else
                            <emptyTree>
                          end
                        end
                      else
                        if <block-nested: line$28>.start_with?("+")
                          <block-nested: added_lines>.<<(<block-nested: line$28>.[](<Not Supported (IRange)>))
                        else
                          if <block-nested: line$28>.start_with?("-")
                            <block-nested: removed_lines>.<<(<block-nested: line$28>.[](<Not Supported (IRange)>))
                          else
                            <emptyTree>
                          end
                        end
                      end
                    end
                  end
                end
                if <block-nested: a_name>.nil?()
                  next(<emptyTree>)
                else
                  <emptyTree>
                end
                {:a_name => <block-nested: a_name>, :b_name => <block-nested: b_name>, :added_lines => <block-nested: added_lines>, :removed_lines => <block-nested: removed_lines>}
              end
            end.compact()
          end)

    end

  end
end
