class <emptyTree><<C <U <root>>>> < ()
  self(<C <U <todo sym>>>).<U alias_method>(:"afoo", :"bar")

  <U @iv> = 1

  <U @@cv> = 1

  <U $gv> = 1

  begin
    <D <U <assignTemp>> $2> = ::<Magic>.<U <expand-splat>>([nil, nil], 2, 0)
    self(<C <U <todo sym>>>).<U x>().<U var=>(<D <U <assignTemp>> $2>.<U []>(0))
    <U y> = <D <U <assignTemp>> $2>.<U []>(1)
    <D <U <assignTemp>> $2>
  end

  begin
    <D <U <assignTemp>> $3> = ::<Magic>.<U <expand-splat>>(self(<C <U <todo sym>>>).<U zaaaz>(), 2, 0)
    <U baaaar> = <D <U <assignTemp>> $3>.<U []>(0)
    <U naaar> = <D <U <assignTemp>> $3>.<U []>(1)
    <D <U <assignTemp>> $3>
  end

  <U xaaaaz> = [self(<C <U <todo sym>>>).<U yayayaya>(), self(<C <U <todo sym>>>).<U tutututu>()]

  <emptyTree>

  nil

  begin
    self(<C <U <todo sym>>>).<U a>()
    self(<C <U <todo sym>>>).<U b>()
  end

  def <U bfoo><<C <U <todo sym>>>>(&<U x>)
    <emptyTree>
  end

  self(<C <U <todo sym>>>).<U lambda>() do ||
    <emptyTree>
  end

  begin
    <D <U <assignTemp>> $4> = self(<C <U <todo sym>>>).<U x>()
    if <U y>.<U ===>(<D <U <assignTemp>> $4>)
      1
    else
      self(<C <U <todo sym>>>).<U z>()
    end
  end

  "x"

  1.<U +>(::Kernel.<U Complex>(0, "4"))

  0.500000

  ::Kernel.<U Complex>(0, "1.5")

  def self.<U classmeth><<C <U <todo sym>>>>(&<U <blk>>)
    <emptyTree>
  end

  class <U <singleton class>><<C <U <todo sym>>>> < ()
    <emptyTree>
  end

  begin
    <D <U ||> $5> = true
    if <D <U ||> $5>
      <D <U ||> $5>
    else
      false
    end
  end

  self(<C <U <todo sym>>>).<U arr>().<U each>() do |*<D <U forTemp> $6>|
    begin
      begin
        <D <U <assignTemp>> $7> = ::<Magic>.<U <expand-splat>>(<D <U forTemp> $6>, 1, 0)
        <U x> = <D <U <assignTemp>> $7>.<U []>(0)
        <D <U <assignTemp>> $7>
      end
      <emptyTree>
    end
  end

  while 0.<U !=>(1)
    <emptyTree>
  end

  <U x>.<U []=>(1, 0)

  break(<emptyTree>)

  break(1)

  break([1, 2])

  next(<emptyTree>)

  next(1)

  next([1, 2])

  ::<Magic>.<U defined?>(<emptyTree>::<C <U X>>)

  self(<C <U <todo sym>>>).<U super>(ZSuperArgs)

  def <U kwfoo><<C <U <todo sym>>>>(<U x>:, <U y>: = 1, *<U z>:, &<U <blk>>)
    <emptyTree>
  end

  <U x>.<U to_hash>()

  86

  while true
    nil
  end

  while true
    nil
  end

  while true.<U !>()
    nil
  end

  while true.<U !>()
    nil
  end

  while true
    begin
      <D <U forTemp> $8> = self(<C <U <todo sym>>>).<U puts>(1)
      if false.<U !>()
        break(<D <U forTemp> $8>)
      else
        <emptyTree>
      end
    end
  end

  while true
    begin
      <D <U forTemp> $9> = self(<C <U <todo sym>>>).<U puts>(1)
      if true
        break(<D <U forTemp> $9>)
      else
        <emptyTree>
      end
    end
  end

  begin
    <D <U <assignTemp>> $10> = ::<Magic>.<U <expand-splat>>(1, 2, 0)
    <U a> = <D <U <assignTemp>> $10>.<U []>(0)
    begin
      <D <U <assignTemp>> $11> = ::<Magic>.<U <expand-splat>>(<D <U <assignTemp>> $10>.<U []>(1), 1, 0)
      <U x> = <D <U <assignTemp>> $11>.<U []>(0)
      <D <U <assignTemp>> $11>
    end
    <D <U <assignTemp>> $10>
  end

  <U 4>

  def <U optfoo><<C <U <todo sym>>>>(<U x> = 1, *<U y>, &<U <blk>>)
    <emptyTree>
  end

  {<U x> => <U y>, "foo".<U intern>() => 1}

  <emptyTree>

  <emptyTree>

  ::Kernel.<U Rational>("4")

  ::Kernel.<U Complex>(0, "5")

  <emptyTree>
rescue <emptyTree>::<C <U E>> => <U x>
  nil

  begin
    <D <U <assignTemp>> $12> = ::<Magic>.<U <expand-splat>>(<U y>.<U to_a>(), 0, 0)
    <U x> = <D <U <assignTemp>> $12>.<U slice>(::Range.<U new>(0, -1, false))
    <D <U <assignTemp>> $12>
  end

  "foo".<U concat>(self(<C <U <todo sym>>>).<U bar>().<U to_s>()).<U intern>()

  [:"sym"]

  if <U x>
    1
  else
    7
  end

  <emptyTree>

  ["a", "b"]

  ["a", "b"]

  self(<C <U <todo sym>>>).<U `>("true")

  self(<C <U <todo sym>>>).<U proc>() do |<U x>|
    <emptyTree>
  end

  break(self(<C <U <todo sym>>>).<U cfoo>(1) do ||
      <emptyTree>
    end)

  def <U sfoo><<C <U <todo sym>>>>(*<P <U *> $2>, &<U <blk>>)
    <emptyTree>
  end

  def <U ssfoo><<C <U <todo sym>>>>(*<P <U **> $3>:, &<U <blk>>)
    <emptyTree>
  end
end
