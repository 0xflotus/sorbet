class <emptyTree>::<C <U Examples>><<C <U <todo sym>>>> < (::<todo sym>)
  def <U i_like_ifs><<C <U <todo sym>>>>(&<U <blk>>)
    if true
      return 1
    else
      return 2
    end
  end

  def <U i_like_exps><<C <U <todo sym>>>>(&<U <blk>>)
    if true
      1
    else
      2
    end
  end

  def <U return_in_one_branch1><<C <U <todo sym>>>>(&<U <blk>>)
    if true
      return 1
    else
      2
    end
  end

  def <U return_in_one_branch2><<C <U <todo sym>>>>(&<U <blk>>)
    if true
      1
    else
      return 2
    end
  end

  def <U variables><<C <U <todo sym>>>>(&<U <blk>>)
    begin
      if true
        <U a> = 1
      else
        <U a> = 2
      end
      if false
        <U b> = 1
      else
        <U b> = 2
      end
      <U a>.<U +>(<U b>)
    end
  end

  def <U variables_and_loop><<C <U <todo sym>>>>(<U cond>, &<U <blk>>)
    begin
      if true
        <U a> = 1
      else
        <U a> = 2
      end
      while true
        if <U cond>
          <U b> = 1
        else
          <U b> = 2
        end
      end
      <U b>
    end
  end

  def <U variables_loop_if><<C <U <todo sym>>>>(<U cond>, &<U <blk>>)
    begin
      while true
        if <U cond>
          <U b> = 1
        else
          <U b> = 2
        end
      end
      <U b>
    end
  end

  def <U take_arguments><<C <U <todo sym>>>>(<U i>, &<U <blk>>)
    if false
      2
    else
      <U i>
    end
  end
end
