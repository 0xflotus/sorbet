digraph "ivar_assign.rb" {
subgraph "cluster_::TestIVar#initialize" {
    label = "::TestIVar#initialize";
    color = blue;
    "bb::TestIVar#initialize_0" [shape = invhouse];
    "bb::TestIVar#initialize_1" [shape = parallelogram];

    "bb::TestIVar#initialize_0" [
        label = "block[id=0]()\l@foo$4: Integer = alias @foo\l<statTemp>$6: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$7: T.class_of(Integer) = alias <constant:Integer>\l<statTemp>$5: RubyTyper::Void = <statTemp>$6: T.class_of(RubyTyper).keep_for_typechecking(<statTemp>$7: T.class_of(Integer))\l<castTemp>$8: Integer(0) = 0\l@foo$4: Integer = cast(<castTemp>$8: Integer(0), Integer);\l<returnMethodTemp>$2: Integer = @foo$4\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: Integer\l<unconditional>\l"
    ];

    "bb::TestIVar#initialize_0" -> "bb::TestIVar#initialize_1" [style="bold"];
    "bb::TestIVar#initialize_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestIVar#initialize_1" -> "bb::TestIVar#initialize_1" [style="bold"];
}

subgraph "cluster_::TestIVar#test" {
    label = "::TestIVar#test";
    color = blue;
    "bb::TestIVar#test_0" [shape = invhouse];
    "bb::TestIVar#test_1" [shape = parallelogram];

    "bb::TestIVar#test_0" [
        label = "block[id=0]()\l@foo$4: Integer = alias @foo\l@foo$4: Integer = nil\l<returnMethodTemp>$2: Integer = @foo$4\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: Integer\l<unconditional>\l"
    ];

    "bb::TestIVar#test_0" -> "bb::TestIVar#test_1" [style="bold"];
    "bb::TestIVar#test_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestIVar#test_1" -> "bb::TestIVar#test_1" [style="bold"];
}

}

