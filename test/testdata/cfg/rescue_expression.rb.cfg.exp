digraph "rescue_expression.rb" {
subgraph "cluster_::Object#foo" {
    label = "::Object#foo";
    color = blue;
    "bb::Object#foo_0" [shape = invhouse];
    "bb::Object#foo_1" [shape = parallelogram];

    "bb::Object#foo_0" [
        label = "block[id=0]()\l<constant:MyException>$8 = alias <constant:MyException> : <Class:MyException>\l<rescueTemp$4 = <unanalyzable> : T.untyped\l<rescueTemp$4\l"
    ];

    "bb::Object#foo_0" -> "bb::Object#foo_3" [style="bold"];
    "bb::Object#foo_0" -> "bb::Object#foo_4" [style="tapered"];

    "bb::Object#foo_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Object#foo_1" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_3" [
        label = "block[id=3](<rescueTemp$4, <constant:MyException>$8)\l<statTemp>$10 = <constant:MyException>$8.new() : MyException\l<rescueTemp$9 = <statTemp>$10.class() : <Class:MyException>\l<rescueTemp$12 = <rescueTemp$4.is_a?(<rescueTemp$9) : T.untyped\l<rescueTemp$12\l"
    ];

    "bb::Object#foo_3" -> "bb::Object#foo_7" [style="bold"];
    "bb::Object#foo_3" -> "bb::Object#foo_1" [style="tapered"];

    "bb::Object#foo_4" [
        label = "block[id=4](<constant:MyException>$8)\l<statTemp>$5 = self : Object\l<statTemp>$6 = <constant:MyException>$8.new() : MyException\l<returnMethodTemp>$2 = <statTemp>$5.raise(<statTemp>$6) : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#foo_4" -> "bb::Object#foo_9" [style="bold"];
    "bb::Object#foo_7" [
        label = "block[id=7](<rescueTemp$4)\l<returnMethodTemp>$2 = 3 : Integer(3)\l<unconditional>\l"
    ];

    "bb::Object#foo_7" -> "bb::Object#foo_9" [style="bold"];
    "bb::Object#foo_9" [
        label = "block[id=9](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#foo_9" -> "bb::Object#foo_1" [style="bold"];
}

subgraph "cluster_#<static-init>" {
    label = "#<static-init>";
    color = blue;
    "bb#<static-init>_0" [shape = invhouse];
    "bb#<static-init>_1" [shape = parallelogram];

    "bb#<static-init>_0" [
        label = "block[id=0]()\l<constant:RubyTyper>$7 = alias <constant:RubyTyper> : <Class:RubyTyper>\l<constant:Exception>$13 = alias <constant:Exception> : <Class:Exception>\l<constant:MyException>$9 = alias <constant:MyException> : <Class:MyException>\l<statTemp>$5 = <constant:RubyTyper>$7.keep_for_ide(<constant:MyException>$9) : T.untyped\l<statTemp>$10 = <constant:RubyTyper>$7.keep_for_ide(<constant:Exception>$13) : T.untyped\l<statTemp>$15 = self : <Class:<root>>\l<statTemp>$17 = self : <Class:<root>>\l<statTemp>$16 = <statTemp>$17.foo() : T.untyped\l<statTemp>$14 = <statTemp>$15.puts(<statTemp>$16) : NilClass\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb#<static-init>_0" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb#<static-init>_1" -> "bb#<static-init>_1" [style="bold"];
}

}

