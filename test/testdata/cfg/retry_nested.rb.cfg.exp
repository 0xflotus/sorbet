digraph "retry_nested.rb" {
subgraph "cluster_::Object#main" {
    label = "::Object#main";
    color = blue;
    "bb::Object#main_0" [shape = invhouse];
    "bb::Object#main_1" [shape = parallelogram];

    "bb::Object#main_0" [
        label = "block[id=0]()\ltry: Integer(0) = 0\l<unconditional>\l"
    ];

    "bb::Object#main_0" -> "bb::Object#main_2" [style="bold"];
    "bb::Object#main_1" [
        label = "block[id=1]()\l<returnMethodTemp>$2 = 1\l<returnMethodTemp>$2 = 2\l<unconditional>\l"
    ];

    "bb::Object#main_1" -> "bb::Object#main_1" [style="bold"];
    "bb::Object#main_2" [
        label = "block[id=2](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$35: NilClass, try: Integer(0))\l<rescueStartTemp>$5: T.untyped = <unanalyzable>\l<rescueStartTemp>$5: T.untyped\l"
    ];

    "bb::Object#main_2" -> "bb::Object#main_3" [style="bold"];
    "bb::Object#main_2" -> "bb::Object#main_4" [style="tapered"];

    "bb::Object#main_3" [
        label = "block[id=3](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$35: NilClass, try: Integer(0))\l<rescueTemp>$2: T.untyped = <unanalyzable>\l<exceptionClassTemp>$38: T.class_of(B) = alias <constant:B>\l<isaCheckTemp>$39: T.untyped = <rescueTemp>$2: T.untyped.is_a?(<exceptionClassTemp>$38: T.class_of(B))\l<isaCheckTemp>$39: T.untyped\l"
    ];

    "bb::Object#main_3" -> "bb::Object#main_23" [style="bold"];
    "bb::Object#main_3" -> "bb::Object#main_24" [style="tapered"];

    "bb::Object#main_4" [
        label = "block[id=4](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$35: NilClass, try: Integer(0))\l<statTemp>$7: Object = self\l<statTemp>$8: String(\"top\") = \"top\"\l<statTemp>$6: NilClass = <statTemp>$7: Object.puts(<statTemp>$8: String(\"top\"))\l<unconditional>\l"
    ];

    "bb::Object#main_4" -> "bb::Object#main_5" [style="bold"];
    "bb::Object#main_5" [
        label = "block[id=5](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$35: NilClass, try: Integer(0))\l<rescueStartTemp>$9: T.untyped = <unanalyzable>\l<rescueStartTemp>$9: T.untyped\l"
    ];

    "bb::Object#main_5" -> "bb::Object#main_6" [style="bold"];
    "bb::Object#main_5" -> "bb::Object#main_7" [style="tapered"];

    "bb::Object#main_6" [
        label = "block[id=6](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$35: NilClass, try: Integer(0))\l<rescueTemp>$3: T.untyped = <unanalyzable>\l<exceptionClassTemp>$29: T.class_of(A) = alias <constant:A>\l<isaCheckTemp>$30: T.untyped = <rescueTemp>$3: T.untyped.is_a?(<exceptionClassTemp>$29: T.class_of(A))\l<isaCheckTemp>$30: T.untyped\l"
    ];

    "bb::Object#main_6" -> "bb::Object#main_17" [style="bold"];
    "bb::Object#main_6" -> "bb::Object#main_18" [style="tapered"];

    "bb::Object#main_7" [
        label = "block[id=7](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$35: NilClass, try: Integer(0))\l<statTemp>$12: Integer(3) = 3\l<ifTemp>$10: T.any(TrueClass, FalseClass) = try: Integer(0).<(<statTemp>$12: Integer(3))\l<ifTemp>$10: T.any(TrueClass, FalseClass)\l"
    ];

    "bb::Object#main_7" -> "bb::Object#main_8" [style="bold"];
    "bb::Object#main_7" -> "bb::Object#main_9" [style="tapered"];

    "bb::Object#main_8" [
        label = "block[id=8](<gotoDeadTemp>$35: NilClass, try: Integer(0))\l<statTemp>$14: Integer(0) = try\l<statTemp>$15: Integer(1) = 1\ltry: Integer = <statTemp>$14: Integer(0).+(<statTemp>$15: Integer(1))\l<statTemp>$16: Object = self\l<statTemp>$18: T.class_of(A) = alias <constant:A>\l<statTemp>$17: A = <statTemp>$18: T.class_of(A).new()\l<returnMethodTemp>$2: T.noreturn = <statTemp>$16: Object.raise(<statTemp>$17: A)\l<unconditional>\l"
    ];

    "bb::Object#main_8" -> "bb::Object#main_16" [style="bold"];
    "bb::Object#main_9" [
        label = "block[id=9](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$35: NilClass, try: Integer(0))\l<statTemp>$21: Integer(6) = 6\l<ifTemp>$19: T.any(TrueClass, FalseClass) = try: Integer(0).<(<statTemp>$21: Integer(6))\l<ifTemp>$19: T.any(TrueClass, FalseClass)\l"
    ];

    "bb::Object#main_9" -> "bb::Object#main_10" [style="bold"];
    "bb::Object#main_9" -> "bb::Object#main_16" [style="tapered"];

    "bb::Object#main_10" [
        label = "block[id=10](<gotoDeadTemp>$35: NilClass, try: Integer(0))\l<statTemp>$23: Integer(0) = try\l<statTemp>$24: Integer(1) = 1\ltry: Integer = <statTemp>$23: Integer(0).+(<statTemp>$24: Integer(1))\l<statTemp>$25: Object = self\l<statTemp>$27: T.class_of(B) = alias <constant:B>\l<statTemp>$26: B = <statTemp>$27: T.class_of(B).new()\l<returnMethodTemp>$2: T.noreturn = <statTemp>$25: Object.raise(<statTemp>$26: B)\l<unconditional>\l"
    ];

    "bb::Object#main_10" -> "bb::Object#main_16" [style="bold"];
    "bb::Object#main_15" [
        label = "block[id=15](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$35: NilClass, try: Integer(0))\l<gotoDeadTemp>$35: NilClass\l"
    ];

    "bb::Object#main_15" -> "bb::Object#main_1" [style="bold"];
    "bb::Object#main_15" -> "bb::Object#main_22" [style="tapered"];

    "bb::Object#main_16" [
        label = "block[id=16](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$35: NilClass, try: Integer(0))\l<rescueEndTemp>$28: T.untyped = <unanalyzable>\l<rescueEndTemp>$28: T.untyped\l"
    ];

    "bb::Object#main_16" -> "bb::Object#main_6" [style="bold"];
    "bb::Object#main_16" -> "bb::Object#main_15" [style="tapered"];

    "bb::Object#main_17" [
        label = "block[id=17](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$35: NilClass, try: Integer(0))\l<statTemp>$32: Object = self\l<statTemp>$33: String(\"rescue A\") = \"rescue A\"\l<statTemp>$31: NilClass = <statTemp>$32: Object.puts(<statTemp>$33: String(\"rescue A\"))\l<unconditional>\l"
    ];

    "bb::Object#main_17" -> "bb::Object#main_5" [style="bold"];
    "bb::Object#main_18" [
        label = "block[id=18](<returnMethodTemp>$2: NilClass, try: Integer(0))\l<gotoDeadTemp>$35: TrueClass(true) = true\l<gotoDeadTemp>$35: TrueClass(true)\l"
    ];

    "bb::Object#main_18" -> "bb::Object#main_1" [style="bold"];
    "bb::Object#main_18" -> "bb::Object#main_22" [style="tapered"];

    "bb::Object#main_21" [
        label = "block[id=21](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$44: NilClass)\l<gotoDeadTemp>$44: NilClass\l"
    ];

    "bb::Object#main_21" -> "bb::Object#main_1" [style="bold"];
    "bb::Object#main_21" -> "bb::Object#main_25" [style="tapered"];

    "bb::Object#main_22" [
        label = "block[id=22](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$35: NilClass, try: Integer(0))\l<rescueEndTemp>$37: T.untyped = <unanalyzable>\l<rescueEndTemp>$37: T.untyped\l"
    ];

    "bb::Object#main_22" -> "bb::Object#main_3" [style="bold"];
    "bb::Object#main_22" -> "bb::Object#main_21" [style="tapered"];

    "bb::Object#main_23" [
        label = "block[id=23](<returnMethodTemp>$2: NilClass, <gotoDeadTemp>$35: NilClass, try: Integer(0))\l<statTemp>$41: Object = self\l<statTemp>$42: String(\"rescue B \") = \"rescue B \"\l<statTemp>$40: NilClass = <statTemp>$41: Object.puts(<statTemp>$42: String(\"rescue B \"))\l<unconditional>\l"
    ];

    "bb::Object#main_23" -> "bb::Object#main_2" [style="bold"];
    "bb::Object#main_24" [
        label = "block[id=24](<returnMethodTemp>$2: NilClass)\l<gotoDeadTemp>$44: TrueClass(true) = true\l<gotoDeadTemp>$44: TrueClass(true)\l"
    ];

    "bb::Object#main_24" -> "bb::Object#main_1" [style="bold"];
    "bb::Object#main_24" -> "bb::Object#main_25" [style="tapered"];

    "bb::Object#main_25" [
        label = "block[id=25](<returnMethodTemp>$2: NilClass)\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::Object#main_25" -> "bb::Object#main_1" [style="bold"];
}

subgraph "cluster_#<static-init>" {
    label = "#<static-init>";
    color = blue;
    "bb#<static-init>_0" [shape = invhouse];
    "bb#<static-init>_1" [shape = parallelogram];

    "bb#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$6: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$7: T.class_of(A) = alias <constant:A>\l<statTemp>$5: RubyTyper::Void = <statTemp>$6: T.class_of(RubyTyper).keep_for_ide(<statTemp>$7: T.class_of(A))\l<statTemp>$9: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$10: T.class_of(Exception) = alias <constant:Exception>\l<statTemp>$8: RubyTyper::Void = <statTemp>$9: T.class_of(RubyTyper).keep_for_ide(<statTemp>$10: T.class_of(Exception))\l<statTemp>$13: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$14: T.class_of(B) = alias <constant:B>\l<statTemp>$12: RubyTyper::Void = <statTemp>$13: T.class_of(RubyTyper).keep_for_ide(<statTemp>$14: T.class_of(B))\l<statTemp>$16: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$17: T.class_of(Exception) = alias <constant:Exception>\l<statTemp>$15: RubyTyper::Void = <statTemp>$16: T.class_of(RubyTyper).keep_for_ide(<statTemp>$17: T.class_of(Exception))\l<statTemp>$19: T.class_of(<root>) = self\l<statTemp>$18: T.untyped = <statTemp>$19: T.class_of(<root>).main()\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb#<static-init>_0" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb#<static-init>_1" -> "bb#<static-init>_1" [style="bold"];
}

}

