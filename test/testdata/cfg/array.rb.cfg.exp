digraph "array.rb" {
subgraph "cluster_::TestArray#an_int" {
    label = "::TestArray#an_int";
    color = blue;
    "bb::TestArray#an_int_0" [shape = invhouse];
    "bb::TestArray#an_int_1" [shape = parallelogram];

    "bb::TestArray#an_int_0" [
        label = "block[id=0]()\l<returnMethodTemp>$2 = 0 : Integer(0)\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::TestArray#an_int_0" -> "bb::TestArray#an_int_1" [style="bold"];
    "bb::TestArray#an_int_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestArray#an_int_1" -> "bb::TestArray#an_int_1" [style="bold"];
}

subgraph "cluster_::TestArray#a_string" {
    label = "::TestArray#a_string";
    color = blue;
    "bb::TestArray#a_string_0" [shape = invhouse];
    "bb::TestArray#a_string_1" [shape = parallelogram];

    "bb::TestArray#a_string_0" [
        label = "block[id=0]()\l<returnMethodTemp>$2 = \"str\" : String(\"str\")\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::TestArray#a_string_0" -> "bb::TestArray#a_string_1" [style="bold"];
    "bb::TestArray#a_string_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestArray#a_string_1" -> "bb::TestArray#a_string_1" [style="bold"];
}

subgraph "cluster_::TestArray#test_arrays" {
    label = "::TestArray#test_arrays";
    color = blue;
    "bb::TestArray#test_arrays_0" [shape = invhouse];
    "bb::TestArray#test_arrays_1" [shape = parallelogram];

    "bb::TestArray#test_arrays_0" [
        label = "block[id=0]()\l<magic>$5 = alias <constant:<Magic>> : <Magic>\l<statTemp>$4 = <magic>$5.<build-array>() : AppliedType {\l  klass = ::Array\l  targs = [\l    <constant:Elem> = T.untyped\l  ]\l}\l<arrayTemp>$7 = 1 : Integer(1)\l<arrayTemp>$8 = 2 : Integer(2)\l<magic>$9 = alias <constant:<Magic>> : <Magic>\l<statTemp>$6 = <magic>$9.<build-array>(<arrayTemp>$7, <arrayTemp>$8) : TupleType {\l  0 = Integer(1)\l  1 = Integer(2)\l}\l<statTemp>$11 = self : TestArray\l<arrayTemp>$10 = <statTemp>$11.an_int() : Integer\l<statTemp>$13 = self : TestArray\l<arrayTemp>$12 = <statTemp>$13.a_string() : String\l<magic>$15 = alias <constant:<Magic>> : <Magic>\l<arrayTemp>$14 = <magic>$15.<build-array>() : AppliedType {\l  klass = ::Array\l  targs = [\l    <constant:Elem> = T.untyped\l  ]\l}\l<magic>$16 = alias <constant:<Magic>> : <Magic>\l<returnMethodTemp>$2 = <magic>$16.<build-array>(<arrayTemp>$10, <arrayTemp>$12, <arrayTemp>$14) : TupleType {\l  0 = Integer\l  1 = String\l  2 = AppliedType {\l        klass = ::Array\l        targs = [\l          <constant:Elem> = T.untyped\l        ]\l      }\l}\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::TestArray#test_arrays_0" -> "bb::TestArray#test_arrays_1" [style="bold"];
    "bb::TestArray#test_arrays_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestArray#test_arrays_1" -> "bb::TestArray#test_arrays_1" [style="bold"];
}

subgraph "cluster_::TestArray#<static-init>" {
    label = "::TestArray#<static-init>";
    color = blue;
    "bb::TestArray#<static-init>_0" [shape = invhouse];
    "bb::TestArray#<static-init>_1" [shape = parallelogram];

    "bb::TestArray#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$6 = self : <Class:TestArray>\l<statTemp>$5 = <statTemp>$6.sig() : T.untyped\l<statTemp>$7 = alias <constant:Integer> : <Class:Integer>\l<statTemp>$4 = <statTemp>$5.returns(<statTemp>$7) : T.untyped\l<statTemp>$10 = self : <Class:TestArray>\l<statTemp>$9 = <statTemp>$10.sig() : T.untyped\l<statTemp>$11 = alias <constant:String> : <Class:String>\l<statTemp>$8 = <statTemp>$9.returns(<statTemp>$11) : T.untyped\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::TestArray#<static-init>_0" -> "bb::TestArray#<static-init>_1" [style="bold"];
    "bb::TestArray#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestArray#<static-init>_1" -> "bb::TestArray#<static-init>_1" [style="bold"];
}

}

