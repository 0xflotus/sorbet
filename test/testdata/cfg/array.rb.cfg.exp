digraph "array.rb" {
subgraph "cluster_::TestArray#an_int" {
    label = "::TestArray#an_int";
    color = blue;
    "bb::TestArray#an_int_0" [shape = invhouse];
    "bb::TestArray#an_int_1" [shape = parallelogram];

    "bb::TestArray#an_int_0" [
        label = "block[id=0]()\l<returnMethodTemp>$2: Integer(0) = 0\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: Integer(0)\l<unconditional>\l"
    ];

    "bb::TestArray#an_int_0" -> "bb::TestArray#an_int_1" [style="bold"];
    "bb::TestArray#an_int_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestArray#an_int_1" -> "bb::TestArray#an_int_1" [style="bold"];
}

subgraph "cluster_::TestArray#a_string" {
    label = "::TestArray#a_string";
    color = blue;
    "bb::TestArray#a_string_0" [shape = invhouse];
    "bb::TestArray#a_string_1" [shape = parallelogram];

    "bb::TestArray#a_string_0" [
        label = "block[id=0]()\l<returnMethodTemp>$2: String(\"str\") = \"str\"\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: String(\"str\")\l<unconditional>\l"
    ];

    "bb::TestArray#a_string_0" -> "bb::TestArray#a_string_1" [style="bold"];
    "bb::TestArray#a_string_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestArray#a_string_1" -> "bb::TestArray#a_string_1" [style="bold"];
}

subgraph "cluster_::TestArray#test_arrays" {
    label = "::TestArray#test_arrays";
    color = blue;
    "bb::TestArray#test_arrays_0" [shape = invhouse];
    "bb::TestArray#test_arrays_1" [shape = parallelogram];

    "bb::TestArray#test_arrays_0" [
        label = "block[id=0]()\l<magic>$5: <Magic> = alias <constant:<Magic>>\l<statTemp>$4: T::Array[T.untyped] = <magic>$5: <Magic>.<build-array>()\l<arrayTemp>$7: Integer(1) = 1\l<arrayTemp>$8: Integer(2) = 2\l<magic>$9: <Magic> = alias <constant:<Magic>>\l<statTemp>$6: [Integer(1), Integer(2)] = <magic>$9: <Magic>.<build-array>(<arrayTemp>$7: Integer(1), <arrayTemp>$8: Integer(2))\l<statTemp>$11: TestArray = self\l<arrayTemp>$10: Integer = <statTemp>$11: TestArray.an_int()\l<statTemp>$13: TestArray = self\l<arrayTemp>$12: String = <statTemp>$13: TestArray.a_string()\l<magic>$15: <Magic> = alias <constant:<Magic>>\l<arrayTemp>$14: T::Array[T.untyped] = <magic>$15: <Magic>.<build-array>()\l<magic>$16: <Magic> = alias <constant:<Magic>>\l<returnMethodTemp>$2: [Integer, String, T::Array[T.untyped]] = <magic>$16: <Magic>.<build-array>(<arrayTemp>$10: Integer, <arrayTemp>$12: String, <arrayTemp>$14: T::Array[T.untyped])\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: [Integer, String, T::Array[T.untyped]]\l<unconditional>\l"
    ];

    "bb::TestArray#test_arrays_0" -> "bb::TestArray#test_arrays_1" [style="bold"];
    "bb::TestArray#test_arrays_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestArray#test_arrays_1" -> "bb::TestArray#test_arrays_1" [style="bold"];
}

subgraph "cluster_::TestArray#<static-init>" {
    label = "::TestArray#<static-init>";
    color = blue;
    "bb::TestArray#<static-init>_0" [shape = invhouse];
    "bb::TestArray#<static-init>_1" [shape = parallelogram];

    "bb::TestArray#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$6: <Class:TestArray> = self\l<statTemp>$5: Sorbet::Private::Builder = <statTemp>$6: <Class:TestArray>.sig()\l<statTemp>$7: <Class:Integer> = alias <constant:Integer>\l<statTemp>$4: Sorbet::Private::Builder = <statTemp>$5: Sorbet::Private::Builder.returns(<statTemp>$7: <Class:Integer>)\l<statTemp>$10: <Class:TestArray> = self\l<statTemp>$9: Sorbet::Private::Builder = <statTemp>$10: <Class:TestArray>.sig()\l<statTemp>$11: <Class:String> = alias <constant:String>\l<statTemp>$8: Sorbet::Private::Builder = <statTemp>$9: Sorbet::Private::Builder.returns(<statTemp>$11: <Class:String>)\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb::TestArray#<static-init>_0" -> "bb::TestArray#<static-init>_1" [style="bold"];
    "bb::TestArray#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestArray#<static-init>_1" -> "bb::TestArray#<static-init>_1" [style="bold"];
}

}

