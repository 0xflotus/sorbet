digraph "array.rb"{
subgraph "cluster_::<constant:TestArray>#an_int" {
    label = "::<constant:TestArray>#an_int";
    color = blue;
    "bb::<constant:TestArray>#an_int_0" [shape = invhouse];
    "bb::<constant:TestArray>#an_int_1" [shape = parallelogram];

    "bb::<constant:TestArray>#an_int_0" [label = "block[id=0]()
returnMethodTemp$2 = 0 : Integer(0)
returnMethodTemp$4 = return returnMethodTemp$2 : <bottom>
<unconditional>"];

    "bb::<constant:TestArray>#an_int_0" -> "bb::<constant:TestArray>#an_int_1" [style="bold"];
    "bb::<constant:TestArray>#an_int_1" [label = "block[id=1]()
<unconditional>"];

    "bb::<constant:TestArray>#an_int_1" -> "bb::<constant:TestArray>#an_int_1" [style="bold"];
}

subgraph "cluster_::<constant:TestArray>#a_string" {
    label = "::<constant:TestArray>#a_string";
    color = blue;
    "bb::<constant:TestArray>#a_string_0" [shape = invhouse];
    "bb::<constant:TestArray>#a_string_1" [shape = parallelogram];

    "bb::<constant:TestArray>#a_string_0" [label = "block[id=0]()
returnMethodTemp$2 = str : String(\"str\")
returnMethodTemp$4 = return returnMethodTemp$2 : <bottom>
<unconditional>"];

    "bb::<constant:TestArray>#a_string_0" -> "bb::<constant:TestArray>#a_string_1" [style="bold"];
    "bb::<constant:TestArray>#a_string_1" [label = "block[id=1]()
<unconditional>"];

    "bb::<constant:TestArray>#a_string_1" -> "bb::<constant:TestArray>#a_string_1" [style="bold"];
}

subgraph "cluster_::<constant:TestArray>#test_arrays" {
    label = "::<constant:TestArray>#test_arrays";
    color = blue;
    "bb::<constant:TestArray>#test_arrays_0" [shape = invhouse];
    "bb::<constant:TestArray>#test_arrays_1" [shape = parallelogram];

    "bb::<constant:TestArray>#test_arrays_0" [label = "block[id=0]()
arrayTemp$5 = alias <constant:<Magic>> : <Magic>
statTemp$4 = arrayTemp$5.<build-array>() : TupleType {
}
arrayTemp$7 = 1 : Integer(1)
arrayTemp$8 = 2 : Integer(2)
arrayTemp$9 = alias <constant:<Magic>> : <Magic>
statTemp$6 = arrayTemp$9.<build-array>(arrayTemp$7, arrayTemp$8) : TupleType {
  0 = Integer(1)
  1 = Integer(2)
}
statTemp$11 = self : TestArray
arrayTemp$10 = statTemp$11.an_int() : Integer
statTemp$13 = self : TestArray
arrayTemp$12 = statTemp$13.a_string() : String
arrayTemp$15 = alias <constant:<Magic>> : <Magic>
arrayTemp$14 = arrayTemp$15.<build-array>() : TupleType {
}
arrayTemp$16 = alias <constant:<Magic>> : <Magic>
returnMethodTemp$2 = arrayTemp$16.<build-array>(arrayTemp$10, arrayTemp$12, arrayTemp$14) : TupleType {
  0 = Integer
  1 = String
  2 = TupleType {
      }
}
returnMethodTemp$17 = return returnMethodTemp$2 : <bottom>
<unconditional>"];

    "bb::<constant:TestArray>#test_arrays_0" -> "bb::<constant:TestArray>#test_arrays_1" [style="bold"];
    "bb::<constant:TestArray>#test_arrays_1" [label = "block[id=1]()
<unconditional>"];

    "bb::<constant:TestArray>#test_arrays_1" -> "bb::<constant:TestArray>#test_arrays_1" [style="bold"];
}

}

