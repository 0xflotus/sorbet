class <emptyTree>::<C <U TestRescue>><<C <U <todo sym>>>> < (::<todo sym>)
  def <U meth><<C <U <todo sym>>>>(&<U <blk>>)
    0
  end

  def <U foo><<C <U <todo sym>>>>(&<U <blk>>)
    1
  end

  def <U bar><<C <U <todo sym>>>>(&<U <blk>>)
    2
  end

  def <U baz><<C <U <todo sym>>>>(&<U <blk>>)
    3
  end

  def <U take_arg><<C <U <todo sym>>>>(<U x>, &<U <blk>>)
    <U x>
  end

  def <U initialize><<C <U <todo sym>>>>(&<U <blk>>)
    <U @ex> = <emptyTree>::<C <U T>>.<U let>(nil, <emptyTree>::<C <U T>>.<U nilable>(<emptyTree>::<C <U StandardError>>))
  end

  def <U multiple_rescue><<C <U <todo sym>>>>(&<U <blk>>)
    <U <self>>.<U meth>()
  rescue => <D <U <rescueTemp>> $2>
    <U <self>>.<U baz>()
  rescue => <D <U <rescueTemp>> $3>
    <U <self>>.<U bar>()
  end

  def <U multiple_rescue_classes><<C <U <todo sym>>>>(&<U <blk>>)
    <U <self>>.<U meth>()
  rescue <emptyTree>::<C <U Foo>>, <emptyTree>::<C <U Bar>> => <U baz>
    <U baz>
  end

  def <U parse_rescue_ensure><<C <U <todo sym>>>>(&<U <blk>>)
    <U <self>>.<U meth>()
  rescue => <D <U <rescueTemp>> $2>
    <U <self>>.<U baz>()
  ensure
    <U <self>>.<U bar>()
  end

  def <U parse_bug_rescue_empty_else><<C <U <todo sym>>>>(&<U <blk>>)
    <emptyTree>
  rescue <emptyTree>::<C <U LoadError>> => <D <U <rescueTemp>> $2>
    <emptyTree>
  end

  def <U parse_ruby_bug_12686><<C <U <todo sym>>>>(&<U <blk>>)
    <U <self>>.<U take_arg>(<U <self>>.<U bar>()
    rescue => <D <U <rescueTemp>> $2>
      nil)
  end

  def <U parse_rescue_mod><<C <U <todo sym>>>>(&<U <blk>>)
    <U <self>>.<U meth>()
  rescue => <D <U <rescueTemp>> $2>
    <U <self>>.<U bar>()
  end

  def <U parse_resbody_list_var><<C <U <todo sym>>>>(&<U <blk>>)
    <U <self>>.<U meth>()
  rescue <U <self>>.<U foo>() => <U ex>
    <U <self>>.<U bar>()
  end

  def <U parse_rescue_else_ensure><<C <U <todo sym>>>>(&<U <blk>>)
    <U <self>>.<U meth>()
  rescue => <D <U <rescueTemp>> $2>
    <U <self>>.<U baz>()
  else
    <U <self>>.<U foo>()
  ensure
    <U <self>>.<U bar>()
  end

  def <U parse_rescue><<C <U <todo sym>>>>(&<U <blk>>)
    <U <self>>.<U meth>()
  rescue => <D <U <rescueTemp>> $2>
    <U <self>>.<U foo>()
  end

  def <U parse_resbody_var><<C <U <todo sym>>>>(&<U <blk>>)
    <U <self>>.<U meth>()
  rescue => <U ex>
    <U <self>>.<U bar>()
  end

  def <U parse_resbody_var_1><<C <U <todo sym>>>>(&<U <blk>>)
    <U <self>>.<U meth>()
  rescue => <D <U <rescueTemp>> $2>
    begin
      <U @ex> = <D <U <rescueTemp>> $2>
      <U <self>>.<U bar>()
    end
  end

  def <U parse_rescue_mod_op_assign><<C <U <todo sym>>>>(&<U <blk>>)
    <U foo> = <U foo>.<U +>(<U <self>>.<U meth>()
    rescue => <D <U <rescueTemp>> $2>
      <U <self>>.<U bar>())
  end

  def <U parse_ruby_bug_12402><<C <U <todo sym>>>>(&<U <blk>>)
    <U foo> = <U <self>>.<U raise>(<U <self>>.<U bar>())
  rescue => <D <U <rescueTemp>> $2>
    nil
  end

  def <U parse_ruby_bug_12402_1><<C <U <todo sym>>>>(&<U <blk>>)
    <U foo> = <U foo>.<U +>(<U <self>>.<U raise>(<U <self>>.<U bar>())
    rescue => <D <U <rescueTemp>> $2>
      nil)
  end

  def <U parse_ruby_bug_12402_2><<C <U <todo sym>>>>(&<U <blk>>)
    begin
      <D <U []> $3> = <U <self>>.<U foo>()
      <D <U []> $4> = 0
      <D <U []> $3>.<U []=>(<D <U []> $4>, <D <U []> $3>.<U []>(<D <U []> $4>).<U +>(<U <self>>.<U raise>(<U <self>>.<U bar>())
        rescue => <D <U <rescueTemp>> $2>
          nil))
    end
  end
end
