digraph "hash.rb" {
subgraph "cluster_::TestHash#something" {
    label = "::TestHash#something";
    color = blue;
    "bb::TestHash#something_0" [shape = invhouse];
    "bb::TestHash#something_1" [shape = parallelogram];

    "bb::TestHash#something_0" [
        label = "block[id=0]()\l<returnMethodTemp>$2: Integer(17) = 17\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: Integer(17)\l<unconditional>\l"
    ];

    "bb::TestHash#something_0" -> "bb::TestHash#something_1" [style="bold"];
    "bb::TestHash#something_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestHash#something_1" -> "bb::TestHash#something_1" [style="bold"];
}

subgraph "cluster_::TestHash#test" {
    label = "::TestHash#test";
    color = blue;
    "bb::TestHash#test_0" [shape = invhouse];
    "bb::TestHash#test_1" [shape = parallelogram];

    "bb::TestHash#test_0" [
        label = "block[id=0]()\l<statTemp>$6: TestHash = self\l<hashTemp>$4: T.untyped = <statTemp>$6: TestHash.something()\l<hashTemp>$5: Symbol(:\"bar\") = :\"bar\"\l<statTemp>$9: Integer(1) = 1\l<statTemp>$10: Integer(2) = 2\l<hashTemp>$7: Integer = <statTemp>$9: Integer(1).+(<statTemp>$10: Integer(2))\l<hashTemp>$8: Integer(2) = 2\l<magic>$11: <Magic> = alias <constant:<Magic>>\l<returnMethodTemp>$2: T::Hash[T.untyped, T.untyped] = <magic>$11: <Magic>.<build-hash>(<hashTemp>$4: T.untyped, <hashTemp>$5: Symbol(:\"bar\"), <hashTemp>$7: Integer, <hashTemp>$8: Integer(2))\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: T::Hash[T.untyped, T.untyped]\l<unconditional>\l"
    ];

    "bb::TestHash#test_0" -> "bb::TestHash#test_1" [style="bold"];
    "bb::TestHash#test_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestHash#test_1" -> "bb::TestHash#test_1" [style="bold"];
}

subgraph "cluster_::TestHash#test_shaped" {
    label = "::TestHash#test_shaped";
    color = blue;
    "bb::TestHash#test_shaped_0" [shape = invhouse];
    "bb::TestHash#test_shaped_1" [shape = parallelogram];

    "bb::TestHash#test_shaped_0" [
        label = "block[id=0]()\l<hashTemp>$4: Integer(1) = 1\l<hashTemp>$5: Integer(2) = 2\l<hashTemp>$6: Integer(2) = 2\l<hashTemp>$7: Integer(3) = 3\l<hashTemp>$8: Symbol(:\"foo\") = :\"foo\"\l<hashTemp>$9: Symbol(:\"bar\") = :\"bar\"\l<hashTemp>$10: Symbol(:\"baz\") = :\"baz\"\l<statTemp>$12: TestHash = self\l<hashTemp>$11: T.untyped = <statTemp>$12: TestHash.something()\l<magic>$13: <Magic> = alias <constant:<Magic>>\l<returnMethodTemp>$2: {Integer(1) => Integer(2), Integer(2) => Integer(3), foo: Symbol(:\"bar\"), baz: T.untyped} = <magic>$13: <Magic>.<build-hash>(<hashTemp>$4: Integer(1), <hashTemp>$5: Integer(2), <hashTemp>$6: Integer(2), <hashTemp>$7: Integer(3), <hashTemp>$8: Symbol(:\"foo\"), <hashTemp>$9: Symbol(:\"bar\"), <hashTemp>$10: Symbol(:\"baz\"), <hashTemp>$11: T.untyped)\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: {Integer(1) => Integer(2), Integer(2) => Integer(3), foo: Symbol(:\"bar\"), baz: T.untyped}\l<unconditional>\l"
    ];

    "bb::TestHash#test_shaped_0" -> "bb::TestHash#test_shaped_1" [style="bold"];
    "bb::TestHash#test_shaped_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestHash#test_shaped_1" -> "bb::TestHash#test_shaped_1" [style="bold"];
}

}

