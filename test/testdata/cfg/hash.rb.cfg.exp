digraph "hash.rb"{
subgraph "cluster_::<constant:TestHash>#something" {
    label = "::<constant:TestHash>#something";
    color = blue;
    "bb::<constant:TestHash>#something_0" [shape = invhouse];
    "bb::<constant:TestHash>#something_1" [shape = parallelogram];

    "bb::<constant:TestHash>#something_0" [label = "()
returnMethodTemp$1 = 17 : Integer(17)
returnMethodTemp$3 = return returnMethodTemp$1 : <bottom>
<unconditional>"];

    "bb::<constant:TestHash>#something_0" -> "bb::<constant:TestHash>#something_1" [style="bold"];
    "bb::<constant:TestHash>#something_1" [label = "()
<unconditional>"];

    "bb::<constant:TestHash>#something_1" -> "bb::<constant:TestHash>#something_1" [style="bold"];
}

subgraph "cluster_::<constant:TestHash>#test" {
    label = "::<constant:TestHash>#test";
    color = blue;
    "bb::<constant:TestHash>#test_0" [shape = invhouse];
    "bb::<constant:TestHash>#test_1" [shape = parallelogram];

    "bb::<constant:TestHash>#test_0" [label = "()
statTemp$5 = self : TestHash
hashTemp$3 = statTemp$5.something() : untyped
hashTemp$4 = <symbol:bar> : Symbol(:\"bar\")
statTemp$8 = 1 : Integer(1)
statTemp$9 = 2 : Integer(2)
hashTemp$6 = statTemp$8.+(statTemp$9) : Integer | Float | Rational | BigDecimal | Complex
hashTemp$7 = 2 : Integer(2)
hashTemp$10 = alias {} : HashType {\n}
returnMethodTemp$1 = hashTemp$10.<build-hash>(hashTemp$3, hashTemp$4, hashTemp$6, hashTemp$7) : Hash
returnMethodTemp$11 = return returnMethodTemp$1 : <bottom>
<unconditional>"];

    "bb::<constant:TestHash>#test_0" -> "bb::<constant:TestHash>#test_1" [style="bold"];
    "bb::<constant:TestHash>#test_1" [label = "()
<unconditional>"];

    "bb::<constant:TestHash>#test_1" -> "bb::<constant:TestHash>#test_1" [style="bold"];
}

subgraph "cluster_::<constant:TestHash>#test_shaped" {
    label = "::<constant:TestHash>#test_shaped";
    color = blue;
    "bb::<constant:TestHash>#test_shaped_0" [shape = invhouse];
    "bb::<constant:TestHash>#test_shaped_1" [shape = parallelogram];

    "bb::<constant:TestHash>#test_shaped_0" [label = "()
hashTemp$3 = 1 : Integer(1)
hashTemp$4 = 2 : Integer(2)
hashTemp$5 = 2 : Integer(2)
hashTemp$6 = 3 : Integer(3)
hashTemp$7 = <symbol:foo> : Symbol(:\"foo\")
hashTemp$8 = <symbol:bar> : Symbol(:\"bar\")
hashTemp$9 = <symbol:baz> : Symbol(:\"baz\")
statTemp$11 = self : TestHash
hashTemp$10 = statTemp$11.something() : untyped
hashTemp$12 = alias {} : HashType {\n}
returnMethodTemp$1 = hashTemp$12.<build-hash>(hashTemp$3, hashTemp$4, hashTemp$5, hashTemp$6, hashTemp$7, hashTemp$8, hashTemp$9, hashTemp$10) : HashType {\n  Integer(1) => Integer(2)\n  Integer(2) => Integer(3)\n  Symbol(:\"foo\") => Symbol(:\"bar\")\n  Symbol(:\"baz\") => untyped\n}
returnMethodTemp$13 = return returnMethodTemp$1 : <bottom>
<unconditional>"];

    "bb::<constant:TestHash>#test_shaped_0" -> "bb::<constant:TestHash>#test_shaped_1" [style="bold"];
    "bb::<constant:TestHash>#test_shaped_1" [label = "()
<unconditional>"];

    "bb::<constant:TestHash>#test_shaped_1" -> "bb::<constant:TestHash>#test_shaped_1" [style="bold"];
}

}

