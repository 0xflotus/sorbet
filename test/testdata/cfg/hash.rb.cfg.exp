digraph "hash.rb" {
subgraph "cluster_::TestHash#something" {
    label = "::TestHash#something";
    color = blue;
    "bb::TestHash#something_0" [shape = invhouse];
    "bb::TestHash#something_1" [shape = parallelogram];

    "bb::TestHash#something_0" [
        label = "block[id=0]()\l<U <returnMethodTemp>>$2: Integer(17) = 17\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: Integer(17)\l<unconditional>\l"
    ];

    "bb::TestHash#something_0" -> "bb::TestHash#something_1" [style="bold"];
    "bb::TestHash#something_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestHash#something_1" -> "bb::TestHash#something_1" [style="bold"];
}

subgraph "cluster_::TestHash#test" {
    label = "::TestHash#test";
    color = blue;
    "bb::TestHash#test_0" [shape = invhouse];
    "bb::TestHash#test_1" [shape = parallelogram];

    "bb::TestHash#test_0" [
        label = "block[id=0]()\l<U <statTemp>>$5: TestHash = self\l<U <hashTemp>>$3: T.untyped = <U <statTemp>>$5: TestHash.<U something>()\l<U <hashTemp>>$4: Symbol(:\"bar\") = :\"bar\"\l<U <statTemp>>$8: Integer(1) = 1\l<U <statTemp>>$9: Integer(2) = 2\l<U <hashTemp>>$6: Integer = <U <statTemp>>$8: Integer(1).<U +>(<U <statTemp>>$9: Integer(2))\l<U <hashTemp>>$7: Integer(2) = 2\l<U <magic>>$10: <Magic> = alias <C <U <Magic>>>\l<U <returnMethodTemp>>$2: T::Hash[T.untyped, T.untyped] = <U <magic>>$10: <Magic>.<U <build-hash>>(<U <hashTemp>>$3: T.untyped, <U <hashTemp>>$4: Symbol(:\"bar\"), <U <hashTemp>>$6: Integer, <U <hashTemp>>$7: Integer(2))\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: T::Hash[T.untyped, T.untyped]\l<unconditional>\l"
    ];

    "bb::TestHash#test_0" -> "bb::TestHash#test_1" [style="bold"];
    "bb::TestHash#test_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestHash#test_1" -> "bb::TestHash#test_1" [style="bold"];
}

subgraph "cluster_::TestHash#test_shaped" {
    label = "::TestHash#test_shaped";
    color = blue;
    "bb::TestHash#test_shaped_0" [shape = invhouse];
    "bb::TestHash#test_shaped_1" [shape = parallelogram];

    "bb::TestHash#test_shaped_0" [
        label = "block[id=0]()\l<U <hashTemp>>$3: Integer(1) = 1\l<U <hashTemp>>$4: Integer(2) = 2\l<U <hashTemp>>$5: Integer(2) = 2\l<U <hashTemp>>$6: Integer(3) = 3\l<U <hashTemp>>$7: Symbol(:\"foo\") = :\"foo\"\l<U <hashTemp>>$8: Symbol(:\"bar\") = :\"bar\"\l<U <hashTemp>>$9: Symbol(:\"baz\") = :\"baz\"\l<U <statTemp>>$11: TestHash = self\l<U <hashTemp>>$10: T.untyped = <U <statTemp>>$11: TestHash.<U something>()\l<U <magic>>$12: <Magic> = alias <C <U <Magic>>>\l<U <returnMethodTemp>>$2: {Integer(1) => Integer(2), Integer(2) => Integer(3), <U foo>: Symbol(:\"bar\"), <U baz>: T.untyped} = <U <magic>>$12: <Magic>.<U <build-hash>>(<U <hashTemp>>$3: Integer(1), <U <hashTemp>>$4: Integer(2), <U <hashTemp>>$5: Integer(2), <U <hashTemp>>$6: Integer(3), <U <hashTemp>>$7: Symbol(:\"foo\"), <U <hashTemp>>$8: Symbol(:\"bar\"), <U <hashTemp>>$9: Symbol(:\"baz\"), <U <hashTemp>>$10: T.untyped)\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: {Integer(1) => Integer(2), Integer(2) => Integer(3), <U foo>: Symbol(:\"bar\"), <U baz>: T.untyped}\l<unconditional>\l"
    ];

    "bb::TestHash#test_shaped_0" -> "bb::TestHash#test_shaped_1" [style="bold"];
    "bb::TestHash#test_shaped_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::TestHash#test_shaped_1" -> "bb::TestHash#test_shaped_1" [style="bold"];
}

}

