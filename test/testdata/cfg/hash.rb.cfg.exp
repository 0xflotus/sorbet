digraph "hash.rb"{
subgraph "cluster_::<constant:TestHash>#something" {
    label = "::<constant:TestHash>#something";
    color = blue;
    "bb::<constant:TestHash>#something_0" [shape = invhouse];
    "bb::<constant:TestHash>#something_1" [shape = parallelogram];

    "bb::<constant:TestHash>#something_0" [label = "block[id=0]()
returnMethodTemp$2 = 17 : Integer(17)
finalReturn = return returnMethodTemp$2 : <bottom>
<unconditional>"];

    "bb::<constant:TestHash>#something_0" -> "bb::<constant:TestHash>#something_1" [style="bold"];
    "bb::<constant:TestHash>#something_1" [label = "block[id=1]()
<unconditional>"];

    "bb::<constant:TestHash>#something_1" -> "bb::<constant:TestHash>#something_1" [style="bold"];
}

subgraph "cluster_::<constant:TestHash>#test" {
    label = "::<constant:TestHash>#test";
    color = blue;
    "bb::<constant:TestHash>#test_0" [shape = invhouse];
    "bb::<constant:TestHash>#test_1" [shape = parallelogram];

    "bb::<constant:TestHash>#test_0" [label = "block[id=0]()
<constant:<Magic>>$11 = alias <constant:<Magic>> : <Magic>
statTemp$6 = self : TestHash
hashTemp$4 = statTemp$6.something() : untyped
hashTemp$5 = <symbol:bar> : Symbol(:\"bar\")
statTemp$9 = 1 : Integer(1)
statTemp$10 = 2 : Integer(2)
hashTemp$7 = statTemp$9.+(statTemp$10) : Integer
hashTemp$8 = 2 : Integer(2)
returnMethodTemp$2 = <constant:<Magic>>$11.<build-hash>(hashTemp$4, hashTemp$5, hashTemp$7, hashTemp$8) : AppliedType {
  klass = ::<constant:Hash>
  targs = [
    <constant:Key> = untyped
    <constant:Value> = untyped
  ]
}
finalReturn = return returnMethodTemp$2 : <bottom>
<unconditional>"];

    "bb::<constant:TestHash>#test_0" -> "bb::<constant:TestHash>#test_1" [style="bold"];
    "bb::<constant:TestHash>#test_1" [label = "block[id=1]()
<unconditional>"];

    "bb::<constant:TestHash>#test_1" -> "bb::<constant:TestHash>#test_1" [style="bold"];
}

subgraph "cluster_::<constant:TestHash>#test_shaped" {
    label = "::<constant:TestHash>#test_shaped";
    color = blue;
    "bb::<constant:TestHash>#test_shaped_0" [shape = invhouse];
    "bb::<constant:TestHash>#test_shaped_1" [shape = parallelogram];

    "bb::<constant:TestHash>#test_shaped_0" [label = "block[id=0]()
<constant:<Magic>>$13 = alias <constant:<Magic>> : <Magic>
hashTemp$4 = 1 : Integer(1)
hashTemp$5 = 2 : Integer(2)
hashTemp$6 = 2 : Integer(2)
hashTemp$7 = 3 : Integer(3)
hashTemp$8 = <symbol:foo> : Symbol(:\"foo\")
hashTemp$9 = <symbol:bar> : Symbol(:\"bar\")
hashTemp$10 = <symbol:baz> : Symbol(:\"baz\")
statTemp$12 = self : TestHash
hashTemp$11 = statTemp$12.something() : untyped
returnMethodTemp$2 = <constant:<Magic>>$13.<build-hash>(hashTemp$4, hashTemp$5, hashTemp$6, hashTemp$7, hashTemp$8, hashTemp$9, hashTemp$10, hashTemp$11) : ShapeType {
  Integer(1) => Integer(2)
  Integer(2) => Integer(3)
  Symbol(:\"foo\") => Symbol(:\"bar\")
  Symbol(:\"baz\") => untyped
}
finalReturn = return returnMethodTemp$2 : <bottom>
<unconditional>"];

    "bb::<constant:TestHash>#test_shaped_0" -> "bb::<constant:TestHash>#test_shaped_1" [style="bold"];
    "bb::<constant:TestHash>#test_shaped_1" [label = "block[id=1]()
<unconditional>"];

    "bb::<constant:TestHash>#test_shaped_1" -> "bb::<constant:TestHash>#test_shaped_1" [style="bold"];
}

}

