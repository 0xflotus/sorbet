ClassDef{
  kind = class
  name = EmptyTree<<C <U <root>>>>
  ancestors = []
  rhs = [
    MethodDef{
      flags = 0
      name = <U main><<C <U <todo sym>>>>
      args = [BlockArg{ expr = UnresolvedIdent{
          kind = Local
          name = <U <blk>>
        } }]
      rhs = Rescue{
        body = Send{
          recv = Self{ claz = ::<todo sym> }
          fun = <U a>
          block = nullptr
          args = [
          ]
        }
        rescueCases = [
          RescueCase{
            exceptions = [
            ]
            var = UnresolvedIdent{
              kind = Local
              name = <D <U <rescueTemp>> $2>
            }
            body = Send{
              recv = Self{ claz = ::<todo sym> }
              fun = <U b>
              block = nullptr
              args = [
              ]
            }
          }
        ]
        else = Send{
          recv = Self{ claz = ::<todo sym> }
          fun = <U c>
          block = nullptr
          args = [
          ]
        }
        ensure = Send{
          recv = Self{ claz = ::<todo sym> }
          fun = <U d>
          block = nullptr
          args = [
          ]
        }
      }
    }

    MethodDef{
      flags = 0
      name = <U a><<C <U <todo sym>>>>
      args = [BlockArg{ expr = UnresolvedIdent{
          kind = Local
          name = <U <blk>>
        } }]
      rhs = EmptyTree
    }

    MethodDef{
      flags = 0
      name = <U b><<C <U <todo sym>>>>
      args = [BlockArg{ expr = UnresolvedIdent{
          kind = Local
          name = <U <blk>>
        } }]
      rhs = EmptyTree
    }

    MethodDef{
      flags = 0
      name = <U c><<C <U <todo sym>>>>
      args = [BlockArg{ expr = UnresolvedIdent{
          kind = Local
          name = <U <blk>>
        } }]
      rhs = EmptyTree
    }

    MethodDef{
      flags = 0
      name = <U d><<C <U <todo sym>>>>
      args = [BlockArg{ expr = UnresolvedIdent{
          kind = Local
          name = <U <blk>>
        } }]
      rhs = EmptyTree
    }

    Send{
      recv = Self{ claz = ::<todo sym> }
      fun = <U puts>
      block = nullptr
      args = [
        Send{
          recv = Self{ claz = ::<todo sym> }
          fun = <U foo>
          block = nullptr
          args = [
          ]
        }
      ]
    }
  ]
}
