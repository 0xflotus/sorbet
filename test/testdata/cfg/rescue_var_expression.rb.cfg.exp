digraph "rescue_var_expression.rb" {
subgraph "cluster_::Object#foo" {
    label = "::Object#foo";
    color = blue;
    "bb::Object#foo_0" [shape = invhouse];
    "bb::Object#foo_1" [shape = parallelogram];

    "bb::Object#foo_0" [
        label = "block[id=0]()\l<rescueStartTemp>$4 = <unanalyzable> : T.untyped\l<rescueStartTemp>$4\l"
    ];

    "bb::Object#foo_0" -> "bb::Object#foo_3" [style="bold"];
    "bb::Object#foo_0" -> "bb::Object#foo_4" [style="tapered"];

    "bb::Object#foo_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Object#foo_1" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_3" [
        label = "block[id=3](<returnMethodTemp>$2)\l<rescueTemp>$2 = <unanalyzable> : T.untyped\l<exceptionClassTemp>$8 = alias <constant:Exception> : <Class:Exception>\l<isaCheckTemp>$9 = <rescueTemp>$2.is_a?(<exceptionClassTemp>$8) : T.untyped\l<isaCheckTemp>$9\l"
    ];

    "bb::Object#foo_3" -> "bb::Object#foo_8" [style="bold"];
    "bb::Object#foo_3" -> "bb::Object#foo_9" [style="tapered"];

    "bb::Object#foo_4" [
        label = "block[id=4]()\l<statTemp>$5 = self : Object\l<statTemp>$6 = \"boop\" : String(\"boop\")\l<returnMethodTemp>$2 = <statTemp>$5.raise(<statTemp>$6) : <impossible>\l<rescueEndTemp>$7 = <unanalyzable>\l<rescueEndTemp>$7\l"
    ];

    "bb::Object#foo_4" -> "bb::Object#foo_3" [style="bold"];
    "bb::Object#foo_4" -> "bb::Object#foo_6" [style="tapered"];

    "bb::Object#foo_6" [
        label = "block[id=6](<returnMethodTemp>$2, <gotoDeadTemp>$14)\l<gotoDeadTemp>$14\l"
    ];

    "bb::Object#foo_6" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_6" -> "bb::Object#foo_10" [style="tapered"];

    "bb::Object#foo_8" [
        label = "block[id=8](<rescueTemp>$2)\l<statTemp>$12 = alias <constant:MyClass> : <Class:MyClass>\l<statTemp>$11 = <statTemp>$12.new() : MyClass\l<statTemp>$10 = <statTemp>$11.foo=(<rescueTemp>$2) : T.untyped\l<returnMethodTemp>$2 = 3 : Integer(3)\l<gotoDeadTemp>$14\l"
    ];

    "bb::Object#foo_8" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_8" -> "bb::Object#foo_10" [style="tapered"];

    "bb::Object#foo_9" [
        label = "block[id=9](<returnMethodTemp>$2)\l<gotoDeadTemp>$14 = true : TrueClass(true)\l<gotoDeadTemp>$14\l"
    ];

    "bb::Object#foo_9" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_9" -> "bb::Object#foo_10" [style="tapered"];

    "bb::Object#foo_10" [
        label = "block[id=10](<returnMethodTemp>$2)\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#foo_10" -> "bb::Object#foo_1" [style="bold"];
}

subgraph "cluster_#<static-init>" {
    label = "#<static-init>";
    color = blue;
    "bb#<static-init>_0" [shape = invhouse];
    "bb#<static-init>_1" [shape = parallelogram];

    "bb#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$6 = alias <constant:RubyTyper> : <Class:RubyTyper>\l<statTemp>$7 = alias <constant:MyClass> : <Class:MyClass>\l<statTemp>$5 = <statTemp>$6.keep_for_ide(<statTemp>$7) : RubyTyper::Void\l<statTemp>$9 = self : <Class:<root>>\l<statTemp>$11 = self : <Class:<root>>\l<statTemp>$10 = <statTemp>$11.foo() : T.untyped\l<statTemp>$8 = <statTemp>$9.puts(<statTemp>$10) : NilClass\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb#<static-init>_0" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb#<static-init>_1" -> "bb#<static-init>_1" [style="bold"];
}

subgraph "cluster_::MyClass#foo=" {
    label = "::MyClass#foo=";
    color = blue;
    "bb::MyClass#foo=_0" [shape = invhouse];
    "bb::MyClass#foo=_1" [shape = parallelogram];

    "bb::MyClass#foo=_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3 = self : MyClass\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::MyClass#foo=_0" -> "bb::MyClass#foo=_1" [style="bold"];
    "bb::MyClass#foo=_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::MyClass#foo=_1" -> "bb::MyClass#foo=_1" [style="bold"];
}

}

