digraph "blocks.rb" {
subgraph "cluster_::BlockTest#block_pass" {
    label = "::BlockTest#block_pass";
    color = blue;
    "bb::BlockTest#block_pass_0" [shape = invhouse];
    "bb::BlockTest#block_pass_1" [shape = parallelogram];

    "bb::BlockTest#block_pass_0" [
        label = "block[id=0]()\l<statTemp>$4 = self : BlockTest\l<statTemp>$5 = 1 : Integer(1)\l<statTemp>$6 = 2 : Integer(2)\l<statTemp>$7 = 3 : Integer(3)\l<block-pre-call-temp>$8 = <statTemp>$4.foo(<statTemp>$5, <statTemp>$6, <statTemp>$7) : T.untyped\l<unconditional>\l"
    ];

    "bb::BlockTest#block_pass_0" -> "bb::BlockTest#block_pass_2" [style="bold"];
    "bb::BlockTest#block_pass_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::BlockTest#block_pass_1" -> "bb::BlockTest#block_pass_1" [style="bold"];
    "bb::BlockTest#block_pass_2" [
        label = "block[id=2]()\louterLoops: 1\l<block-call>\l"
    ];

    "bb::BlockTest#block_pass_2" -> "bb::BlockTest#block_pass_4" [style="bold"];
    "bb::BlockTest#block_pass_2" -> "bb::BlockTest#block_pass_3" [style="tapered"];

    "bb::BlockTest#block_pass_3" [
        label = "block[id=3]()\l<returnMethodTemp>$2 = Solve<::BlockTest#block_pass#<block>> : T.untyped\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::BlockTest#block_pass_3" -> "bb::BlockTest#block_pass_1" [style="bold"];
    "bb::BlockTest#block_pass_4" [
        label = "block[id=4]()\louterLoops: 1\l<blk>$9 = load_yield_params(::BlockTest#block_pass#<block>, BlockTest#block_pass#<block>) : TupleType {\l  0 = T.untyped\l  1 = T.untyped\l}\l<blk>$10 = 0 : Integer(0)\lx$2 = <blk>$9.[](<blk>$10) : T.untyped\l<blk>$10 = 1 : Integer(1)\ly$2 = <blk>$9.[](<blk>$10) : T.untyped\l<blockReturnTemp>$11 = x$2 : T.untyped\l<blockReturnTemp>$12 = blockreturn<::BlockTest#block_pass#<block>> <blockReturnTemp>$11 : <impossible>\l<unconditional>\l"
    ];

    "bb::BlockTest#block_pass_4" -> "bb::BlockTest#block_pass_2" [style="bold"];
}

}

