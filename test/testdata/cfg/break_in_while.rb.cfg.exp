digraph "break_in_while.rb" {
subgraph "cluster_::Object#foo" {
    label = "::Object#foo";
    color = blue;
    "bb::Object#foo_0" [shape = invhouse];
    "bb::Object#foo_1" [shape = parallelogram];

    "bb::Object#foo_0" [
        label = "block[id=0]()\l<U <self>>: Object = cast(<U <self>>: NilClass, Object);\l<unconditional>\l"
    ];

    "bb::Object#foo_0" -> "bb::Object#foo_2" [style="bold"];
    "bb::Object#foo_1" [
        label = "block[id=1](<U <self>>)\l<U <statTemp>>$9 = <U <self>>\l<U <statTemp>>$4 = <U <statTemp>>$9.<U dead>()\l<unconditional>\l"
    ];

    "bb::Object#foo_1" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_2" [
        label = "block[id=2]()\louterLoops: 1\l<U <whileTemp>>$3: TrueClass = true\l<U <whileTemp>>$3: TrueClass\l"
    ];

    "bb::Object#foo_2" -> "bb::Object#foo_5" [style="bold"];
    "bb::Object#foo_2" -> "bb::Object#foo_3" [style="tapered"];

    "bb::Object#foo_3" [
        label = "block[id=3]()\l<U <returnMethodTemp>>$2 = nil\l<unconditional>\l"
    ];

    "bb::Object#foo_3" -> "bb::Object#foo_4" [style="bold"];
    "bb::Object#foo_4" [
        label = "block[id=4](<U <returnMethodTemp>>$2: Integer(2))\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: Integer(2)\l<unconditional>\l"
    ];

    "bb::Object#foo_4" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_5" [
        label = "block[id=5]()\louterLoops: 1\l<U <returnTemp>>$7: Integer(2) = 2\l<U <block-break-assign>>$8: Integer(2) = <U <returnTemp>>$7\l<U <returnMethodTemp>>$2: Integer(2) = <U <block-break-assign>>$8\l<unconditional>\l"
    ];

    "bb::Object#foo_5" -> "bb::Object#foo_4" [style="bold"];
}

subgraph "cluster_::<Class:<root>>#<static-init>" {
    label = "::<Class:<root>>#<static-init>";
    color = blue;
    "bb::<Class:<root>>#<static-init>_0" [shape = invhouse];
    "bb::<Class:<root>>#<static-init>_1" [shape = parallelogram];

    "bb::<Class:<root>>#<static-init>_0" [
        label = "block[id=0]()\l<U <self>>: T.class_of(<root>) = cast(<U <self>>: NilClass, T.class_of(<root>));\l<U <statTemp>>$4: T.untyped = <U <self>>: T.class_of(<root>).<U foo>()\l<U <returnMethodTemp>>$2: NilClass = <U <self>>: T.class_of(<root>).<U puts>(<U <statTemp>>$4: T.untyped)\l<U <finalReturn>>: T.noreturn = return <U <returnMethodTemp>>$2: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_0" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
    "bb::<Class:<root>>#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:<root>>#<static-init>_1" -> "bb::<Class:<root>>#<static-init>_1" [style="bold"];
}

}

