digraph "break.rb"{
subgraph "cluster_#<static-init>$9" {
    label = "#<static-init>$9";
    color = blue;
    "bb#<static-init>$9_0" [shape = invhouse];
    "bb#<static-init>$9_1" [shape = parallelogram];

    "bb#<static-init>$9_0" [label = "block[id=0]()
<statTemp>$5 = self : <Class:<root>>
<statTemp>$7 = self : <Class:<root>>
<statTemp>$6 = <statTemp>$7.foo() : untyped
<returnMethodTemp>$2 = <statTemp>$5.puts(<statTemp>$6) : NilClass
<finalReturn> = return <returnMethodTemp>$2 : <impossible>
<unconditional>"];

    "bb#<static-init>$9_0" -> "bb#<static-init>$9_1" [style="bold"];
    "bb#<static-init>$9_1" [label = "block[id=1]()
<unconditional>"];

    "bb#<static-init>$9_1" -> "bb#<static-init>$9_1" [style="bold"];
}

subgraph "cluster_::<constant:Object>#foo" {
    label = "::<constant:Object>#foo";
    color = blue;
    "bb::<constant:Object>#foo_0" [shape = invhouse];
    "bb::<constant:Object>#foo_1" [shape = parallelogram];

    "bb::<constant:Object>#foo_0" [label = "block[id=0]()
<constant:<Magic>>$8 = alias <constant:<Magic>> : <Magic>
<arrayTemp>$6 = 1 : Integer(1)
<arrayTemp>$7 = 2 : Integer(2)
<statTemp>$5 = <constant:<Magic>>$8.<build-array>(<arrayTemp>$6, <arrayTemp>$7) : TupleType {
  0 = Integer(1)
  1 = Integer(2)
}
<returnMethodTemp>$3 = <statTemp>$5.map() : AppliedType {
  klass = ::<constant:Array>
  targs = [
    <constant:Elem> = untyped
  ]
}
<unconditional>"];

    "bb::<constant:Object>#foo_0" -> "bb::<constant:Object>#foo_2" [style="bold"];
    "bb::<constant:Object>#foo_1" [label = "block[id=1]()
<unconditional>"];

    "bb::<constant:Object>#foo_1" -> "bb::<constant:Object>#foo_1" [style="bold"];
    "bb::<constant:Object>#foo_2" [label = "block[id=2](<returnMethodTemp>$3)
outerLoops: 1
<block-call>"];

    "bb::<constant:Object>#foo_2" -> "bb::<constant:Object>#foo_4" [style="bold"];
    "bb::<constant:Object>#foo_2" -> "bb::<constant:Object>#foo_3" [style="tapered"];

    "bb::<constant:Object>#foo_3" [label = "block[id=3](<returnMethodTemp>$3)
<finalReturn> = return <returnMethodTemp>$3 : <impossible>
<unconditional>"];

    "bb::<constant:Object>#foo_3" -> "bb::<constant:Object>#foo_1" [style="bold"];
    "bb::<constant:Object>#foo_4" [label = "block[id=4](<returnMethodTemp>$3)
outerLoops: 1
x$2 = load_yield_param(::<constant:Object>#foo#<block>$2, 0) : untyped
<unconditional>"];

    "bb::<constant:Object>#foo_4" -> "bb::<constant:Object>#foo_3" [style="bold"];
}

}

