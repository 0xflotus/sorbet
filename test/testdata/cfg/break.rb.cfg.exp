digraph "break.rb" {
subgraph "cluster_::Object#foo" {
    label = "::Object#foo";
    color = blue;
    "bb::Object#foo_0" [shape = invhouse];
    "bb::Object#foo_1" [shape = parallelogram];

    "bb::Object#foo_0" [
        label = "block[id=0]()\l<arrayTemp>$5: Integer(1) = 1\l<arrayTemp>$6: Integer(2) = 2\l<magic>$7: <Magic> = alias <constant:<Magic>>\l<statTemp>$4: [Integer(1), Integer(2)] = <magic>$7: <Magic>.<build-array>(<arrayTemp>$5: Integer(1), <arrayTemp>$6: Integer(2))\l<block-pre-call-temp>$8: T::Array[U$1] = <statTemp>$4: [Integer(1), Integer(2)].map()\l<unconditional>\l"
    ];

    "bb::Object#foo_0" -> "bb::Object#foo_2" [style="bold"];
    "bb::Object#foo_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Object#foo_1" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_2" [
        label = "block[id=2]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::Object#foo_2" -> "bb::Object#foo_4" [style="bold"];
    "bb::Object#foo_2" -> "bb::Object#foo_3" [style="tapered"];

    "bb::Object#foo_3" [
        label = "block[id=3]()\l<returnMethodTemp>$2: T::Array[<impossible>] = Solve<::Object#foo#<block>>\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: T::Array[<impossible>]\l<unconditional>\l"
    ];

    "bb::Object#foo_3" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_4" [
        label = "block[id=4]()\louterLoops: 1\l<blk>$9: [Integer] = load_yield_params(::Object#foo#<block>, Object#foo#<block>)\l<blk>$10: Integer(0) = 0\lx$2: Integer = <blk>$9: [Integer].[](<blk>$10: Integer(0))\l<unconditional>\l"
    ];

    "bb::Object#foo_4" -> "bb::Object#foo_3" [style="bold"];
}

subgraph "cluster_#<static-init>" {
    label = "#<static-init>";
    color = blue;
    "bb#<static-init>_0" [shape = invhouse];
    "bb#<static-init>_1" [shape = parallelogram];

    "bb#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$4: T.class_of(<root>) = self\l<statTemp>$6: T.class_of(<root>) = self\l<statTemp>$5: T.untyped = <statTemp>$6: T.class_of(<root>).foo()\l<returnMethodTemp>$2: NilClass = <statTemp>$4: T.class_of(<root>).puts(<statTemp>$5: T.untyped)\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb#<static-init>_0" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb#<static-init>_1" -> "bb#<static-init>_1" [style="bold"];
}

}

