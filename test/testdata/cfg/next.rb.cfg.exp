digraph "next.rb" {
subgraph "cluster_::Object#foo" {
    label = "::Object#foo";
    color = blue;
    "bb::Object#foo_0" [shape = invhouse];
    "bb::Object#foo_1" [shape = parallelogram];

    "bb::Object#foo_0" [
        label = "block[id=0]()\l<arrayTemp>$5: Integer(1) = 1\l<magic>$6: <Magic> = alias <constant:<Magic>>\l<statTemp>$4: [Integer(1)] = <magic>$6: <Magic>.<build-array>(<arrayTemp>$5: Integer(1))\l<block-pre-call-temp>$7: T::Array[U$1] = <statTemp>$4: [Integer(1)].map()\l<unconditional>\l"
    ];

    "bb::Object#foo_0" -> "bb::Object#foo_2" [style="bold"];
    "bb::Object#foo_1" [
        label = "block[id=1]()\l<statTemp>$16 = self\l<blockReturnTemp>$10 = <statTemp>$16.bad()\l<unconditional>\l"
    ];

    "bb::Object#foo_1" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_2" [
        label = "block[id=2]()\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::Object#foo_2" -> "bb::Object#foo_4" [style="bold"];
    "bb::Object#foo_2" -> "bb::Object#foo_3" [style="tapered"];

    "bb::Object#foo_3" [
        label = "block[id=3]()\l<returnMethodTemp>$2: T::Array[Integer] = Solve<::Object#foo#<block>>\l<finalReturn>: <impossible> = return <returnMethodTemp>$2: T::Array[Integer]\l<unconditional>\l"
    ];

    "bb::Object#foo_3" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_4" [
        label = "block[id=4]()\louterLoops: 1\l<blk>$8: [Integer] = load_yield_params(::Object#foo#<block>, Object#foo#<block>)\l<blk>$9: Integer(0) = 0\lx$2: Integer = <blk>$8: [Integer].[](<blk>$9: Integer(0))\l<statTemp>$12: Object = self\l<statTemp>$11: T.untyped = <statTemp>$12: Object.good()\l<nextTemp>$14: Integer = x$2\l<nextTemp>$15: <impossible> = blockreturn<::Object#foo#<block>> <nextTemp>$14: Integer\l<unconditional>\l"
    ];

    "bb::Object#foo_4" -> "bb::Object#foo_2" [style="bold"];
}

}

