digraph "next.rb" {
subgraph "cluster_::Object#foo" {
    label = "::Object#foo";
    color = blue;
    "bb::Object#foo_0" [shape = invhouse];
    "bb::Object#foo_1" [shape = parallelogram];

    "bb::Object#foo_0" [
        label = "block[id=0]()\l<constant:<Magic>>$6 = alias <constant:<Magic>> : <Magic>\l<arrayTemp>$5 = 1 : Integer(1)\l<statTemp>$4 = <constant:<Magic>>$6.<build-array>(<arrayTemp>$5) : TupleType {\l  0 = Integer(1)\l}\l<block-pre-call-temp>$7 = <statTemp>$4.map() : AppliedType {\l  klass = ::Array\l  targs = [\l    <constant:Elem> = TypeVar(U$1)\l  ]\l}\l<unconditional>\l"
    ];

    "bb::Object#foo_0" -> "bb::Object#foo_2" [style="bold"];
    "bb::Object#foo_1" [
        label = "block[id=1]()\l<statTemp>$16 = self\l<blockReturnTemp>$10 = <statTemp>$16.bad()\l<unconditional>\l"
    ];

    "bb::Object#foo_1" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_2" [
        label = "block[id=2]()\louterLoops: 1\l<block-call>\l"
    ];

    "bb::Object#foo_2" -> "bb::Object#foo_4" [style="bold"];
    "bb::Object#foo_2" -> "bb::Object#foo_3" [style="tapered"];

    "bb::Object#foo_3" [
        label = "block[id=3]()\l<returnMethodTemp>$2 = Solve<::Object#foo#<block>> : AppliedType {\l  klass = ::Array\l  targs = [\l    <constant:Elem> = Integer\l  ]\l}\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#foo_3" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_4" [
        label = "block[id=4]()\louterLoops: 1\l<blk>$8 = load_yield_params(::Object#foo#<block>, Object#foo#<block>) : TupleType {\l  0 = Integer\l}\l<blk>$9 = 0 : Integer(0)\lx$2 = <blk>$8.[](<blk>$9) : Integer\l<statTemp>$12 = self : Object\l<statTemp>$11 = <statTemp>$12.good() : T.untyped\l<blockReturnTemp>$14 = x$2 : Integer\l<blockReturnTemp>$15 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$14 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#foo_4" -> "bb::Object#foo_2" [style="bold"];
}

}

