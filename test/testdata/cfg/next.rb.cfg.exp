digraph "next.rb" {
subgraph "cluster_::Object#foo" {
    label = "::Object#foo";
    color = blue;
    "bb::Object#foo_0" [shape = invhouse];
    "bb::Object#foo_1" [shape = parallelogram];

    "bb::Object#foo_0" [
        label = "block[id=0]()\l<constant:<Magic>>$7 = alias <constant:<Magic>> : <Magic>\l<arrayTemp>$6 = 1 : Integer(1)\l<statTemp>$5 = <constant:<Magic>>$7.<build-array>(<arrayTemp>$6) : TupleType {\l  0 = Integer(1)\l}\l<block-pre-call-temp>$8 = <statTemp>$5.map() : AppliedType {\l  klass = ::Array\l  targs = [\l    <constant:Elem> = TypeVar(U$1)\l  ]\l}\l<unconditional>\l"
    ];

    "bb::Object#foo_0" -> "bb::Object#foo_2" [style="bold"];
    "bb::Object#foo_1" [
        label = "block[id=1]()\l<statTemp>$17 = self\l<blockReturnTemp>$11 = <statTemp>$17.bad()\l<unconditional>\l"
    ];

    "bb::Object#foo_1" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_2" [
        label = "block[id=2]()\louterLoops: 1\l<block-call>\l"
    ];

    "bb::Object#foo_2" -> "bb::Object#foo_4" [style="bold"];
    "bb::Object#foo_2" -> "bb::Object#foo_3" [style="tapered"];

    "bb::Object#foo_3" [
        label = "block[id=3]()\l<returnMethodTemp>$3 = Solve<::Object#foo#<block>> : AppliedType {\l  klass = ::Array\l  targs = [\l    <constant:Elem> = Integer\l  ]\l}\l<finalReturn> = return <returnMethodTemp>$3 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#foo_3" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_4" [
        label = "block[id=4]()\louterLoops: 1\l<blk>$9 = load_yield_params(::Object#foo#<block>, Object#foo#<block>) : TupleType {\l  0 = Integer\l}\l<blk>$10 = 0 : Integer(0)\lx$2 = <blk>$9.[](<blk>$10) : Integer\l<statTemp>$13 = self : Object\l<statTemp>$12 = <statTemp>$13.good() : T.untyped\l<blockReturnTemp>$15 = x$2 : Integer\l<blockReturnTemp>$16 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$15 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#foo_4" -> "bb::Object#foo_2" [style="bold"];
}

}

