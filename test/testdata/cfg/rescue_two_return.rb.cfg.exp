digraph "rescue_two_return.rb" {
subgraph "cluster_::Object#foo" {
    label = "::Object#foo";
    color = blue;
    "bb::Object#foo_0" [shape = invhouse];
    "bb::Object#foo_1" [shape = parallelogram];

    "bb::Object#foo_0" [
        label = "block[id=0]()\l<rescueStartTemp>$5: T.untyped = <unanalyzable>\l<rescueStartTemp>$5: T.untyped\l"
    ];

    "bb::Object#foo_0" -> "bb::Object#foo_3" [style="bold"];
    "bb::Object#foo_0" -> "bb::Object#foo_4" [style="tapered"];

    "bb::Object#foo_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Object#foo_1" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_3" [
        label = "block[id=3]()\l<rescueTemp>$2: T.untyped = <unanalyzable>\l<exceptionClassTemp>$8: <Class:StandardError> = alias <constant:StandardError>\l<isaCheckTemp>$9: T.untyped = <rescueTemp>$2: T.untyped.is_a?(<exceptionClassTemp>$8: <Class:StandardError>)\l<isaCheckTemp>$9: T.untyped\l"
    ];

    "bb::Object#foo_3" -> "bb::Object#foo_8" [style="bold"];
    "bb::Object#foo_3" -> "bb::Object#foo_9" [style="tapered"];

    "bb::Object#foo_4" [
        label = "block[id=4]()\l<returnTemp>$6: Integer(1) = 1\l<statTemp>$4: <impossible> = return <returnTemp>$6: Integer(1)\l<unconditional>\l"
    ];

    "bb::Object#foo_4" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_8" [
        label = "block[id=8]()\l<returnTemp>$10: Integer(2) = 2\l<statTemp>$4: <impossible> = return <returnTemp>$10: Integer(2)\l<unconditional>\l"
    ];

    "bb::Object#foo_8" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_9" [
        label = "block[id=9]()\l<gotoDeadTemp>$11: TrueClass(true) = true\l<gotoDeadTemp>$11: TrueClass(true)\l"
    ];

    "bb::Object#foo_9" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_9" -> "bb::Object#foo_10" [style="tapered"];

    "bb::Object#foo_10" [
        label = "block[id=10]()\l<statTemp>$13 = self\l<returnMethodTemp>$2 = <statTemp>$13.deadcode()\l<finalReturn> = return <returnMethodTemp>$2\l<unconditional>\l"
    ];

    "bb::Object#foo_10" -> "bb::Object#foo_1" [style="bold"];
}

}

