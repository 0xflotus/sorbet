digraph "for.rb" {
subgraph "cluster_#<static-init>" {
    label = "#<static-init>";
    color = blue;
    "bb#<static-init>_0" [shape = invhouse];
    "bb#<static-init>_1" [shape = parallelogram];

    "bb#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$5: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$6: T.class_of(A) = alias <constant:A>\l<statTemp>$4: RubyTyper::Void = <statTemp>$5: T.class_of(RubyTyper).keep_for_ide(<statTemp>$6: T.class_of(A))\l<statTemp>$9: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$10: T.class_of(E) = alias <constant:E>\l<statTemp>$8: RubyTyper::Void = <statTemp>$9: T.class_of(RubyTyper).keep_for_ide(<statTemp>$10: T.class_of(E))\l<statTemp>$13: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$14: T.class_of(Main) = alias <constant:Main>\l<statTemp>$12: RubyTyper::Void = <statTemp>$13: T.class_of(RubyTyper).keep_for_ide(<statTemp>$14: T.class_of(Main))\l<statTemp>$16: T.class_of(Main) = alias <constant:Main>\l<statTemp>$15: T.untyped = <statTemp>$16: T.class_of(Main).main()\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb#<static-init>_0" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb#<static-init>_1" -> "bb#<static-init>_1" [style="bold"];
}

subgraph "cluster_::<Class:A>#each" {
    label = "::<Class:A>#each";
    color = blue;
    "bb::<Class:A>#each_0" [shape = invhouse];
    "bb::<Class:A>#each_1" [shape = parallelogram];

    "bb::<Class:A>#each_0" [
        label = "block[id=0]()\l<blk>: T.untyped = load_arg(A.each#<blk>)\l<statTemp>$5: Integer(1) = 1\l<statTemp>$6: Integer(2) = 2\l<statTemp>$7: Integer(3) = 3\l<statTemp>$8: Integer(4) = 4\l<statTemp>$9: Integer(5) = 5\l<statTemp>$3: T.untyped = <blk>: T.untyped.call(<statTemp>$5: Integer(1), <statTemp>$6: Integer(2), <statTemp>$7: Integer(3), <statTemp>$8: Integer(4), <statTemp>$9: Integer(5))\l<statTemp>$11: Integer(6) = 6\l<statTemp>$12: Integer(7) = 7\l<statTemp>$13: Integer(8) = 8\l<statTemp>$14: Integer(9) = 9\l<statTemp>$15: Integer(0) = 0\l<returnMethodTemp>$2: T.untyped = <blk>: T.untyped.call(<statTemp>$11: Integer(6), <statTemp>$12: Integer(7), <statTemp>$13: Integer(8), <statTemp>$14: Integer(9), <statTemp>$15: Integer(0))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:A>#each_0" -> "bb::<Class:A>#each_1" [style="bold"];
    "bb::<Class:A>#each_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:A>#each_1" -> "bb::<Class:A>#each_1" [style="bold"];
}

subgraph "cluster_::<Class:E>#e=" {
    label = "::<Class:E>#e=";
    color = blue;
    "bb::<Class:E>#e=_0" [shape = invhouse];
    "bb::<Class:E>#e=_1" [shape = parallelogram];

    "bb::<Class:E>#e=_0" [
        label = "block[id=0]()\l@e$3: T.untyped = alias <constant:<undeclared-field-stub>>\le: T.untyped = load_arg(E.e=#e)\l@e$3: T.untyped = e\l<returnMethodTemp>$2: T.untyped = @e$3\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:E>#e=_0" -> "bb::<Class:E>#e=_1" [style="bold"];
    "bb::<Class:E>#e=_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:E>#e=_1" -> "bb::<Class:E>#e=_1" [style="bold"];
}

subgraph "cluster_::<Class:E>#e" {
    label = "::<Class:E>#e";
    color = blue;
    "bb::<Class:E>#e_0" [shape = invhouse];
    "bb::<Class:E>#e_1" [shape = parallelogram];

    "bb::<Class:E>#e_0" [
        label = "block[id=0]()\l@e$3: T.untyped = alias <constant:<undeclared-field-stub>>\l<returnMethodTemp>$2: T.untyped = @e$3\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:E>#e_0" -> "bb::<Class:E>#e_1" [style="bold"];
    "bb::<Class:E>#e_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:E>#e_1" -> "bb::<Class:E>#e_1" [style="bold"];
}

subgraph "cluster_::<Class:Main>#main" {
    label = "::<Class:Main>#main";
    color = blue;
    "bb::<Class:Main>#main_0" [shape = invhouse];
    "bb::<Class:Main>#main_1" [shape = parallelogram];

    "bb::<Class:Main>#main_0" [
        label = "block[id=0]()\l@a$111: T.untyped = alias <constant:<undeclared-field-stub>>\l@@b$115: T.untyped = alias <constant:<undeclared-field-stub>>\l$c$119: T.untyped = alias $c\l<statTemp>$4: T.class_of(A) = alias <constant:A>\l<block-pre-call-temp>$5: T.untyped = <statTemp>$4: T.class_of(A).each()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_0" -> "bb::<Class:Main>#main_2" [style="bold"];
    "bb::<Class:Main>#main_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_1" -> "bb::<Class:Main>#main_1" [style="bold"];
    "bb::<Class:Main>#main_2" [
        label = "block[id=2](@a$111: T.untyped, @@b$115: T.untyped, $c$119: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_2" -> "bb::<Class:Main>#main_4" [style="bold"];
    "bb::<Class:Main>#main_2" -> "bb::<Class:Main>#main_3" [style="tapered"];

    "bb::<Class:Main>#main_3" [
        label = "block[id=3](@a$111: T.untyped, @@b$115: T.untyped, $c$119: T.untyped)\l<statTemp>$3: T.untyped = Solve<::<Class:Main>#main#<block>>\l<statTemp>$23: T.class_of(A) = alias <constant:A>\l<block-pre-call-temp>$24: T.untyped = <statTemp>$23: T.class_of(A).each()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_3" -> "bb::<Class:Main>#main_5" [style="bold"];
    "bb::<Class:Main>#main_4" [
        label = "block[id=4](@a$111: T.untyped, @@b$115: T.untyped, $c$119: T.untyped)\louterLoops: 1\l<blk>$6: T.untyped = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>)\l<statTemp>$11: <Magic> = alias <constant:<Magic>>\l<statTemp>$13: Integer(1) = 1\l<statTemp>$14: Integer(0) = 0\l<assignTemp>$3$2: T.untyped = <statTemp>$11: <Magic>.<expand-splat>(<blk>$6: T.untyped, <statTemp>$13: Integer(1), <statTemp>$14: Integer(0))\l<statTemp>$17: Integer(0) = 0\la$2: T.untyped = <assignTemp>$3$2: T.untyped.[](<statTemp>$17: Integer(0))\l<statTemp>$18: T.class_of(Main) = self\l<statTemp>$19: T.untyped = a$2: T.untyped.inspect()\l<blockReturnTemp>$8: NilClass = <statTemp>$18: T.class_of(Main).puts(<statTemp>$19: T.untyped)\l<blockReturnTemp>$21: T.noreturn = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$8: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_4" -> "bb::<Class:Main>#main_2" [style="bold"];
    "bb::<Class:Main>#main_5" [
        label = "block[id=5](@a$111: T.untyped, @@b$115: T.untyped, $c$119: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_5" -> "bb::<Class:Main>#main_7" [style="bold"];
    "bb::<Class:Main>#main_5" -> "bb::<Class:Main>#main_6" [style="tapered"];

    "bb::<Class:Main>#main_6" [
        label = "block[id=6](@a$111: T.untyped, @@b$115: T.untyped, $c$119: T.untyped)\l<statTemp>$22: T.untyped = Solve<::<Class:Main>#main#<block>>\l<statTemp>$43: T.class_of(A) = alias <constant:A>\l<block-pre-call-temp>$44: T.untyped = <statTemp>$43: T.class_of(A).each()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_6" -> "bb::<Class:Main>#main_8" [style="bold"];
    "bb::<Class:Main>#main_7" [
        label = "block[id=7](@a$111: T.untyped, @@b$115: T.untyped, $c$119: T.untyped)\louterLoops: 1\l<blk>$25: T.untyped = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>)\lforTemp$3: T.untyped = <blk>$25\l<statTemp>$30: <Magic> = alias <constant:<Magic>>\l<statTemp>$31: T.untyped = forTemp$3: T.untyped.to_a()\l<statTemp>$33: Integer(1) = 1\l<statTemp>$34: Integer(0) = 0\l<assignTemp>$4$3: T.untyped = <statTemp>$30: <Magic>.<expand-splat>(<statTemp>$31: T.untyped, <statTemp>$33: Integer(1), <statTemp>$34: Integer(0))\l<statTemp>$37: Integer(0) = 0\la$3: T.untyped = <assignTemp>$4$3: T.untyped.[](<statTemp>$37: Integer(0))\l<statTemp>$38: T.class_of(Main) = self\l<statTemp>$39: T.untyped = a$3: T.untyped.inspect()\l<blockReturnTemp>$27: NilClass = <statTemp>$38: T.class_of(Main).puts(<statTemp>$39: T.untyped)\l<blockReturnTemp>$41: T.noreturn = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$27: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_7" -> "bb::<Class:Main>#main_5" [style="bold"];
    "bb::<Class:Main>#main_8" [
        label = "block[id=8](@a$111: T.untyped, @@b$115: T.untyped, $c$119: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_8" -> "bb::<Class:Main>#main_10" [style="bold"];
    "bb::<Class:Main>#main_8" -> "bb::<Class:Main>#main_9" [style="tapered"];

    "bb::<Class:Main>#main_9" [
        label = "block[id=9](@a$111: T.untyped, @@b$115: T.untyped, $c$119: T.untyped)\l<statTemp>$42: T.untyped = Solve<::<Class:Main>#main#<block>>\l<statTemp>$69: T.class_of(A) = alias <constant:A>\l<block-pre-call-temp>$70: T.untyped = <statTemp>$69: T.class_of(A).each()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_9" -> "bb::<Class:Main>#main_11" [style="bold"];
    "bb::<Class:Main>#main_10" [
        label = "block[id=10](@a$111: T.untyped, @@b$115: T.untyped, $c$119: T.untyped)\louterLoops: 1\l<blk>$45: T.untyped = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>)\l<statTemp>$50: <Magic> = alias <constant:<Magic>>\l<statTemp>$52: Integer(2) = 2\l<statTemp>$53: Integer(0) = 0\l<assignTemp>$6$4: T.untyped = <statTemp>$50: <Magic>.<expand-splat>(<blk>$45: T.untyped, <statTemp>$52: Integer(2), <statTemp>$53: Integer(0))\l<statTemp>$56: Integer(0) = 0\la$4: T.untyped = <assignTemp>$6$4: T.untyped.[](<statTemp>$56: Integer(0))\l<statTemp>$59: Integer(1) = 1\lb$4: T.untyped = <assignTemp>$6$4: T.untyped.[](<statTemp>$59: Integer(1))\l<statTemp>$61: T.class_of(Main) = self\l<statTemp>$62: T.untyped = a$4: T.untyped.inspect()\l<statTemp>$60: NilClass = <statTemp>$61: T.class_of(Main).puts(<statTemp>$62: T.untyped)\l<statTemp>$64: T.class_of(Main) = self\l<statTemp>$65: T.untyped = b$4: T.untyped.inspect()\l<blockReturnTemp>$47: NilClass = <statTemp>$64: T.class_of(Main).puts(<statTemp>$65: T.untyped)\l<blockReturnTemp>$67: T.noreturn = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$47: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_10" -> "bb::<Class:Main>#main_8" [style="bold"];
    "bb::<Class:Main>#main_11" [
        label = "block[id=11](@a$111: T.untyped, @@b$115: T.untyped, $c$119: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_11" -> "bb::<Class:Main>#main_13" [style="bold"];
    "bb::<Class:Main>#main_11" -> "bb::<Class:Main>#main_12" [style="tapered"];

    "bb::<Class:Main>#main_12" [
        label = "block[id=12](@a$111: T.untyped, @@b$115: T.untyped, $c$119: T.untyped)\l<statTemp>$68: T.untyped = Solve<::<Class:Main>#main#<block>>\l<statTemp>$96: T.class_of(Main) = self\l<statTemp>$97: String(\"main\") = \"main\"\l<statTemp>$95: NilClass = <statTemp>$96: T.class_of(Main).puts(<statTemp>$97: String(\"main\"))\l<statTemp>$99: T.class_of(A) = alias <constant:A>\l<block-pre-call-temp>$100: T.untyped = <statTemp>$99: T.class_of(A).each()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_12" -> "bb::<Class:Main>#main_14" [style="bold"];
    "bb::<Class:Main>#main_13" [
        label = "block[id=13](@a$111: T.untyped, @@b$115: T.untyped, $c$119: T.untyped)\louterLoops: 1\l<blk>$71: T.untyped = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>)\lforTemp$5: T.untyped = <blk>$71\l<statTemp>$76: <Magic> = alias <constant:<Magic>>\l<statTemp>$77: T.untyped = forTemp$5: T.untyped.to_a()\l<statTemp>$79: Integer(2) = 2\l<statTemp>$80: Integer(0) = 0\l<assignTemp>$7$5: T.untyped = <statTemp>$76: <Magic>.<expand-splat>(<statTemp>$77: T.untyped, <statTemp>$79: Integer(2), <statTemp>$80: Integer(0))\l<statTemp>$83: Integer(0) = 0\la$5: T.untyped = <assignTemp>$7$5: T.untyped.[](<statTemp>$83: Integer(0))\l<statTemp>$86: Integer(1) = 1\lb$5: T.untyped = <assignTemp>$7$5: T.untyped.[](<statTemp>$86: Integer(1))\l<statTemp>$88: T.class_of(Main) = self\l<statTemp>$89: T.untyped = a$5: T.untyped.inspect()\l<statTemp>$87: NilClass = <statTemp>$88: T.class_of(Main).puts(<statTemp>$89: T.untyped)\l<statTemp>$91: T.class_of(Main) = self\l<statTemp>$92: T.untyped = b$5: T.untyped.inspect()\l<blockReturnTemp>$73: NilClass = <statTemp>$91: T.class_of(Main).puts(<statTemp>$92: T.untyped)\l<blockReturnTemp>$94: T.noreturn = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$73: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_13" -> "bb::<Class:Main>#main_11" [style="bold"];
    "bb::<Class:Main>#main_14" [
        label = "block[id=14](@a$111: T.untyped, @@b$115: T.untyped, $c$119: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_14" -> "bb::<Class:Main>#main_16" [style="bold"];
    "bb::<Class:Main>#main_14" -> "bb::<Class:Main>#main_15" [style="tapered"];

    "bb::<Class:Main>#main_15" [
        label = "block[id=15](@a$111: T.untyped, @@b$115: T.untyped, $c$119: T.untyped)\l<statTemp>$98: T.untyped = Solve<::<Class:Main>#main#<block>>\l<statTemp>$151: T.class_of(A) = alias <constant:A>\l<block-pre-call-temp>$152: T.untyped = <statTemp>$151: T.class_of(A).each()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_15" -> "bb::<Class:Main>#main_17" [style="bold"];
    "bb::<Class:Main>#main_16" [
        label = "block[id=16](@a$111: T.untyped, @@b$115: T.untyped, $c$119: T.untyped)\louterLoops: 1\l<blk>$101: T.untyped = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>)\l<statTemp>$106: <Magic> = alias <constant:<Magic>>\l<statTemp>$108: Integer(5) = 5\l<statTemp>$109: Integer(0) = 0\l<assignTemp>$9$6: T.untyped = <statTemp>$106: <Magic>.<expand-splat>(<blk>$101: T.untyped, <statTemp>$108: Integer(5), <statTemp>$109: Integer(0))\l<statTemp>$113: Integer(0) = 0\l@a$111: T.untyped = <assignTemp>$9$6: T.untyped.[](<statTemp>$113: Integer(0))\l<statTemp>$117: Integer(1) = 1\l@@b$115: T.untyped = <assignTemp>$9$6: T.untyped.[](<statTemp>$117: Integer(1))\l<statTemp>$121: Integer(2) = 2\l$c$119: T.untyped = <assignTemp>$9$6: T.untyped.[](<statTemp>$121: Integer(2))\l<statTemp>$124: Integer(3) = 3\ld$6: T.untyped = <assignTemp>$9$6: T.untyped.[](<statTemp>$124: Integer(3))\l<statTemp>$126: T.class_of(E) = alias <constant:E>\l<statTemp>$129: Integer(4) = 4\l<statTemp>$127: T.untyped = <assignTemp>$9$6: T.untyped.[](<statTemp>$129: Integer(4))\l<statTemp>$125: T.untyped = <statTemp>$126: T.class_of(E).e=(<statTemp>$127: T.untyped)\l<statTemp>$131: T.class_of(Main) = self\l<statTemp>$132: T.untyped = @a$111: T.untyped.inspect()\l<statTemp>$130: NilClass = <statTemp>$131: T.class_of(Main).puts(<statTemp>$132: T.untyped)\l<statTemp>$135: T.class_of(Main) = self\l<statTemp>$136: T.untyped = @@b$115: T.untyped.inspect()\l<statTemp>$134: NilClass = <statTemp>$135: T.class_of(Main).puts(<statTemp>$136: T.untyped)\l<statTemp>$139: T.class_of(Main) = self\l<statTemp>$140: T.untyped = $c$119: T.untyped.inspect()\l<statTemp>$138: NilClass = <statTemp>$139: T.class_of(Main).puts(<statTemp>$140: T.untyped)\l<statTemp>$143: T.class_of(Main) = self\l<statTemp>$144: T.untyped = d$6: T.untyped.inspect()\l<statTemp>$142: NilClass = <statTemp>$143: T.class_of(Main).puts(<statTemp>$144: T.untyped)\l<statTemp>$146: T.class_of(Main) = self\l<statTemp>$149: T.class_of(E) = alias <constant:E>\l<statTemp>$148: T.untyped = <statTemp>$149: T.class_of(E).e()\l<statTemp>$147: T.untyped = <statTemp>$148: T.untyped.inspect()\l<blockReturnTemp>$103: NilClass = <statTemp>$146: T.class_of(Main).puts(<statTemp>$147: T.untyped)\l<blockReturnTemp>$150: T.noreturn = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$103: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_16" -> "bb::<Class:Main>#main_14" [style="bold"];
    "bb::<Class:Main>#main_17" [
        label = "block[id=17](@a$111: T.untyped, @@b$115: T.untyped, $c$119: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_17" -> "bb::<Class:Main>#main_19" [style="bold"];
    "bb::<Class:Main>#main_17" -> "bb::<Class:Main>#main_18" [style="tapered"];

    "bb::<Class:Main>#main_18" [
        label = "block[id=18]()\l<returnMethodTemp>$2: T.untyped = Solve<::<Class:Main>#main#<block>>\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_18" -> "bb::<Class:Main>#main_1" [style="bold"];
    "bb::<Class:Main>#main_19" [
        label = "block[id=19](@a$111: T.untyped, @@b$115: T.untyped, $c$119: T.untyped)\louterLoops: 1\l<blk>$153: T.untyped = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>)\lforTemp$7: T.untyped = <blk>$153\l<statTemp>$158: <Magic> = alias <constant:<Magic>>\l<statTemp>$159: T.untyped = forTemp$7: T.untyped.to_a()\l<statTemp>$161: Integer(5) = 5\l<statTemp>$162: Integer(0) = 0\l<assignTemp>$10$7: T.untyped = <statTemp>$158: <Magic>.<expand-splat>(<statTemp>$159: T.untyped, <statTemp>$161: Integer(5), <statTemp>$162: Integer(0))\l<statTemp>$165: Integer(0) = 0\l@a$111: T.untyped = <assignTemp>$10$7: T.untyped.[](<statTemp>$165: Integer(0))\l<statTemp>$168: Integer(1) = 1\l@@b$115: T.untyped = <assignTemp>$10$7: T.untyped.[](<statTemp>$168: Integer(1))\l<statTemp>$171: Integer(2) = 2\l$c$119: T.untyped = <assignTemp>$10$7: T.untyped.[](<statTemp>$171: Integer(2))\l<statTemp>$174: Integer(3) = 3\ld$7: T.untyped = <assignTemp>$10$7: T.untyped.[](<statTemp>$174: Integer(3))\l<statTemp>$176: T.class_of(E) = alias <constant:E>\l<statTemp>$179: Integer(4) = 4\l<statTemp>$177: T.untyped = <assignTemp>$10$7: T.untyped.[](<statTemp>$179: Integer(4))\l<statTemp>$175: T.untyped = <statTemp>$176: T.class_of(E).e=(<statTemp>$177: T.untyped)\l<statTemp>$181: T.class_of(Main) = self\l<statTemp>$182: T.untyped = @a$111: T.untyped.inspect()\l<statTemp>$180: NilClass = <statTemp>$181: T.class_of(Main).puts(<statTemp>$182: T.untyped)\l<statTemp>$185: T.class_of(Main) = self\l<statTemp>$186: T.untyped = @@b$115: T.untyped.inspect()\l<statTemp>$184: NilClass = <statTemp>$185: T.class_of(Main).puts(<statTemp>$186: T.untyped)\l<statTemp>$189: T.class_of(Main) = self\l<statTemp>$190: T.untyped = $c$119: T.untyped.inspect()\l<statTemp>$188: NilClass = <statTemp>$189: T.class_of(Main).puts(<statTemp>$190: T.untyped)\l<statTemp>$193: T.class_of(Main) = self\l<statTemp>$194: T.untyped = d$7: T.untyped.inspect()\l<statTemp>$192: NilClass = <statTemp>$193: T.class_of(Main).puts(<statTemp>$194: T.untyped)\l<statTemp>$196: T.class_of(Main) = self\l<statTemp>$199: T.class_of(E) = alias <constant:E>\l<statTemp>$198: T.untyped = <statTemp>$199: T.class_of(E).e()\l<statTemp>$197: T.untyped = <statTemp>$198: T.untyped.inspect()\l<blockReturnTemp>$155: NilClass = <statTemp>$196: T.class_of(Main).puts(<statTemp>$197: T.untyped)\l<blockReturnTemp>$200: T.noreturn = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$155: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_19" -> "bb::<Class:Main>#main_17" [style="bold"];
}

}

