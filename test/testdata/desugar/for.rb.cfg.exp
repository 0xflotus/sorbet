digraph "for.rb" {
subgraph "cluster_#<static-init>" {
    label = "#<static-init>";
    color = blue;
    "bb#<static-init>_0" [shape = invhouse];
    "bb#<static-init>_1" [shape = parallelogram];

    "bb#<static-init>_0" [
        label = "block[id=0]()\l<constant:Main>$5 = alias <constant:Main> : <Class:Main>\l<returnMethodTemp>$2 = <constant:Main>$5.main() : T.untyped\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb#<static-init>_0" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb#<static-init>_1" -> "bb#<static-init>_1" [style="bold"];
}

subgraph "cluster_::<Class:A>#each" {
    label = "::<Class:A>#each";
    color = blue;
    "bb::<Class:A>#each_0" [shape = invhouse];
    "bb::<Class:A>#each_1" [shape = parallelogram];

    "bb::<Class:A>#each_0" [
        label = "block[id=0]()\l<constant:<Magic>>$12 = alias <constant:<Magic>> : <Magic>\l<selfMethodTemp>$3 = self : <Class:A>\l<blk> = load_arg(<selfMethodTemp>$3#each, 0) : T.untyped\l<arrayTemp>$7 = 1 : Integer(1)\l<arrayTemp>$8 = 2 : Integer(2)\l<arrayTemp>$9 = 3 : Integer(3)\l<arrayTemp>$10 = 4 : Integer(4)\l<arrayTemp>$11 = 5 : Integer(5)\l<statTemp>$6 = <constant:<Magic>>$12.<build-array>(<arrayTemp>$7, <arrayTemp>$8, <arrayTemp>$9, <arrayTemp>$10, <arrayTemp>$11) : TupleType {\l  0 = Integer(1)\l  1 = Integer(2)\l  2 = Integer(3)\l  3 = Integer(4)\l  4 = Integer(5)\l}\l<statTemp>$4 = <blk>.call(<statTemp>$6) : T.untyped\l<arrayTemp>$15 = 6 : Integer(6)\l<arrayTemp>$16 = 7 : Integer(7)\l<arrayTemp>$17 = 8 : Integer(8)\l<arrayTemp>$18 = 9 : Integer(9)\l<arrayTemp>$19 = 0 : Integer(0)\l<statTemp>$14 = <constant:<Magic>>$12.<build-array>(<arrayTemp>$15, <arrayTemp>$16, <arrayTemp>$17, <arrayTemp>$18, <arrayTemp>$19) : TupleType {\l  0 = Integer(6)\l  1 = Integer(7)\l  2 = Integer(8)\l  3 = Integer(9)\l  4 = Integer(0)\l}\l<returnMethodTemp>$2 = <blk>.call(<statTemp>$14) : T.untyped\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:A>#each_0" -> "bb::<Class:A>#each_1" [style="bold"];
    "bb::<Class:A>#each_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:A>#each_1" -> "bb::<Class:A>#each_1" [style="bold"];
}

subgraph "cluster_::<Class:E>#e=" {
    label = "::<Class:E>#e=";
    color = blue;
    "bb::<Class:E>#e=_0" [shape = invhouse];
    "bb::<Class:E>#e=_1" [shape = parallelogram];

    "bb::<Class:E>#e=_0" [
        label = "block[id=0]()\l@e$4 = alias @e : T.untyped\l<selfMethodTemp>$3 = self : <Class:E>\le = load_arg(<selfMethodTemp>$3#e=, 0) : T.untyped\l@e$4 = e : T.untyped\l<finalReturn> = return @e$4 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:E>#e=_0" -> "bb::<Class:E>#e=_1" [style="bold"];
    "bb::<Class:E>#e=_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:E>#e=_1" -> "bb::<Class:E>#e=_1" [style="bold"];
}

subgraph "cluster_::<Class:E>#e" {
    label = "::<Class:E>#e";
    color = blue;
    "bb::<Class:E>#e_0" [shape = invhouse];
    "bb::<Class:E>#e_1" [shape = parallelogram];

    "bb::<Class:E>#e_0" [
        label = "block[id=0]()\l@e$4 = alias @e : T.untyped\l<finalReturn> = return @e$4 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:E>#e_0" -> "bb::<Class:E>#e_1" [style="bold"];
    "bb::<Class:E>#e_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:E>#e_1" -> "bb::<Class:E>#e_1" [style="bold"];
}

subgraph "cluster_::<Class:Main>#main" {
    label = "::<Class:Main>#main";
    color = blue;
    "bb::<Class:Main>#main_0" [shape = invhouse];
    "bb::<Class:Main>#main_1" [shape = parallelogram];

    "bb::<Class:Main>#main_0" [
        label = "block[id=0]()\l<constant:E>$115 = alias <constant:E> : <Class:E>\l<constant:A>$12 = alias <constant:A> : <Class:A>\l@a$99 = alias @a : T.untyped\l@@b$103 = alias @@b : T.untyped\l$c$107 = alias $c : T.untyped\l<block-pre-call-temp>$13 = <constant:A>$12.each() : T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_0" -> "bb::<Class:Main>#main_2" [style="bold"];
    "bb::<Class:Main>#main_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_1" -> "bb::<Class:Main>#main_1" [style="bold"];
    "bb::<Class:Main>#main_2" [
        label = "block[id=2](<constant:E>$115, <constant:A>$12, @a$99, @@b$103, $c$107)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::<Class:Main>#main_2" -> "bb::<Class:Main>#main_4" [style="bold"];
    "bb::<Class:Main>#main_2" -> "bb::<Class:Main>#main_3" [style="tapered"];

    "bb::<Class:Main>#main_3" [
        label = "block[id=3](<constant:E>$115, <constant:A>$12, @a$99, @@b$103, $c$107)\l<statTemp>$10 = Solve<::<Class:Main>#main#<block>> : T.untyped\l<block-pre-call-temp>$28 = <constant:A>$12.each() : T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_3" -> "bb::<Class:Main>#main_5" [style="bold"];
    "bb::<Class:Main>#main_4" [
        label = "block[id=4](<constant:E>$115, <constant:A>$12, @a$99, @@b$103, $c$107)\louterLoops: 1\l<blk>$14 = load_yield_params(::<Class:Main>#main#<block>, <Class:Main>#main#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$15 = 0 : Integer(0)\lforTemp$2$2 = <blk>$14.[](<blk>$15) : T.untyped\l<statTemp>$21 = 0 : Integer(0)\la$2 = forTemp$2$2.[](<statTemp>$21) : T.untyped\l<statTemp>$22 = self : <Class:Main>\l<statTemp>$23 = a$2.inspect() : T.untyped\l<blockReturnTemp>$16 = <statTemp>$22.puts(<statTemp>$23) : NilClass\l<blockReturnTemp>$25 = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$16 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_4" -> "bb::<Class:Main>#main_2" [style="bold"];
    "bb::<Class:Main>#main_5" [
        label = "block[id=5](<constant:E>$115, <constant:A>$12, @a$99, @@b$103, $c$107)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::<Class:Main>#main_5" -> "bb::<Class:Main>#main_7" [style="bold"];
    "bb::<Class:Main>#main_5" -> "bb::<Class:Main>#main_6" [style="tapered"];

    "bb::<Class:Main>#main_6" [
        label = "block[id=6](<constant:E>$115, <constant:A>$12, @a$99, @@b$103, $c$107)\l<statTemp>$26 = Solve<::<Class:Main>#main#<block>> : T.untyped\l<block-pre-call-temp>$44 = <constant:A>$12.each() : T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_6" -> "bb::<Class:Main>#main_8" [style="bold"];
    "bb::<Class:Main>#main_7" [
        label = "block[id=7](<constant:E>$115, <constant:A>$12, @a$99, @@b$103, $c$107)\louterLoops: 1\l<blk>$29 = load_yield_params(::<Class:Main>#main#<block>, <Class:Main>#main#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$30 = 0 : Integer(0)\lforTemp$3 = <blk>$29.[](<blk>$30) : T.untyped\l<assignTemp$4$3 = forTemp$3.to_a() : T.untyped\l<statTemp>$37 = 0 : Integer(0)\la$3 = <assignTemp$4$3.[](<statTemp>$37) : T.untyped\l<statTemp>$38 = self : <Class:Main>\l<statTemp>$39 = a$3.inspect() : T.untyped\l<blockReturnTemp>$31 = <statTemp>$38.puts(<statTemp>$39) : NilClass\l<blockReturnTemp>$41 = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$31 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_7" -> "bb::<Class:Main>#main_5" [style="bold"];
    "bb::<Class:Main>#main_8" [
        label = "block[id=8](<constant:E>$115, <constant:A>$12, @a$99, @@b$103, $c$107)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::<Class:Main>#main_8" -> "bb::<Class:Main>#main_10" [style="bold"];
    "bb::<Class:Main>#main_8" -> "bb::<Class:Main>#main_9" [style="tapered"];

    "bb::<Class:Main>#main_9" [
        label = "block[id=9](<constant:E>$115, <constant:A>$12, @a$99, @@b$103, $c$107)\l<statTemp>$42 = Solve<::<Class:Main>#main#<block>> : T.untyped\l<block-pre-call-temp>$66 = <constant:A>$12.each() : T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_9" -> "bb::<Class:Main>#main_11" [style="bold"];
    "bb::<Class:Main>#main_10" [
        label = "block[id=10](<constant:E>$115, <constant:A>$12, @a$99, @@b$103, $c$107)\louterLoops: 1\l<blk>$45 = load_yield_params(::<Class:Main>#main#<block>, <Class:Main>#main#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$46 = 0 : Integer(0)\lforTemp$5$4 = <blk>$45.[](<blk>$46) : T.untyped\l<statTemp>$52 = 0 : Integer(0)\la$4 = forTemp$5$4.[](<statTemp>$52) : T.untyped\l<statTemp>$55 = 1 : Integer(1)\lb$4 = forTemp$5$4.[](<statTemp>$55) : T.untyped\l<statTemp>$57 = self : <Class:Main>\l<statTemp>$58 = a$4.inspect() : T.untyped\l<statTemp>$56 = <statTemp>$57.puts(<statTemp>$58) : NilClass\l<statTemp>$60 = self : <Class:Main>\l<statTemp>$61 = b$4.inspect() : T.untyped\l<blockReturnTemp>$47 = <statTemp>$60.puts(<statTemp>$61) : NilClass\l<blockReturnTemp>$63 = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$47 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_10" -> "bb::<Class:Main>#main_8" [style="bold"];
    "bb::<Class:Main>#main_11" [
        label = "block[id=11](<constant:E>$115, <constant:A>$12, @a$99, @@b$103, $c$107)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::<Class:Main>#main_11" -> "bb::<Class:Main>#main_13" [style="bold"];
    "bb::<Class:Main>#main_11" -> "bb::<Class:Main>#main_12" [style="tapered"];

    "bb::<Class:Main>#main_12" [
        label = "block[id=12](<constant:E>$115, <constant:A>$12, @a$99, @@b$103, $c$107)\l<statTemp>$64 = Solve<::<Class:Main>#main#<block>> : T.untyped\l<statTemp>$88 = self : <Class:Main>\l<statTemp>$89 = \"main\" : String(\"main\")\l<statTemp>$87 = <statTemp>$88.puts(<statTemp>$89) : NilClass\l<block-pre-call-temp>$92 = <constant:A>$12.each() : T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_12" -> "bb::<Class:Main>#main_14" [style="bold"];
    "bb::<Class:Main>#main_13" [
        label = "block[id=13](<constant:E>$115, <constant:A>$12, @a$99, @@b$103, $c$107)\louterLoops: 1\l<blk>$67 = load_yield_params(::<Class:Main>#main#<block>, <Class:Main>#main#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$68 = 0 : Integer(0)\lforTemp$5 = <blk>$67.[](<blk>$68) : T.untyped\l<assignTemp$7$5 = forTemp$5.to_a() : T.untyped\l<statTemp>$75 = 0 : Integer(0)\la$5 = <assignTemp$7$5.[](<statTemp>$75) : T.untyped\l<statTemp>$78 = 1 : Integer(1)\lb$5 = <assignTemp$7$5.[](<statTemp>$78) : T.untyped\l<statTemp>$80 = self : <Class:Main>\l<statTemp>$81 = a$5.inspect() : T.untyped\l<statTemp>$79 = <statTemp>$80.puts(<statTemp>$81) : NilClass\l<statTemp>$83 = self : <Class:Main>\l<statTemp>$84 = b$5.inspect() : T.untyped\l<blockReturnTemp>$69 = <statTemp>$83.puts(<statTemp>$84) : NilClass\l<blockReturnTemp>$86 = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$69 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_13" -> "bb::<Class:Main>#main_11" [style="bold"];
    "bb::<Class:Main>#main_14" [
        label = "block[id=14](<constant:E>$115, <constant:A>$12, @a$99, @@b$103, $c$107)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::<Class:Main>#main_14" -> "bb::<Class:Main>#main_16" [style="bold"];
    "bb::<Class:Main>#main_14" -> "bb::<Class:Main>#main_15" [style="tapered"];

    "bb::<Class:Main>#main_15" [
        label = "block[id=15](<constant:E>$115, <constant:A>$12, @a$99, @@b$103, $c$107)\l<statTemp>$90 = Solve<::<Class:Main>#main#<block>> : T.untyped\l<block-pre-call-temp>$141 = <constant:A>$12.each() : T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_15" -> "bb::<Class:Main>#main_17" [style="bold"];
    "bb::<Class:Main>#main_16" [
        label = "block[id=16](<constant:E>$115, <constant:A>$12, @a$99, @@b$103, $c$107)\louterLoops: 1\l<blk>$93 = load_yield_params(::<Class:Main>#main#<block>, <Class:Main>#main#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$94 = 0 : Integer(0)\lforTemp$8$6 = <blk>$93.[](<blk>$94) : T.untyped\l<statTemp>$101 = 0 : Integer(0)\l@a$99 = forTemp$8$6.[](<statTemp>$101) : T.untyped\l<statTemp>$105 = 1 : Integer(1)\l@@b$103 = forTemp$8$6.[](<statTemp>$105) : T.untyped\l<statTemp>$109 = 2 : Integer(2)\l$c$107 = forTemp$8$6.[](<statTemp>$109) : T.untyped\l<statTemp>$112 = 3 : Integer(3)\ld$6 = forTemp$8$6.[](<statTemp>$112) : T.untyped\l<statTemp>$118 = 4 : Integer(4)\l<statTemp>$116 = forTemp$8$6.[](<statTemp>$118) : T.untyped\l<statTemp>$113 = <constant:E>$115.e=(<statTemp>$116) : T.untyped\l<statTemp>$120 = self : <Class:Main>\l<statTemp>$121 = @a$99.inspect() : T.untyped\l<statTemp>$119 = <statTemp>$120.puts(<statTemp>$121) : NilClass\l<statTemp>$124 = self : <Class:Main>\l<statTemp>$125 = @@b$103.inspect() : T.untyped\l<statTemp>$123 = <statTemp>$124.puts(<statTemp>$125) : NilClass\l<statTemp>$128 = self : <Class:Main>\l<statTemp>$129 = $c$107.inspect() : T.untyped\l<statTemp>$127 = <statTemp>$128.puts(<statTemp>$129) : NilClass\l<statTemp>$132 = self : <Class:Main>\l<statTemp>$133 = d$6.inspect() : T.untyped\l<statTemp>$131 = <statTemp>$132.puts(<statTemp>$133) : NilClass\l<statTemp>$135 = self : <Class:Main>\l<statTemp>$137 = <constant:E>$115.e() : T.untyped\l<statTemp>$136 = <statTemp>$137.inspect() : T.untyped\l<blockReturnTemp>$95 = <statTemp>$135.puts(<statTemp>$136) : NilClass\l<blockReturnTemp>$139 = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$95 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_16" -> "bb::<Class:Main>#main_14" [style="bold"];
    "bb::<Class:Main>#main_17" [
        label = "block[id=17](<constant:E>$115, @a$99, @@b$103, $c$107)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::<Class:Main>#main_17" -> "bb::<Class:Main>#main_19" [style="bold"];
    "bb::<Class:Main>#main_17" -> "bb::<Class:Main>#main_18" [style="tapered"];

    "bb::<Class:Main>#main_18" [
        label = "block[id=18]()\l<returnMethodTemp>$8 = Solve<::<Class:Main>#main#<block>> : T.untyped\l<finalReturn> = return <returnMethodTemp>$8 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_18" -> "bb::<Class:Main>#main_1" [style="bold"];
    "bb::<Class:Main>#main_19" [
        label = "block[id=19](<constant:E>$115, @a$99, @@b$103, $c$107)\louterLoops: 1\l<blk>$142 = load_yield_params(::<Class:Main>#main#<block>, <Class:Main>#main#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$143 = 0 : Integer(0)\lforTemp$7 = <blk>$142.[](<blk>$143) : T.untyped\l<assignTemp$10$7 = forTemp$7.to_a() : T.untyped\l<statTemp>$150 = 0 : Integer(0)\l@a$99 = <assignTemp$10$7.[](<statTemp>$150) : T.untyped\l<statTemp>$153 = 1 : Integer(1)\l@@b$103 = <assignTemp$10$7.[](<statTemp>$153) : T.untyped\l<statTemp>$156 = 2 : Integer(2)\l$c$107 = <assignTemp$10$7.[](<statTemp>$156) : T.untyped\l<statTemp>$159 = 3 : Integer(3)\ld$7 = <assignTemp$10$7.[](<statTemp>$159) : T.untyped\l<statTemp>$164 = 4 : Integer(4)\l<statTemp>$162 = <assignTemp$10$7.[](<statTemp>$164) : T.untyped\l<statTemp>$160 = <constant:E>$115.e=(<statTemp>$162) : T.untyped\l<statTemp>$166 = self : <Class:Main>\l<statTemp>$167 = @a$99.inspect() : T.untyped\l<statTemp>$165 = <statTemp>$166.puts(<statTemp>$167) : NilClass\l<statTemp>$170 = self : <Class:Main>\l<statTemp>$171 = @@b$103.inspect() : T.untyped\l<statTemp>$169 = <statTemp>$170.puts(<statTemp>$171) : NilClass\l<statTemp>$174 = self : <Class:Main>\l<statTemp>$175 = $c$107.inspect() : T.untyped\l<statTemp>$173 = <statTemp>$174.puts(<statTemp>$175) : NilClass\l<statTemp>$178 = self : <Class:Main>\l<statTemp>$179 = d$7.inspect() : T.untyped\l<statTemp>$177 = <statTemp>$178.puts(<statTemp>$179) : NilClass\l<statTemp>$181 = self : <Class:Main>\l<statTemp>$183 = <constant:E>$115.e() : T.untyped\l<statTemp>$182 = <statTemp>$183.inspect() : T.untyped\l<blockReturnTemp>$144 = <statTemp>$181.puts(<statTemp>$182) : NilClass\l<blockReturnTemp>$185 = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$144 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_19" -> "bb::<Class:Main>#main_17" [style="bold"];
}

}

