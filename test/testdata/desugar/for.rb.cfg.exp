digraph "for.rb" {
subgraph "cluster_#<static-init>" {
    label = "#<static-init>";
    color = blue;
    "bb#<static-init>_0" [shape = invhouse];
    "bb#<static-init>_1" [shape = parallelogram];

    "bb#<static-init>_0" [
        label = "block[id=0]()\l<constant:RubyTyper>$7 = alias <constant:RubyTyper> : <Class:RubyTyper>\l<constant:E>$14 = alias <constant:E> : <Class:E>\l<constant:A>$9 = alias <constant:A> : <Class:A>\l<constant:Main>$19 = alias <constant:Main> : <Class:Main>\l<statTemp>$5 = <constant:RubyTyper>$7.keep_for_ide(<constant:A>$9) : T.untyped\l<statTemp>$11 = <constant:RubyTyper>$7.keep_for_ide(<constant:E>$14) : T.untyped\l<statTemp>$16 = <constant:RubyTyper>$7.keep_for_ide(<constant:Main>$19) : T.untyped\l<statTemp>$20 = <constant:Main>$19.main() : T.untyped\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb#<static-init>_0" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb#<static-init>_1" -> "bb#<static-init>_1" [style="bold"];
}

subgraph "cluster_::<Class:A>#each" {
    label = "::<Class:A>#each";
    color = blue;
    "bb::<Class:A>#each_0" [shape = invhouse];
    "bb::<Class:A>#each_1" [shape = parallelogram];

    "bb::<Class:A>#each_0" [
        label = "block[id=0]()\l<constant:<Magic>>$12 = alias <constant:<Magic>> : <Magic>\l<selfMethodTemp>$3 = self : <Class:A>\l<blk> = load_arg(<selfMethodTemp>$3#each, 0) : T.untyped\l<arrayTemp>$7 = 1 : Integer(1)\l<arrayTemp>$8 = 2 : Integer(2)\l<arrayTemp>$9 = 3 : Integer(3)\l<arrayTemp>$10 = 4 : Integer(4)\l<arrayTemp>$11 = 5 : Integer(5)\l<statTemp>$6 = <constant:<Magic>>$12.<build-array>(<arrayTemp>$7, <arrayTemp>$8, <arrayTemp>$9, <arrayTemp>$10, <arrayTemp>$11) : TupleType {\l  0 = Integer(1)\l  1 = Integer(2)\l  2 = Integer(3)\l  3 = Integer(4)\l  4 = Integer(5)\l}\l<statTemp>$4 = <blk>.call(<statTemp>$6) : T.untyped\l<arrayTemp>$15 = 6 : Integer(6)\l<arrayTemp>$16 = 7 : Integer(7)\l<arrayTemp>$17 = 8 : Integer(8)\l<arrayTemp>$18 = 9 : Integer(9)\l<arrayTemp>$19 = 0 : Integer(0)\l<statTemp>$14 = <constant:<Magic>>$12.<build-array>(<arrayTemp>$15, <arrayTemp>$16, <arrayTemp>$17, <arrayTemp>$18, <arrayTemp>$19) : TupleType {\l  0 = Integer(6)\l  1 = Integer(7)\l  2 = Integer(8)\l  3 = Integer(9)\l  4 = Integer(0)\l}\l<returnMethodTemp>$2 = <blk>.call(<statTemp>$14) : T.untyped\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:A>#each_0" -> "bb::<Class:A>#each_1" [style="bold"];
    "bb::<Class:A>#each_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:A>#each_1" -> "bb::<Class:A>#each_1" [style="bold"];
}

subgraph "cluster_::<Class:E>#e=" {
    label = "::<Class:E>#e=";
    color = blue;
    "bb::<Class:E>#e=_0" [shape = invhouse];
    "bb::<Class:E>#e=_1" [shape = parallelogram];

    "bb::<Class:E>#e=_0" [
        label = "block[id=0]()\l@e$4 = alias @e : T.untyped\l<selfMethodTemp>$3 = self : <Class:E>\le = load_arg(<selfMethodTemp>$3#e=, 0) : T.untyped\l@e$4 = e : T.untyped\l<returnMethodTemp>$2 = @e$4 : T.untyped\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:E>#e=_0" -> "bb::<Class:E>#e=_1" [style="bold"];
    "bb::<Class:E>#e=_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:E>#e=_1" -> "bb::<Class:E>#e=_1" [style="bold"];
}

subgraph "cluster_::<Class:E>#e" {
    label = "::<Class:E>#e";
    color = blue;
    "bb::<Class:E>#e_0" [shape = invhouse];
    "bb::<Class:E>#e_1" [shape = parallelogram];

    "bb::<Class:E>#e_0" [
        label = "block[id=0]()\l@e$4 = alias @e : T.untyped\l<returnMethodTemp>$2 = @e$4 : T.untyped\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:E>#e_0" -> "bb::<Class:E>#e_1" [style="bold"];
    "bb::<Class:E>#e_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:E>#e_1" -> "bb::<Class:E>#e_1" [style="bold"];
}

subgraph "cluster_::<Class:Main>#main" {
    label = "::<Class:Main>#main";
    color = blue;
    "bb::<Class:Main>#main_0" [shape = invhouse];
    "bb::<Class:Main>#main_1" [shape = parallelogram];

    "bb::<Class:Main>#main_0" [
        label = "block[id=0]()\l<constant:<Magic>>$14 = alias <constant:<Magic>> : <Magic>\l<constant:E>$130 = alias <constant:E> : <Class:E>\l<constant:A>$6 = alias <constant:A> : <Class:A>\l@a$114 = alias @a : T.untyped\l@@b$118 = alias @@b : T.untyped\l$c$122 = alias $c : T.untyped\l<block-pre-call-temp>$7 = <constant:A>$6.each() : T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_0" -> "bb::<Class:Main>#main_2" [style="bold"];
    "bb::<Class:Main>#main_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_1" -> "bb::<Class:Main>#main_1" [style="bold"];
    "bb::<Class:Main>#main_2" [
        label = "block[id=2](<constant:<Magic>>$14, <constant:E>$130, <constant:A>$6, @a$114, @@b$118, $c$122)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::<Class:Main>#main_2" -> "bb::<Class:Main>#main_4" [style="bold"];
    "bb::<Class:Main>#main_2" -> "bb::<Class:Main>#main_3" [style="tapered"];

    "bb::<Class:Main>#main_3" [
        label = "block[id=3](<constant:<Magic>>$14, <constant:E>$130, <constant:A>$6, @a$114, @@b$118, $c$122)\l<statTemp>$4 = Solve<::<Class:Main>#main#<block>> : T.untyped\l<block-pre-call-temp>$27 = <constant:A>$6.each() : T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_3" -> "bb::<Class:Main>#main_5" [style="bold"];
    "bb::<Class:Main>#main_4" [
        label = "block[id=4](<constant:<Magic>>$14, <constant:E>$130, <constant:A>$6, @a$114, @@b$118, $c$122)\louterLoops: 1\l<blk>$8 = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$9 = 0 : Integer(0)\lforTemp$2$2 = <blk>$8.[](<blk>$9) : T.untyped\l<statTemp>$16 = 1 : Integer(1)\l<statTemp>$17 = 0 : Integer(0)\l<assignTemp$3$2 = <constant:<Magic>>$14.<expand-splat>(forTemp$2$2, <statTemp>$16, <statTemp>$17) : T.untyped\l<statTemp>$20 = 0 : Integer(0)\la$2 = <assignTemp$3$2.[](<statTemp>$20) : T.untyped\l<statTemp>$21 = self : <Class:Main>\l<statTemp>$22 = a$2.inspect() : T.untyped\l<blockReturnTemp>$10 = <statTemp>$21.puts(<statTemp>$22) : NilClass\l<blockReturnTemp>$24 = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$10 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_4" -> "bb::<Class:Main>#main_2" [style="bold"];
    "bb::<Class:Main>#main_5" [
        label = "block[id=5](<constant:<Magic>>$14, <constant:E>$130, <constant:A>$6, @a$114, @@b$118, $c$122)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::<Class:Main>#main_5" -> "bb::<Class:Main>#main_7" [style="bold"];
    "bb::<Class:Main>#main_5" -> "bb::<Class:Main>#main_6" [style="tapered"];

    "bb::<Class:Main>#main_6" [
        label = "block[id=6](<constant:<Magic>>$14, <constant:E>$130, <constant:A>$6, @a$114, @@b$118, $c$122)\l<statTemp>$25 = Solve<::<Class:Main>#main#<block>> : T.untyped\l<block-pre-call-temp>$47 = <constant:A>$6.each() : T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_6" -> "bb::<Class:Main>#main_8" [style="bold"];
    "bb::<Class:Main>#main_7" [
        label = "block[id=7](<constant:<Magic>>$14, <constant:E>$130, <constant:A>$6, @a$114, @@b$118, $c$122)\louterLoops: 1\l<blk>$28 = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$29 = 0 : Integer(0)\lforTemp$3 = <blk>$28.[](<blk>$29) : T.untyped\l<statTemp>$34 = forTemp$3.to_a() : T.untyped\l<statTemp>$36 = 1 : Integer(1)\l<statTemp>$37 = 0 : Integer(0)\l<assignTemp$4$3 = <constant:<Magic>>$14.<expand-splat>(<statTemp>$34, <statTemp>$36, <statTemp>$37) : T.untyped\l<statTemp>$40 = 0 : Integer(0)\la$3 = <assignTemp$4$3.[](<statTemp>$40) : T.untyped\l<statTemp>$41 = self : <Class:Main>\l<statTemp>$42 = a$3.inspect() : T.untyped\l<blockReturnTemp>$30 = <statTemp>$41.puts(<statTemp>$42) : NilClass\l<blockReturnTemp>$44 = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$30 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_7" -> "bb::<Class:Main>#main_5" [style="bold"];
    "bb::<Class:Main>#main_8" [
        label = "block[id=8](<constant:<Magic>>$14, <constant:E>$130, <constant:A>$6, @a$114, @@b$118, $c$122)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::<Class:Main>#main_8" -> "bb::<Class:Main>#main_10" [style="bold"];
    "bb::<Class:Main>#main_8" -> "bb::<Class:Main>#main_9" [style="tapered"];

    "bb::<Class:Main>#main_9" [
        label = "block[id=9](<constant:<Magic>>$14, <constant:E>$130, <constant:A>$6, @a$114, @@b$118, $c$122)\l<statTemp>$45 = Solve<::<Class:Main>#main#<block>> : T.untyped\l<block-pre-call-temp>$73 = <constant:A>$6.each() : T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_9" -> "bb::<Class:Main>#main_11" [style="bold"];
    "bb::<Class:Main>#main_10" [
        label = "block[id=10](<constant:<Magic>>$14, <constant:E>$130, <constant:A>$6, @a$114, @@b$118, $c$122)\louterLoops: 1\l<blk>$48 = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$49 = 0 : Integer(0)\lforTemp$5$4 = <blk>$48.[](<blk>$49) : T.untyped\l<statTemp>$55 = 2 : Integer(2)\l<statTemp>$56 = 0 : Integer(0)\l<assignTemp$6$4 = <constant:<Magic>>$14.<expand-splat>(forTemp$5$4, <statTemp>$55, <statTemp>$56) : T.untyped\l<statTemp>$59 = 0 : Integer(0)\la$4 = <assignTemp$6$4.[](<statTemp>$59) : T.untyped\l<statTemp>$62 = 1 : Integer(1)\lb$4 = <assignTemp$6$4.[](<statTemp>$62) : T.untyped\l<statTemp>$64 = self : <Class:Main>\l<statTemp>$65 = a$4.inspect() : T.untyped\l<statTemp>$63 = <statTemp>$64.puts(<statTemp>$65) : NilClass\l<statTemp>$67 = self : <Class:Main>\l<statTemp>$68 = b$4.inspect() : T.untyped\l<blockReturnTemp>$50 = <statTemp>$67.puts(<statTemp>$68) : NilClass\l<blockReturnTemp>$70 = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$50 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_10" -> "bb::<Class:Main>#main_8" [style="bold"];
    "bb::<Class:Main>#main_11" [
        label = "block[id=11](<constant:<Magic>>$14, <constant:E>$130, <constant:A>$6, @a$114, @@b$118, $c$122)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::<Class:Main>#main_11" -> "bb::<Class:Main>#main_13" [style="bold"];
    "bb::<Class:Main>#main_11" -> "bb::<Class:Main>#main_12" [style="tapered"];

    "bb::<Class:Main>#main_12" [
        label = "block[id=12](<constant:<Magic>>$14, <constant:E>$130, <constant:A>$6, @a$114, @@b$118, $c$122)\l<statTemp>$71 = Solve<::<Class:Main>#main#<block>> : T.untyped\l<statTemp>$99 = self : <Class:Main>\l<statTemp>$100 = \"main\" : String(\"main\")\l<statTemp>$98 = <statTemp>$99.puts(<statTemp>$100) : NilClass\l<block-pre-call-temp>$103 = <constant:A>$6.each() : T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_12" -> "bb::<Class:Main>#main_14" [style="bold"];
    "bb::<Class:Main>#main_13" [
        label = "block[id=13](<constant:<Magic>>$14, <constant:E>$130, <constant:A>$6, @a$114, @@b$118, $c$122)\louterLoops: 1\l<blk>$74 = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$75 = 0 : Integer(0)\lforTemp$5 = <blk>$74.[](<blk>$75) : T.untyped\l<statTemp>$80 = forTemp$5.to_a() : T.untyped\l<statTemp>$82 = 2 : Integer(2)\l<statTemp>$83 = 0 : Integer(0)\l<assignTemp$7$5 = <constant:<Magic>>$14.<expand-splat>(<statTemp>$80, <statTemp>$82, <statTemp>$83) : T.untyped\l<statTemp>$86 = 0 : Integer(0)\la$5 = <assignTemp$7$5.[](<statTemp>$86) : T.untyped\l<statTemp>$89 = 1 : Integer(1)\lb$5 = <assignTemp$7$5.[](<statTemp>$89) : T.untyped\l<statTemp>$91 = self : <Class:Main>\l<statTemp>$92 = a$5.inspect() : T.untyped\l<statTemp>$90 = <statTemp>$91.puts(<statTemp>$92) : NilClass\l<statTemp>$94 = self : <Class:Main>\l<statTemp>$95 = b$5.inspect() : T.untyped\l<blockReturnTemp>$76 = <statTemp>$94.puts(<statTemp>$95) : NilClass\l<blockReturnTemp>$97 = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$76 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_13" -> "bb::<Class:Main>#main_11" [style="bold"];
    "bb::<Class:Main>#main_14" [
        label = "block[id=14](<constant:<Magic>>$14, <constant:E>$130, <constant:A>$6, @a$114, @@b$118, $c$122)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::<Class:Main>#main_14" -> "bb::<Class:Main>#main_16" [style="bold"];
    "bb::<Class:Main>#main_14" -> "bb::<Class:Main>#main_15" [style="tapered"];

    "bb::<Class:Main>#main_15" [
        label = "block[id=15](<constant:<Magic>>$14, <constant:E>$130, <constant:A>$6, @a$114, @@b$118, $c$122)\l<statTemp>$101 = Solve<::<Class:Main>#main#<block>> : T.untyped\l<block-pre-call-temp>$156 = <constant:A>$6.each() : T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_15" -> "bb::<Class:Main>#main_17" [style="bold"];
    "bb::<Class:Main>#main_16" [
        label = "block[id=16](<constant:<Magic>>$14, <constant:E>$130, <constant:A>$6, @a$114, @@b$118, $c$122)\louterLoops: 1\l<blk>$104 = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$105 = 0 : Integer(0)\lforTemp$8$6 = <blk>$104.[](<blk>$105) : T.untyped\l<statTemp>$111 = 5 : Integer(5)\l<statTemp>$112 = 0 : Integer(0)\l<assignTemp$9$6 = <constant:<Magic>>$14.<expand-splat>(forTemp$8$6, <statTemp>$111, <statTemp>$112) : T.untyped\l<statTemp>$116 = 0 : Integer(0)\l@a$114 = <assignTemp$9$6.[](<statTemp>$116) : T.untyped\l<statTemp>$120 = 1 : Integer(1)\l@@b$118 = <assignTemp$9$6.[](<statTemp>$120) : T.untyped\l<statTemp>$124 = 2 : Integer(2)\l$c$122 = <assignTemp$9$6.[](<statTemp>$124) : T.untyped\l<statTemp>$127 = 3 : Integer(3)\ld$6 = <assignTemp$9$6.[](<statTemp>$127) : T.untyped\l<statTemp>$133 = 4 : Integer(4)\l<statTemp>$131 = <assignTemp$9$6.[](<statTemp>$133) : T.untyped\l<statTemp>$128 = <constant:E>$130.e=(<statTemp>$131) : T.untyped\l<statTemp>$135 = self : <Class:Main>\l<statTemp>$136 = @a$114.inspect() : T.untyped\l<statTemp>$134 = <statTemp>$135.puts(<statTemp>$136) : NilClass\l<statTemp>$139 = self : <Class:Main>\l<statTemp>$140 = @@b$118.inspect() : T.untyped\l<statTemp>$138 = <statTemp>$139.puts(<statTemp>$140) : NilClass\l<statTemp>$143 = self : <Class:Main>\l<statTemp>$144 = $c$122.inspect() : T.untyped\l<statTemp>$142 = <statTemp>$143.puts(<statTemp>$144) : NilClass\l<statTemp>$147 = self : <Class:Main>\l<statTemp>$148 = d$6.inspect() : T.untyped\l<statTemp>$146 = <statTemp>$147.puts(<statTemp>$148) : NilClass\l<statTemp>$150 = self : <Class:Main>\l<statTemp>$152 = <constant:E>$130.e() : T.untyped\l<statTemp>$151 = <statTemp>$152.inspect() : T.untyped\l<blockReturnTemp>$106 = <statTemp>$150.puts(<statTemp>$151) : NilClass\l<blockReturnTemp>$154 = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$106 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_16" -> "bb::<Class:Main>#main_14" [style="bold"];
    "bb::<Class:Main>#main_17" [
        label = "block[id=17](<constant:<Magic>>$14, <constant:E>$130, @a$114, @@b$118, $c$122)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::<Class:Main>#main_17" -> "bb::<Class:Main>#main_19" [style="bold"];
    "bb::<Class:Main>#main_17" -> "bb::<Class:Main>#main_18" [style="tapered"];

    "bb::<Class:Main>#main_18" [
        label = "block[id=18]()\l<returnMethodTemp>$2 = Solve<::<Class:Main>#main#<block>> : T.untyped\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_18" -> "bb::<Class:Main>#main_1" [style="bold"];
    "bb::<Class:Main>#main_19" [
        label = "block[id=19](<constant:<Magic>>$14, <constant:E>$130, @a$114, @@b$118, $c$122)\louterLoops: 1\l<blk>$157 = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$158 = 0 : Integer(0)\lforTemp$7 = <blk>$157.[](<blk>$158) : T.untyped\l<statTemp>$163 = forTemp$7.to_a() : T.untyped\l<statTemp>$165 = 5 : Integer(5)\l<statTemp>$166 = 0 : Integer(0)\l<assignTemp$10$7 = <constant:<Magic>>$14.<expand-splat>(<statTemp>$163, <statTemp>$165, <statTemp>$166) : T.untyped\l<statTemp>$169 = 0 : Integer(0)\l@a$114 = <assignTemp$10$7.[](<statTemp>$169) : T.untyped\l<statTemp>$172 = 1 : Integer(1)\l@@b$118 = <assignTemp$10$7.[](<statTemp>$172) : T.untyped\l<statTemp>$175 = 2 : Integer(2)\l$c$122 = <assignTemp$10$7.[](<statTemp>$175) : T.untyped\l<statTemp>$178 = 3 : Integer(3)\ld$7 = <assignTemp$10$7.[](<statTemp>$178) : T.untyped\l<statTemp>$183 = 4 : Integer(4)\l<statTemp>$181 = <assignTemp$10$7.[](<statTemp>$183) : T.untyped\l<statTemp>$179 = <constant:E>$130.e=(<statTemp>$181) : T.untyped\l<statTemp>$185 = self : <Class:Main>\l<statTemp>$186 = @a$114.inspect() : T.untyped\l<statTemp>$184 = <statTemp>$185.puts(<statTemp>$186) : NilClass\l<statTemp>$189 = self : <Class:Main>\l<statTemp>$190 = @@b$118.inspect() : T.untyped\l<statTemp>$188 = <statTemp>$189.puts(<statTemp>$190) : NilClass\l<statTemp>$193 = self : <Class:Main>\l<statTemp>$194 = $c$122.inspect() : T.untyped\l<statTemp>$192 = <statTemp>$193.puts(<statTemp>$194) : NilClass\l<statTemp>$197 = self : <Class:Main>\l<statTemp>$198 = d$7.inspect() : T.untyped\l<statTemp>$196 = <statTemp>$197.puts(<statTemp>$198) : NilClass\l<statTemp>$200 = self : <Class:Main>\l<statTemp>$202 = <constant:E>$130.e() : T.untyped\l<statTemp>$201 = <statTemp>$202.inspect() : T.untyped\l<blockReturnTemp>$159 = <statTemp>$200.puts(<statTemp>$201) : NilClass\l<blockReturnTemp>$204 = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$159 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_19" -> "bb::<Class:Main>#main_17" [style="bold"];
}

}

