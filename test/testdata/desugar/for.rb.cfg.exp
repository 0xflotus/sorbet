digraph "for.rb" {
subgraph "cluster_#<static-init>" {
    label = "#<static-init>";
    color = blue;
    "bb#<static-init>_0" [shape = invhouse];
    "bb#<static-init>_1" [shape = parallelogram];

    "bb#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$6: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$7: T.class_of(A) = alias <constant:A>\l<statTemp>$5: RubyTyper::Void = <statTemp>$6: T.class_of(RubyTyper).keep_for_ide(<statTemp>$7: T.class_of(A))\l<statTemp>$10: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$11: T.class_of(E) = alias <constant:E>\l<statTemp>$9: RubyTyper::Void = <statTemp>$10: T.class_of(RubyTyper).keep_for_ide(<statTemp>$11: T.class_of(E))\l<statTemp>$14: T.class_of(RubyTyper) = alias <constant:RubyTyper>\l<statTemp>$15: T.class_of(Main) = alias <constant:Main>\l<statTemp>$13: RubyTyper::Void = <statTemp>$14: T.class_of(RubyTyper).keep_for_ide(<statTemp>$15: T.class_of(Main))\l<statTemp>$17: T.class_of(Main) = alias <constant:Main>\l<statTemp>$16: T.untyped = <statTemp>$17: T.class_of(Main).main()\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass\l<unconditional>\l"
    ];

    "bb#<static-init>_0" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb#<static-init>_1" -> "bb#<static-init>_1" [style="bold"];
}

subgraph "cluster_::<Class:A>#each" {
    label = "::<Class:A>#each";
    color = blue;
    "bb::<Class:A>#each_0" [shape = invhouse];
    "bb::<Class:A>#each_1" [shape = parallelogram];

    "bb::<Class:A>#each_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3: T.class_of(A) = self\l<blk>: T.untyped = load_arg(<selfMethodTemp>$3, A.each#<blk>)\l<statTemp>$6: Integer(1) = 1\l<statTemp>$7: Integer(2) = 2\l<statTemp>$8: Integer(3) = 3\l<statTemp>$9: Integer(4) = 4\l<statTemp>$10: Integer(5) = 5\l<statTemp>$4: T.untyped = <blk>: T.untyped.call(<statTemp>$6: Integer(1), <statTemp>$7: Integer(2), <statTemp>$8: Integer(3), <statTemp>$9: Integer(4), <statTemp>$10: Integer(5))\l<statTemp>$12: Integer(6) = 6\l<statTemp>$13: Integer(7) = 7\l<statTemp>$14: Integer(8) = 8\l<statTemp>$15: Integer(9) = 9\l<statTemp>$16: Integer(0) = 0\l<returnMethodTemp>$2: T.untyped = <blk>: T.untyped.call(<statTemp>$12: Integer(6), <statTemp>$13: Integer(7), <statTemp>$14: Integer(8), <statTemp>$15: Integer(9), <statTemp>$16: Integer(0))\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:A>#each_0" -> "bb::<Class:A>#each_1" [style="bold"];
    "bb::<Class:A>#each_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:A>#each_1" -> "bb::<Class:A>#each_1" [style="bold"];
}

subgraph "cluster_::<Class:E>#e=" {
    label = "::<Class:E>#e=";
    color = blue;
    "bb::<Class:E>#e=_0" [shape = invhouse];
    "bb::<Class:E>#e=_1" [shape = parallelogram];

    "bb::<Class:E>#e=_0" [
        label = "block[id=0]()\l@e$4: T.untyped = alias <constant:<undeclared-field-stub>>\l<selfMethodTemp>$3: T.class_of(E) = self\le: T.untyped = load_arg(<selfMethodTemp>$3, E.e=#e)\l@e$4: T.untyped = e\l<returnMethodTemp>$2: T.untyped = @e$4\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:E>#e=_0" -> "bb::<Class:E>#e=_1" [style="bold"];
    "bb::<Class:E>#e=_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:E>#e=_1" -> "bb::<Class:E>#e=_1" [style="bold"];
}

subgraph "cluster_::<Class:E>#e" {
    label = "::<Class:E>#e";
    color = blue;
    "bb::<Class:E>#e_0" [shape = invhouse];
    "bb::<Class:E>#e_1" [shape = parallelogram];

    "bb::<Class:E>#e_0" [
        label = "block[id=0]()\l@e$4: T.untyped = alias <constant:<undeclared-field-stub>>\l<returnMethodTemp>$2: T.untyped = @e$4\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:E>#e_0" -> "bb::<Class:E>#e_1" [style="bold"];
    "bb::<Class:E>#e_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:E>#e_1" -> "bb::<Class:E>#e_1" [style="bold"];
}

subgraph "cluster_::<Class:Main>#main" {
    label = "::<Class:Main>#main";
    color = blue;
    "bb::<Class:Main>#main_0" [shape = invhouse];
    "bb::<Class:Main>#main_1" [shape = parallelogram];

    "bb::<Class:Main>#main_0" [
        label = "block[id=0]()\l@a$112: T.untyped = alias <constant:<undeclared-field-stub>>\l@@b$116: T.untyped = alias <constant:<undeclared-field-stub>>\l$c$120: T.untyped = alias $c\l<statTemp>$5: T.class_of(A) = alias <constant:A>\l<block-pre-call-temp>$6: T.untyped = <statTemp>$5: T.class_of(A).each()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_0" -> "bb::<Class:Main>#main_2" [style="bold"];
    "bb::<Class:Main>#main_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_1" -> "bb::<Class:Main>#main_1" [style="bold"];
    "bb::<Class:Main>#main_2" [
        label = "block[id=2](@a$112: T.untyped, @@b$116: T.untyped, $c$120: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_2" -> "bb::<Class:Main>#main_4" [style="bold"];
    "bb::<Class:Main>#main_2" -> "bb::<Class:Main>#main_3" [style="tapered"];

    "bb::<Class:Main>#main_3" [
        label = "block[id=3](@a$112: T.untyped, @@b$116: T.untyped, $c$120: T.untyped)\l<statTemp>$4: T.untyped = Solve<::<Class:Main>#main#<block>>\l<statTemp>$24: T.class_of(A) = alias <constant:A>\l<block-pre-call-temp>$25: T.untyped = <statTemp>$24: T.class_of(A).each()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_3" -> "bb::<Class:Main>#main_5" [style="bold"];
    "bb::<Class:Main>#main_4" [
        label = "block[id=4](@a$112: T.untyped, @@b$116: T.untyped, $c$120: T.untyped)\louterLoops: 1\l<blk>$7: T.untyped = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>)\l<statTemp>$12: <Magic> = alias <constant:<Magic>>\l<statTemp>$14: Integer(1) = 1\l<statTemp>$15: Integer(0) = 0\l<assignTemp>$3$2: T.untyped = <statTemp>$12: <Magic>.<expand-splat>(<blk>$7: T.untyped, <statTemp>$14: Integer(1), <statTemp>$15: Integer(0))\l<statTemp>$18: Integer(0) = 0\la$2: T.untyped = <assignTemp>$3$2: T.untyped.[](<statTemp>$18: Integer(0))\l<statTemp>$19: T.class_of(Main) = self\l<statTemp>$20: T.untyped = a$2: T.untyped.inspect()\l<blockReturnTemp>$9: NilClass = <statTemp>$19: T.class_of(Main).puts(<statTemp>$20: T.untyped)\l<blockReturnTemp>$22: T.noreturn = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$9: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_4" -> "bb::<Class:Main>#main_2" [style="bold"];
    "bb::<Class:Main>#main_5" [
        label = "block[id=5](@a$112: T.untyped, @@b$116: T.untyped, $c$120: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_5" -> "bb::<Class:Main>#main_7" [style="bold"];
    "bb::<Class:Main>#main_5" -> "bb::<Class:Main>#main_6" [style="tapered"];

    "bb::<Class:Main>#main_6" [
        label = "block[id=6](@a$112: T.untyped, @@b$116: T.untyped, $c$120: T.untyped)\l<statTemp>$23: T.untyped = Solve<::<Class:Main>#main#<block>>\l<statTemp>$44: T.class_of(A) = alias <constant:A>\l<block-pre-call-temp>$45: T.untyped = <statTemp>$44: T.class_of(A).each()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_6" -> "bb::<Class:Main>#main_8" [style="bold"];
    "bb::<Class:Main>#main_7" [
        label = "block[id=7](@a$112: T.untyped, @@b$116: T.untyped, $c$120: T.untyped)\louterLoops: 1\l<blk>$26: T.untyped = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>)\lforTemp$3: T.untyped = <blk>$26\l<statTemp>$31: <Magic> = alias <constant:<Magic>>\l<statTemp>$32: T.untyped = forTemp$3: T.untyped.to_a()\l<statTemp>$34: Integer(1) = 1\l<statTemp>$35: Integer(0) = 0\l<assignTemp>$4$3: T.untyped = <statTemp>$31: <Magic>.<expand-splat>(<statTemp>$32: T.untyped, <statTemp>$34: Integer(1), <statTemp>$35: Integer(0))\l<statTemp>$38: Integer(0) = 0\la$3: T.untyped = <assignTemp>$4$3: T.untyped.[](<statTemp>$38: Integer(0))\l<statTemp>$39: T.class_of(Main) = self\l<statTemp>$40: T.untyped = a$3: T.untyped.inspect()\l<blockReturnTemp>$28: NilClass = <statTemp>$39: T.class_of(Main).puts(<statTemp>$40: T.untyped)\l<blockReturnTemp>$42: T.noreturn = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$28: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_7" -> "bb::<Class:Main>#main_5" [style="bold"];
    "bb::<Class:Main>#main_8" [
        label = "block[id=8](@a$112: T.untyped, @@b$116: T.untyped, $c$120: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_8" -> "bb::<Class:Main>#main_10" [style="bold"];
    "bb::<Class:Main>#main_8" -> "bb::<Class:Main>#main_9" [style="tapered"];

    "bb::<Class:Main>#main_9" [
        label = "block[id=9](@a$112: T.untyped, @@b$116: T.untyped, $c$120: T.untyped)\l<statTemp>$43: T.untyped = Solve<::<Class:Main>#main#<block>>\l<statTemp>$70: T.class_of(A) = alias <constant:A>\l<block-pre-call-temp>$71: T.untyped = <statTemp>$70: T.class_of(A).each()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_9" -> "bb::<Class:Main>#main_11" [style="bold"];
    "bb::<Class:Main>#main_10" [
        label = "block[id=10](@a$112: T.untyped, @@b$116: T.untyped, $c$120: T.untyped)\louterLoops: 1\l<blk>$46: T.untyped = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>)\l<statTemp>$51: <Magic> = alias <constant:<Magic>>\l<statTemp>$53: Integer(2) = 2\l<statTemp>$54: Integer(0) = 0\l<assignTemp>$6$4: T.untyped = <statTemp>$51: <Magic>.<expand-splat>(<blk>$46: T.untyped, <statTemp>$53: Integer(2), <statTemp>$54: Integer(0))\l<statTemp>$57: Integer(0) = 0\la$4: T.untyped = <assignTemp>$6$4: T.untyped.[](<statTemp>$57: Integer(0))\l<statTemp>$60: Integer(1) = 1\lb$4: T.untyped = <assignTemp>$6$4: T.untyped.[](<statTemp>$60: Integer(1))\l<statTemp>$62: T.class_of(Main) = self\l<statTemp>$63: T.untyped = a$4: T.untyped.inspect()\l<statTemp>$61: NilClass = <statTemp>$62: T.class_of(Main).puts(<statTemp>$63: T.untyped)\l<statTemp>$65: T.class_of(Main) = self\l<statTemp>$66: T.untyped = b$4: T.untyped.inspect()\l<blockReturnTemp>$48: NilClass = <statTemp>$65: T.class_of(Main).puts(<statTemp>$66: T.untyped)\l<blockReturnTemp>$68: T.noreturn = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$48: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_10" -> "bb::<Class:Main>#main_8" [style="bold"];
    "bb::<Class:Main>#main_11" [
        label = "block[id=11](@a$112: T.untyped, @@b$116: T.untyped, $c$120: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_11" -> "bb::<Class:Main>#main_13" [style="bold"];
    "bb::<Class:Main>#main_11" -> "bb::<Class:Main>#main_12" [style="tapered"];

    "bb::<Class:Main>#main_12" [
        label = "block[id=12](@a$112: T.untyped, @@b$116: T.untyped, $c$120: T.untyped)\l<statTemp>$69: T.untyped = Solve<::<Class:Main>#main#<block>>\l<statTemp>$97: T.class_of(Main) = self\l<statTemp>$98: String(\"main\") = \"main\"\l<statTemp>$96: NilClass = <statTemp>$97: T.class_of(Main).puts(<statTemp>$98: String(\"main\"))\l<statTemp>$100: T.class_of(A) = alias <constant:A>\l<block-pre-call-temp>$101: T.untyped = <statTemp>$100: T.class_of(A).each()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_12" -> "bb::<Class:Main>#main_14" [style="bold"];
    "bb::<Class:Main>#main_13" [
        label = "block[id=13](@a$112: T.untyped, @@b$116: T.untyped, $c$120: T.untyped)\louterLoops: 1\l<blk>$72: T.untyped = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>)\lforTemp$5: T.untyped = <blk>$72\l<statTemp>$77: <Magic> = alias <constant:<Magic>>\l<statTemp>$78: T.untyped = forTemp$5: T.untyped.to_a()\l<statTemp>$80: Integer(2) = 2\l<statTemp>$81: Integer(0) = 0\l<assignTemp>$7$5: T.untyped = <statTemp>$77: <Magic>.<expand-splat>(<statTemp>$78: T.untyped, <statTemp>$80: Integer(2), <statTemp>$81: Integer(0))\l<statTemp>$84: Integer(0) = 0\la$5: T.untyped = <assignTemp>$7$5: T.untyped.[](<statTemp>$84: Integer(0))\l<statTemp>$87: Integer(1) = 1\lb$5: T.untyped = <assignTemp>$7$5: T.untyped.[](<statTemp>$87: Integer(1))\l<statTemp>$89: T.class_of(Main) = self\l<statTemp>$90: T.untyped = a$5: T.untyped.inspect()\l<statTemp>$88: NilClass = <statTemp>$89: T.class_of(Main).puts(<statTemp>$90: T.untyped)\l<statTemp>$92: T.class_of(Main) = self\l<statTemp>$93: T.untyped = b$5: T.untyped.inspect()\l<blockReturnTemp>$74: NilClass = <statTemp>$92: T.class_of(Main).puts(<statTemp>$93: T.untyped)\l<blockReturnTemp>$95: T.noreturn = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$74: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_13" -> "bb::<Class:Main>#main_11" [style="bold"];
    "bb::<Class:Main>#main_14" [
        label = "block[id=14](@a$112: T.untyped, @@b$116: T.untyped, $c$120: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_14" -> "bb::<Class:Main>#main_16" [style="bold"];
    "bb::<Class:Main>#main_14" -> "bb::<Class:Main>#main_15" [style="tapered"];

    "bb::<Class:Main>#main_15" [
        label = "block[id=15](@a$112: T.untyped, @@b$116: T.untyped, $c$120: T.untyped)\l<statTemp>$99: T.untyped = Solve<::<Class:Main>#main#<block>>\l<statTemp>$152: T.class_of(A) = alias <constant:A>\l<block-pre-call-temp>$153: T.untyped = <statTemp>$152: T.class_of(A).each()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_15" -> "bb::<Class:Main>#main_17" [style="bold"];
    "bb::<Class:Main>#main_16" [
        label = "block[id=16](@a$112: T.untyped, @@b$116: T.untyped, $c$120: T.untyped)\louterLoops: 1\l<blk>$102: T.untyped = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>)\l<statTemp>$107: <Magic> = alias <constant:<Magic>>\l<statTemp>$109: Integer(5) = 5\l<statTemp>$110: Integer(0) = 0\l<assignTemp>$9$6: T.untyped = <statTemp>$107: <Magic>.<expand-splat>(<blk>$102: T.untyped, <statTemp>$109: Integer(5), <statTemp>$110: Integer(0))\l<statTemp>$114: Integer(0) = 0\l@a$112: T.untyped = <assignTemp>$9$6: T.untyped.[](<statTemp>$114: Integer(0))\l<statTemp>$118: Integer(1) = 1\l@@b$116: T.untyped = <assignTemp>$9$6: T.untyped.[](<statTemp>$118: Integer(1))\l<statTemp>$122: Integer(2) = 2\l$c$120: T.untyped = <assignTemp>$9$6: T.untyped.[](<statTemp>$122: Integer(2))\l<statTemp>$125: Integer(3) = 3\ld$6: T.untyped = <assignTemp>$9$6: T.untyped.[](<statTemp>$125: Integer(3))\l<statTemp>$127: T.class_of(E) = alias <constant:E>\l<statTemp>$130: Integer(4) = 4\l<statTemp>$128: T.untyped = <assignTemp>$9$6: T.untyped.[](<statTemp>$130: Integer(4))\l<statTemp>$126: T.untyped = <statTemp>$127: T.class_of(E).e=(<statTemp>$128: T.untyped)\l<statTemp>$132: T.class_of(Main) = self\l<statTemp>$133: T.untyped = @a$112: T.untyped.inspect()\l<statTemp>$131: NilClass = <statTemp>$132: T.class_of(Main).puts(<statTemp>$133: T.untyped)\l<statTemp>$136: T.class_of(Main) = self\l<statTemp>$137: T.untyped = @@b$116: T.untyped.inspect()\l<statTemp>$135: NilClass = <statTemp>$136: T.class_of(Main).puts(<statTemp>$137: T.untyped)\l<statTemp>$140: T.class_of(Main) = self\l<statTemp>$141: T.untyped = $c$120: T.untyped.inspect()\l<statTemp>$139: NilClass = <statTemp>$140: T.class_of(Main).puts(<statTemp>$141: T.untyped)\l<statTemp>$144: T.class_of(Main) = self\l<statTemp>$145: T.untyped = d$6: T.untyped.inspect()\l<statTemp>$143: NilClass = <statTemp>$144: T.class_of(Main).puts(<statTemp>$145: T.untyped)\l<statTemp>$147: T.class_of(Main) = self\l<statTemp>$150: T.class_of(E) = alias <constant:E>\l<statTemp>$149: T.untyped = <statTemp>$150: T.class_of(E).e()\l<statTemp>$148: T.untyped = <statTemp>$149: T.untyped.inspect()\l<blockReturnTemp>$104: NilClass = <statTemp>$147: T.class_of(Main).puts(<statTemp>$148: T.untyped)\l<blockReturnTemp>$151: T.noreturn = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$104: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_16" -> "bb::<Class:Main>#main_14" [style="bold"];
    "bb::<Class:Main>#main_17" [
        label = "block[id=17](@a$112: T.untyped, @@b$116: T.untyped, $c$120: T.untyped)\louterLoops: 1\l<block-call>: NilClass\l"
    ];

    "bb::<Class:Main>#main_17" -> "bb::<Class:Main>#main_19" [style="bold"];
    "bb::<Class:Main>#main_17" -> "bb::<Class:Main>#main_18" [style="tapered"];

    "bb::<Class:Main>#main_18" [
        label = "block[id=18]()\l<returnMethodTemp>$2: T.untyped = Solve<::<Class:Main>#main#<block>>\l<finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_18" -> "bb::<Class:Main>#main_1" [style="bold"];
    "bb::<Class:Main>#main_19" [
        label = "block[id=19](@a$112: T.untyped, @@b$116: T.untyped, $c$120: T.untyped)\louterLoops: 1\l<blk>$154: T.untyped = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>)\lforTemp$7: T.untyped = <blk>$154\l<statTemp>$159: <Magic> = alias <constant:<Magic>>\l<statTemp>$160: T.untyped = forTemp$7: T.untyped.to_a()\l<statTemp>$162: Integer(5) = 5\l<statTemp>$163: Integer(0) = 0\l<assignTemp>$10$7: T.untyped = <statTemp>$159: <Magic>.<expand-splat>(<statTemp>$160: T.untyped, <statTemp>$162: Integer(5), <statTemp>$163: Integer(0))\l<statTemp>$166: Integer(0) = 0\l@a$112: T.untyped = <assignTemp>$10$7: T.untyped.[](<statTemp>$166: Integer(0))\l<statTemp>$169: Integer(1) = 1\l@@b$116: T.untyped = <assignTemp>$10$7: T.untyped.[](<statTemp>$169: Integer(1))\l<statTemp>$172: Integer(2) = 2\l$c$120: T.untyped = <assignTemp>$10$7: T.untyped.[](<statTemp>$172: Integer(2))\l<statTemp>$175: Integer(3) = 3\ld$7: T.untyped = <assignTemp>$10$7: T.untyped.[](<statTemp>$175: Integer(3))\l<statTemp>$177: T.class_of(E) = alias <constant:E>\l<statTemp>$180: Integer(4) = 4\l<statTemp>$178: T.untyped = <assignTemp>$10$7: T.untyped.[](<statTemp>$180: Integer(4))\l<statTemp>$176: T.untyped = <statTemp>$177: T.class_of(E).e=(<statTemp>$178: T.untyped)\l<statTemp>$182: T.class_of(Main) = self\l<statTemp>$183: T.untyped = @a$112: T.untyped.inspect()\l<statTemp>$181: NilClass = <statTemp>$182: T.class_of(Main).puts(<statTemp>$183: T.untyped)\l<statTemp>$186: T.class_of(Main) = self\l<statTemp>$187: T.untyped = @@b$116: T.untyped.inspect()\l<statTemp>$185: NilClass = <statTemp>$186: T.class_of(Main).puts(<statTemp>$187: T.untyped)\l<statTemp>$190: T.class_of(Main) = self\l<statTemp>$191: T.untyped = $c$120: T.untyped.inspect()\l<statTemp>$189: NilClass = <statTemp>$190: T.class_of(Main).puts(<statTemp>$191: T.untyped)\l<statTemp>$194: T.class_of(Main) = self\l<statTemp>$195: T.untyped = d$7: T.untyped.inspect()\l<statTemp>$193: NilClass = <statTemp>$194: T.class_of(Main).puts(<statTemp>$195: T.untyped)\l<statTemp>$197: T.class_of(Main) = self\l<statTemp>$200: T.class_of(E) = alias <constant:E>\l<statTemp>$199: T.untyped = <statTemp>$200: T.class_of(E).e()\l<statTemp>$198: T.untyped = <statTemp>$199: T.untyped.inspect()\l<blockReturnTemp>$156: NilClass = <statTemp>$197: T.class_of(Main).puts(<statTemp>$198: T.untyped)\l<blockReturnTemp>$201: T.noreturn = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$156: NilClass\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_19" -> "bb::<Class:Main>#main_17" [style="bold"];
}

}

