digraph "for.rb" {
subgraph "cluster_#<static-init>" {
    label = "#<static-init>";
    color = blue;
    "bb#<static-init>_0" [shape = invhouse];
    "bb#<static-init>_1" [shape = parallelogram];

    "bb#<static-init>_0" [
        label = "block[id=0]()\l<constant:Main>$5 = alias <constant:Main> : <Class:Main>\l<returnMethodTemp>$2 = <constant:Main>$5.main() : T.untyped\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb#<static-init>_0" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb#<static-init>_1" -> "bb#<static-init>_1" [style="bold"];
}

subgraph "cluster_::<Class:A>#each" {
    label = "::<Class:A>#each";
    color = blue;
    "bb::<Class:A>#each_0" [shape = invhouse];
    "bb::<Class:A>#each_1" [shape = parallelogram];

    "bb::<Class:A>#each_0" [
        label = "block[id=0]()\l<constant:<Magic>>$12 = alias <constant:<Magic>> : <Magic>\l<selfMethodTemp>$3 = self : <Class:A>\l<blk> = load_arg(<selfMethodTemp>$3#each, 0) : T.untyped\l<arrayTemp>$7 = 1 : Integer(1)\l<arrayTemp>$8 = 2 : Integer(2)\l<arrayTemp>$9 = 3 : Integer(3)\l<arrayTemp>$10 = 4 : Integer(4)\l<arrayTemp>$11 = 5 : Integer(5)\l<statTemp>$6 = <constant:<Magic>>$12.<build-array>(<arrayTemp>$7, <arrayTemp>$8, <arrayTemp>$9, <arrayTemp>$10, <arrayTemp>$11) : TupleType {\l  0 = Integer(1)\l  1 = Integer(2)\l  2 = Integer(3)\l  3 = Integer(4)\l  4 = Integer(5)\l}\l<statTemp>$4 = <blk>.call(<statTemp>$6) : T.untyped\l<arrayTemp>$15 = 6 : Integer(6)\l<arrayTemp>$16 = 7 : Integer(7)\l<arrayTemp>$17 = 8 : Integer(8)\l<arrayTemp>$18 = 9 : Integer(9)\l<arrayTemp>$19 = 0 : Integer(0)\l<statTemp>$14 = <constant:<Magic>>$12.<build-array>(<arrayTemp>$15, <arrayTemp>$16, <arrayTemp>$17, <arrayTemp>$18, <arrayTemp>$19) : TupleType {\l  0 = Integer(6)\l  1 = Integer(7)\l  2 = Integer(8)\l  3 = Integer(9)\l  4 = Integer(0)\l}\l<returnMethodTemp>$2 = <blk>.call(<statTemp>$14) : T.untyped\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:A>#each_0" -> "bb::<Class:A>#each_1" [style="bold"];
    "bb::<Class:A>#each_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:A>#each_1" -> "bb::<Class:A>#each_1" [style="bold"];
}

subgraph "cluster_::<Class:E>#e=" {
    label = "::<Class:E>#e=";
    color = blue;
    "bb::<Class:E>#e=_0" [shape = invhouse];
    "bb::<Class:E>#e=_1" [shape = parallelogram];

    "bb::<Class:E>#e=_0" [
        label = "block[id=0]()\l@e$4 = alias @e : T.untyped\l<selfMethodTemp>$3 = self : <Class:E>\le = load_arg(<selfMethodTemp>$3#e=, 0) : T.untyped\l@e$4 = e : T.untyped\l<finalReturn> = return @e$4 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:E>#e=_0" -> "bb::<Class:E>#e=_1" [style="bold"];
    "bb::<Class:E>#e=_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:E>#e=_1" -> "bb::<Class:E>#e=_1" [style="bold"];
}

subgraph "cluster_::<Class:E>#e" {
    label = "::<Class:E>#e";
    color = blue;
    "bb::<Class:E>#e_0" [shape = invhouse];
    "bb::<Class:E>#e_1" [shape = parallelogram];

    "bb::<Class:E>#e_0" [
        label = "block[id=0]()\l@e$4 = alias @e : T.untyped\l<finalReturn> = return @e$4 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:E>#e_0" -> "bb::<Class:E>#e_1" [style="bold"];
    "bb::<Class:E>#e_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:E>#e_1" -> "bb::<Class:E>#e_1" [style="bold"];
}

subgraph "cluster_::<Class:Main>#main" {
    label = "::<Class:Main>#main";
    color = blue;
    "bb::<Class:Main>#main_0" [shape = invhouse];
    "bb::<Class:Main>#main_1" [shape = parallelogram];

    "bb::<Class:Main>#main_0" [
        label = "block[id=0]()\l<constant:<Magic>>$20 = alias <constant:<Magic>> : <Magic>\l<constant:E>$136 = alias <constant:E> : <Class:E>\l<constant:A>$12 = alias <constant:A> : <Class:A>\l@a$120 = alias @a : T.untyped\l@@b$124 = alias @@b : T.untyped\l$c$128 = alias $c : T.untyped\l<block-pre-call-temp>$13 = <constant:A>$12.each() : T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_0" -> "bb::<Class:Main>#main_2" [style="bold"];
    "bb::<Class:Main>#main_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_1" -> "bb::<Class:Main>#main_1" [style="bold"];
    "bb::<Class:Main>#main_2" [
        label = "block[id=2](<constant:<Magic>>$20, <constant:E>$136, <constant:A>$12, @a$120, @@b$124, $c$128)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::<Class:Main>#main_2" -> "bb::<Class:Main>#main_4" [style="bold"];
    "bb::<Class:Main>#main_2" -> "bb::<Class:Main>#main_3" [style="tapered"];

    "bb::<Class:Main>#main_3" [
        label = "block[id=3](<constant:<Magic>>$20, <constant:E>$136, <constant:A>$12, @a$120, @@b$124, $c$128)\l<statTemp>$10 = Solve<::<Class:Main>#main#<block>> : T.untyped\l<block-pre-call-temp>$33 = <constant:A>$12.each() : T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_3" -> "bb::<Class:Main>#main_5" [style="bold"];
    "bb::<Class:Main>#main_4" [
        label = "block[id=4](<constant:<Magic>>$20, <constant:E>$136, <constant:A>$12, @a$120, @@b$124, $c$128)\louterLoops: 1\l<blk>$14 = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$15 = 0 : Integer(0)\lforTemp$2$2 = <blk>$14.[](<blk>$15) : T.untyped\l<statTemp>$22 = 1 : Integer(1)\l<statTemp>$23 = 0 : Integer(0)\l<assignTemp$3$2 = <constant:<Magic>>$20.<expand-splat>(forTemp$2$2, <statTemp>$22, <statTemp>$23) : T.untyped\l<statTemp>$26 = 0 : Integer(0)\la$2 = <assignTemp$3$2.[](<statTemp>$26) : T.untyped\l<statTemp>$27 = self : <Class:Main>\l<statTemp>$28 = a$2.inspect() : T.untyped\l<blockReturnTemp>$16 = <statTemp>$27.puts(<statTemp>$28) : NilClass\l<blockReturnTemp>$30 = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$16 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_4" -> "bb::<Class:Main>#main_2" [style="bold"];
    "bb::<Class:Main>#main_5" [
        label = "block[id=5](<constant:<Magic>>$20, <constant:E>$136, <constant:A>$12, @a$120, @@b$124, $c$128)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::<Class:Main>#main_5" -> "bb::<Class:Main>#main_7" [style="bold"];
    "bb::<Class:Main>#main_5" -> "bb::<Class:Main>#main_6" [style="tapered"];

    "bb::<Class:Main>#main_6" [
        label = "block[id=6](<constant:<Magic>>$20, <constant:E>$136, <constant:A>$12, @a$120, @@b$124, $c$128)\l<statTemp>$31 = Solve<::<Class:Main>#main#<block>> : T.untyped\l<block-pre-call-temp>$53 = <constant:A>$12.each() : T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_6" -> "bb::<Class:Main>#main_8" [style="bold"];
    "bb::<Class:Main>#main_7" [
        label = "block[id=7](<constant:<Magic>>$20, <constant:E>$136, <constant:A>$12, @a$120, @@b$124, $c$128)\louterLoops: 1\l<blk>$34 = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$35 = 0 : Integer(0)\lforTemp$3 = <blk>$34.[](<blk>$35) : T.untyped\l<statTemp>$40 = forTemp$3.to_a() : T.untyped\l<statTemp>$42 = 1 : Integer(1)\l<statTemp>$43 = 0 : Integer(0)\l<assignTemp$4$3 = <constant:<Magic>>$20.<expand-splat>(<statTemp>$40, <statTemp>$42, <statTemp>$43) : T.untyped\l<statTemp>$46 = 0 : Integer(0)\la$3 = <assignTemp$4$3.[](<statTemp>$46) : T.untyped\l<statTemp>$47 = self : <Class:Main>\l<statTemp>$48 = a$3.inspect() : T.untyped\l<blockReturnTemp>$36 = <statTemp>$47.puts(<statTemp>$48) : NilClass\l<blockReturnTemp>$50 = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$36 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_7" -> "bb::<Class:Main>#main_5" [style="bold"];
    "bb::<Class:Main>#main_8" [
        label = "block[id=8](<constant:<Magic>>$20, <constant:E>$136, <constant:A>$12, @a$120, @@b$124, $c$128)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::<Class:Main>#main_8" -> "bb::<Class:Main>#main_10" [style="bold"];
    "bb::<Class:Main>#main_8" -> "bb::<Class:Main>#main_9" [style="tapered"];

    "bb::<Class:Main>#main_9" [
        label = "block[id=9](<constant:<Magic>>$20, <constant:E>$136, <constant:A>$12, @a$120, @@b$124, $c$128)\l<statTemp>$51 = Solve<::<Class:Main>#main#<block>> : T.untyped\l<block-pre-call-temp>$79 = <constant:A>$12.each() : T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_9" -> "bb::<Class:Main>#main_11" [style="bold"];
    "bb::<Class:Main>#main_10" [
        label = "block[id=10](<constant:<Magic>>$20, <constant:E>$136, <constant:A>$12, @a$120, @@b$124, $c$128)\louterLoops: 1\l<blk>$54 = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$55 = 0 : Integer(0)\lforTemp$5$4 = <blk>$54.[](<blk>$55) : T.untyped\l<statTemp>$61 = 2 : Integer(2)\l<statTemp>$62 = 0 : Integer(0)\l<assignTemp$6$4 = <constant:<Magic>>$20.<expand-splat>(forTemp$5$4, <statTemp>$61, <statTemp>$62) : T.untyped\l<statTemp>$65 = 0 : Integer(0)\la$4 = <assignTemp$6$4.[](<statTemp>$65) : T.untyped\l<statTemp>$68 = 1 : Integer(1)\lb$4 = <assignTemp$6$4.[](<statTemp>$68) : T.untyped\l<statTemp>$70 = self : <Class:Main>\l<statTemp>$71 = a$4.inspect() : T.untyped\l<statTemp>$69 = <statTemp>$70.puts(<statTemp>$71) : NilClass\l<statTemp>$73 = self : <Class:Main>\l<statTemp>$74 = b$4.inspect() : T.untyped\l<blockReturnTemp>$56 = <statTemp>$73.puts(<statTemp>$74) : NilClass\l<blockReturnTemp>$76 = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$56 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_10" -> "bb::<Class:Main>#main_8" [style="bold"];
    "bb::<Class:Main>#main_11" [
        label = "block[id=11](<constant:<Magic>>$20, <constant:E>$136, <constant:A>$12, @a$120, @@b$124, $c$128)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::<Class:Main>#main_11" -> "bb::<Class:Main>#main_13" [style="bold"];
    "bb::<Class:Main>#main_11" -> "bb::<Class:Main>#main_12" [style="tapered"];

    "bb::<Class:Main>#main_12" [
        label = "block[id=12](<constant:<Magic>>$20, <constant:E>$136, <constant:A>$12, @a$120, @@b$124, $c$128)\l<statTemp>$77 = Solve<::<Class:Main>#main#<block>> : T.untyped\l<statTemp>$105 = self : <Class:Main>\l<statTemp>$106 = \"main\" : String(\"main\")\l<statTemp>$104 = <statTemp>$105.puts(<statTemp>$106) : NilClass\l<block-pre-call-temp>$109 = <constant:A>$12.each() : T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_12" -> "bb::<Class:Main>#main_14" [style="bold"];
    "bb::<Class:Main>#main_13" [
        label = "block[id=13](<constant:<Magic>>$20, <constant:E>$136, <constant:A>$12, @a$120, @@b$124, $c$128)\louterLoops: 1\l<blk>$80 = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$81 = 0 : Integer(0)\lforTemp$5 = <blk>$80.[](<blk>$81) : T.untyped\l<statTemp>$86 = forTemp$5.to_a() : T.untyped\l<statTemp>$88 = 2 : Integer(2)\l<statTemp>$89 = 0 : Integer(0)\l<assignTemp$7$5 = <constant:<Magic>>$20.<expand-splat>(<statTemp>$86, <statTemp>$88, <statTemp>$89) : T.untyped\l<statTemp>$92 = 0 : Integer(0)\la$5 = <assignTemp$7$5.[](<statTemp>$92) : T.untyped\l<statTemp>$95 = 1 : Integer(1)\lb$5 = <assignTemp$7$5.[](<statTemp>$95) : T.untyped\l<statTemp>$97 = self : <Class:Main>\l<statTemp>$98 = a$5.inspect() : T.untyped\l<statTemp>$96 = <statTemp>$97.puts(<statTemp>$98) : NilClass\l<statTemp>$100 = self : <Class:Main>\l<statTemp>$101 = b$5.inspect() : T.untyped\l<blockReturnTemp>$82 = <statTemp>$100.puts(<statTemp>$101) : NilClass\l<blockReturnTemp>$103 = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$82 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_13" -> "bb::<Class:Main>#main_11" [style="bold"];
    "bb::<Class:Main>#main_14" [
        label = "block[id=14](<constant:<Magic>>$20, <constant:E>$136, <constant:A>$12, @a$120, @@b$124, $c$128)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::<Class:Main>#main_14" -> "bb::<Class:Main>#main_16" [style="bold"];
    "bb::<Class:Main>#main_14" -> "bb::<Class:Main>#main_15" [style="tapered"];

    "bb::<Class:Main>#main_15" [
        label = "block[id=15](<constant:<Magic>>$20, <constant:E>$136, <constant:A>$12, @a$120, @@b$124, $c$128)\l<statTemp>$107 = Solve<::<Class:Main>#main#<block>> : T.untyped\l<block-pre-call-temp>$162 = <constant:A>$12.each() : T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_15" -> "bb::<Class:Main>#main_17" [style="bold"];
    "bb::<Class:Main>#main_16" [
        label = "block[id=16](<constant:<Magic>>$20, <constant:E>$136, <constant:A>$12, @a$120, @@b$124, $c$128)\louterLoops: 1\l<blk>$110 = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$111 = 0 : Integer(0)\lforTemp$8$6 = <blk>$110.[](<blk>$111) : T.untyped\l<statTemp>$117 = 5 : Integer(5)\l<statTemp>$118 = 0 : Integer(0)\l<assignTemp$9$6 = <constant:<Magic>>$20.<expand-splat>(forTemp$8$6, <statTemp>$117, <statTemp>$118) : T.untyped\l<statTemp>$122 = 0 : Integer(0)\l@a$120 = <assignTemp$9$6.[](<statTemp>$122) : T.untyped\l<statTemp>$126 = 1 : Integer(1)\l@@b$124 = <assignTemp$9$6.[](<statTemp>$126) : T.untyped\l<statTemp>$130 = 2 : Integer(2)\l$c$128 = <assignTemp$9$6.[](<statTemp>$130) : T.untyped\l<statTemp>$133 = 3 : Integer(3)\ld$6 = <assignTemp$9$6.[](<statTemp>$133) : T.untyped\l<statTemp>$139 = 4 : Integer(4)\l<statTemp>$137 = <assignTemp$9$6.[](<statTemp>$139) : T.untyped\l<statTemp>$134 = <constant:E>$136.e=(<statTemp>$137) : T.untyped\l<statTemp>$141 = self : <Class:Main>\l<statTemp>$142 = @a$120.inspect() : T.untyped\l<statTemp>$140 = <statTemp>$141.puts(<statTemp>$142) : NilClass\l<statTemp>$145 = self : <Class:Main>\l<statTemp>$146 = @@b$124.inspect() : T.untyped\l<statTemp>$144 = <statTemp>$145.puts(<statTemp>$146) : NilClass\l<statTemp>$149 = self : <Class:Main>\l<statTemp>$150 = $c$128.inspect() : T.untyped\l<statTemp>$148 = <statTemp>$149.puts(<statTemp>$150) : NilClass\l<statTemp>$153 = self : <Class:Main>\l<statTemp>$154 = d$6.inspect() : T.untyped\l<statTemp>$152 = <statTemp>$153.puts(<statTemp>$154) : NilClass\l<statTemp>$156 = self : <Class:Main>\l<statTemp>$158 = <constant:E>$136.e() : T.untyped\l<statTemp>$157 = <statTemp>$158.inspect() : T.untyped\l<blockReturnTemp>$112 = <statTemp>$156.puts(<statTemp>$157) : NilClass\l<blockReturnTemp>$160 = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$112 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_16" -> "bb::<Class:Main>#main_14" [style="bold"];
    "bb::<Class:Main>#main_17" [
        label = "block[id=17](<constant:<Magic>>$20, <constant:E>$136, @a$120, @@b$124, $c$128)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::<Class:Main>#main_17" -> "bb::<Class:Main>#main_19" [style="bold"];
    "bb::<Class:Main>#main_17" -> "bb::<Class:Main>#main_18" [style="tapered"];

    "bb::<Class:Main>#main_18" [
        label = "block[id=18]()\l<returnMethodTemp>$8 = Solve<::<Class:Main>#main#<block>> : T.untyped\l<finalReturn> = return <returnMethodTemp>$8 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_18" -> "bb::<Class:Main>#main_1" [style="bold"];
    "bb::<Class:Main>#main_19" [
        label = "block[id=19](<constant:<Magic>>$20, <constant:E>$136, @a$120, @@b$124, $c$128)\louterLoops: 1\l<blk>$163 = load_yield_params(::<Class:Main>#main#<block>, Main.main#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$164 = 0 : Integer(0)\lforTemp$7 = <blk>$163.[](<blk>$164) : T.untyped\l<statTemp>$169 = forTemp$7.to_a() : T.untyped\l<statTemp>$171 = 5 : Integer(5)\l<statTemp>$172 = 0 : Integer(0)\l<assignTemp$10$7 = <constant:<Magic>>$20.<expand-splat>(<statTemp>$169, <statTemp>$171, <statTemp>$172) : T.untyped\l<statTemp>$175 = 0 : Integer(0)\l@a$120 = <assignTemp$10$7.[](<statTemp>$175) : T.untyped\l<statTemp>$178 = 1 : Integer(1)\l@@b$124 = <assignTemp$10$7.[](<statTemp>$178) : T.untyped\l<statTemp>$181 = 2 : Integer(2)\l$c$128 = <assignTemp$10$7.[](<statTemp>$181) : T.untyped\l<statTemp>$184 = 3 : Integer(3)\ld$7 = <assignTemp$10$7.[](<statTemp>$184) : T.untyped\l<statTemp>$189 = 4 : Integer(4)\l<statTemp>$187 = <assignTemp$10$7.[](<statTemp>$189) : T.untyped\l<statTemp>$185 = <constant:E>$136.e=(<statTemp>$187) : T.untyped\l<statTemp>$191 = self : <Class:Main>\l<statTemp>$192 = @a$120.inspect() : T.untyped\l<statTemp>$190 = <statTemp>$191.puts(<statTemp>$192) : NilClass\l<statTemp>$195 = self : <Class:Main>\l<statTemp>$196 = @@b$124.inspect() : T.untyped\l<statTemp>$194 = <statTemp>$195.puts(<statTemp>$196) : NilClass\l<statTemp>$199 = self : <Class:Main>\l<statTemp>$200 = $c$128.inspect() : T.untyped\l<statTemp>$198 = <statTemp>$199.puts(<statTemp>$200) : NilClass\l<statTemp>$203 = self : <Class:Main>\l<statTemp>$204 = d$7.inspect() : T.untyped\l<statTemp>$202 = <statTemp>$203.puts(<statTemp>$204) : NilClass\l<statTemp>$206 = self : <Class:Main>\l<statTemp>$208 = <constant:E>$136.e() : T.untyped\l<statTemp>$207 = <statTemp>$208.inspect() : T.untyped\l<blockReturnTemp>$165 = <statTemp>$206.puts(<statTemp>$207) : NilClass\l<blockReturnTemp>$210 = blockreturn<::<Class:Main>#main#<block>> <blockReturnTemp>$165 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:Main>#main_19" -> "bb::<Class:Main>#main_17" [style="bold"];
}

}

