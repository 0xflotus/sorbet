class <emptyTree><<constant:<root>>> < ()
  begin
    self(<constant:<todo sym>>).require_relative("../../t")
    module <emptyTree>::<constant:Foo><<constant:<todo sym>>> < ()
      class <emptyTree>::<constant:Struct><<constant:<todo sym>>> < (::<constant:<todo sym>>)
        <emptyTree>
      end
    end
    class <emptyTree>::<constant:NotStruct><<constant:<todo sym>>> < (::<constant:<todo sym>>)
      <emptyTree>::<constant:B> = <emptyTree>::<constant:Foo>::<constant:Struct>.new()

      var = <emptyTree>::<constant:Struct>.new(:foo)
    end
    class <emptyTree>::<constant:RealStruct><<constant:<todo sym>>> < (::<constant:<todo sym>>)
      class <emptyTree>::<constant:A><<constant:<todo sym>>> < ()
        self(<constant:<todo sym>>).declare_variables({:@foo => ::<constant:T>.untyped(), :@bar => ::<constant:T>.untyped()})

        self(<constant:<todo sym>>).attr_accessor(:foo)

        self(<constant:<todo sym>>).attr_accessor(:bar)

        def initialize<<constant:<todo sym>>>(foo, bar)
          <emptyTree>
        end
      end
    end
    class <emptyTree>::<constant:RealStructDesugar><<constant:<todo sym>>> < (::<constant:<todo sym>>)
      class <emptyTree>::<constant:A><<constant:<todo sym>>> < (::<constant:<todo sym>>)
        self(<constant:<todo sym>>).declare_variables({:@foo => <emptyTree>::<constant:T>.untyped(), :@bar => <emptyTree>::<constant:T>.untyped()})

        self(<constant:<todo sym>>).attr_accessor(:foo)

        self(<constant:<todo sym>>).attr_accessor(:bar)

        def initialize<<constant:<todo sym>>>(foo, bar)
          <emptyTree>
        end
      end
    end
    class <emptyTree>::<constant:TwoStructs><<constant:<todo sym>>> < (::<constant:<todo sym>>)
      class <emptyTree>::<constant:A><<constant:<todo sym>>> < ()
        self(<constant:<todo sym>>).declare_variables({:@foo => ::<constant:T>.untyped()})

        self(<constant:<todo sym>>).attr_accessor(:foo)

        def initialize<<constant:<todo sym>>>(foo)
          <emptyTree>
        end
      end

      class <emptyTree>::<constant:B><<constant:<todo sym>>> < ()
        self(<constant:<todo sym>>).declare_variables({:@foo => ::<constant:T>.untyped()})

        self(<constant:<todo sym>>).attr_accessor(:foo)

        def initialize<<constant:<todo sym>>>(foo)
          <emptyTree>
        end
      end
    end
    class <emptyTree>::<constant:AccidentallyStruct><<constant:<todo sym>>> < (::<constant:<todo sym>>)
      class <emptyTree>::<constant:A><<constant:<todo sym>>> < ()
        self(<constant:<todo sym>>).declare_variables({:@foo => ::<constant:T>.untyped(), :@bar => ::<constant:T>.untyped()})

        self(<constant:<todo sym>>).attr_accessor(:foo)

        self(<constant:<todo sym>>).attr_accessor(:bar)

        def initialize<<constant:<todo sym>>>(foo, bar)
          <emptyTree>
        end
      end
    end
    class <emptyTree>::<constant:Main><<constant:<todo sym>>> < (::<constant:<todo sym>>)
      self(<constant:<todo sym>>).sig().returns(<emptyTree>::<constant:RealStruct>::<constant:A>)

      def foo<<constant:<todo sym>>>()
        <emptyTree>::<constant:RealStruct>::<constant:A>.new(2, 3)
      end
    end
    self(<constant:<todo sym>>).puts(<emptyTree>::<constant:Main>.new().foo())
  end
end
