begin
  class <emptyTree><<constant:<root>>> < ()
    <emptyTree>

    def self.<static-init><<static-init>$89>()
      begin
        <emptyTree>
        <emptyTree>
        <emptyTree>
        #$c = ::Object.new()
        <emptyTree>
        <emptyTree>
        <emptyTree>
        <emptyTree>
        <emptyTree>
        <emptyTree>
        <emptyTree>
        self(<singleton class:<constant:<root>>>).main()
      end
    end

    def main<main>()
      begin
        self(<constant:Object>).puts(::A.a())
        self(<constant:Object>).puts(::B.b())
        self(<constant:Object>).puts(#$c.c())
        self(<constant:Object>).puts(::D.singleton_class().d())
        self(<constant:Object>).puts(::E.e())
        self(<constant:Object>).puts(::F.f=(91))
        self(<constant:Object>).puts(::G.new().wrapper())
        self(<constant:Object>).puts(::T.untyped.h())
      end
    end
  end
  class <emptyTree>::<constant:A><<constant:A>> < (::<todo sym>)  end
  class <emptyTree>::<constant:B><<constant:B>> < (::<todo sym>)
    <emptyTree>
  end
  class <singleton class><<singleton class:<constant:B>>> < ()
    def b<b>()
      "b"
    end
  end
  class <emptyTree>::<constant:D><<constant:D>> < (::<todo sym>)
    <emptyTree>
  end
  class <singleton class><<singleton class:<constant:D>>> < ()
    <emptyTree>
  end
  class <singleton class><<singleton class:<singleton class:<constant:D>>>> < ()
    def d<d>()
      "d"
    end
  end
  class <emptyTree>::<constant:E><<constant:E>> < (::<todo sym>)
    <emptyTree>

    <emptyTree>

    def self.<static-init><<static-init>>()
      self(<singleton class:<constant:E>>).wrapper()
    end
  end
  class <singleton class><<singleton class:<constant:E>>> < ()
    <emptyTree>

    def wrapper<wrapper>()
      <emptyTree>
    end

    def e<e>()
      "e"
    end
  end
  class <emptyTree>::<constant:F><<constant:F>> < (::<todo sym>)
    <emptyTree>
  end
  class <singleton class><<singleton class:<constant:F>>> < ()
    <emptyTree>

    <emptyTree>

    def initialize<initialize>()
      ::<Class:F>#@f = T.let(0, Integer)
    end

    def f=<f=>(f)
      ::<Class:F>#@f = f
    end
  end
  class <emptyTree>::<constant:G><<constant:G>> < (::<todo sym>)
    <emptyTree>

    <emptyTree>

    def wrapper<wrapper>()
      begin
        <emptyTree>
        self(<constant:G>).inner()
      end
    end

    def self.g<g>()
      "g"
    end
  end
  class <singleton class><<singleton class:<constant:G>>> < ()
    def inner<inner>()
      self(<singleton class:<constant:G>>).singleton_class().g()
    end
  end
  class <emptyTree>::<constant:H><<constant:H>> < (::<todo sym>)
    <emptyTree>
  end
  class <singleton class><<singleton class:<constant:H>>> < ()
    <emptyTree>
  end
  class <emptyTree>::<constant:H2><<constant:H2>> < (::<todo sym>)
    def self.h<h>()
      "h"
    end
  end
  <emptyTree>
end
