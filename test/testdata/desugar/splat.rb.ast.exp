class <emptyTree><<constant:<root>>> < ()
  def bar<<constant:<todo sym>>>(a)
    a
  end

  class <emptyTree>::<constant:Splatable><<constant:<todo sym>>> < (::<todo sym>)
    def to_a<<constant:<todo sym>>>()
      [1]
    end
  end

  class <emptyTree>::<constant:Rescueable><<constant:<todo sym>>> < (::<todo sym>)
    def to_a<<constant:<todo sym>>>()
      [<emptyTree>::<constant:String>, <emptyTree>::<constant:RuntimeError>]
    end
  end

  class <emptyTree>::<constant:Parent><<constant:<todo sym>>> < (::<todo sym>)
    def foo<<constant:<todo sym>>>(a, b)
      [b, a]
    end
  end

  class <emptyTree>::<constant:Child><<constant:<todo sym>>> < (<emptyTree>::<constant:Parent>)
    def foo<<constant:<todo sym>>>()
      begin
        a = [1, 2]
        ::<Magic>.<call-with-splat>(self(<constant:<todo sym>>), :"super", a.to_a())
      end
    end
  end

  def foo<<constant:<todo sym>>>()
    begin
      a = [1]
      a.to_a().concat([2])
      [1].concat(a.to_a())
      [1].concat(a.to_a()).concat([2])
      ::<Magic>.<call-with-splat>(self(<constant:<todo sym>>), :"bar", a.to_a())
      ::<Magic>.<call-with-splat>(self(<constant:<todo sym>>), :"bar", <emptyTree>::<constant:Splatable>.new().to_a())
      <emptyTree>::<constant:Child>.new().foo()
      b = <emptyTree>::<constant:Splatable>.new().to_a()
      begin
        <assignTemp>$2 = 1
        if ::<Magic>.<splat>(<emptyTree>::<constant:Integer>.to_a()).===(<assignTemp>$2)
          <emptyTree>
        else
          <emptyTree>
        end
      end
      self(<constant:<todo sym>>).raise("a")
    rescue <emptyTree>::<constant:Rescueable>.new().to_a() => <rescueTemp>$3
      <emptyTree>
      self(<constant:<todo sym>>).raise("a")
    rescue [<emptyTree>::<constant:Array>].concat(<emptyTree>::<constant:Rescueable>.new().to_a()).concat([<emptyTree>::<constant:Float>]) => <rescueTemp>$4
      <emptyTree>
    end
  end

  self(<constant:<todo sym>>).foo()
end
