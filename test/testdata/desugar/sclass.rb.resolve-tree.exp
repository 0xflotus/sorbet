begin
  class <emptyTree><<constant:<root>>> < ()
    <emptyTree>

    <emptyTree>

    def main<main>(<blk>)
      begin
        self(<constant:Object>).puts(::A.a())
        self(<constant:Object>).puts(::B.b())
        self(<constant:Object>).puts(#$c.c())
        self(<constant:Object>).puts(::D.singleton_class().d())
        self(<constant:Object>).puts(::E.e())
        self(<constant:Object>).puts(::F.f=(91))
        self(<constant:Object>).puts(::G.new().wrapper())
        self(<constant:Object>).puts(::T.untyped.h())
      end
    end

    def self.<static-init><<static-init>$87>(<blk>)
      begin
        begin
          ::RubyTyper.keep_for_ide(::A)
          <emptyTree>
        end
        begin
          ::RubyTyper.keep_for_ide(::B)
          <emptyTree>
        end
        #$c = ::Object.new()
        begin
          ::RubyTyper.keep_for_ide(::D)
          <emptyTree>
        end
        begin
          ::RubyTyper.keep_for_ide(::E)
          <emptyTree>
        end
        begin
          ::RubyTyper.keep_for_ide(::F)
          <emptyTree>
        end
        begin
          ::RubyTyper.keep_for_ide(::G)
          <emptyTree>
        end
        begin
          ::RubyTyper.keep_for_ide(::H)
          <emptyTree>
        end
        self(<singleton class:<constant:<root>>>).main()
        <emptyTree>
      end
    end
  end
  class ::A<<constant:A>> < (::<todo sym>)  end
  class ::B<<constant:B>> < (::<todo sym>)
    <emptyTree>
  end
  class <singleton class><<singleton class:<constant:B>>> < ()
    def b<b>(<blk>)
      "b"
    end
  end
  class ::D<<constant:D>> < (::<todo sym>)
    <emptyTree>
  end
  class <singleton class><<singleton class:<constant:D>>> < ()
    <emptyTree>
  end
  class <singleton class><<singleton class:<singleton class:<constant:D>>>> < ()
    def d<d>(<blk>)
      "d"
    end
  end
  class ::E<<constant:E>> < (::<todo sym>)
    <emptyTree>

    <emptyTree>

    def self.<static-init><<static-init>>(<blk>)
      self(<singleton class:<constant:E>>).wrapper()
    end
  end
  class <singleton class><<singleton class:<constant:E>>> < ()
    <emptyTree>

    def wrapper<wrapper>(<blk>)
      <emptyTree>
    end

    def e<e>(<blk>)
      "e"
    end
  end
  class ::F<<constant:F>> < (::<todo sym>)
    <emptyTree>
  end
  class <singleton class><<singleton class:<constant:F>>> < ()
    <emptyTree>

    <emptyTree>

    <emptyTree>

    def initialize<initialize>(<blk>)
      @f = begin
        ::RubyTyper.keep_for_typechecking(::Integer)
        T.let(0, Integer)
      end
    end

    def f=<f=>(f, <blk>)
      @f = f
    end

    def self.<static-init><<static-init>>(<blk>)
      self(<singleton class:<singleton class:<constant:F>>>).sig() do ||
        self(<constant:Builder>).params({:"f" => ::Integer}).returns(::Integer)
      end
    end
  end
  class ::G<<constant:G>> < (::<todo sym>)
    <emptyTree>

    <emptyTree>

    def wrapper<wrapper>(<blk>)
      begin
        <emptyTree>
        self(<constant:G>).inner()
      end
    end

    def self.g<g>(<blk>)
      "g"
    end
  end
  class <singleton class><<singleton class:<constant:G>>> < ()
    def inner<inner>(<blk>)
      ::T.reveal_type(self(<singleton class:<constant:G>>))
    end
  end
  class ::H<<constant:H>> < (::<todo sym>)
    <emptyTree>
  end
  class <singleton class><<singleton class:<constant:H>>> < ()
    def self.<static-init><<static-init>>(<blk>)
      begin
        ::RubyTyper.keep_for_ide(::<Class:H>::H2)
        <emptyTree>
      end
    end
  end
  class ::<Class:H>::H2<<constant:H2>> < (::<todo sym>)
    def self.h<h>(<blk>)
      "h"
    end
  end
  <emptyTree>
end
