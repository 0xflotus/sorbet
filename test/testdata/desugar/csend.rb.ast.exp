class <emptyTree><<C <U <root>>>> < ()
  def <U test_csend><<C <U <todo sym>>>>(&<U <blk>>)
    begin
      begin
        <D <U <assignTemp>> $2> = <U <self>>.<U foo>()
        if <D <U <assignTemp>> $2>.<U ==>(nil)
          nil
        else
          <D <U <assignTemp>> $2>.<U bar>()
        end
      end
      begin
        <D <U <assignTemp>> $3> = <U <self>>.<U foo>()
        if <D <U <assignTemp>> $3>.<U ==>(nil)
          nil
        else
          <D <U <assignTemp>> $3>.<U bar>() do |<U x>|
            <U x>
          end
        end
      end
    end
  end

  begin
    <D <U <assignTemp>> $2> = <emptyTree>::<C <U BasicObject>>.<U new>()
    if <D <U <assignTemp>> $2>.<U ==>(nil)
      nil
    else
      <D <U <assignTemp>> $2>.<U __id__>()
    end
  end

  class <emptyTree>::<C <U A>><<C <U <todo sym>>>> < (::<todo sym>)
    <U <self>>.<U extend>(<emptyTree>::<C <U T>>::<C <U Sig>>)

    <U <self>>.<U sig>() do ||
      <U <self>>.<U params>({:"x" => <emptyTree>::<C <U T>>.<U any>(<emptyTree>::<C <U FalseClass>>, <emptyTree>::<C <U NilClass>>)}).<U returns>(<emptyTree>::<C <U T>>.<U nilable>(<emptyTree>::<C <U TrueClass>>))
    end

    def <U foo><<C <U <todo sym>>>>(<U x>, &<U <blk>>)
      begin
        <D <U <assignTemp>> $2> = <U x>
        if <D <U <assignTemp>> $2>.<U ==>(nil)
          nil
        else
          <D <U <assignTemp>> $2>.<U |>(true)
        end
      end
    end
  end
end
