digraph "blockpass.rb"{
subgraph "cluster_#<static-init>" {
    label = "#<static-init>";
    color = blue;
    "bb#<static-init>_0" [shape = invhouse];
    "bb#<static-init>_1" [shape = parallelogram];

    "bb#<static-init>_0" [label = "block[id=0]()
<statTemp>$12 = self : <Class:<root>>
<block-pre-call-temp>$13 = <statTemp>$12.foo() : untyped
<unconditional>"];

    "bb#<static-init>_0" -> "bb#<static-init>_2" [style="bold"];
    "bb#<static-init>_1" [label = "block[id=1]()
<unconditional>"];

    "bb#<static-init>_1" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_2" [label = "block[id=2]()
outerLoops: 1
<block-call>"];

    "bb#<static-init>_2" -> "bb#<static-init>_4" [style="bold"];
    "bb#<static-init>_2" -> "bb#<static-init>_3" [style="tapered"];

    "bb#<static-init>_3" [label = "block[id=3]()
<returnMethodTemp>$2 = Solve<::Object#<block>> : untyped
<finalReturn> = return <returnMethodTemp>$2 : <impossible>
<unconditional>"];

    "bb#<static-init>_3" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_4" [label = "block[id=4]()
outerLoops: 1
<blockReturnTemp>$14 = \"foo\" : String(\"foo\")
<blockReturnTemp>$15 = blockreturn<::Object#<block>> <blockReturnTemp>$14 : <impossible>
<unconditional>"];

    "bb#<static-init>_4" -> "bb#<static-init>_2" [style="bold"];
}

subgraph "cluster_::Object#returns_lambda" {
    label = "::Object#returns_lambda";
    color = blue;
    "bb::Object#returns_lambda_0" [shape = invhouse];
    "bb::Object#returns_lambda_1" [shape = parallelogram];

    "bb::Object#returns_lambda_0" [label = "block[id=0]()
<statTemp>$5 = self : Object
<block-pre-call-temp>$6 = <statTemp>$5.lambda() : Proc
<unconditional>"];

    "bb::Object#returns_lambda_0" -> "bb::Object#returns_lambda_2" [style="bold"];
    "bb::Object#returns_lambda_1" [label = "block[id=1]()
<unconditional>"];

    "bb::Object#returns_lambda_1" -> "bb::Object#returns_lambda_1" [style="bold"];
    "bb::Object#returns_lambda_2" [label = "block[id=2]()
outerLoops: 1
<block-call>"];

    "bb::Object#returns_lambda_2" -> "bb::Object#returns_lambda_4" [style="bold"];
    "bb::Object#returns_lambda_2" -> "bb::Object#returns_lambda_3" [style="tapered"];

    "bb::Object#returns_lambda_3" [label = "block[id=3]()
<returnMethodTemp>$3 = Solve<::Object#returns_lambda#<block>> : Proc
<finalReturn> = return <returnMethodTemp>$3 : <impossible>
<unconditional>"];

    "bb::Object#returns_lambda_3" -> "bb::Object#returns_lambda_1" [style="bold"];
    "bb::Object#returns_lambda_4" [label = "block[id=4]()
outerLoops: 1
<blockReturnTemp>$7 = \"returns_lambda\" : String(\"returns_lambda\")
<blockReturnTemp>$8 = blockreturn<::Object#returns_lambda#<block>> <blockReturnTemp>$7 : <impossible>
<unconditional>"];

    "bb::Object#returns_lambda_4" -> "bb::Object#returns_lambda_2" [style="bold"];
}

subgraph "cluster_::Object#calls_arg_with_object" {
    label = "::Object#calls_arg_with_object";
    color = blue;
    "bb::Object#calls_arg_with_object_0" [shape = invhouse];
    "bb::Object#calls_arg_with_object_1" [shape = parallelogram];

    "bb::Object#calls_arg_with_object_0" [label = "block[id=0]()
<selfMethodTemp>$3 = self : Object
arg = load_arg(<selfMethodTemp>$3#calls_arg_with_object, 0) : untyped
blk = load_arg(<selfMethodTemp>$3#calls_arg_with_object, 1) : untyped
<returnMethodTemp>$2 = blk.call(arg) : untyped
<finalReturn> = return <returnMethodTemp>$2 : <impossible>
<unconditional>"];

    "bb::Object#calls_arg_with_object_0" -> "bb::Object#calls_arg_with_object_1" [style="bold"];
    "bb::Object#calls_arg_with_object_1" [label = "block[id=1]()
<unconditional>"];

    "bb::Object#calls_arg_with_object_1" -> "bb::Object#calls_arg_with_object_1" [style="bold"];
}

subgraph "cluster_::Object#calls_with_object" {
    label = "::Object#calls_with_object";
    color = blue;
    "bb::Object#calls_with_object_0" [shape = invhouse];
    "bb::Object#calls_with_object_1" [shape = parallelogram];

    "bb::Object#calls_with_object_0" [label = "block[id=0]()
<constant:<Magic>>$15 = alias <constant:<Magic>> : <Magic>
<constant:HasMeth>$8 = alias <constant:HasMeth> : <Class:HasMeth>
<selfMethodTemp>$4 = self : Object
blk = load_arg(<selfMethodTemp>$4#calls_with_object, 0) : untyped
<statTemp>$5 = self : Object
<statTemp>$6 = <constant:HasMeth>$8.new() : HasMeth
<block-pre-call-temp>$9 = <statTemp>$5.calls_arg_with_object(<statTemp>$6) : untyped
<unconditional>"];

    "bb::Object#calls_with_object_0" -> "bb::Object#calls_with_object_2" [style="bold"];
    "bb::Object#calls_with_object_1" [label = "block[id=1]()
<unconditional>"];

    "bb::Object#calls_with_object_1" -> "bb::Object#calls_with_object_1" [style="bold"];
    "bb::Object#calls_with_object_2" [label = "block[id=2](<constant:<Magic>>$15, blk)
outerLoops: 1
<block-call>"];

    "bb::Object#calls_with_object_2" -> "bb::Object#calls_with_object_4" [style="bold"];
    "bb::Object#calls_with_object_2" -> "bb::Object#calls_with_object_3" [style="tapered"];

    "bb::Object#calls_with_object_3" [label = "block[id=3]()
<returnMethodTemp>$3 = Solve<::Object#calls_with_object#<block>> : untyped
<finalReturn> = return <returnMethodTemp>$3 : <impossible>
<unconditional>"];

    "bb::Object#calls_with_object_3" -> "bb::Object#calls_with_object_1" [style="bold"];
    "bb::Object#calls_with_object_4" [label = "block[id=4](<constant:<Magic>>$15, blk)
outerLoops: 1
<block-pass>$2$4 = load_yield_param(::Object#calls_with_object#<block>, 0) : untyped
<statTemp>$11 = blk.to_proc() : untyped
<statTemp>$16 = <block-pass>$2$4.to_a() : untyped
<statTemp>$13 = <constant:<Magic>>$15.<splat>(<statTemp>$16) : untyped
<blockReturnTemp>$10 = <statTemp>$11.call(<statTemp>$13) : untyped
<blockReturnTemp>$18 = blockreturn<::Object#calls_with_object#<block>> <blockReturnTemp>$10 : <impossible>
<unconditional>"];

    "bb::Object#calls_with_object_4" -> "bb::Object#calls_with_object_2" [style="bold"];
}

subgraph "cluster_::Object#foo" {
    label = "::Object#foo";
    color = blue;
    "bb::Object#foo_0" [shape = invhouse];
    "bb::Object#foo_1" [shape = parallelogram];

    "bb::Object#foo_0" [label = "block[id=0]()
<constant:<Magic>>$31 = alias <constant:<Magic>> : <Magic>
<constant:HasMeth>$124 = alias <constant:HasMeth> : <Class:HasMeth>
<constant:HasToProc>$79 = alias <constant:HasToProc> : <Class:HasToProc>
<constant:CallsWithObject>$99 = alias <constant:CallsWithObject> : <Class:CallsWithObject>
<constant:CallsWithObjectChild>$115 = alias <constant:CallsWithObjectChild> : <Class:CallsWithObjectChild>
<selfMethodTemp>$16 = self : Object
blk = load_arg(<selfMethodTemp>$16#foo, 0) : untyped
<statTemp>$18 = self : Object
<block-pre-call-temp>$19 = <statTemp>$18.calls_with_object() : untyped
<unconditional>"];

    "bb::Object#foo_0" -> "bb::Object#foo_2" [style="bold"];
    "bb::Object#foo_1" [label = "block[id=1]()
<unconditional>"];

    "bb::Object#foo_1" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_2" [label = "block[id=2](<constant:<Magic>>$31, blk, <constant:HasMeth>$124, <constant:HasToProc>$79, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
outerLoops: 1
<block-call>"];

    "bb::Object#foo_2" -> "bb::Object#foo_4" [style="bold"];
    "bb::Object#foo_2" -> "bb::Object#foo_3" [style="tapered"];

    "bb::Object#foo_3" [label = "block[id=3](<constant:<Magic>>$31, blk, <constant:HasMeth>$124, <constant:HasToProc>$79, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
<statTemp>$17 = Solve<::Object#foo#<block>> : untyped
<statTemp>$24 = self : Object
<block-pre-call-temp>$25 = <statTemp>$24.calls_with_object() : untyped
<unconditional>"];

    "bb::Object#foo_3" -> "bb::Object#foo_5" [style="bold"];
    "bb::Object#foo_4" [label = "block[id=4](<constant:<Magic>>$31, blk, <constant:HasMeth>$124, <constant:HasToProc>$79, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
outerLoops: 1
<block-pass>$2$4 = load_yield_param(::Object#foo#<block>, 0) : untyped
<blockReturnTemp>$20 = <block-pass>$2$4.meth() : untyped
<blockReturnTemp>$22 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$20 : <impossible>
<unconditional>"];

    "bb::Object#foo_4" -> "bb::Object#foo_2" [style="bold"];
    "bb::Object#foo_5" [label = "block[id=5](<constant:<Magic>>$31, blk, <constant:HasMeth>$124, <constant:HasToProc>$79, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
outerLoops: 1
<block-call>"];

    "bb::Object#foo_5" -> "bb::Object#foo_7" [style="bold"];
    "bb::Object#foo_5" -> "bb::Object#foo_6" [style="tapered"];

    "bb::Object#foo_6" [label = "block[id=6](<constant:<Magic>>$31, blk, <constant:HasMeth>$124, <constant:HasToProc>$79, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
<statTemp>$23 = Solve<::Object#foo#<block>> : untyped
<statTemp>$36 = self : Object
<block-pre-call-temp>$37 = <statTemp>$36.calls_with_object() : untyped
<unconditional>"];

    "bb::Object#foo_6" -> "bb::Object#foo_8" [style="bold"];
    "bb::Object#foo_7" [label = "block[id=7](<constant:<Magic>>$31, blk, <constant:HasMeth>$124, <constant:HasToProc>$79, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
outerLoops: 1
args$5 = load_yield_param(::Object#foo#<block>, 0) : untyped
<statTemp>$28 = :\"meth\" : Symbol(:\"meth\")
<statTemp>$27 = <statTemp>$28.to_proc() : Proc
<statTemp>$32 = args$5.to_a() : untyped
<statTemp>$29 = <constant:<Magic>>$31.<splat>(<statTemp>$32) : untyped
<blockReturnTemp>$26 = <statTemp>$27.call(<statTemp>$29) : untyped
<blockReturnTemp>$34 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$26 : <impossible>
<unconditional>"];

    "bb::Object#foo_7" -> "bb::Object#foo_5" [style="bold"];
    "bb::Object#foo_8" [label = "block[id=8](<constant:<Magic>>$31, blk, <constant:HasMeth>$124, <constant:HasToProc>$79, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
outerLoops: 1
<block-call>"];

    "bb::Object#foo_8" -> "bb::Object#foo_10" [style="bold"];
    "bb::Object#foo_8" -> "bb::Object#foo_9" [style="tapered"];

    "bb::Object#foo_9" [label = "block[id=9](<constant:<Magic>>$31, blk, <constant:HasMeth>$124, <constant:HasToProc>$79, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
<statTemp>$35 = Solve<::Object#foo#<block>> : untyped
<statTemp>$44 = self : Object
<block-pre-call-temp>$45 = <statTemp>$44.calls_with_object() : untyped
<unconditional>"];

    "bb::Object#foo_9" -> "bb::Object#foo_11" [style="bold"];
    "bb::Object#foo_10" [label = "block[id=10](<constant:<Magic>>$31, blk, <constant:HasMeth>$124, <constant:HasToProc>$79, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
outerLoops: 1
x$6 = load_yield_param(::Object#foo#<block>, 0) : untyped
<statTemp>$40 = :\"meth\" : Symbol(:\"meth\")
<statTemp>$39 = <statTemp>$40.to_proc() : Proc
<blockReturnTemp>$38 = <statTemp>$39.call(x$6) : untyped
<blockReturnTemp>$42 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$38 : <impossible>
<unconditional>"];

    "bb::Object#foo_10" -> "bb::Object#foo_8" [style="bold"];
    "bb::Object#foo_11" [label = "block[id=11](<constant:<Magic>>$31, blk, <constant:HasMeth>$124, <constant:HasToProc>$79, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
outerLoops: 1
<block-call>"];

    "bb::Object#foo_11" -> "bb::Object#foo_13" [style="bold"];
    "bb::Object#foo_11" -> "bb::Object#foo_12" [style="tapered"];

    "bb::Object#foo_12" [label = "block[id=12](<constant:<Magic>>$31, blk, <constant:HasMeth>$124, <constant:HasToProc>$79, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
<statTemp>$43 = Solve<::Object#foo#<block>> : untyped
<statTemp>$50 = self : Object
<block-pre-call-temp>$51 = <statTemp>$50.calls_with_object() : untyped
<unconditional>"];

    "bb::Object#foo_12" -> "bb::Object#foo_14" [style="bold"];
    "bb::Object#foo_13" [label = "block[id=13](<constant:<Magic>>$31, blk, <constant:HasMeth>$124, <constant:HasToProc>$79, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
outerLoops: 1
x$7 = load_yield_param(::Object#foo#<block>, 0) : untyped
<blockReturnTemp>$46 = x$7.meth() : untyped
<blockReturnTemp>$48 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$46 : <impossible>
<unconditional>"];

    "bb::Object#foo_13" -> "bb::Object#foo_11" [style="bold"];
    "bb::Object#foo_14" [label = "block[id=14](<constant:<Magic>>$31, blk, <constant:HasMeth>$124, <constant:HasToProc>$79, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
outerLoops: 1
<block-call>"];

    "bb::Object#foo_14" -> "bb::Object#foo_16" [style="bold"];
    "bb::Object#foo_14" -> "bb::Object#foo_15" [style="tapered"];

    "bb::Object#foo_15" [label = "block[id=15](<constant:<Magic>>$31, <constant:HasMeth>$124, <constant:HasToProc>$79, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
<statTemp>$49 = Solve<::Object#foo#<block>> : untyped
<statTemp>$61 = self : Object
<block-pre-call-temp>$62 = <statTemp>$61.calls_with_object() : untyped
<unconditional>"];

    "bb::Object#foo_15" -> "bb::Object#foo_17" [style="bold"];
    "bb::Object#foo_16" [label = "block[id=16](<constant:<Magic>>$31, blk, <constant:HasMeth>$124, <constant:HasToProc>$79, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
outerLoops: 1
<block-pass>$3$8 = load_yield_param(::Object#foo#<block>, 0) : untyped
<statTemp>$53 = blk.to_proc() : untyped
<statTemp>$57 = <block-pass>$3$8.to_a() : untyped
<statTemp>$55 = <constant:<Magic>>$31.<splat>(<statTemp>$57) : untyped
<blockReturnTemp>$52 = <statTemp>$53.call(<statTemp>$55) : untyped
<blockReturnTemp>$59 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$52 : <impossible>
<unconditional>"];

    "bb::Object#foo_16" -> "bb::Object#foo_14" [style="bold"];
    "bb::Object#foo_17" [label = "block[id=17](<constant:<Magic>>$31, <constant:HasMeth>$124, <constant:HasToProc>$79, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
outerLoops: 1
<block-call>"];

    "bb::Object#foo_17" -> "bb::Object#foo_19" [style="bold"];
    "bb::Object#foo_17" -> "bb::Object#foo_18" [style="tapered"];

    "bb::Object#foo_18" [label = "block[id=18](<constant:<Magic>>$31, <constant:HasMeth>$124, <constant:HasToProc>$79, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
<statTemp>$60 = Solve<::Object#foo#<block>> : untyped
<statTemp>$73 = self : Object
<block-pre-call-temp>$74 = <statTemp>$73.calls_with_object() : untyped
<unconditional>"];

    "bb::Object#foo_18" -> "bb::Object#foo_20" [style="bold"];
    "bb::Object#foo_19" [label = "block[id=19](<constant:<Magic>>$31, <constant:HasMeth>$124, <constant:HasToProc>$79, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
outerLoops: 1
<block-pass>$4$9 = load_yield_param(::Object#foo#<block>, 0) : untyped
<statTemp>$66 = self : Object
<statTemp>$65 = <statTemp>$66.returns_lambda() : untyped
<statTemp>$64 = <statTemp>$65.to_proc() : untyped
<statTemp>$69 = <block-pass>$4$9.to_a() : untyped
<statTemp>$67 = <constant:<Magic>>$31.<splat>(<statTemp>$69) : untyped
<blockReturnTemp>$63 = <statTemp>$64.call(<statTemp>$67) : untyped
<blockReturnTemp>$71 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$63 : <impossible>
<unconditional>"];

    "bb::Object#foo_19" -> "bb::Object#foo_17" [style="bold"];
    "bb::Object#foo_20" [label = "block[id=20](<constant:<Magic>>$31, <constant:HasMeth>$124, <constant:HasToProc>$79, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
outerLoops: 1
<block-call>"];

    "bb::Object#foo_20" -> "bb::Object#foo_22" [style="bold"];
    "bb::Object#foo_20" -> "bb::Object#foo_21" [style="tapered"];

    "bb::Object#foo_21" [label = "block[id=21](<constant:<Magic>>$31, <constant:HasMeth>$124, <constant:HasToProc>$79, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
<statTemp>$72 = Solve<::Object#foo#<block>> : untyped
<statTemp>$86 = self : Object
<block-pre-call-temp>$87 = <statTemp>$86.calls_with_object() : untyped
<unconditional>"];

    "bb::Object#foo_21" -> "bb::Object#foo_23" [style="bold"];
    "bb::Object#foo_22" [label = "block[id=22](<constant:<Magic>>$31, <constant:HasMeth>$124, <constant:HasToProc>$79, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
outerLoops: 1
<block-pass>$5$10 = load_yield_param(::Object#foo#<block>, 0) : untyped
<statTemp>$77 = <constant:HasToProc>$79.new() : HasToProc
<statTemp>$76 = <statTemp>$77.to_proc() : untyped
<statTemp>$82 = <block-pass>$5$10.to_a() : untyped
<statTemp>$80 = <constant:<Magic>>$31.<splat>(<statTemp>$82) : untyped
<blockReturnTemp>$75 = <statTemp>$76.call(<statTemp>$80) : untyped
<blockReturnTemp>$84 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$75 : <impossible>
<unconditional>"];

    "bb::Object#foo_22" -> "bb::Object#foo_20" [style="bold"];
    "bb::Object#foo_23" [label = "block[id=23](<constant:<Magic>>$31, <constant:HasMeth>$124, <constant:HasToProc>$79, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
outerLoops: 1
<block-call>"];

    "bb::Object#foo_23" -> "bb::Object#foo_25" [style="bold"];
    "bb::Object#foo_23" -> "bb::Object#foo_24" [style="tapered"];

    "bb::Object#foo_24" [label = "block[id=24](<constant:HasMeth>$124, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
<statTemp>$85 = Solve<::Object#foo#<block>> : untyped
<block-pre-call-temp>$100 = <constant:CallsWithObject>$99.calls_with_object() : untyped
<unconditional>"];

    "bb::Object#foo_24" -> "bb::Object#foo_26" [style="bold"];
    "bb::Object#foo_25" [label = "block[id=25](<constant:<Magic>>$31, <constant:HasMeth>$124, <constant:HasToProc>$79, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
outerLoops: 1
args$11 = load_yield_param(::Object#foo#<block>, 0) : untyped
<statTemp>$90 = <constant:HasToProc>$79.new() : HasToProc
<statTemp>$89 = <statTemp>$90.to_proc() : untyped
<statTemp>$94 = args$11.to_a() : untyped
<statTemp>$92 = <constant:<Magic>>$31.<splat>(<statTemp>$94) : untyped
<blockReturnTemp>$88 = <statTemp>$89.call(<statTemp>$92) : untyped
<blockReturnTemp>$96 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$88 : <impossible>
<unconditional>"];

    "bb::Object#foo_25" -> "bb::Object#foo_23" [style="bold"];
    "bb::Object#foo_26" [label = "block[id=26](<constant:HasMeth>$124, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
outerLoops: 1
<block-call>"];

    "bb::Object#foo_26" -> "bb::Object#foo_28" [style="bold"];
    "bb::Object#foo_26" -> "bb::Object#foo_27" [style="tapered"];

    "bb::Object#foo_27" [label = "block[id=27](<constant:HasMeth>$124, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
<statTemp>$97 = Solve<::Object#foo#<block>> : untyped
<ifTemp>$106 = <constant:CallsWithObject>$99.nil?() : TrueClass | FalseClass
<ifTemp>$106"];

    "bb::Object#foo_27" -> "bb::Object#foo_34" [style="bold"];
    "bb::Object#foo_27" -> "bb::Object#foo_30" [style="tapered"];

    "bb::Object#foo_28" [label = "block[id=28](<constant:HasMeth>$124, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
outerLoops: 1
<block-pass>$6$12 = load_yield_param(::Object#foo#<block>, 0) : untyped
<blockReturnTemp>$101 = <block-pass>$6$12.meth() : untyped
<blockReturnTemp>$103 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$101 : <impossible>
<unconditional>"];

    "bb::Object#foo_28" -> "bb::Object#foo_26" [style="bold"];
    "bb::Object#foo_30" [label = "block[id=30](<constant:HasMeth>$124, <constant:CallsWithObject>$99, <constant:CallsWithObjectChild>$115)
<block-pre-call-temp>$109 = <constant:CallsWithObject>$99.calls_with_object() : untyped
<unconditional>"];

    "bb::Object#foo_30" -> "bb::Object#foo_31" [style="bold"];
    "bb::Object#foo_31" [label = "block[id=31](<constant:HasMeth>$124, <constant:CallsWithObjectChild>$115)
outerLoops: 1
<block-call>"];

    "bb::Object#foo_31" -> "bb::Object#foo_33" [style="bold"];
    "bb::Object#foo_31" -> "bb::Object#foo_32" [style="tapered"];

    "bb::Object#foo_32" [label = "block[id=32](<constant:HasMeth>$124, <constant:CallsWithObjectChild>$115)
<statTemp>$104 = Solve<::Object#foo#<block>> : untyped
<unconditional>"];

    "bb::Object#foo_32" -> "bb::Object#foo_34" [style="bold"];
    "bb::Object#foo_33" [label = "block[id=33](<constant:HasMeth>$124, <constant:CallsWithObjectChild>$115)
outerLoops: 1
<block-pass>$8$13 = load_yield_param(::Object#foo#<block>, 0) : untyped
<blockReturnTemp>$110 = <block-pass>$8$13.meth() : untyped
<blockReturnTemp>$112 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$110 : <impossible>
<unconditional>"];

    "bb::Object#foo_33" -> "bb::Object#foo_31" [style="bold"];
    "bb::Object#foo_34" [label = "block[id=34](<constant:HasMeth>$124, <constant:CallsWithObjectChild>$115)
<block-pre-call-temp>$116 = <constant:CallsWithObjectChild>$115.calls_with_object() : untyped
<unconditional>"];

    "bb::Object#foo_34" -> "bb::Object#foo_35" [style="bold"];
    "bb::Object#foo_35" [label = "block[id=35](<constant:HasMeth>$124)
outerLoops: 1
<block-call>"];

    "bb::Object#foo_35" -> "bb::Object#foo_37" [style="bold"];
    "bb::Object#foo_35" -> "bb::Object#foo_36" [style="tapered"];

    "bb::Object#foo_36" [label = "block[id=36](<constant:HasMeth>$124)
<statTemp>$113 = Solve<::Object#foo#<block>> : untyped
<statTemp>$121 = self : Object
<statTemp>$122 = <constant:HasMeth>$124.new() : HasMeth
<block-pre-call-temp>$125 = <statTemp>$121.calls_arg_with_object(<statTemp>$122) : untyped
<unconditional>"];

    "bb::Object#foo_36" -> "bb::Object#foo_38" [style="bold"];
    "bb::Object#foo_37" [label = "block[id=37](<constant:HasMeth>$124)
outerLoops: 1
<block-pass>$9$14 = load_yield_param(::Object#foo#<block>, 0) : untyped
<blockReturnTemp>$117 = <block-pass>$9$14.meth() : untyped
<blockReturnTemp>$119 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$117 : <impossible>
<unconditional>"];

    "bb::Object#foo_37" -> "bb::Object#foo_35" [style="bold"];
    "bb::Object#foo_38" [label = "block[id=38](<constant:HasMeth>$124)
outerLoops: 1
<block-call>"];

    "bb::Object#foo_38" -> "bb::Object#foo_40" [style="bold"];
    "bb::Object#foo_38" -> "bb::Object#foo_39" [style="tapered"];

    "bb::Object#foo_39" [label = "block[id=39](<constant:HasMeth>$124)
<statTemp>$120 = Solve<::Object#foo#<block>> : untyped
<statTemp>$129 = self : Object
<statTemp>$130 = <constant:HasMeth>$124.new() : HasMeth
<block-pre-call-temp>$132 = <statTemp>$129.calls_arg_with_object(<statTemp>$130) : untyped
<unconditional>"];

    "bb::Object#foo_39" -> "bb::Object#foo_41" [style="bold"];
    "bb::Object#foo_40" [label = "block[id=40](<constant:HasMeth>$124)
outerLoops: 1
<block-pass>$10$15 = load_yield_param(::Object#foo#<block>, 0) : untyped
<blockReturnTemp>$126 = <block-pass>$10$15.meth() : untyped
<blockReturnTemp>$128 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$126 : <impossible>
<unconditional>"];

    "bb::Object#foo_40" -> "bb::Object#foo_38" [style="bold"];
    "bb::Object#foo_41" [label = "block[id=41]()
outerLoops: 1
<block-call>"];

    "bb::Object#foo_41" -> "bb::Object#foo_43" [style="bold"];
    "bb::Object#foo_41" -> "bb::Object#foo_42" [style="tapered"];

    "bb::Object#foo_42" [label = "block[id=42]()
<returnMethodTemp>$15 = Solve<::Object#foo#<block>> : untyped
<finalReturn> = return <returnMethodTemp>$15 : <impossible>
<unconditional>"];

    "bb::Object#foo_42" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_43" [label = "block[id=43]()
outerLoops: 1
x$16 = load_yield_param(::Object#foo#<block>, 0) : untyped
<blockReturnTemp>$133 = x$16.meth() : untyped
<blockReturnTemp>$135 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$133 : <impossible>
<unconditional>"];

    "bb::Object#foo_43" -> "bb::Object#foo_41" [style="bold"];
}

subgraph "cluster_::HasMeth#meth" {
    label = "::HasMeth#meth";
    color = blue;
    "bb::HasMeth#meth_0" [shape = invhouse];
    "bb::HasMeth#meth_1" [shape = parallelogram];

    "bb::HasMeth#meth_0" [label = "block[id=0]()
<returnMethodTemp>$2 = \"meth\" : String(\"meth\")
<finalReturn> = return <returnMethodTemp>$2 : <impossible>
<unconditional>"];

    "bb::HasMeth#meth_0" -> "bb::HasMeth#meth_1" [style="bold"];
    "bb::HasMeth#meth_1" [label = "block[id=1]()
<unconditional>"];

    "bb::HasMeth#meth_1" -> "bb::HasMeth#meth_1" [style="bold"];
}

subgraph "cluster_::HasToProc#to_proc" {
    label = "::HasToProc#to_proc";
    color = blue;
    "bb::HasToProc#to_proc_0" [shape = invhouse];
    "bb::HasToProc#to_proc_1" [shape = parallelogram];

    "bb::HasToProc#to_proc_0" [label = "block[id=0]()
<statTemp>$4 = self : HasToProc
<returnMethodTemp>$2 = <statTemp>$4.returns_lambda() : untyped
<finalReturn> = return <returnMethodTemp>$2 : <impossible>
<unconditional>"];

    "bb::HasToProc#to_proc_0" -> "bb::HasToProc#to_proc_1" [style="bold"];
    "bb::HasToProc#to_proc_1" [label = "block[id=1]()
<unconditional>"];

    "bb::HasToProc#to_proc_1" -> "bb::HasToProc#to_proc_1" [style="bold"];
}

subgraph "cluster_::<Class:CallsWithObject>#calls_with_object" {
    label = "::<Class:CallsWithObject>#calls_with_object";
    color = blue;
    "bb::<Class:CallsWithObject>#calls_with_object_0" [shape = invhouse];
    "bb::<Class:CallsWithObject>#calls_with_object_1" [shape = parallelogram];

    "bb::<Class:CallsWithObject>#calls_with_object_0" [label = "block[id=0]()
<constant:HasMeth>$7 = alias <constant:HasMeth> : <Class:HasMeth>
<selfMethodTemp>$3 = self : <Class:CallsWithObject>
blk = load_arg(<selfMethodTemp>$3#calls_with_object, 0) : untyped
<statTemp>$5 = <constant:HasMeth>$7.new() : HasMeth
<returnMethodTemp>$2 = blk.call(<statTemp>$5) : untyped
<finalReturn> = return <returnMethodTemp>$2 : <impossible>
<unconditional>"];

    "bb::<Class:CallsWithObject>#calls_with_object_0" -> "bb::<Class:CallsWithObject>#calls_with_object_1" [style="bold"];
    "bb::<Class:CallsWithObject>#calls_with_object_1" [label = "block[id=1]()
<unconditional>"];

    "bb::<Class:CallsWithObject>#calls_with_object_1" -> "bb::<Class:CallsWithObject>#calls_with_object_1" [style="bold"];
}

subgraph "cluster_::<Class:CallsWithObjectChild>#calls_with_object" {
    label = "::<Class:CallsWithObjectChild>#calls_with_object";
    color = blue;
    "bb::<Class:CallsWithObjectChild>#calls_with_object_0" [shape = invhouse];
    "bb::<Class:CallsWithObjectChild>#calls_with_object_1" [shape = parallelogram];

    "bb::<Class:CallsWithObjectChild>#calls_with_object_0" [label = "block[id=0]()
<constant:<Magic>>$12 = alias <constant:<Magic>> : <Magic>
<selfMethodTemp>$4 = self : <Class:CallsWithObjectChild>
blk = load_arg(<selfMethodTemp>$4#calls_with_object, 0) : untyped
<statTemp>$5 = self : <Class:CallsWithObjectChild>
<block-pre-call-temp>$6 = <statTemp>$5.super() : untyped
<unconditional>"];

    "bb::<Class:CallsWithObjectChild>#calls_with_object_0" -> "bb::<Class:CallsWithObjectChild>#calls_with_object_2" [style="bold"];
    "bb::<Class:CallsWithObjectChild>#calls_with_object_1" [label = "block[id=1]()
<unconditional>"];

    "bb::<Class:CallsWithObjectChild>#calls_with_object_1" -> "bb::<Class:CallsWithObjectChild>#calls_with_object_1" [style="bold"];
    "bb::<Class:CallsWithObjectChild>#calls_with_object_2" [label = "block[id=2](<constant:<Magic>>$12, blk)
outerLoops: 1
<block-call>"];

    "bb::<Class:CallsWithObjectChild>#calls_with_object_2" -> "bb::<Class:CallsWithObjectChild>#calls_with_object_4" [style="bold"];
    "bb::<Class:CallsWithObjectChild>#calls_with_object_2" -> "bb::<Class:CallsWithObjectChild>#calls_with_object_3" [style="tapered"];

    "bb::<Class:CallsWithObjectChild>#calls_with_object_3" [label = "block[id=3]()
<returnMethodTemp>$3 = Solve<::<Class:CallsWithObjectChild>#calls_with_object#<block>> : untyped
<finalReturn> = return <returnMethodTemp>$3 : <impossible>
<unconditional>"];

    "bb::<Class:CallsWithObjectChild>#calls_with_object_3" -> "bb::<Class:CallsWithObjectChild>#calls_with_object_1" [style="bold"];
    "bb::<Class:CallsWithObjectChild>#calls_with_object_4" [label = "block[id=4](<constant:<Magic>>$12, blk)
outerLoops: 1
<block-pass>$2$2 = load_yield_param(::<Class:CallsWithObjectChild>#calls_with_object#<block>, 0) : untyped
<statTemp>$8 = blk.to_proc() : untyped
<statTemp>$13 = <block-pass>$2$2.to_a() : untyped
<statTemp>$10 = <constant:<Magic>>$12.<splat>(<statTemp>$13) : untyped
<blockReturnTemp>$7 = <statTemp>$8.call(<statTemp>$10) : untyped
<blockReturnTemp>$15 = blockreturn<::<Class:CallsWithObjectChild>#calls_with_object#<block>> <blockReturnTemp>$7 : <impossible>
<unconditional>"];

    "bb::<Class:CallsWithObjectChild>#calls_with_object_4" -> "bb::<Class:CallsWithObjectChild>#calls_with_object_2" [style="bold"];
}

}

