digraph "blockpass.rb" {
subgraph "cluster_::Object#returns_lambda" {
    label = "::Object#returns_lambda";
    color = blue;
    "bb::Object#returns_lambda_0" [shape = invhouse];
    "bb::Object#returns_lambda_1" [shape = parallelogram];

    "bb::Object#returns_lambda_0" [
        label = "block[id=0]()\l<statTemp>$4 = self : Object\l<block-pre-call-temp>$5 = <statTemp>$4.lambda() : AppliedType {\l  klass = ::Proc1\l  targs = [\l    <constant:Return> = T.untyped\l    <constant:Arg0> = T.untyped\l  ]\l}\l<unconditional>\l"
    ];

    "bb::Object#returns_lambda_0" -> "bb::Object#returns_lambda_2" [style="bold"];
    "bb::Object#returns_lambda_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Object#returns_lambda_1" -> "bb::Object#returns_lambda_1" [style="bold"];
    "bb::Object#returns_lambda_2" [
        label = "block[id=2]()\louterLoops: 1\l<block-call>\l"
    ];

    "bb::Object#returns_lambda_2" -> "bb::Object#returns_lambda_4" [style="bold"];
    "bb::Object#returns_lambda_2" -> "bb::Object#returns_lambda_3" [style="tapered"];

    "bb::Object#returns_lambda_3" [
        label = "block[id=3]()\l<returnMethodTemp>$2 = Solve<::Object#returns_lambda#<block>> : AppliedType {\l  klass = ::Proc1\l  targs = [\l    <constant:Return> = T.untyped\l    <constant:Arg0> = T.untyped\l  ]\l}\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#returns_lambda_3" -> "bb::Object#returns_lambda_1" [style="bold"];
    "bb::Object#returns_lambda_4" [
        label = "block[id=4]()\louterLoops: 1\l<blk>$6 = load_yield_params(::Object#returns_lambda#<block>, Object#returns_lambda#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$7 = 0 : Integer(0)\lx$3 = <blk>$6.[](<blk>$7) : T.untyped\l<blockReturnTemp>$8 = \"returns_lambda\" : String(\"returns_lambda\")\l<blockReturnTemp>$9 = blockreturn<::Object#returns_lambda#<block>> <blockReturnTemp>$8 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#returns_lambda_4" -> "bb::Object#returns_lambda_2" [style="bold"];
}

subgraph "cluster_::Object#calls_arg_with_object" {
    label = "::Object#calls_arg_with_object";
    color = blue;
    "bb::Object#calls_arg_with_object_0" [shape = invhouse];
    "bb::Object#calls_arg_with_object_1" [shape = parallelogram];

    "bb::Object#calls_arg_with_object_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3 = self : Object\larg = load_arg(<selfMethodTemp>$3#calls_arg_with_object, 0) : T.untyped\lblk = load_arg(<selfMethodTemp>$3#calls_arg_with_object, 1) : T.untyped\l<returnMethodTemp>$2 = blk.call(arg) : T.untyped\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#calls_arg_with_object_0" -> "bb::Object#calls_arg_with_object_1" [style="bold"];
    "bb::Object#calls_arg_with_object_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Object#calls_arg_with_object_1" -> "bb::Object#calls_arg_with_object_1" [style="bold"];
}

subgraph "cluster_::Object#calls_with_object" {
    label = "::Object#calls_with_object";
    color = blue;
    "bb::Object#calls_with_object_0" [shape = invhouse];
    "bb::Object#calls_with_object_1" [shape = parallelogram];

    "bb::Object#calls_with_object_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3 = self : Object\lblk = load_arg(<selfMethodTemp>$3#calls_with_object, 0) : T.untyped\l<statTemp>$4 = self : Object\l<statTemp>$6 = alias <constant:HasMeth> : <Class:HasMeth>\l<statTemp>$5 = <statTemp>$6.new() : HasMeth\l<block-pre-call-temp>$7 = <statTemp>$4.calls_arg_with_object(<statTemp>$5) : T.untyped\l<unconditional>\l"
    ];

    "bb::Object#calls_with_object_0" -> "bb::Object#calls_with_object_2" [style="bold"];
    "bb::Object#calls_with_object_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Object#calls_with_object_1" -> "bb::Object#calls_with_object_1" [style="bold"];
    "bb::Object#calls_with_object_2" [
        label = "block[id=2](blk)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::Object#calls_with_object_2" -> "bb::Object#calls_with_object_4" [style="bold"];
    "bb::Object#calls_with_object_2" -> "bb::Object#calls_with_object_3" [style="tapered"];

    "bb::Object#calls_with_object_3" [
        label = "block[id=3]()\l<returnMethodTemp>$2 = Solve<::Object#calls_with_object#<block>> : T.untyped\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#calls_with_object_3" -> "bb::Object#calls_with_object_1" [style="bold"];
    "bb::Object#calls_with_object_4" [
        label = "block[id=4](blk)\louterLoops: 1\l<blk>$8 = load_yield_params(::Object#calls_with_object#<block>, Object#calls_with_object#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$9 = 0 : Integer(0)\l<block-pass>$2$4 = <blk>$8.[](<blk>$9) : T.untyped\l<blockReturnTemp>$10 = blk.to_proc() : T.untyped\l<blockReturnTemp>$12 = blockreturn<::Object#calls_with_object#<block>> <blockReturnTemp>$10 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#calls_with_object_4" -> "bb::Object#calls_with_object_2" [style="bold"];
}

subgraph "cluster_::Object#foo" {
    label = "::Object#foo";
    color = blue;
    "bb::Object#foo_0" [shape = invhouse];
    "bb::Object#foo_1" [shape = parallelogram];

    "bb::Object#foo_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3 = self : Object\lblk = load_arg(<selfMethodTemp>$3#foo, 0) : T.untyped\l<statTemp>$5 = self : Object\l<block-pre-call-temp>$6 = <statTemp>$5.calls_with_object() : T.untyped\l<unconditional>\l"
    ];

    "bb::Object#foo_0" -> "bb::Object#foo_2" [style="bold"];
    "bb::Object#foo_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::Object#foo_1" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_2" [
        label = "block[id=2](blk)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::Object#foo_2" -> "bb::Object#foo_4" [style="bold"];
    "bb::Object#foo_2" -> "bb::Object#foo_3" [style="tapered"];

    "bb::Object#foo_3" [
        label = "block[id=3](blk)\l<statTemp>$4 = Solve<::Object#foo#<block>> : T.untyped\l<statTemp>$13 = self : Object\l<block-pre-call-temp>$14 = <statTemp>$13.calls_with_object() : T.untyped\l<unconditional>\l"
    ];

    "bb::Object#foo_3" -> "bb::Object#foo_5" [style="bold"];
    "bb::Object#foo_4" [
        label = "block[id=4](blk)\louterLoops: 1\l<blk>$7 = load_yield_params(::Object#foo#<block>, Object#foo#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$8 = 0 : Integer(0)\l<block-pass>$2$4 = <blk>$7.[](<blk>$8) : T.untyped\l<blockReturnTemp>$9 = <block-pass>$2$4.meth() : T.untyped\l<blockReturnTemp>$11 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$9 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#foo_4" -> "bb::Object#foo_2" [style="bold"];
    "bb::Object#foo_5" [
        label = "block[id=5](blk)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::Object#foo_5" -> "bb::Object#foo_7" [style="bold"];
    "bb::Object#foo_5" -> "bb::Object#foo_6" [style="tapered"];

    "bb::Object#foo_6" [
        label = "block[id=6](blk)\l<statTemp>$12 = Solve<::Object#foo#<block>> : T.untyped\l<statTemp>$26 = self : Object\l<block-pre-call-temp>$27 = <statTemp>$26.calls_with_object() : T.untyped\l<unconditional>\l"
    ];

    "bb::Object#foo_6" -> "bb::Object#foo_8" [style="bold"];
    "bb::Object#foo_7" [
        label = "block[id=7](blk)\louterLoops: 1\l<blk>$15 = load_yield_params(::Object#foo#<block>, Object#foo#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$16 = 0 : Integer(0)\largs$5 = <blk>$15.[](<blk>$16) : T.untyped\l<statTemp>$19 = :\"meth\" : Symbol(:\"meth\")\l<statTemp>$18 = <statTemp>$19.to_proc() : Proc\l<statTemp>$21 = alias <constant:<Magic>> : <Magic>\l<statTemp>$22 = args$5.to_a() : T.untyped\l<statTemp>$20 = <statTemp>$21.<splat>(<statTemp>$22) : T.untyped\l<blockReturnTemp>$17 = <statTemp>$18.call(<statTemp>$20) : T.untyped\l<blockReturnTemp>$24 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$17 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#foo_7" -> "bb::Object#foo_5" [style="bold"];
    "bb::Object#foo_8" [
        label = "block[id=8](blk)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::Object#foo_8" -> "bb::Object#foo_10" [style="bold"];
    "bb::Object#foo_8" -> "bb::Object#foo_9" [style="tapered"];

    "bb::Object#foo_9" [
        label = "block[id=9](blk)\l<statTemp>$25 = Solve<::Object#foo#<block>> : T.untyped\l<statTemp>$36 = self : Object\l<block-pre-call-temp>$37 = <statTemp>$36.calls_with_object() : T.untyped\l<unconditional>\l"
    ];

    "bb::Object#foo_9" -> "bb::Object#foo_11" [style="bold"];
    "bb::Object#foo_10" [
        label = "block[id=10](blk)\louterLoops: 1\l<blk>$28 = load_yield_params(::Object#foo#<block>, Object#foo#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$29 = 0 : Integer(0)\lx$6 = <blk>$28.[](<blk>$29) : T.untyped\l<statTemp>$32 = :\"meth\" : Symbol(:\"meth\")\l<statTemp>$31 = <statTemp>$32.to_proc() : Proc\l<blockReturnTemp>$30 = <statTemp>$31.call(x$6) : T.untyped\l<blockReturnTemp>$34 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$30 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#foo_10" -> "bb::Object#foo_8" [style="bold"];
    "bb::Object#foo_11" [
        label = "block[id=11](blk)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::Object#foo_11" -> "bb::Object#foo_13" [style="bold"];
    "bb::Object#foo_11" -> "bb::Object#foo_12" [style="tapered"];

    "bb::Object#foo_12" [
        label = "block[id=12](blk)\l<statTemp>$35 = Solve<::Object#foo#<block>> : T.untyped\l<statTemp>$44 = self : Object\l<block-pre-call-temp>$45 = <statTemp>$44.calls_with_object() : T.untyped\l<unconditional>\l"
    ];

    "bb::Object#foo_12" -> "bb::Object#foo_14" [style="bold"];
    "bb::Object#foo_13" [
        label = "block[id=13](blk)\louterLoops: 1\l<blk>$38 = load_yield_params(::Object#foo#<block>, Object#foo#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$39 = 0 : Integer(0)\lx$7 = <blk>$38.[](<blk>$39) : T.untyped\l<blockReturnTemp>$40 = x$7.meth() : T.untyped\l<blockReturnTemp>$42 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$40 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#foo_13" -> "bb::Object#foo_11" [style="bold"];
    "bb::Object#foo_14" [
        label = "block[id=14](blk)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::Object#foo_14" -> "bb::Object#foo_16" [style="bold"];
    "bb::Object#foo_14" -> "bb::Object#foo_15" [style="tapered"];

    "bb::Object#foo_15" [
        label = "block[id=15]()\l<statTemp>$43 = Solve<::Object#foo#<block>> : T.untyped\l<statTemp>$52 = self : Object\l<block-pre-call-temp>$53 = <statTemp>$52.calls_with_object() : T.untyped\l<unconditional>\l"
    ];

    "bb::Object#foo_15" -> "bb::Object#foo_17" [style="bold"];
    "bb::Object#foo_16" [
        label = "block[id=16](blk)\louterLoops: 1\l<blk>$46 = load_yield_params(::Object#foo#<block>, Object#foo#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$47 = 0 : Integer(0)\l<block-pass>$3$8 = <blk>$46.[](<blk>$47) : T.untyped\l<blockReturnTemp>$48 = blk.to_proc() : T.untyped\l<blockReturnTemp>$50 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$48 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#foo_16" -> "bb::Object#foo_14" [style="bold"];
    "bb::Object#foo_17" [
        label = "block[id=17]()\louterLoops: 1\l<block-call>\l"
    ];

    "bb::Object#foo_17" -> "bb::Object#foo_19" [style="bold"];
    "bb::Object#foo_17" -> "bb::Object#foo_18" [style="tapered"];

    "bb::Object#foo_18" [
        label = "block[id=18]()\l<statTemp>$51 = Solve<::Object#foo#<block>> : T.untyped\l<statTemp>$61 = self : Object\l<block-pre-call-temp>$62 = <statTemp>$61.calls_with_object() : T.untyped\l<unconditional>\l"
    ];

    "bb::Object#foo_18" -> "bb::Object#foo_20" [style="bold"];
    "bb::Object#foo_19" [
        label = "block[id=19]()\louterLoops: 1\l<blk>$54 = load_yield_params(::Object#foo#<block>, Object#foo#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$55 = 0 : Integer(0)\l<block-pass>$4$9 = <blk>$54.[](<blk>$55) : T.untyped\l<statTemp>$58 = self : Object\l<statTemp>$57 = <statTemp>$58.returns_lambda() : T.untyped\l<blockReturnTemp>$56 = <statTemp>$57.to_proc() : T.untyped\l<blockReturnTemp>$59 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$56 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#foo_19" -> "bb::Object#foo_17" [style="bold"];
    "bb::Object#foo_20" [
        label = "block[id=20]()\louterLoops: 1\l<block-call>\l"
    ];

    "bb::Object#foo_20" -> "bb::Object#foo_22" [style="bold"];
    "bb::Object#foo_20" -> "bb::Object#foo_21" [style="tapered"];

    "bb::Object#foo_21" [
        label = "block[id=21]()\l<statTemp>$60 = Solve<::Object#foo#<block>> : T.untyped\l<statTemp>$70 = self : Object\l<block-pre-call-temp>$71 = <statTemp>$70.calls_with_object() : T.untyped\l<unconditional>\l"
    ];

    "bb::Object#foo_21" -> "bb::Object#foo_23" [style="bold"];
    "bb::Object#foo_22" [
        label = "block[id=22]()\louterLoops: 1\l<blk>$63 = load_yield_params(::Object#foo#<block>, Object#foo#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$64 = 0 : Integer(0)\l<block-pass>$5$10 = <blk>$63.[](<blk>$64) : T.untyped\l<statTemp>$67 = alias <constant:HasToProc> : <Class:HasToProc>\l<statTemp>$66 = <statTemp>$67.new() : HasToProc\l<blockReturnTemp>$65 = <statTemp>$66.to_proc() : T.untyped\l<blockReturnTemp>$68 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$65 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#foo_22" -> "bb::Object#foo_20" [style="bold"];
    "bb::Object#foo_23" [
        label = "block[id=23]()\louterLoops: 1\l<block-call>\l"
    ];

    "bb::Object#foo_23" -> "bb::Object#foo_25" [style="bold"];
    "bb::Object#foo_23" -> "bb::Object#foo_24" [style="tapered"];

    "bb::Object#foo_24" [
        label = "block[id=24]()\l<statTemp>$69 = Solve<::Object#foo#<block>> : T.untyped\l<statTemp>$84 = alias <constant:CallsWithObject> : <Class:CallsWithObject>\l<block-pre-call-temp>$85 = <statTemp>$84.calls_with_object() : T.untyped\l<unconditional>\l"
    ];

    "bb::Object#foo_24" -> "bb::Object#foo_26" [style="bold"];
    "bb::Object#foo_25" [
        label = "block[id=25]()\louterLoops: 1\l<blk>$72 = load_yield_params(::Object#foo#<block>, Object#foo#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$73 = 0 : Integer(0)\largs$11 = <blk>$72.[](<blk>$73) : T.untyped\l<statTemp>$77 = alias <constant:HasToProc> : <Class:HasToProc>\l<statTemp>$76 = <statTemp>$77.new() : HasToProc\l<statTemp>$75 = <statTemp>$76.to_proc() : T.untyped\l<statTemp>$79 = alias <constant:<Magic>> : <Magic>\l<statTemp>$80 = args$11.to_a() : T.untyped\l<statTemp>$78 = <statTemp>$79.<splat>(<statTemp>$80) : T.untyped\l<blockReturnTemp>$74 = <statTemp>$75.call(<statTemp>$78) : T.untyped\l<blockReturnTemp>$82 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$74 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#foo_25" -> "bb::Object#foo_23" [style="bold"];
    "bb::Object#foo_26" [
        label = "block[id=26]()\louterLoops: 1\l<block-call>\l"
    ];

    "bb::Object#foo_26" -> "bb::Object#foo_28" [style="bold"];
    "bb::Object#foo_26" -> "bb::Object#foo_27" [style="tapered"];

    "bb::Object#foo_27" [
        label = "block[id=27]()\l<statTemp>$83 = Solve<::Object#foo#<block>> : T.untyped\l<assignTemp$7 = alias <constant:CallsWithObject> : <Class:CallsWithObject>\l<ifTemp>$93 = <assignTemp$7.nil?() : TrueClass | FalseClass\l<ifTemp>$93\l"
    ];

    "bb::Object#foo_27" -> "bb::Object#foo_34" [style="bold"];
    "bb::Object#foo_27" -> "bb::Object#foo_30" [style="tapered"];

    "bb::Object#foo_28" [
        label = "block[id=28]()\louterLoops: 1\l<blk>$86 = load_yield_params(::Object#foo#<block>, Object#foo#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$87 = 0 : Integer(0)\l<block-pass>$6$12 = <blk>$86.[](<blk>$87) : T.untyped\l<blockReturnTemp>$88 = <block-pass>$6$12.meth() : T.untyped\l<blockReturnTemp>$90 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$88 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#foo_28" -> "bb::Object#foo_26" [style="bold"];
    "bb::Object#foo_30" [
        label = "block[id=30](<assignTemp$7)\l<block-pre-call-temp>$96 = <assignTemp$7.calls_with_object() : T.untyped\l<unconditional>\l"
    ];

    "bb::Object#foo_30" -> "bb::Object#foo_31" [style="bold"];
    "bb::Object#foo_31" [
        label = "block[id=31]()\louterLoops: 1\l<block-call>\l"
    ];

    "bb::Object#foo_31" -> "bb::Object#foo_33" [style="bold"];
    "bb::Object#foo_31" -> "bb::Object#foo_32" [style="tapered"];

    "bb::Object#foo_32" [
        label = "block[id=32]()\l<statTemp>$91 = Solve<::Object#foo#<block>> : T.untyped\l<unconditional>\l"
    ];

    "bb::Object#foo_32" -> "bb::Object#foo_34" [style="bold"];
    "bb::Object#foo_33" [
        label = "block[id=33]()\louterLoops: 1\l<blk>$97 = load_yield_params(::Object#foo#<block>, Object#foo#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$98 = 0 : Integer(0)\l<block-pass>$8$13 = <blk>$97.[](<blk>$98) : T.untyped\l<blockReturnTemp>$99 = <block-pass>$8$13.meth() : T.untyped\l<blockReturnTemp>$101 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$99 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#foo_33" -> "bb::Object#foo_31" [style="bold"];
    "bb::Object#foo_34" [
        label = "block[id=34]()\l<statTemp>$103 = alias <constant:CallsWithObjectChild> : <Class:CallsWithObjectChild>\l<block-pre-call-temp>$104 = <statTemp>$103.calls_with_object() : T.untyped\l<unconditional>\l"
    ];

    "bb::Object#foo_34" -> "bb::Object#foo_35" [style="bold"];
    "bb::Object#foo_35" [
        label = "block[id=35]()\louterLoops: 1\l<block-call>\l"
    ];

    "bb::Object#foo_35" -> "bb::Object#foo_37" [style="bold"];
    "bb::Object#foo_35" -> "bb::Object#foo_36" [style="tapered"];

    "bb::Object#foo_36" [
        label = "block[id=36]()\l<statTemp>$102 = Solve<::Object#foo#<block>> : T.untyped\l<statTemp>$111 = self : Object\l<statTemp>$113 = alias <constant:HasMeth> : <Class:HasMeth>\l<statTemp>$112 = <statTemp>$113.new() : HasMeth\l<block-pre-call-temp>$114 = <statTemp>$111.calls_arg_with_object(<statTemp>$112) : T.untyped\l<unconditional>\l"
    ];

    "bb::Object#foo_36" -> "bb::Object#foo_38" [style="bold"];
    "bb::Object#foo_37" [
        label = "block[id=37]()\louterLoops: 1\l<blk>$105 = load_yield_params(::Object#foo#<block>, Object#foo#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$106 = 0 : Integer(0)\l<block-pass>$9$14 = <blk>$105.[](<blk>$106) : T.untyped\l<blockReturnTemp>$107 = <block-pass>$9$14.meth() : T.untyped\l<blockReturnTemp>$109 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$107 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#foo_37" -> "bb::Object#foo_35" [style="bold"];
    "bb::Object#foo_38" [
        label = "block[id=38]()\louterLoops: 1\l<block-call>\l"
    ];

    "bb::Object#foo_38" -> "bb::Object#foo_40" [style="bold"];
    "bb::Object#foo_38" -> "bb::Object#foo_39" [style="tapered"];

    "bb::Object#foo_39" [
        label = "block[id=39]()\l<statTemp>$110 = Solve<::Object#foo#<block>> : T.untyped\l<statTemp>$120 = self : Object\l<statTemp>$122 = alias <constant:HasMeth> : <Class:HasMeth>\l<statTemp>$121 = <statTemp>$122.new() : HasMeth\l<block-pre-call-temp>$123 = <statTemp>$120.calls_arg_with_object(<statTemp>$121) : T.untyped\l<unconditional>\l"
    ];

    "bb::Object#foo_39" -> "bb::Object#foo_41" [style="bold"];
    "bb::Object#foo_40" [
        label = "block[id=40]()\louterLoops: 1\l<blk>$115 = load_yield_params(::Object#foo#<block>, Object#foo#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$116 = 0 : Integer(0)\l<block-pass>$10$15 = <blk>$115.[](<blk>$116) : T.untyped\l<blockReturnTemp>$117 = <block-pass>$10$15.meth() : T.untyped\l<blockReturnTemp>$119 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$117 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#foo_40" -> "bb::Object#foo_38" [style="bold"];
    "bb::Object#foo_41" [
        label = "block[id=41]()\louterLoops: 1\l<block-call>\l"
    ];

    "bb::Object#foo_41" -> "bb::Object#foo_43" [style="bold"];
    "bb::Object#foo_41" -> "bb::Object#foo_42" [style="tapered"];

    "bb::Object#foo_42" [
        label = "block[id=42]()\l<returnMethodTemp>$2 = Solve<::Object#foo#<block>> : T.untyped\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#foo_42" -> "bb::Object#foo_1" [style="bold"];
    "bb::Object#foo_43" [
        label = "block[id=43]()\louterLoops: 1\l<blk>$124 = load_yield_params(::Object#foo#<block>, Object#foo#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$125 = 0 : Integer(0)\lx$16 = <blk>$124.[](<blk>$125) : T.untyped\l<blockReturnTemp>$126 = x$16.meth() : T.untyped\l<blockReturnTemp>$128 = blockreturn<::Object#foo#<block>> <blockReturnTemp>$126 : <impossible>\l<unconditional>\l"
    ];

    "bb::Object#foo_43" -> "bb::Object#foo_41" [style="bold"];
}

subgraph "cluster_#<static-init>" {
    label = "#<static-init>";
    color = blue;
    "bb#<static-init>_0" [shape = invhouse];
    "bb#<static-init>_1" [shape = parallelogram];

    "bb#<static-init>_0" [
        label = "block[id=0]()\l<statTemp>$6 = alias <constant:RubyTyper> : <Class:RubyTyper>\l<statTemp>$7 = alias <constant:HasMeth> : <Class:HasMeth>\l<statTemp>$5 = <statTemp>$6.keep_for_ide(<statTemp>$7) : T.untyped\l<statTemp>$10 = alias <constant:RubyTyper> : <Class:RubyTyper>\l<statTemp>$11 = alias <constant:HasToProc> : <Class:HasToProc>\l<statTemp>$9 = <statTemp>$10.keep_for_ide(<statTemp>$11) : T.untyped\l<statTemp>$14 = alias <constant:RubyTyper> : <Class:RubyTyper>\l<statTemp>$15 = alias <constant:CallsWithObject> : <Class:CallsWithObject>\l<statTemp>$13 = <statTemp>$14.keep_for_ide(<statTemp>$15) : T.untyped\l<statTemp>$18 = alias <constant:RubyTyper> : <Class:RubyTyper>\l<statTemp>$19 = alias <constant:CallsWithObjectChild> : <Class:CallsWithObjectChild>\l<statTemp>$17 = <statTemp>$18.keep_for_ide(<statTemp>$19) : T.untyped\l<statTemp>$21 = alias <constant:RubyTyper> : <Class:RubyTyper>\l<statTemp>$22 = alias <constant:CallsWithObject> : <Class:CallsWithObject>\l<statTemp>$20 = <statTemp>$21.keep_for_ide(<statTemp>$22) : T.untyped\l<statTemp>$24 = self : <Class:<root>>\l<block-pre-call-temp>$25 = <statTemp>$24.foo() : T.untyped\l<unconditional>\l"
    ];

    "bb#<static-init>_0" -> "bb#<static-init>_2" [style="bold"];
    "bb#<static-init>_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb#<static-init>_1" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_2" [
        label = "block[id=2]()\louterLoops: 1\l<block-call>\l"
    ];

    "bb#<static-init>_2" -> "bb#<static-init>_4" [style="bold"];
    "bb#<static-init>_2" -> "bb#<static-init>_3" [style="tapered"];

    "bb#<static-init>_3" [
        label = "block[id=3]()\l<statTemp>$23 = Solve<#<static-init>#<block>> : T.untyped\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb#<static-init>_3" -> "bb#<static-init>_1" [style="bold"];
    "bb#<static-init>_4" [
        label = "block[id=4]()\louterLoops: 1\l<blk>$26 = load_yield_params(#<static-init>#<block>, <static-init>#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$27 = 0 : Integer(0)\lx$17 = <blk>$26.[](<blk>$27) : T.untyped\l<blockReturnTemp>$28 = \"foo\" : String(\"foo\")\l<blockReturnTemp>$29 = blockreturn<#<static-init>#<block>> <blockReturnTemp>$28 : <impossible>\l<unconditional>\l"
    ];

    "bb#<static-init>_4" -> "bb#<static-init>_2" [style="bold"];
}

subgraph "cluster_::HasMeth#meth" {
    label = "::HasMeth#meth";
    color = blue;
    "bb::HasMeth#meth_0" [shape = invhouse];
    "bb::HasMeth#meth_1" [shape = parallelogram];

    "bb::HasMeth#meth_0" [
        label = "block[id=0]()\l<returnMethodTemp>$2 = \"meth\" : String(\"meth\")\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::HasMeth#meth_0" -> "bb::HasMeth#meth_1" [style="bold"];
    "bb::HasMeth#meth_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::HasMeth#meth_1" -> "bb::HasMeth#meth_1" [style="bold"];
}

subgraph "cluster_::HasToProc#to_proc" {
    label = "::HasToProc#to_proc";
    color = blue;
    "bb::HasToProc#to_proc_0" [shape = invhouse];
    "bb::HasToProc#to_proc_1" [shape = parallelogram];

    "bb::HasToProc#to_proc_0" [
        label = "block[id=0]()\l<statTemp>$4 = self : HasToProc\l<returnMethodTemp>$2 = <statTemp>$4.returns_lambda() : T.untyped\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::HasToProc#to_proc_0" -> "bb::HasToProc#to_proc_1" [style="bold"];
    "bb::HasToProc#to_proc_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::HasToProc#to_proc_1" -> "bb::HasToProc#to_proc_1" [style="bold"];
}

subgraph "cluster_::<Class:CallsWithObject>#calls_with_object" {
    label = "::<Class:CallsWithObject>#calls_with_object";
    color = blue;
    "bb::<Class:CallsWithObject>#calls_with_object_0" [shape = invhouse];
    "bb::<Class:CallsWithObject>#calls_with_object_1" [shape = parallelogram];

    "bb::<Class:CallsWithObject>#calls_with_object_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3 = self : <Class:CallsWithObject>\lblk = load_arg(<selfMethodTemp>$3#calls_with_object, 0) : T.untyped\l<statTemp>$6 = alias <constant:HasMeth> : <Class:HasMeth>\l<statTemp>$5 = <statTemp>$6.new() : HasMeth\l<returnMethodTemp>$2 = blk.call(<statTemp>$5) : T.untyped\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:CallsWithObject>#calls_with_object_0" -> "bb::<Class:CallsWithObject>#calls_with_object_1" [style="bold"];
    "bb::<Class:CallsWithObject>#calls_with_object_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:CallsWithObject>#calls_with_object_1" -> "bb::<Class:CallsWithObject>#calls_with_object_1" [style="bold"];
}

subgraph "cluster_::<Class:CallsWithObjectChild>#calls_with_object" {
    label = "::<Class:CallsWithObjectChild>#calls_with_object";
    color = blue;
    "bb::<Class:CallsWithObjectChild>#calls_with_object_0" [shape = invhouse];
    "bb::<Class:CallsWithObjectChild>#calls_with_object_1" [shape = parallelogram];

    "bb::<Class:CallsWithObjectChild>#calls_with_object_0" [
        label = "block[id=0]()\l<selfMethodTemp>$3 = self : <Class:CallsWithObjectChild>\lblk = load_arg(<selfMethodTemp>$3#calls_with_object, 0) : T.untyped\l<statTemp>$4 = self : <Class:CallsWithObjectChild>\l<block-pre-call-temp>$5 = <statTemp>$4.super() : T.untyped\l<unconditional>\l"
    ];

    "bb::<Class:CallsWithObjectChild>#calls_with_object_0" -> "bb::<Class:CallsWithObjectChild>#calls_with_object_2" [style="bold"];
    "bb::<Class:CallsWithObjectChild>#calls_with_object_1" [
        label = "block[id=1]()\l<unconditional>\l"
    ];

    "bb::<Class:CallsWithObjectChild>#calls_with_object_1" -> "bb::<Class:CallsWithObjectChild>#calls_with_object_1" [style="bold"];
    "bb::<Class:CallsWithObjectChild>#calls_with_object_2" [
        label = "block[id=2](blk)\louterLoops: 1\l<block-call>\l"
    ];

    "bb::<Class:CallsWithObjectChild>#calls_with_object_2" -> "bb::<Class:CallsWithObjectChild>#calls_with_object_4" [style="bold"];
    "bb::<Class:CallsWithObjectChild>#calls_with_object_2" -> "bb::<Class:CallsWithObjectChild>#calls_with_object_3" [style="tapered"];

    "bb::<Class:CallsWithObjectChild>#calls_with_object_3" [
        label = "block[id=3]()\l<returnMethodTemp>$2 = Solve<::<Class:CallsWithObjectChild>#calls_with_object#<block>> : T.untyped\l<finalReturn> = return <returnMethodTemp>$2 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:CallsWithObjectChild>#calls_with_object_3" -> "bb::<Class:CallsWithObjectChild>#calls_with_object_1" [style="bold"];
    "bb::<Class:CallsWithObjectChild>#calls_with_object_4" [
        label = "block[id=4](blk)\louterLoops: 1\l<blk>$6 = load_yield_params(::<Class:CallsWithObjectChild>#calls_with_object#<block>, CallsWithObjectChild.calls_with_object#<block>) : TupleType {\l  0 = T.untyped\l}\l<blk>$7 = 0 : Integer(0)\l<block-pass>$2$2 = <blk>$6.[](<blk>$7) : T.untyped\l<blockReturnTemp>$8 = blk.to_proc() : T.untyped\l<blockReturnTemp>$10 = blockreturn<::<Class:CallsWithObjectChild>#calls_with_object#<block>> <blockReturnTemp>$8 : <impossible>\l<unconditional>\l"
    ];

    "bb::<Class:CallsWithObjectChild>#calls_with_object_4" -> "bb::<Class:CallsWithObjectChild>#calls_with_object_2" [style="bold"];
}

}

