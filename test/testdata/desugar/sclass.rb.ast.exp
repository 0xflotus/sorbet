class <emptyTree><<C <U <root>>>> < ()
  class <emptyTree>::<C <U A>><<C <U <todo sym>>>> < (::<todo sym>)
    <emptyTree>
  end

  <emptyTree>

  class <emptyTree>::<C <U B>><<C <U <todo sym>>>> < (::<todo sym>)
    class <U <singleton class>><<C <U <todo sym>>>> < ()
      def <U b><<C <U <todo sym>>>>(&<U <blk>>)
        "b"
      end
    end
  end

  <U $c> = <emptyTree>::<C <U Object>>.<U new>()

  <emptyTree>

  class <emptyTree>::<C <U D>><<C <U <todo sym>>>> < (::<todo sym>)
    class <U <singleton class>><<C <U <todo sym>>>> < ()
      class <U <singleton class>><<C <U <todo sym>>>> < ()
        def <U d><<C <U <todo sym>>>>(&<U <blk>>)
          "d"
        end
      end
    end
  end

  class <emptyTree>::<C <U E>><<C <U <todo sym>>>> < (::<todo sym>)
    class <U <singleton class>><<C <U <todo sym>>>> < ()
      def <U wrapper><<C <U <todo sym>>>>(&<U <blk>>)
        def <U e><<C <U <todo sym>>>>(&<U <blk>>)
          "e"
        end
      end
    end

    self(<C <U <todo sym>>>).<U wrapper>()
  end

  class <emptyTree>::<C <U F>><<C <U <todo sym>>>> < (::<todo sym>)
    class <U <singleton class>><<C <U <todo sym>>>> < ()
      def <U initialize><<C <U <todo sym>>>>(&<U <blk>>)
        <U @f> = <emptyTree>::<C <U T>>.<U let>(0, <emptyTree>::<C <U Integer>>)
      end

      self(<C <U <todo sym>>>).<U extend>(<emptyTree>::<C <U T>>::<C <U Sig>>)

      self(<C <U <todo sym>>>).<U sig>() do ||
        self(<C <U <todo sym>>>).<U params>({:"f" => <emptyTree>::<C <U Integer>>}).<U returns>(<emptyTree>::<C <U Integer>>)
      end

      self(<C <U <todo sym>>>).<U attr_writer>(:"f")
    end
  end

  class <emptyTree>::<C <U G>><<C <U <todo sym>>>> < (::<todo sym>)
    def <U wrapper><<C <U <todo sym>>>>(&<U <blk>>)
      begin
        class <U <singleton class>><<C <U <todo sym>>>> < ()
          def <U inner><<C <U <todo sym>>>>(&<U <blk>>)
            <emptyTree>::<C <U T>>.<U reveal_type>(self(<C <U <todo sym>>>))
          end
        end
        self(<C <U <todo sym>>>).<U inner>()
      end
    end

    def self.<U g><<C <U <todo sym>>>>(&<U <blk>>)
      "g"
    end
  end

  class <emptyTree>::<C <U H>><<C <U <todo sym>>>> < (::<todo sym>)
    class <U <singleton class>><<C <U <todo sym>>>> < ()
      class <emptyTree>::<C <U H2>><<C <U <todo sym>>>> < (::<todo sym>)
        def self.<U h><<C <U <todo sym>>>>(&<U <blk>>)
          "h"
        end
      end
    end
  end

  def <U main><<C <U <todo sym>>>>(&<U <blk>>)
    begin
      self(<C <U <todo sym>>>).<U puts>(<emptyTree>::<C <U A>>.<U a>())
      self(<C <U <todo sym>>>).<U puts>(<emptyTree>::<C <U B>>.<U b>())
      self(<C <U <todo sym>>>).<U puts>(<U $c>.<U c>())
      self(<C <U <todo sym>>>).<U puts>(<emptyTree>::<C <U D>>.<U singleton_class>().<U d>())
      self(<C <U <todo sym>>>).<U puts>(<emptyTree>::<C <U E>>.<U e>())
      self(<C <U <todo sym>>>).<U puts>(<emptyTree>::<C <U F>>.<U f=>(91))
      self(<C <U <todo sym>>>).<U puts>(<emptyTree>::<C <U G>>.<U new>().<U wrapper>())
      self(<C <U <todo sym>>>).<U puts>(<emptyTree>::<C <U H>>.<U singleton_class>()::<C <U H2>>.<U h>())
    end
  end

  self(<C <U <todo sym>>>).<U main>()
end
