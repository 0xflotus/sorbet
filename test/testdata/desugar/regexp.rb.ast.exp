class <emptyTree><<constant:<root>>> < ()
  def foo<<constant:<todo sym>>>()
    begin
      ::Regexp.new("abc", 0)
      <emptyTree>::<constant:Regexp>.new("abc")
      ::Regexp.new("abc", 0.|(1))
      <emptyTree>::<constant:Regexp>.new("abc", <emptyTree>::<constant:Regexp>::<constant:IGNORECASE>)
      ::Regexp.new("abc", 0.|(1).|(2).|(4))
      <emptyTree>::<constant:Regexp>.new("abc", 0.|(<emptyTree>::<constant:Regexp>::<constant:IGNORECASE>).|(<emptyTree>::<constant:Regexp>::<constant:EXTENDED>).|(<emptyTree>::<constant:Regexp>::<constant:MULTILINE>))
      a = "a"
      c = "c"
      ::Regexp.new(a.to_s().concat("b".to_s()).concat(c.to_s()), 0)
      <emptyTree>::<constant:Regexp>.new(a.+("b").+(c))
      ::Regexp.new("abc", 0)
    end
  end
end
