class <emptyTree><<C <U <root>>>> < ()
  def <U foo><<C <U <todo sym>>>>(&<U <blk>>)
    begin
      ::Regexp.<U new>("abc", 0)
      <emptyTree>::<C <U Regexp>>.<U new>("abc")
      ::Regexp.<U new>("abc", 0.<U |>(1))
      <emptyTree>::<C <U Regexp>>.<U new>("abc", <emptyTree>::<C <U Regexp>>::<C <U IGNORECASE>>)
      ::Regexp.<U new>("abc", 0.<U |>(1).<U |>(2).<U |>(4))
      <emptyTree>::<C <U Regexp>>.<U new>("abc", 0.<U |>(<emptyTree>::<C <U Regexp>>::<C <U IGNORECASE>>).<U |>(<emptyTree>::<C <U Regexp>>::<C <U EXTENDED>>).<U |>(<emptyTree>::<C <U Regexp>>::<C <U MULTILINE>>))
      <U a> = "a"
      <U c> = "c"
      ::Regexp.<U new>(<U a>.<U to_s>().<U concat>("b").<U concat>(<U c>.<U to_s>()), 0)
      <emptyTree>::<C <U Regexp>>.<U new>(<U a>.<U +>("b").<U +>(<U c>))
      ::Regexp.<U new>("abc", 0)
    end
  end
end
