Integer {
  val = "1"
}
{
  "type" : "Integer",
  "val" : "1"
}
class <emptyTree><<constant:<root>>> < ()
  1
end
ClassDef{
  name = EmptyTree<<constant:<root>>>
  ancestors = []
  rhs = [
    IntLit{ value = 1 }
  ]
}
class <emptyTree><<constant:<root>>> < ()
  1
end
ClassDef{
  name = EmptyTree<<constant:<root>>>
  ancestors = []
  rhs = [
    IntLit{ value = 1 }
  ]
}
class <constant:<root>> < ::<constant:Object> () -> <Class:<root>> @ -e:1
  method <static-init>$8 () @ -e:1

class <constant:<root>> < ::<constant:Object> () -> <Class:<root>> @ -e:1
  class <constant:<<JUNK>>> () -> <Class:<<JUNK>>> @ ???
  class <constant:<<RESERVED>>0> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>10> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>11> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>12> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>13> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>14> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>15> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>16> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>17> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>18> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>19> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>1> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>20> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>21> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>22> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>23> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>24> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>25> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>26> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>27> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>28> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>29> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>2> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>30> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>31> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>32> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>33> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>34> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>35> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>36> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>37> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>38> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>39> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>3> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>40> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>41> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>42> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>43> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>44> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>45> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>46> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>47> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>48> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>49> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>4> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>50> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>51> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>52> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>53> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>54> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>55> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>56> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>57> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>58> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>59> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>5> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>60> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>61> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>62> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>63> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>64> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>65> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>66> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>67> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>68> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>69> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>6> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>70> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>71> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>72> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>73> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>74> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>75> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>76> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>77> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>78> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>79> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>7> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>80> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>81> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>82> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>83> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>84> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>85> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>86> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>87> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>88> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>89> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>8> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>90> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>91> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>92> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>93> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>94> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>95> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>96> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>97> < ::<constant:Object> () @ ???
  class <constant:<<RESERVED>>9> < ::<constant:Object> () @ ???
  class <constant:<Magic>> < ::<constant:Object> () -> <Magic> @ ???
    method <build-array> (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ ???
      argument arg0<repeated> -> Object @ ???
    method <build-hash> (arg0) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ ???
      argument arg0<repeated> -> Object @ ???
    method <splat> (arg0) -> untyped @ ???
      argument arg0<> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = untyped
        ]
      } @ ???
  class <constant:<bottom>> () @ ???
  class <constant:<none>> () @ ???
  class <constant:<todo sym>> () -> <Class:<todo sym>> @ ???
  class <constant:<top>> () @ ???
  class <constant:Abbrev> (<constant:BasicObject>) -> <Class:Abbrev> @ rbi/stdlib.rbi:2182
  class <constant:ArgumentError> < ::<constant:StandardError> () -> <Class:ArgumentError> @ rbi/stdlib.rbi:2190
    method clone () -> ArgumentError @ rbi/stdlib.rbi:2192
    method dup () -> ArgumentError @ rbi/stdlib.rbi:2195
    method freeze () -> ArgumentError @ rbi/stdlib.rbi:2198
    method taint () -> ArgumentError @ rbi/stdlib.rbi:2201
    method trust () -> ArgumentError @ rbi/stdlib.rbi:2204
    method untaint () -> ArgumentError @ rbi/stdlib.rbi:2207
    method untrust () -> ArgumentError @ rbi/stdlib.rbi:2210
  class <constant:Array>[<constant:Elem>] < ::<constant:Object> (<constant:Enumerable>) -> <Class:Array> @ rbi/stdlib.rbi:2213
    method & (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2227
      argument arg0<> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2224
    method * (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2237
      argument arg0<> -> Integer @ rbi/stdlib.rbi:2230
    method + (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2247
      argument arg0<> -> AppliedType {
        klass = ::<constant:Enumerable>
        targs = [
          <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2240
    method - (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2253
      argument arg0<> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2250
    method << (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2259
      argument arg0<> -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2256
    method <overload N.1 : *> (arg0) -> String @ rbi/stdlib.rbi:2233
      argument arg0<> -> String @ rbi/stdlib.rbi:2234
    method <overload N.1 : +> (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2243
      argument arg0<> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2244
    method <overload N.1 : []=> (arg0, arg1, arg2) -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2281
      argument arg0<> -> Integer @ rbi/stdlib.rbi:2282
      argument arg1<> -> Integer @ rbi/stdlib.rbi:2283
      argument arg2<optional> -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2284
    method <overload N.1 : []> (arg0) -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2265
      argument arg0<> -> Integer | Float @ rbi/stdlib.rbi:2266
      argument arg1<optional> @ rbi/stdlib.rbi:2274
    method <overload N.1 : collect> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2316
      argument blk<block> @ rbi/stdlib.rbi:2317
    method <overload N.1 : combination> (arg0) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2324
      argument arg0<> -> Integer @ rbi/stdlib.rbi:2325
      argument blk<block> @ rbi/stdlib.rbi:2328
    method <overload N.1 : count> (arg0) -> Integer @ rbi/stdlib.rbi:2343
      argument arg0<optional> -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2344
      argument blk<block> @ rbi/stdlib.rbi:2351
    method <overload N.1 : cycle> (arg0) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2358
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:2359
      argument blk<block> @ rbi/stdlib.rbi:2362
    method <overload N.1 : delete> (blk) -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2368
      argument arg0<optional> @ rbi/stdlib.rbi:2372
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc0>
        targs = [
          <constant:Return> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2369
    method <overload N.1 : delete_if> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2384
      argument blk<block> @ rbi/stdlib.rbi:2385
    method <overload N.1 : drop_while> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2397
      argument blk<block> @ rbi/stdlib.rbi:2398
    method <overload N.1 : each> (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2404
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2405
    method <overload N.1 : each_index> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2414
      argument blk<block> @ rbi/stdlib.rbi:2415
    method <overload N.1 : fetch> (arg0, arg1) -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2424
      argument arg0<> -> Integer @ rbi/stdlib.rbi:2425
      argument arg1<optional> -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2426
      argument blk<block> @ rbi/stdlib.rbi:2434
    method <overload N.1 : fill> (arg0, arg1, arg2) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2440
      argument arg0<optional> -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2441
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:2442
      argument arg2<optional> -> Integer @ rbi/stdlib.rbi:2443
      argument blk<block> @ rbi/stdlib.rbi:2466
    method <overload N.1 : first> (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2469
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:2470
    method <overload N.1 : index> (blk) -> Integer @ rbi/stdlib.rbi:2491
      argument arg0<optional> @ rbi/stdlib.rbi:2496
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2492
    method <overload N.1 : initialize> (arg0) -> Object @ rbi/stdlib.rbi:2499
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:2500
      argument arg1<optional> @ rbi/stdlib.rbi:2508
    method <overload N.1 : last> (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2533
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:2534
    method <overload N.1 : map!> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2553
      argument blk<block> @ rbi/stdlib.rbi:2554
    method <overload N.1 : map> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2546
      argument blk<block> @ rbi/stdlib.rbi:2547
    method <overload N.1 : permutation> (arg0, blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2566
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:2567
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = AppliedType {
              klass = ::<constant:Array>
              targs = [
                <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
              ]
            }
        ]
      } @ rbi/stdlib.rbi:2568
    method <overload N.1 : pop> () -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2577
      argument arg0<optional> @ rbi/stdlib.rbi:2578
    method <overload N.1 : reject!> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2609
      argument blk<block> @ rbi/stdlib.rbi:2610
    method <overload N.1 : reject> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2602
      argument blk<block> @ rbi/stdlib.rbi:2603
    method <overload N.1 : repeated_combination> (arg0) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2617
      argument arg0<> -> Integer @ rbi/stdlib.rbi:2618
      argument blk<block> @ rbi/stdlib.rbi:2621
    method <overload N.1 : repeated_permutation> (arg0) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2628
      argument arg0<> -> Integer @ rbi/stdlib.rbi:2629
      argument blk<block> @ rbi/stdlib.rbi:2632
    method <overload N.1 : reverse_each> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2644
      argument blk<block> @ rbi/stdlib.rbi:2645
    method <overload N.1 : rindex> (blk) -> Integer @ rbi/stdlib.rbi:2651
      argument arg0<optional> @ rbi/stdlib.rbi:2656
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2652
    method <overload N.1 : sample> (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2671
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:2672
    method <overload N.1 : select!> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2688
      argument blk<block> @ rbi/stdlib.rbi:2689
    method <overload N.1 : select> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2681
      argument blk<block> @ rbi/stdlib.rbi:2682
    method <overload N.1 : shift> (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2692
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:2693
    method <overload N.1 : slice!> (arg0, arg1) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2708
      argument arg0<> -> Integer @ rbi/stdlib.rbi:2709
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:2710
    method <overload N.1 : slice> (arg0) -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2811
      argument arg0<> -> Integer | Float @ rbi/stdlib.rbi:2812
      argument arg1<optional> @ rbi/stdlib.rbi:2820
    method <overload N.1 : sort!> (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2727
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = Integer
          <constant:Arg0> = LambdaParam(::<constant:Array>#<constant:Elem>)
          <constant:Arg1> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2728
    method <overload N.1 : sort> (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2720
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = Integer
          <constant:Arg0> = LambdaParam(::<constant:Array>#<constant:Elem>)
          <constant:Arg1> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2721
    method <overload N.1 : sort_by!> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2737
      argument blk<block> @ rbi/stdlib.rbi:2738
    method <overload N.1 : take_while> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2753
      argument blk<block> @ rbi/stdlib.rbi:2754
    method <overload N.2 : []=> (arg0, arg1) -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2287
      argument arg0<> -> AppliedType {
        klass = ::<constant:Range>
        targs = [
          <constant:Elem> = Integer
        ]
      } @ rbi/stdlib.rbi:2288
      argument arg1<> -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2289
      argument arg2<optional> @ rbi/stdlib.rbi:2292
    method <overload N.2 : []> (arg0, arg1) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2269
      argument arg0<> -> Integer @ rbi/stdlib.rbi:2270
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:2271
    method <overload N.2 : count> (blk) -> Integer @ rbi/stdlib.rbi:2347
      argument arg0<optional> @ rbi/stdlib.rbi:2351
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2348
    method <overload N.2 : fetch> (arg0, blk) -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2429
      argument arg0<> -> Integer @ rbi/stdlib.rbi:2430
      argument arg1<optional> @ rbi/stdlib.rbi:2434
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = LambdaParam(::<constant:Array>#<constant:Elem>)
          <constant:Arg0> = Integer
        ]
      } @ rbi/stdlib.rbi:2431
    method <overload N.2 : fill> (arg0, arg1) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2446
      argument arg0<optional> -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2447
      argument arg1<optional> -> AppliedType {
        klass = ::<constant:Range>
        targs = [
          <constant:Elem> = Integer
        ]
      } @ rbi/stdlib.rbi:2448
      argument arg2<optional> @ rbi/stdlib.rbi:2466
      argument blk<block> @ rbi/stdlib.rbi:2466
    method <overload N.2 : index> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2495
      argument arg0<optional> @ rbi/stdlib.rbi:2496
      argument blk<block> @ rbi/stdlib.rbi:2496
    method <overload N.2 : initialize> (arg0, arg1) -> Object @ rbi/stdlib.rbi:2503
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:2504
      argument arg1<optional> -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2505
    method <overload N.2 : rindex> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2655
      argument arg0<optional> @ rbi/stdlib.rbi:2656
      argument blk<block> @ rbi/stdlib.rbi:2656
    method <overload N.2 : slice!> (arg0) -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2713
      argument arg0<> -> Integer | Float @ rbi/stdlib.rbi:2714
      argument arg1<optional> @ rbi/stdlib.rbi:2717
    method <overload N.2 : slice> (arg0, arg1) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2815
      argument arg0<> -> Integer @ rbi/stdlib.rbi:2816
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:2817
    method <overload N.3 : fill> (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2451
      argument arg0<optional> @ rbi/stdlib.rbi:2466
      argument arg1<optional> @ rbi/stdlib.rbi:2466
      argument arg2<optional> @ rbi/stdlib.rbi:2466
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = LambdaParam(::<constant:Array>#<constant:Elem>)
          <constant:Arg0> = Integer
        ]
      } @ rbi/stdlib.rbi:2452
    method <overload N.4 : fill> (arg0, arg1, blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2455
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:2456
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:2457
      argument arg2<optional> @ rbi/stdlib.rbi:2466
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = LambdaParam(::<constant:Array>#<constant:Elem>)
          <constant:Arg0> = Integer
        ]
      } @ rbi/stdlib.rbi:2458
    method <overload N.5 : fill> (arg0, blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2461
      argument arg0<optional> -> AppliedType {
        klass = ::<constant:Range>
        targs = [
          <constant:Elem> = Integer
        ]
      } @ rbi/stdlib.rbi:2462
      argument arg1<optional> @ rbi/stdlib.rbi:2466
      argument arg2<optional> @ rbi/stdlib.rbi:2466
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = LambdaParam(::<constant:Array>#<constant:Elem>)
          <constant:Arg0> = Integer
        ]
      } @ rbi/stdlib.rbi:2463
    method [] (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2274
      argument arg0<> -> AppliedType {
        klass = ::<constant:Range>
        targs = [
          <constant:Elem> = Integer
        ]
      } @ rbi/stdlib.rbi:2262
      argument arg1<optional> @ rbi/stdlib.rbi:2274
    method []= (arg0, arg1) -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2292
      argument arg0<> -> Integer @ rbi/stdlib.rbi:2277
      argument arg1<> -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2278
      argument arg2<optional> @ rbi/stdlib.rbi:2292
    method assoc (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2298
      argument arg0<> -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2295
    method at (arg0) -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2304
      argument arg0<> -> Integer @ rbi/stdlib.rbi:2301
    method clear () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2307
    method clone () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:2310
    method collect (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:2317
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2313
    method combination (arg0, blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2328
      argument arg0<> -> Integer @ rbi/stdlib.rbi:2320
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = AppliedType {
              klass = ::<constant:Array>
              targs = [
                <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
              ]
            }
        ]
      } @ rbi/stdlib.rbi:2321
    method compact () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2331
    method compact! () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2334
    method concat (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2340
      argument arg0<> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2337
    method count () -> Integer @ rbi/stdlib.rbi:2351
      argument arg0<optional> @ rbi/stdlib.rbi:2351
      argument blk<block> @ rbi/stdlib.rbi:2351
    method cycle (arg0, blk) -> untyped @ rbi/stdlib.rbi:2362
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:2354
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2355
    method delete (arg0) -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2372
      argument arg0<optional> -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2365
      argument blk<block> @ rbi/stdlib.rbi:2372
    method delete_at (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2378
      argument arg0<> -> Integer @ rbi/stdlib.rbi:2375
    method delete_if (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2385
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2381
    method drop (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2391
      argument arg0<> -> Integer @ rbi/stdlib.rbi:2388
    method drop_while (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2398
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2394
    method dup () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:2401
    method each () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2408
      argument blk<block> @ rbi/stdlib.rbi:2408
    method each_index (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2415
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = Integer
        ]
      } @ rbi/stdlib.rbi:2411
    method empty? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:2418
    method fetch (arg0) -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2434
      argument arg0<> -> Integer @ rbi/stdlib.rbi:2421
      argument arg1<optional> @ rbi/stdlib.rbi:2434
      argument blk<block> @ rbi/stdlib.rbi:2434
    method fill (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2466
      argument arg0<optional> -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2437
      argument arg1<optional> @ rbi/stdlib.rbi:2466
      argument arg2<optional> @ rbi/stdlib.rbi:2466
      argument blk<block> @ rbi/stdlib.rbi:2466
    method first () -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2473
      argument arg0<optional> @ rbi/stdlib.rbi:2473
    method flatten () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:2476
    method freeze () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:2479
    method include? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:2485
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:2482
    method index (arg0) -> Integer @ rbi/stdlib.rbi:2496
      argument arg0<optional> -> BasicObject @ rbi/stdlib.rbi:2488
      argument blk<block> @ rbi/stdlib.rbi:2496
    method initialize () -> Object @ rbi/stdlib.rbi:2508
      argument arg0<optional> @ rbi/stdlib.rbi:2508
      argument arg1<optional> @ rbi/stdlib.rbi:2508
    method insert (arg0, arg1) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2515
      argument arg0<> -> Integer @ rbi/stdlib.rbi:2511
      argument arg1<repeated> -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2512
    method inspect () -> String @ rbi/stdlib.rbi:2518
    method join (arg0) -> String @ rbi/stdlib.rbi:2524
      argument arg0<optional> -> String @ rbi/stdlib.rbi:2521
    method keep_if (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2530
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2527
    method last () -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2537
      argument arg0<optional> @ rbi/stdlib.rbi:2537
    method length () -> Integer @ rbi/stdlib.rbi:2540
    method map (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:2547
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2543
    method map! (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:2554
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2550
    method member? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:2560
      argument arg0<> -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2557
    method permutation (arg0) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2571
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:2563
      argument blk<block> @ rbi/stdlib.rbi:2571
    method pop (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2578
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:2574
    method product (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = AppliedType {
            klass = ::<constant:Array>
            targs = [
              <constant:Elem> = untyped
            ]
          }
      ]
    } @ rbi/stdlib.rbi:2584
      argument arg0<repeated> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = BasicObject
        ]
      } @ rbi/stdlib.rbi:2581
    method push (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2590
      argument arg0<repeated> -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2587
    method rassoc (arg0) -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2596
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:2593
    method reject (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2603
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2599
    method reject! (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2610
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2606
    method repeated_combination (arg0, blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2621
      argument arg0<> -> Integer @ rbi/stdlib.rbi:2613
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = AppliedType {
              klass = ::<constant:Array>
              targs = [
                <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
              ]
            }
        ]
      } @ rbi/stdlib.rbi:2614
    method repeated_permutation (arg0, blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2632
      argument arg0<> -> Integer @ rbi/stdlib.rbi:2624
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = AppliedType {
              klass = ::<constant:Array>
              targs = [
                <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
              ]
            }
        ]
      } @ rbi/stdlib.rbi:2625
    method reverse () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2635
    method reverse! () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2638
    method reverse_each (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2645
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2641
    method rindex (arg0) -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2656
      argument arg0<optional> -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2648
      argument blk<block> @ rbi/stdlib.rbi:2656
    method rotate (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2662
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:2659
    method rotate! (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2668
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:2665
    method sample () -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2675
      argument arg0<optional> @ rbi/stdlib.rbi:2675
    method select (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2682
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2678
    method select! (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2689
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2685
    method shift () -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2696
      argument arg0<optional> @ rbi/stdlib.rbi:2696
    method shuffle () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2699
    method shuffle! () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2702
    method size () -> Integer @ rbi/stdlib.rbi:2805
    method slice (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2820
      argument arg0<> -> AppliedType {
        klass = ::<constant:Range>
        targs = [
          <constant:Elem> = Integer
        ]
      } @ rbi/stdlib.rbi:2808
      argument arg1<optional> @ rbi/stdlib.rbi:2820
    method slice! (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2717
      argument arg0<> -> AppliedType {
        klass = ::<constant:Range>
        targs = [
          <constant:Elem> = Integer
        ]
      } @ rbi/stdlib.rbi:2705
      argument arg1<optional> @ rbi/stdlib.rbi:2717
    method sort () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2724
      argument blk<block> @ rbi/stdlib.rbi:2724
    method sort! () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2731
      argument blk<block> @ rbi/stdlib.rbi:2731
    method sort_by! (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2738
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2734
    method taint () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:2741
    method take (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2747
      argument arg0<> -> Integer @ rbi/stdlib.rbi:2744
    method take_while (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2754
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2750
    method to_a () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2757
    method to_ary () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2760
    method to_s () -> String @ rbi/stdlib.rbi:2823
    method transpose () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2763
    method trust () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:2766
    method uniq () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2769
    method uniq! () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2772
    method unshift (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2778
      argument arg0<repeated> -> LambdaParam(::<constant:Array>#<constant:Elem>) @ rbi/stdlib.rbi:2775
    method untaint () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:2781
    method untrust () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:2784
    method values_at (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2790
      argument arg0<repeated> -> AppliedType {
            klass = ::<constant:Range>
            targs = [
              <constant:Elem> = Integer
            ]
          } | Integer @ rbi/stdlib.rbi:2787
    method zip (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = AppliedType {
            klass = ::<constant:Array>
            targs = [
              <constant:Elem> = untyped
            ]
          }
      ]
    } @ rbi/stdlib.rbi:2796
      argument arg0<repeated> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = BasicObject
        ]
      } @ rbi/stdlib.rbi:2793
    method | (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:2802
      argument arg0<> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = LambdaParam(::<constant:Array>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:2799
    typeMember(=) <constant:Elem> @ rbi/stdlib.rbi:2215
  class <constant:Base64> (<constant:BasicObject>) -> <Class:Base64> @ rbi/stdlib.rbi:2826
  class <constant:BasicObject> () -> <Class:BasicObject> @ rbi/stdlib.rbi:2864
    method ! () -> TrueClass | FalseClass @ rbi/stdlib.rbi:2866
    method != (other) -> TrueClass | FalseClass @ rbi/stdlib.rbi:2872
      argument other<> -> BasicObject @ rbi/stdlib.rbi:2869
    method <overload N.1 : instance_eval> (blk) -> untyped @ rbi/stdlib.rbi:2899
      argument arg0<optional> @ rbi/stdlib.rbi:2903
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc0>
        targs = [
          <constant:Return> = BasicObject
        ]
      } @ rbi/stdlib.rbi:2900
      argument filename<optional> @ rbi/stdlib.rbi:2903
      argument lineno<optional> @ rbi/stdlib.rbi:2903
    method == (other) -> TrueClass | FalseClass @ rbi/stdlib.rbi:2878
      argument other<> -> BasicObject @ rbi/stdlib.rbi:2875
    method __id__ () -> Integer @ rbi/stdlib.rbi:2913
    method __send__ (arg0, arg1) -> untyped @ rbi/stdlib.rbi:2885
      argument arg0<> -> Symbol @ rbi/stdlib.rbi:2881
      argument arg1<repeated> -> BasicObject @ rbi/stdlib.rbi:2882
    method equal? (other) -> TrueClass | FalseClass @ rbi/stdlib.rbi:2891
      argument other<> -> BasicObject @ rbi/stdlib.rbi:2888
    method instance_eval (arg0, filename, lineno) -> untyped @ rbi/stdlib.rbi:2903
      argument arg0<optional> -> String @ rbi/stdlib.rbi:2894
      argument blk<block> @ rbi/stdlib.rbi:2903
      argument filename<optional> -> String @ rbi/stdlib.rbi:2895
      argument lineno<optional> -> Integer @ rbi/stdlib.rbi:2896
    method instance_exec (args, blk) -> untyped @ rbi/stdlib.rbi:2910
      argument args<repeated> -> BasicObject @ rbi/stdlib.rbi:2906
      argument blk<block> -> BasicObject @ rbi/stdlib.rbi:2907
  class <constant:Benchmark> (<constant:BasicObject>) -> <Class:Benchmark> @ rbi/stdlib.rbi:2916
    class <constant:Job> < ::<constant:Object> () -> <Class:Benchmark::Job> @ rbi/stdlib.rbi:23
    class <constant:Report> < ::<constant:Object> () -> <Class:Benchmark::Report> @ rbi/stdlib.rbi:25
    class <constant:Tms> < ::<constant:Object> () -> <Class:Benchmark::Tms> @ rbi/stdlib.rbi:27
      static-field <constant:CAPTION> -> String @ rbi/stdlib.rbi:12421
      static-field <constant:FORMAT> -> String @ rbi/stdlib.rbi:12422
    class <singleton class:<constant:Job>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:23
    class <singleton class:<constant:Report>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:25
    class <singleton class:<constant:Tms>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:27
    static-field <constant:BENCHMARK_VERSION> -> String @ rbi/stdlib.rbi:12418
    static-field <constant:CAPTION> -> String @ rbi/stdlib.rbi:12419
    static-field <constant:FORMAT> -> String @ rbi/stdlib.rbi:12420
  class <constant:BigDecimal> < ::<constant:Numeric> () -> <Class:BigDecimal> @ rbi/stdlib.rbi:2954
    method % (arg0) -> BigDecimal @ rbi/stdlib.rbi:2959
      argument arg0<> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:2956
    method * (arg0) -> BigDecimal @ rbi/stdlib.rbi:2981
      argument arg0<> -> Integer @ rbi/stdlib.rbi:2962
    method ** (arg0) -> BigDecimal @ rbi/stdlib.rbi:2999
      argument arg0<> -> Integer @ rbi/stdlib.rbi:2984
    method + (arg0) -> BigDecimal @ rbi/stdlib.rbi:3021
      argument arg0<> -> Integer @ rbi/stdlib.rbi:3002
    method +@ () -> BigDecimal @ rbi/stdlib.rbi:3024
    method - (arg0) -> BigDecimal @ rbi/stdlib.rbi:3046
      argument arg0<> -> Integer @ rbi/stdlib.rbi:3027
    method -@ () -> BigDecimal @ rbi/stdlib.rbi:3049
    method / (arg0) -> BigDecimal @ rbi/stdlib.rbi:3071
      argument arg0<> -> Integer @ rbi/stdlib.rbi:3052
    method < (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:3089
      argument arg0<> -> Integer @ rbi/stdlib.rbi:3074
    method <= (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:3107
      argument arg0<> -> Integer @ rbi/stdlib.rbi:3092
    method <=> (arg0) -> Object @ rbi/stdlib.rbi:3125
      argument arg0<> -> Integer @ rbi/stdlib.rbi:3110
    method <overload N.1 : **> (arg0) -> BigDecimal @ rbi/stdlib.rbi:2987
      argument arg0<> -> Float @ rbi/stdlib.rbi:2988
    method <overload N.1 : *> (arg0) -> BigDecimal @ rbi/stdlib.rbi:2965
      argument arg0<> -> Float @ rbi/stdlib.rbi:2966
    method <overload N.1 : +> (arg0) -> BigDecimal @ rbi/stdlib.rbi:3005
      argument arg0<> -> Float @ rbi/stdlib.rbi:3006
    method <overload N.1 : -> (arg0) -> BigDecimal @ rbi/stdlib.rbi:3030
      argument arg0<> -> Float @ rbi/stdlib.rbi:3031
    method <overload N.1 : /> (arg0) -> BigDecimal @ rbi/stdlib.rbi:3055
      argument arg0<> -> Float @ rbi/stdlib.rbi:3056
    method <overload N.1 : <=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:3095
      argument arg0<> -> Float @ rbi/stdlib.rbi:3096
    method <overload N.1 : <=>> (arg0) -> Object @ rbi/stdlib.rbi:3113
      argument arg0<> -> Float @ rbi/stdlib.rbi:3114
    method <overload N.1 : <> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:3077
      argument arg0<> -> Float @ rbi/stdlib.rbi:3078
    method <overload N.1 : >=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:3161
      argument arg0<> -> Float @ rbi/stdlib.rbi:3162
    method <overload N.1 : >> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:3143
      argument arg0<> -> Float @ rbi/stdlib.rbi:3144
    method <overload N.1 : div> (arg0) -> Integer @ rbi/stdlib.rbi:3222
      argument arg0<> -> Float @ rbi/stdlib.rbi:3223
    method <overload N.1 : fdiv> (arg0) -> Float @ rbi/stdlib.rbi:3264
      argument arg0<> -> Float @ rbi/stdlib.rbi:3265
    method <overload N.1 : power> (arg0) -> BigDecimal @ rbi/stdlib.rbi:3344
      argument arg0<> -> Float @ rbi/stdlib.rbi:3345
    method <overload N.1 : quo> (arg0) -> BigDecimal @ rbi/stdlib.rbi:3365
      argument arg0<> -> Float @ rbi/stdlib.rbi:3366
    method <overload N.1 : round> (arg0) -> BigDecimal @ rbi/stdlib.rbi:3396
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:3397
    method <overload N.1 : truncate> (arg0) -> Rational @ rbi/stdlib.rbi:3443
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:3444
    method <overload N.2 : **> (arg0) -> BigDecimal @ rbi/stdlib.rbi:2991
      argument arg0<> -> Rational @ rbi/stdlib.rbi:2992
    method <overload N.2 : *> (arg0) -> BigDecimal @ rbi/stdlib.rbi:2969
      argument arg0<> -> Rational @ rbi/stdlib.rbi:2970
    method <overload N.2 : +> (arg0) -> BigDecimal @ rbi/stdlib.rbi:3009
      argument arg0<> -> Rational @ rbi/stdlib.rbi:3010
    method <overload N.2 : -> (arg0) -> BigDecimal @ rbi/stdlib.rbi:3034
      argument arg0<> -> Rational @ rbi/stdlib.rbi:3035
    method <overload N.2 : /> (arg0) -> BigDecimal @ rbi/stdlib.rbi:3059
      argument arg0<> -> Rational @ rbi/stdlib.rbi:3060
    method <overload N.2 : <=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:3099
      argument arg0<> -> Rational @ rbi/stdlib.rbi:3100
    method <overload N.2 : <=>> (arg0) -> Object @ rbi/stdlib.rbi:3117
      argument arg0<> -> Rational @ rbi/stdlib.rbi:3118
    method <overload N.2 : <> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:3081
      argument arg0<> -> Rational @ rbi/stdlib.rbi:3082
    method <overload N.2 : >=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:3165
      argument arg0<> -> Rational @ rbi/stdlib.rbi:3166
    method <overload N.2 : >> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:3147
      argument arg0<> -> Rational @ rbi/stdlib.rbi:3148
    method <overload N.2 : div> (arg0) -> Integer @ rbi/stdlib.rbi:3226
      argument arg0<> -> Rational @ rbi/stdlib.rbi:3227
    method <overload N.2 : fdiv> (arg0) -> Float @ rbi/stdlib.rbi:3268
      argument arg0<> -> Rational @ rbi/stdlib.rbi:3269
    method <overload N.2 : power> (arg0) -> BigDecimal @ rbi/stdlib.rbi:3348
      argument arg0<> -> Rational @ rbi/stdlib.rbi:3349
    method <overload N.2 : quo> (arg0) -> BigDecimal @ rbi/stdlib.rbi:3369
      argument arg0<> -> Rational @ rbi/stdlib.rbi:3370
    method <overload N.3 : **> (arg0) -> BigDecimal @ rbi/stdlib.rbi:2995
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:2996
    method <overload N.3 : *> (arg0) -> BigDecimal @ rbi/stdlib.rbi:2973
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:2974
    method <overload N.3 : +> (arg0) -> BigDecimal @ rbi/stdlib.rbi:3013
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:3014
    method <overload N.3 : -> (arg0) -> BigDecimal @ rbi/stdlib.rbi:3038
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:3039
    method <overload N.3 : /> (arg0) -> BigDecimal @ rbi/stdlib.rbi:3063
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:3064
    method <overload N.3 : <=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:3103
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:3104
    method <overload N.3 : <=>> (arg0) -> Object @ rbi/stdlib.rbi:3121
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:3122
    method <overload N.3 : <> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:3085
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:3086
    method <overload N.3 : >=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:3169
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:3170
    method <overload N.3 : >> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:3151
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:3152
    method <overload N.3 : div> (arg0) -> Integer @ rbi/stdlib.rbi:3230
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:3231
    method <overload N.3 : fdiv> (arg0) -> BigDecimal @ rbi/stdlib.rbi:3272
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:3273
    method <overload N.3 : power> (arg0) -> BigDecimal @ rbi/stdlib.rbi:3352
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:3353
    method <overload N.3 : quo> (arg0) -> BigDecimal @ rbi/stdlib.rbi:3373
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:3374
    method <overload N.4 : *> (arg0) -> Complex @ rbi/stdlib.rbi:2977
      argument arg0<> -> Complex @ rbi/stdlib.rbi:2978
    method <overload N.4 : +> (arg0) -> Complex @ rbi/stdlib.rbi:3017
      argument arg0<> -> Complex @ rbi/stdlib.rbi:3018
    method <overload N.4 : -> (arg0) -> Complex @ rbi/stdlib.rbi:3042
      argument arg0<> -> Complex @ rbi/stdlib.rbi:3043
    method <overload N.4 : /> (arg0) -> Complex @ rbi/stdlib.rbi:3067
      argument arg0<> -> Complex @ rbi/stdlib.rbi:3068
    method <overload N.4 : fdiv> (arg0) -> Complex @ rbi/stdlib.rbi:3276
      argument arg0<> -> Complex @ rbi/stdlib.rbi:3277
    method <overload N.4 : quo> (arg0) -> Complex @ rbi/stdlib.rbi:3377
      argument arg0<> -> Complex @ rbi/stdlib.rbi:3378
    method == (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:3131
      argument arg0<> -> Object @ rbi/stdlib.rbi:3128
    method === (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:3137
      argument arg0<> -> Object @ rbi/stdlib.rbi:3134
    method > (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:3155
      argument arg0<> -> Integer @ rbi/stdlib.rbi:3140
    method >= (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:3173
      argument arg0<> -> Integer @ rbi/stdlib.rbi:3158
    method _dump () -> String @ rbi/stdlib.rbi:3176
    method abs () -> BigDecimal @ rbi/stdlib.rbi:3179
    method abs2 () -> BigDecimal @ rbi/stdlib.rbi:3182
    method add (arg0, arg1) -> BigDecimal @ rbi/stdlib.rbi:3189
      argument arg0<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:3185
      argument arg1<> -> Integer @ rbi/stdlib.rbi:3186
    method angle () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:3192
    method arg () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:3195
    method ceil () -> Integer @ rbi/stdlib.rbi:3198
    method clone () -> BigDecimal @ rbi/stdlib.rbi:3201
    method coerce (arg0) -> TupleType {
      0 = BigDecimal
      1 = BigDecimal
    } @ rbi/stdlib.rbi:3207
      argument arg0<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:3204
    method conj () -> BigDecimal @ rbi/stdlib.rbi:3210
    method conjugate () -> BigDecimal @ rbi/stdlib.rbi:3213
    method denominator () -> Integer @ rbi/stdlib.rbi:3216
    method div (arg0) -> Integer @ rbi/stdlib.rbi:3234
      argument arg0<> -> Integer @ rbi/stdlib.rbi:3219
    method divmod (arg0) -> TupleType {
      0 = Integer | Float | Rational | BigDecimal
      1 = Integer | Float | Rational | BigDecimal
    } @ rbi/stdlib.rbi:3240
      argument arg0<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:3237
    method dup () -> BigDecimal @ rbi/stdlib.rbi:3243
    method eql? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:3249
      argument arg0<> -> Object @ rbi/stdlib.rbi:3246
    method equal? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:3255
      argument arg0<> -> Object @ rbi/stdlib.rbi:3252
    method exponent () -> Integer @ rbi/stdlib.rbi:3258
    method fdiv (arg0) -> Float @ rbi/stdlib.rbi:3280
      argument arg0<> -> Integer @ rbi/stdlib.rbi:3261
    method finite? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:3283
    method fix () -> BigDecimal @ rbi/stdlib.rbi:3286
    method floor () -> Integer @ rbi/stdlib.rbi:3289
    method frac () -> BigDecimal @ rbi/stdlib.rbi:3292
    method freeze () -> BigDecimal @ rbi/stdlib.rbi:3295
    method hash () -> Integer @ rbi/stdlib.rbi:3298
    method imag () -> Integer @ rbi/stdlib.rbi:3301
    method imaginary () -> Integer @ rbi/stdlib.rbi:3304
    method infinite? () -> NilClass | Integer @ rbi/stdlib.rbi:3307
    method inspect () -> String @ rbi/stdlib.rbi:3310
    method magnitude () -> BigDecimal @ rbi/stdlib.rbi:3313
    method modulo (arg0) -> BigDecimal @ rbi/stdlib.rbi:3319
      argument arg0<> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:3316
    method mult (arg0, arg1) -> BigDecimal @ rbi/stdlib.rbi:3326
      argument arg0<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:3322
      argument arg1<> -> Integer @ rbi/stdlib.rbi:3323
    method nan? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:3329
    method nonzero? () -> Object @ rbi/stdlib.rbi:3332
    method numerator () -> Integer @ rbi/stdlib.rbi:3335
    method phase () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:3338
    method power (arg0) -> BigDecimal @ rbi/stdlib.rbi:3356
      argument arg0<> -> Integer @ rbi/stdlib.rbi:3341
    method precs () -> TupleType {
      0 = Integer
      1 = Integer
    } @ rbi/stdlib.rbi:3359
    method quo (arg0) -> BigDecimal @ rbi/stdlib.rbi:3381
      argument arg0<> -> Integer @ rbi/stdlib.rbi:3362
    method real () -> BigDecimal @ rbi/stdlib.rbi:3384
    method real? () -> TrueClass @ rbi/stdlib.rbi:3387
    method remainder (arg0) -> BigDecimal @ rbi/stdlib.rbi:3393
      argument arg0<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:3390
    method round () -> Integer @ rbi/stdlib.rbi:3400
      argument arg0<optional> @ rbi/stdlib.rbi:3400
    method sign () -> Integer @ rbi/stdlib.rbi:3403
    method split () -> TupleType {
      0 = Integer
      1 = String
      2 = Integer
      3 = Integer
    } @ rbi/stdlib.rbi:3406
    method sqrt (arg0) -> BigDecimal @ rbi/stdlib.rbi:3412
      argument arg0<> -> Integer @ rbi/stdlib.rbi:3409
    method sub (arg0, arg1) -> BigDecimal @ rbi/stdlib.rbi:3419
      argument arg0<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:3415
      argument arg1<> -> Integer @ rbi/stdlib.rbi:3416
    method taint () -> BigDecimal @ rbi/stdlib.rbi:3422
    method to_c () -> Complex @ rbi/stdlib.rbi:3425
    method to_f () -> Float @ rbi/stdlib.rbi:3428
    method to_i () -> Integer @ rbi/stdlib.rbi:3431
    method to_int () -> Integer @ rbi/stdlib.rbi:3434
    method to_r () -> Rational @ rbi/stdlib.rbi:3437
    method to_s () -> String @ rbi/stdlib.rbi:3440
    method truncate () -> Integer @ rbi/stdlib.rbi:3447
      argument arg0<optional> @ rbi/stdlib.rbi:3447
    method trust () -> BigDecimal @ rbi/stdlib.rbi:3450
    method untaint () -> BigDecimal @ rbi/stdlib.rbi:3453
    method untrust () -> BigDecimal @ rbi/stdlib.rbi:3456
    method zero? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:3459
    static-field <constant:BASE> -> Integer @ rbi/stdlib.rbi:12423
    static-field <constant:EXCEPTION_ALL> -> Integer @ rbi/stdlib.rbi:12424
    static-field <constant:EXCEPTION_INFINITY> -> Integer @ rbi/stdlib.rbi:12425
    static-field <constant:EXCEPTION_OVERFLOW> -> Integer @ rbi/stdlib.rbi:12426
    static-field <constant:EXCEPTION_UNDERFLOW> -> Integer @ rbi/stdlib.rbi:12427
    static-field <constant:EXCEPTION_ZERODIVIDE> -> Integer @ rbi/stdlib.rbi:12428
    static-field <constant:INFINITY> -> BigDecimal @ rbi/stdlib.rbi:12429
    static-field <constant:NAN> -> BigDecimal @ rbi/stdlib.rbi:12430
    static-field <constant:ROUND_CEILING> -> Integer @ rbi/stdlib.rbi:12431
    static-field <constant:ROUND_DOWN> -> Integer @ rbi/stdlib.rbi:12432
    static-field <constant:ROUND_FLOOR> -> Integer @ rbi/stdlib.rbi:12433
    static-field <constant:ROUND_HALF_DOWN> -> Integer @ rbi/stdlib.rbi:12434
    static-field <constant:ROUND_HALF_EVEN> -> Integer @ rbi/stdlib.rbi:12435
    static-field <constant:ROUND_HALF_UP> -> Integer @ rbi/stdlib.rbi:12436
    static-field <constant:ROUND_MODE> -> Integer @ rbi/stdlib.rbi:12437
    static-field <constant:ROUND_UP> -> Integer @ rbi/stdlib.rbi:12438
    static-field <constant:SIGN_NEGATIVE_FINITE> -> Integer @ rbi/stdlib.rbi:12439
    static-field <constant:SIGN_NEGATIVE_INFINITE> -> Integer @ rbi/stdlib.rbi:12440
    static-field <constant:SIGN_NEGATIVE_ZERO> -> Integer @ rbi/stdlib.rbi:12441
    static-field <constant:SIGN_POSITIVE_FINITE> -> Integer @ rbi/stdlib.rbi:12442
    static-field <constant:SIGN_POSITIVE_INFINITE> -> Integer @ rbi/stdlib.rbi:12443
    static-field <constant:SIGN_POSITIVE_ZERO> -> Integer @ rbi/stdlib.rbi:12444
  class <constant:BigMath> (<constant:BasicObject>) -> <Class:BigMath> @ rbi/stdlib.rbi:3462
    method E (prec) -> BigDecimal @ rbi/stdlib.rbi:3481
      argument prec<> -> Integer @ rbi/stdlib.rbi:3478
    method PI (prec) -> BigDecimal @ rbi/stdlib.rbi:3487
      argument prec<> -> Integer @ rbi/stdlib.rbi:3484
    method atan (x, prec) -> BigDecimal @ rbi/stdlib.rbi:3494
      argument prec<> -> Integer @ rbi/stdlib.rbi:3491
      argument x<> -> Integer @ rbi/stdlib.rbi:3490
    method cos (x, prec) -> BigDecimal @ rbi/stdlib.rbi:3501
      argument prec<> -> Integer @ rbi/stdlib.rbi:3498
      argument x<> -> Integer @ rbi/stdlib.rbi:3497
    method sin (x, prec) -> BigDecimal @ rbi/stdlib.rbi:3508
      argument prec<> -> Integer @ rbi/stdlib.rbi:3505
      argument x<> -> Integer @ rbi/stdlib.rbi:3504
    method sqrt (x, prec) -> BigDecimal @ rbi/stdlib.rbi:3515
      argument prec<> -> Integer @ rbi/stdlib.rbi:3512
      argument x<> -> Integer @ rbi/stdlib.rbi:3511
  class <constant:Binding> < ::<constant:Object> () -> <Class:Binding> @ rbi/stdlib.rbi:3518
    method clone () -> Binding @ rbi/stdlib.rbi:3520
    method dup () -> Binding @ rbi/stdlib.rbi:3523
    method freeze () -> Binding @ rbi/stdlib.rbi:3526
    method taint () -> Binding @ rbi/stdlib.rbi:3529
    method trust () -> Binding @ rbi/stdlib.rbi:3532
    method untaint () -> Binding @ rbi/stdlib.rbi:3535
    method untrust () -> Binding @ rbi/stdlib.rbi:3538
  class <constant:CSV>[<constant:Elem>] < ::<constant:Object> (<constant:Enumerable>) -> <Class:CSV> @ rbi/stdlib.rbi:728
    class <constant:FieldInfo>[<constant:Elem>] < ::<constant:Struct> () -> <Class:CSV::FieldInfo> @ rbi/stdlib.rbi:46
      typeMember(=) <constant:Elem> @ rbi/stdlib.rbi:46
    class <constant:MalformedCSVError> < ::<constant:RuntimeError> () -> <Class:CSV::MalformedCSVError> @ rbi/stdlib.rbi:50
    class <constant:Row>[<constant:Elem>] < ::<constant:Object> (<constant:Enumerable>) -> <Class:CSV::Row> @ rbi/stdlib.rbi:52
      typeMember(=) <constant:Elem> @ rbi/stdlib.rbi:52
    class <constant:Table>[<constant:Elem>] < ::<constant:Object> (<constant:Enumerable>) -> <Class:CSV::Table> @ rbi/stdlib.rbi:55
      typeMember(=) <constant:Elem> @ rbi/stdlib.rbi:55
    class <singleton class:<constant:FieldInfo>> < ::<singleton class:<constant:Struct>> () @ rbi/stdlib.rbi:46
    class <singleton class:<constant:MalformedCSVError>> < ::<singleton class:<constant:RuntimeError>> () @ rbi/stdlib.rbi:50
    class <singleton class:<constant:Row>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:52
    class <singleton class:<constant:Table>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:55
    method clone () -> AppliedType {
      klass = ::<constant:CSV>
      targs = [
        <constant:Elem> = AppliedType {
            klass = ::<constant:Array>
            targs = [
              <constant:Elem> = String
            ]
          }
      ]
    } @ rbi/stdlib.rbi:741
    method dup () -> AppliedType {
      klass = ::<constant:CSV>
      targs = [
        <constant:Elem> = AppliedType {
            klass = ::<constant:Array>
            targs = [
              <constant:Elem> = String
            ]
          }
      ]
    } @ rbi/stdlib.rbi:744
    method freeze () -> AppliedType {
      klass = ::<constant:CSV>
      targs = [
        <constant:Elem> = AppliedType {
            klass = ::<constant:Array>
            targs = [
              <constant:Elem> = String
            ]
          }
      ]
    } @ rbi/stdlib.rbi:747
    method taint () -> AppliedType {
      klass = ::<constant:CSV>
      targs = [
        <constant:Elem> = AppliedType {
            klass = ::<constant:Array>
            targs = [
              <constant:Elem> = String
            ]
          }
      ]
    } @ rbi/stdlib.rbi:750
    method trust () -> AppliedType {
      klass = ::<constant:CSV>
      targs = [
        <constant:Elem> = AppliedType {
            klass = ::<constant:Array>
            targs = [
              <constant:Elem> = String
            ]
          }
      ]
    } @ rbi/stdlib.rbi:753
    method untaint () -> AppliedType {
      klass = ::<constant:CSV>
      targs = [
        <constant:Elem> = AppliedType {
            klass = ::<constant:Array>
            targs = [
              <constant:Elem> = String
            ]
          }
      ]
    } @ rbi/stdlib.rbi:756
    method untrust () -> AppliedType {
      klass = ::<constant:CSV>
      targs = [
        <constant:Elem> = AppliedType {
            klass = ::<constant:Array>
            targs = [
              <constant:Elem> = String
            ]
          }
      ]
    } @ rbi/stdlib.rbi:759
    static-field <constant:DEFAULT_OPTIONS> -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12445
    static-field <constant:VERSION> -> String @ rbi/stdlib.rbi:12446
    typeMember(=) <constant:Elem> -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:730
  class <constant:Class> < ::<constant:Module> () -> <Class:Class> @ rbi/stdlib.rbi:3541
    method <overload N.1 : superclass> () -> Class @ rbi/stdlib.rbi:3606
    method allocate () -> untyped @ rbi/stdlib.rbi:3543
    method clone () -> Class @ rbi/stdlib.rbi:3546
    method dup () -> Class @ rbi/stdlib.rbi:3549
    method freeze () -> Class @ rbi/stdlib.rbi:3552
    method include (arg0) -> Class @ rbi/stdlib.rbi:3558
      argument arg0<repeated> -> Module @ rbi/stdlib.rbi:3555
    method inherited (arg0) -> untyped @ rbi/stdlib.rbi:3564
      argument arg0<> -> Class @ rbi/stdlib.rbi:3561
    method instance_methods (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Symbol
      ]
    } @ rbi/stdlib.rbi:3570
      argument arg0<optional> -> TrueClass | FalseClass @ rbi/stdlib.rbi:3567
    method name () -> String @ rbi/stdlib.rbi:3573
    method prepend (arg0) -> Class @ rbi/stdlib.rbi:3579
      argument arg0<repeated> -> Module @ rbi/stdlib.rbi:3576
    method private_class_method (arg0) -> Class @ rbi/stdlib.rbi:3585
      argument arg0<repeated> -> Symbol | String @ rbi/stdlib.rbi:3582
    method private_constant (arg0) -> Class @ rbi/stdlib.rbi:3591
      argument arg0<repeated> -> Symbol @ rbi/stdlib.rbi:3588
    method public_class_method (arg0) -> Class @ rbi/stdlib.rbi:3597
      argument arg0<repeated> -> Symbol | String @ rbi/stdlib.rbi:3594
    method public_constant (arg0) -> Class @ rbi/stdlib.rbi:3603
      argument arg0<repeated> -> Symbol @ rbi/stdlib.rbi:3600
    method superclass () -> Class | NilClass @ rbi/stdlib.rbi:3607
    method taint () -> Class @ rbi/stdlib.rbi:3610
    method trust () -> Class @ rbi/stdlib.rbi:3613
    method untaint () -> Class @ rbi/stdlib.rbi:3616
    method untrust () -> Class @ rbi/stdlib.rbi:3619
  class <constant:ClosedQueueError> < ::<constant:StopIteration> () -> <Class:ClosedQueueError> @ rbi/stdlib.rbi:3622
    method clone () -> ClosedQueueError @ rbi/stdlib.rbi:3624
    method dup () -> ClosedQueueError @ rbi/stdlib.rbi:3627
    method freeze () -> ClosedQueueError @ rbi/stdlib.rbi:3630
    method taint () -> ClosedQueueError @ rbi/stdlib.rbi:3633
    method trust () -> ClosedQueueError @ rbi/stdlib.rbi:3636
    method untaint () -> ClosedQueueError @ rbi/stdlib.rbi:3639
    method untrust () -> ClosedQueueError @ rbi/stdlib.rbi:3642
  class <constant:Comparable> (<constant:BasicObject>) -> <Class:Comparable> @ rbi/stdlib.rbi:29
  class <constant:Complex> < ::<constant:Numeric> () -> <Class:Complex> @ rbi/stdlib.rbi:3645
    method * (arg0) -> Complex @ rbi/stdlib.rbi:3666
      argument arg0<> -> Integer @ rbi/stdlib.rbi:3647
    method ** (arg0) -> Complex @ rbi/stdlib.rbi:3688
      argument arg0<> -> Integer @ rbi/stdlib.rbi:3669
    method + (arg0) -> Complex @ rbi/stdlib.rbi:3710
      argument arg0<> -> Integer @ rbi/stdlib.rbi:3691
    method +@ () -> Complex @ rbi/stdlib.rbi:3713
    method - (arg0) -> Complex @ rbi/stdlib.rbi:3735
      argument arg0<> -> Integer @ rbi/stdlib.rbi:3716
    method -@ () -> Complex @ rbi/stdlib.rbi:3738
    method / (arg0) -> Complex @ rbi/stdlib.rbi:3760
      argument arg0<> -> Integer @ rbi/stdlib.rbi:3741
    method <overload N.1 : **> (arg0) -> Complex @ rbi/stdlib.rbi:3672
      argument arg0<> -> Float @ rbi/stdlib.rbi:3673
    method <overload N.1 : *> (arg0) -> Complex @ rbi/stdlib.rbi:3650
      argument arg0<> -> Float @ rbi/stdlib.rbi:3651
    method <overload N.1 : +> (arg0) -> Complex @ rbi/stdlib.rbi:3694
      argument arg0<> -> Float @ rbi/stdlib.rbi:3695
    method <overload N.1 : -> (arg0) -> Complex @ rbi/stdlib.rbi:3719
      argument arg0<> -> Float @ rbi/stdlib.rbi:3720
    method <overload N.1 : /> (arg0) -> Complex @ rbi/stdlib.rbi:3744
      argument arg0<> -> Float @ rbi/stdlib.rbi:3745
    method <overload N.1 : quo> (arg0) -> Complex @ rbi/stdlib.rbi:3850
      argument arg0<> -> Float @ rbi/stdlib.rbi:3851
    method <overload N.1 : rationalize> (arg0) -> Rational @ rbi/stdlib.rbi:3869
      argument arg0<optional> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:3870
    method <overload N.2 : **> (arg0) -> Complex @ rbi/stdlib.rbi:3676
      argument arg0<> -> Rational @ rbi/stdlib.rbi:3677
    method <overload N.2 : *> (arg0) -> Complex @ rbi/stdlib.rbi:3654
      argument arg0<> -> Rational @ rbi/stdlib.rbi:3655
    method <overload N.2 : +> (arg0) -> Complex @ rbi/stdlib.rbi:3698
      argument arg0<> -> Rational @ rbi/stdlib.rbi:3699
    method <overload N.2 : -> (arg0) -> Complex @ rbi/stdlib.rbi:3723
      argument arg0<> -> Rational @ rbi/stdlib.rbi:3724
    method <overload N.2 : /> (arg0) -> Complex @ rbi/stdlib.rbi:3748
      argument arg0<> -> Rational @ rbi/stdlib.rbi:3749
    method <overload N.2 : quo> (arg0) -> Complex @ rbi/stdlib.rbi:3854
      argument arg0<> -> Rational @ rbi/stdlib.rbi:3855
    method <overload N.3 : **> (arg0) -> Complex @ rbi/stdlib.rbi:3680
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:3681
    method <overload N.3 : *> (arg0) -> Complex @ rbi/stdlib.rbi:3658
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:3659
    method <overload N.3 : +> (arg0) -> Complex @ rbi/stdlib.rbi:3702
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:3703
    method <overload N.3 : -> (arg0) -> Complex @ rbi/stdlib.rbi:3727
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:3728
    method <overload N.3 : /> (arg0) -> Complex @ rbi/stdlib.rbi:3752
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:3753
    method <overload N.3 : quo> (arg0) -> BigDecimal @ rbi/stdlib.rbi:3858
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:3859
    method <overload N.4 : **> (arg0) -> Complex @ rbi/stdlib.rbi:3684
      argument arg0<> -> Complex @ rbi/stdlib.rbi:3685
    method <overload N.4 : *> (arg0) -> Complex @ rbi/stdlib.rbi:3662
      argument arg0<> -> Complex @ rbi/stdlib.rbi:3663
    method <overload N.4 : +> (arg0) -> Complex @ rbi/stdlib.rbi:3706
      argument arg0<> -> Complex @ rbi/stdlib.rbi:3707
    method <overload N.4 : -> (arg0) -> Complex @ rbi/stdlib.rbi:3731
      argument arg0<> -> Complex @ rbi/stdlib.rbi:3732
    method <overload N.4 : /> (arg0) -> Complex @ rbi/stdlib.rbi:3756
      argument arg0<> -> Complex @ rbi/stdlib.rbi:3757
    method <overload N.4 : quo> (arg0) -> Complex @ rbi/stdlib.rbi:3862
      argument arg0<> -> Complex @ rbi/stdlib.rbi:3863
    method == (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:3766
      argument arg0<> -> Object @ rbi/stdlib.rbi:3763
    method abs () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:3769
    method abs2 () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:3772
    method angle () -> Float @ rbi/stdlib.rbi:3775
    method arg () -> Float @ rbi/stdlib.rbi:3778
    method clone () -> Complex @ rbi/stdlib.rbi:3781
    method coerce (arg0) -> TupleType {
      0 = Complex
      1 = Complex
    } @ rbi/stdlib.rbi:3787
      argument arg0<> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:3784
    method conj () -> Complex @ rbi/stdlib.rbi:3790
    method conjugate () -> Complex @ rbi/stdlib.rbi:3793
    method denominator () -> Integer @ rbi/stdlib.rbi:3796
    method dup () -> Complex @ rbi/stdlib.rbi:3799
    method eql? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:3805
      argument arg0<> -> Object @ rbi/stdlib.rbi:3802
    method equal? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:3811
      argument arg0<> -> Object @ rbi/stdlib.rbi:3808
    method fdiv (arg0) -> Complex @ rbi/stdlib.rbi:3817
      argument arg0<> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:3814
    method freeze () -> Complex @ rbi/stdlib.rbi:3820
    method hash () -> Integer @ rbi/stdlib.rbi:3823
    method imag () -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:3826
    method imaginary () -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:3829
    method inspect () -> String @ rbi/stdlib.rbi:3832
    method magnitude () -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:3835
    method numerator () -> Complex @ rbi/stdlib.rbi:3838
    method phase () -> Float @ rbi/stdlib.rbi:3841
    method polar () -> TupleType {
      0 = Integer | Float | Rational | BigDecimal
      1 = Integer | Float | Rational | BigDecimal
    } @ rbi/stdlib.rbi:3844
    method quo (arg0) -> Complex @ rbi/stdlib.rbi:3866
      argument arg0<> -> Integer @ rbi/stdlib.rbi:3847
    method rationalize () -> Rational @ rbi/stdlib.rbi:3873
      argument arg0<optional> @ rbi/stdlib.rbi:3873
    method real () -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:3876
    method real? () -> FalseClass @ rbi/stdlib.rbi:3879
    method rect () -> TupleType {
      0 = Integer | Float | Rational | BigDecimal
      1 = Integer | Float | Rational | BigDecimal
    } @ rbi/stdlib.rbi:3882
    method rectangular () -> TupleType {
      0 = Integer | Float | Rational | BigDecimal
      1 = Integer | Float | Rational | BigDecimal
    } @ rbi/stdlib.rbi:3885
    method taint () -> Complex @ rbi/stdlib.rbi:3888
    method to_c () -> Complex @ rbi/stdlib.rbi:3891
    method to_f () -> Float @ rbi/stdlib.rbi:3894
    method to_i () -> Integer @ rbi/stdlib.rbi:3897
    method to_r () -> Rational @ rbi/stdlib.rbi:3900
    method to_s () -> String @ rbi/stdlib.rbi:3903
    method trust () -> Complex @ rbi/stdlib.rbi:3906
    method untaint () -> Complex @ rbi/stdlib.rbi:3909
    method untrust () -> Complex @ rbi/stdlib.rbi:3912
    method zero? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:3915
    static-field <constant:I> -> Complex @ rbi/stdlib.rbi:12447
  class <constant:Coverage> (<constant:BasicObject>) -> <Class:Coverage> @ rbi/stdlib.rbi:3918
  class <constant:Data> < ::<constant:Object> () -> <Class:Data> @ rbi/stdlib.rbi:3926
    method clone () -> Data @ rbi/stdlib.rbi:3928
    method dup () -> Data @ rbi/stdlib.rbi:3931
    method freeze () -> Data @ rbi/stdlib.rbi:3934
    method taint () -> Data @ rbi/stdlib.rbi:3937
    method trust () -> Data @ rbi/stdlib.rbi:3940
    method untaint () -> Data @ rbi/stdlib.rbi:3943
    method untrust () -> Data @ rbi/stdlib.rbi:3946
  class <constant:Date> < ::<constant:Object> (<constant:Comparable>) -> <Class:Date> @ rbi/stdlib.rbi:3949
    class <constant:Infinity> < ::<constant:Numeric> () -> <Class:Date::Infinity> @ rbi/stdlib.rbi:77
      method +@ () -> Date::Infinity @ rbi/date.rbi:3
      method -@ () -> Date::Infinity @ rbi/date.rbi:6
      method <=> (other) -> Integer | NilClass @ rbi/date.rbi:9
        argument other<> -> untyped @ rbi/date.rbi:8
      method abs () -> Date::Infinity @ rbi/date.rbi:18
      method coerce (other) -> Numeric @ rbi/date.rbi:15
        argument other<> -> untyped @ rbi/date.rbi:14
      method d () -> TrueClass | FalseClass @ rbi/date.rbi:33
      method finite? () -> TrueClass | FalseClass @ rbi/date.rbi:24
      method infinite? () -> TrueClass | FalseClass @ rbi/date.rbi:27
      method nan? () -> TrueClass | FalseClass @ rbi/date.rbi:30
      method to_f () -> Float @ rbi/date.rbi:12
      method zero? () -> TrueClass | FalseClass @ rbi/date.rbi:21
    class <singleton class:<constant:Infinity>> < ::<singleton class:<constant:Numeric>> () @ rbi/date.rbi:1
    method + (arg0) -> untyped @ rbi/date.rbi:83
      argument arg0<> -> untyped @ rbi/date.rbi:82
    method - (arg0) -> untyped @ rbi/date.rbi:89
      argument arg0<> -> untyped @ rbi/date.rbi:88
    method << (arg0) -> untyped @ rbi/date.rbi:59
      argument arg0<> -> untyped @ rbi/date.rbi:58
    method <=> (arg0) -> untyped @ rbi/date.rbi:56
      argument arg0<> -> untyped @ rbi/date.rbi:55
    method === (arg0) -> untyped @ rbi/date.rbi:65
      argument arg0<> -> untyped @ rbi/date.rbi:64
    method >> (arg0) -> untyped @ rbi/date.rbi:62
      argument arg0<> -> untyped @ rbi/date.rbi:61
    method ajd () -> untyped @ rbi/date.rbi:80
    method amjd () -> untyped @ rbi/date.rbi:191
    method asctime () -> untyped @ rbi/date.rbi:155
    method blank? () -> untyped @ rbi/date.rbi:149
    method clone () -> Date @ rbi/stdlib.rbi:3951
    method ctime () -> untyped @ rbi/date.rbi:113
    method cwday () -> untyped @ rbi/date.rbi:206
    method cweek () -> untyped @ rbi/date.rbi:203
    method cwyear () -> untyped @ rbi/date.rbi:200
    method day () -> untyped @ rbi/date.rbi:95
    method day_fraction () -> untyped @ rbi/date.rbi:197
    method downto (arg0) -> untyped @ rbi/date.rbi:152
      argument arg0<> -> untyped @ rbi/date.rbi:151
    method dup () -> Date @ rbi/stdlib.rbi:3954
    method england () -> untyped @ rbi/date.rbi:224
    method eql? (arg0) -> untyped @ rbi/date.rbi:68
      argument arg0<> -> untyped @ rbi/date.rbi:67
    method freeze () -> Date @ rbi/stdlib.rbi:3957
    method friday? () -> untyped @ rbi/date.rbi:143
    method gregorian () -> untyped @ rbi/date.rbi:230
    method gregorian? () -> untyped @ rbi/date.rbi:215
    method hash () -> untyped @ rbi/date.rbi:209
    method httpdate () -> untyped @ rbi/date.rbi:185
    method initialize (year, month, mday, start) -> Date @ rbi/date.rbi:43
      argument mday<optional> -> Integer @ rbi/date.rbi:40
      argument month<optional> -> Integer @ rbi/date.rbi:39
      argument start<optional> -> Integer @ rbi/date.rbi:41
      argument year<optional> -> Integer @ rbi/date.rbi:38
    method inspect () -> untyped @ rbi/date.rbi:86
    method iso8601 () -> untyped @ rbi/date.rbi:170
    method italy () -> untyped @ rbi/date.rbi:221
    method jd () -> untyped @ rbi/date.rbi:125
    method jisx0301 () -> untyped @ rbi/date.rbi:188
    method julian () -> untyped @ rbi/date.rbi:227
    method julian? () -> untyped @ rbi/date.rbi:212
    method ld () -> untyped @ rbi/date.rbi:236
    method leap? () -> untyped @ rbi/date.rbi:167
    method localize (locale, options) -> untyped @ rbi/date.rbi:53
      argument locale<optional> -> untyped @ rbi/date.rbi:49
      argument options<optional> -> untyped @ rbi/date.rbi:50
    method marshal_dump () -> untyped @ rbi/date.rbi:74
    method marshal_load (arg0) -> untyped @ rbi/date.rbi:77
      argument arg0<> -> untyped @ rbi/date.rbi:76
    method mday () -> untyped @ rbi/date.rbi:92
    method mjd () -> untyped @ rbi/date.rbi:194
    method mon () -> untyped @ rbi/date.rbi:98
    method monday? () -> untyped @ rbi/date.rbi:131
    method month () -> untyped @ rbi/date.rbi:101
    method new_start (arg0) -> untyped @ rbi/date.rbi:218
      argument arg0<repeated> -> untyped @ rbi/date.rbi:217
    method next () -> untyped @ rbi/date.rbi:245
    method next_day (arg0) -> untyped @ rbi/date.rbi:233
      argument arg0<repeated> -> untyped @ rbi/date.rbi:232
    method next_month (arg0) -> untyped @ rbi/date.rbi:239
      argument arg0<repeated> -> untyped @ rbi/date.rbi:238
    method next_year (arg0) -> untyped @ rbi/date.rbi:251
      argument arg0<repeated> -> untyped @ rbi/date.rbi:250
    method pretty_date () -> untyped @ rbi/date.rbi:116
    method prev_day (arg0) -> untyped @ rbi/date.rbi:242
      argument arg0<repeated> -> untyped @ rbi/date.rbi:241
    method prev_month (arg0) -> untyped @ rbi/date.rbi:248
      argument arg0<repeated> -> untyped @ rbi/date.rbi:247
    method prev_year (arg0) -> untyped @ rbi/date.rbi:254
      argument arg0<repeated> -> untyped @ rbi/date.rbi:253
    method rfc2822 () -> untyped @ rbi/date.rbi:179
    method rfc3339 () -> untyped @ rbi/date.rbi:173
    method rfc822 () -> untyped @ rbi/date.rbi:182
    method saturday? () -> untyped @ rbi/date.rbi:146
    method start () -> untyped @ rbi/date.rbi:71
    method step (arg0) -> untyped @ rbi/date.rbi:140
      argument arg0<repeated> -> untyped @ rbi/date.rbi:139
    method strftime (arg0) -> untyped @ rbi/date.rbi:158
      argument arg0<repeated> -> untyped @ rbi/date.rbi:157
    method succ () -> untyped @ rbi/date.rbi:119
    method sunday? () -> untyped @ rbi/date.rbi:128
    method taint () -> Date @ rbi/stdlib.rbi:3960
    method thursday? () -> untyped @ rbi/date.rbi:161
    method to_date () -> Date @ rbi/date.rbi:260
    method to_datetime () -> DateTime @ rbi/date.rbi:263
    method to_s () -> untyped @ rbi/date.rbi:164
    method to_time () -> Time @ rbi/date.rbi:257
    method to_utc_time () -> untyped @ rbi/date.rbi:122
    method trust () -> Date @ rbi/stdlib.rbi:3963
    method tuesday? () -> untyped @ rbi/date.rbi:134
    method untaint () -> Date @ rbi/stdlib.rbi:3966
    method untrust () -> Date @ rbi/stdlib.rbi:3969
    method upto (arg0) -> untyped @ rbi/date.rbi:46
      argument arg0<> -> untyped @ rbi/date.rbi:45
    method wday () -> untyped @ rbi/date.rbi:107
    method wednesday? () -> untyped @ rbi/date.rbi:137
    method xmlschema () -> untyped @ rbi/date.rbi:176
    method yday () -> untyped @ rbi/date.rbi:110
    method year () -> untyped @ rbi/date.rbi:104
    static-field <constant:ABBR_DAYNAMES> -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12448
    static-field <constant:ABBR_MONTHNAMES> -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12449
    static-field <constant:DAYNAMES> -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12450
    static-field <constant:ENGLAND> -> Integer @ rbi/stdlib.rbi:12451
    static-field <constant:GREGORIAN> -> Float @ rbi/stdlib.rbi:12452
    static-field <constant:ITALY> -> Integer @ rbi/stdlib.rbi:12453
    static-field <constant:JULIAN> -> Float @ rbi/stdlib.rbi:12454
    static-field <constant:MONTHNAMES> -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12455
  class <constant:DateTime> < ::<constant:Date> () -> <Class:DateTime> @ rbi/stdlib.rbi:3972
    method blank? () -> untyped @ rbi/date.rbi:428
    method clone () -> DateTime @ rbi/stdlib.rbi:3974
    method dup () -> DateTime @ rbi/stdlib.rbi:3977
    method freeze () -> DateTime @ rbi/stdlib.rbi:3980
    method hour () -> untyped @ rbi/date.rbi:386
    method iso8601 (arg0) -> untyped @ rbi/date.rbi:395
      argument arg0<repeated> -> untyped @ rbi/date.rbi:394
    method jisx0301 (arg0) -> untyped @ rbi/date.rbi:404
      argument arg0<repeated> -> untyped @ rbi/date.rbi:403
    method localize (locale, options) -> untyped @ rbi/date.rbi:438
      argument locale<optional> -> untyped @ rbi/date.rbi:434
      argument options<optional> -> untyped @ rbi/date.rbi:435
    method min () -> untyped @ rbi/date.rbi:371
    method minute () -> untyped @ rbi/date.rbi:407
    method new_offset (arg0) -> untyped @ rbi/date.rbi:416
      argument arg0<repeated> -> untyped @ rbi/date.rbi:415
    method offset () -> untyped @ rbi/date.rbi:377
    method rfc3339 (arg0) -> untyped @ rbi/date.rbi:398
      argument arg0<repeated> -> untyped @ rbi/date.rbi:397
    method sec () -> untyped @ rbi/date.rbi:383
    method sec_fraction () -> untyped @ rbi/date.rbi:410
    method second () -> untyped @ rbi/date.rbi:392
    method second_fraction () -> untyped @ rbi/date.rbi:413
    method strftime (arg0) -> untyped @ rbi/date.rbi:389
      argument arg0<repeated> -> untyped @ rbi/date.rbi:388
    method taint () -> DateTime @ rbi/stdlib.rbi:3983
    method to_date () -> Date @ rbi/date.rbi:422
    method to_datetime () -> DateTime @ rbi/date.rbi:425
    method to_s () -> untyped @ rbi/date.rbi:374
    method to_time () -> Time @ rbi/date.rbi:419
    method to_utc_time () -> untyped @ rbi/date.rbi:431
    method trust () -> DateTime @ rbi/stdlib.rbi:3986
    method untaint () -> DateTime @ rbi/stdlib.rbi:3989
    method untrust () -> DateTime @ rbi/stdlib.rbi:3992
    method xmlschema (arg0) -> untyped @ rbi/date.rbi:401
      argument arg0<repeated> -> untyped @ rbi/date.rbi:400
    method zone () -> untyped @ rbi/date.rbi:380
    static-field <constant:ABBR_DAYNAMES> -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12456
    static-field <constant:ABBR_MONTHNAMES> -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12457
    static-field <constant:DAYNAMES> -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12458
    static-field <constant:ENGLAND> -> Integer @ rbi/stdlib.rbi:12459
    static-field <constant:GREGORIAN> -> Float @ rbi/stdlib.rbi:12460
    static-field <constant:ITALY> -> Integer @ rbi/stdlib.rbi:12461
    static-field <constant:JULIAN> -> Float @ rbi/stdlib.rbi:12462
    static-field <constant:MONTHNAMES> -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12463
  class <constant:DidYouMean> (<constant:BasicObject>) -> <Class:DidYouMean> @ rbi/stdlib.rbi:81
    class <constant:ClassNameChecker> < ::<constant:Object> () -> <Class:DidYouMean::ClassNameChecker> @ rbi/stdlib.rbi:83
      class <constant:ClassName> () -> <Class:DidYouMean::ClassNameChecker::ClassName> @ rbi/stdlib.rbi:12464
        static-field <constant:RUBYGEMS_ACTIVATION_MONITOR> -> Monitor @ rbi/stdlib.rbi:12464
      class <singleton class:<constant:ClassName>> < ::<constant:Module> () @ rbi/stdlib.rbi:12464
    class <constant:Correctable> (<constant:BasicObject>) -> <Class:DidYouMean::Correctable> @ rbi/stdlib.rbi:85
    class <constant:Formatter> < ::<constant:Object> () -> <Class:DidYouMean::Formatter> @ rbi/stdlib.rbi:87
    class <constant:Jaro> (<constant:BasicObject>) -> <Class:DidYouMean::Jaro> @ rbi/stdlib.rbi:89
    class <constant:JaroWinkler> (<constant:BasicObject>) -> <Class:DidYouMean::JaroWinkler> @ rbi/stdlib.rbi:91
      static-field <constant:THRESHOLD> -> Float @ rbi/stdlib.rbi:12466
      static-field <constant:WEIGHT> -> Float @ rbi/stdlib.rbi:12467
    class <constant:Levenshtein> (<constant:BasicObject>) -> <Class:DidYouMean::Levenshtein> @ rbi/stdlib.rbi:93
    class <constant:MethodNameChecker> < ::<constant:Object> () -> <Class:DidYouMean::MethodNameChecker> @ rbi/stdlib.rbi:95
      static-field <constant:NAMES_TO_EXCLUDE> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:12468
    class <constant:NameErrorCheckers> (<constant:BasicObject>) -> <Class:DidYouMean::NameErrorCheckers> @ rbi/stdlib.rbi:97
    class <constant:NullChecker> < ::<constant:Object> () -> <Class:DidYouMean::NullChecker> @ rbi/stdlib.rbi:99
    class <constant:SpellChecker> < ::<constant:Object> () -> <Class:DidYouMean::SpellChecker> @ rbi/stdlib.rbi:101
    class <constant:VariableNameChecker> < ::<constant:Object> () -> <Class:DidYouMean::VariableNameChecker> @ rbi/stdlib.rbi:103
      static-field <constant:NAMES_TO_EXCLUDE> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:12471
    class <singleton class:<constant:ClassNameChecker>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:83
    class <singleton class:<constant:Correctable>> < ::<constant:Module> () @ rbi/stdlib.rbi:85
    class <singleton class:<constant:Formatter>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:87
    class <singleton class:<constant:Jaro>> < ::<constant:Module> () @ rbi/stdlib.rbi:89
    class <singleton class:<constant:JaroWinkler>> < ::<constant:Module> () @ rbi/stdlib.rbi:91
    class <singleton class:<constant:Levenshtein>> < ::<constant:Module> () @ rbi/stdlib.rbi:93
    class <singleton class:<constant:MethodNameChecker>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:95
    class <singleton class:<constant:NameErrorCheckers>> < ::<constant:Module> () @ rbi/stdlib.rbi:97
    class <singleton class:<constant:NullChecker>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:99
    class <singleton class:<constant:SpellChecker>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:101
    class <singleton class:<constant:VariableNameChecker>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:103
    static-field <constant:IGNORED_CALLERS> -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12465
    static-field <constant:SPELL_CHECKERS> -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12469
    static-field <constant:VERSION> -> String @ rbi/stdlib.rbi:12470
  class <constant:Dir>[<constant:Elem>] < ::<constant:Object> (<constant:Enumerable>) -> <Class:Dir> @ rbi/stdlib.rbi:762
    method <overload N.1 : each> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:885
      argument blk<block> @ rbi/stdlib.rbi:886
    method clone () -> AppliedType {
      klass = ::<constant:Dir>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:873
    method close () -> NilClass @ rbi/stdlib.rbi:876
    method dup () -> AppliedType {
      klass = ::<constant:Dir>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:879
    method each (blk) -> AppliedType {
      klass = ::<constant:Dir>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:886
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = String
        ]
      } @ rbi/stdlib.rbi:882
    method fileno () -> Integer @ rbi/stdlib.rbi:889
    method freeze () -> AppliedType {
      klass = ::<constant:Dir>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:892
    method initialize (arg0, arg1) -> Object @ rbi/stdlib.rbi:899
      argument arg0<> -> String @ rbi/stdlib.rbi:895
      argument arg1<optional> -> Encoding @ rbi/stdlib.rbi:896
    method inspect () -> String @ rbi/stdlib.rbi:902
    method path () -> String | NilClass @ rbi/stdlib.rbi:905
    method pos () -> Integer @ rbi/stdlib.rbi:908
    method pos= (arg0) -> Integer @ rbi/stdlib.rbi:914
      argument arg0<> -> Integer @ rbi/stdlib.rbi:911
    method read () -> String | NilClass @ rbi/stdlib.rbi:917
    method rewind () -> AppliedType {
      klass = ::<constant:Dir>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:920
    method seek (arg0) -> AppliedType {
      klass = ::<constant:Dir>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:926
      argument arg0<> -> Integer @ rbi/stdlib.rbi:923
    method taint () -> AppliedType {
      klass = ::<constant:Dir>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:929
    method tell () -> Integer @ rbi/stdlib.rbi:932
    method to_path () -> String | NilClass @ rbi/stdlib.rbi:935
    method trust () -> AppliedType {
      klass = ::<constant:Dir>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:938
    method untaint () -> AppliedType {
      klass = ::<constant:Dir>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:941
    method untrust () -> AppliedType {
      klass = ::<constant:Dir>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:944
    typeMember(=) <constant:Elem> -> String @ rbi/stdlib.rbi:764
  class <constant:EOFError> < ::<constant:IOError> () -> <Class:EOFError> @ rbi/stdlib.rbi:3995
    method clone () -> EOFError @ rbi/stdlib.rbi:3997
    method dup () -> EOFError @ rbi/stdlib.rbi:4000
    method freeze () -> EOFError @ rbi/stdlib.rbi:4003
    method taint () -> EOFError @ rbi/stdlib.rbi:4006
    method trust () -> EOFError @ rbi/stdlib.rbi:4009
    method untaint () -> EOFError @ rbi/stdlib.rbi:4012
    method untrust () -> EOFError @ rbi/stdlib.rbi:4015
  class <constant:Encoding> < ::<constant:Object> () -> <Class:Encoding> @ rbi/stdlib.rbi:4018
    class <constant:CompatibilityError> < ::<constant:EncodingError> () -> <Class:Encoding::CompatibilityError> @ rbi/stdlib.rbi:116
    class <constant:Converter> < ::<constant:Data> () -> <Class:Encoding::Converter> @ rbi/stdlib.rbi:118
      static-field <constant:AFTER_OUTPUT> -> Integer @ rbi/stdlib.rbi:12517
      static-field <constant:CRLF_NEWLINE_DECORATOR> -> Integer @ rbi/stdlib.rbi:12518
      static-field <constant:CR_NEWLINE_DECORATOR> -> Integer @ rbi/stdlib.rbi:12519
      static-field <constant:INVALID_MASK> -> Integer @ rbi/stdlib.rbi:12520
      static-field <constant:INVALID_REPLACE> -> Integer @ rbi/stdlib.rbi:12521
      static-field <constant:PARTIAL_INPUT> -> Integer @ rbi/stdlib.rbi:12522
      static-field <constant:UNDEF_HEX_CHARREF> -> Integer @ rbi/stdlib.rbi:12523
      static-field <constant:UNDEF_MASK> -> Integer @ rbi/stdlib.rbi:12524
      static-field <constant:UNDEF_REPLACE> -> Integer @ rbi/stdlib.rbi:12525
      static-field <constant:UNIVERSAL_NEWLINE_DECORATOR> -> Integer @ rbi/stdlib.rbi:12526
      static-field <constant:XML_ATTR_CONTENT_DECORATOR> -> Integer @ rbi/stdlib.rbi:12527
      static-field <constant:XML_ATTR_QUOTE_DECORATOR> -> Integer @ rbi/stdlib.rbi:12528
      static-field <constant:XML_TEXT_DECORATOR> -> Integer @ rbi/stdlib.rbi:12529
    class <constant:ConverterNotFoundError> < ::<constant:EncodingError> () -> <Class:Encoding::ConverterNotFoundError> @ rbi/stdlib.rbi:120
    class <constant:InvalidByteSequenceError> < ::<constant:EncodingError> () -> <Class:Encoding::InvalidByteSequenceError> @ rbi/stdlib.rbi:122
    class <constant:UndefinedConversionError> < ::<constant:EncodingError> () -> <Class:Encoding::UndefinedConversionError> @ rbi/stdlib.rbi:124
    class <singleton class:<constant:CompatibilityError>> < ::<singleton class:<constant:EncodingError>> () @ rbi/stdlib.rbi:116
    class <singleton class:<constant:Converter>> < ::<singleton class:<constant:Data>> () @ rbi/stdlib.rbi:118
    class <singleton class:<constant:ConverterNotFoundError>> < ::<singleton class:<constant:EncodingError>> () @ rbi/stdlib.rbi:120
    class <singleton class:<constant:InvalidByteSequenceError>> < ::<singleton class:<constant:EncodingError>> () @ rbi/stdlib.rbi:122
    class <singleton class:<constant:UndefinedConversionError>> < ::<singleton class:<constant:EncodingError>> () @ rbi/stdlib.rbi:124
    method ascii_compatible? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4068
    method clone () -> Encoding @ rbi/stdlib.rbi:4071
    method dummy? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4074
    method dup () -> Encoding @ rbi/stdlib.rbi:4077
    method freeze () -> Encoding @ rbi/stdlib.rbi:4080
    method inspect () -> String @ rbi/stdlib.rbi:4083
    method name () -> String @ rbi/stdlib.rbi:4086
    method names () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:4089
    method replicate (name) -> Encoding @ rbi/stdlib.rbi:4095
      argument name<> -> String @ rbi/stdlib.rbi:4092
    method taint () -> Encoding @ rbi/stdlib.rbi:4098
    method to_s () -> String @ rbi/stdlib.rbi:4110
    method trust () -> Encoding @ rbi/stdlib.rbi:4101
    method untaint () -> Encoding @ rbi/stdlib.rbi:4104
    method untrust () -> Encoding @ rbi/stdlib.rbi:4107
    static-field <constant:ANSI_X3_4_1968> -> Encoding @ rbi/stdlib.rbi:12472
    static-field <constant:ASCII> -> Encoding @ rbi/stdlib.rbi:12473
    static-field <constant:ASCII_8BIT> -> Encoding @ rbi/stdlib.rbi:12474
    static-field <constant:BIG5> -> Encoding @ rbi/stdlib.rbi:12475
    static-field <constant:BIG5_HKSCS> -> Encoding @ rbi/stdlib.rbi:12476
    static-field <constant:BIG5_HKSCS_2008> -> Encoding @ rbi/stdlib.rbi:12477
    static-field <constant:BIG5_UAO> -> Encoding @ rbi/stdlib.rbi:12478
    static-field <constant:BINARY> -> Encoding @ rbi/stdlib.rbi:12479
    static-field <constant:CP1250> -> Encoding @ rbi/stdlib.rbi:12480
    static-field <constant:CP1251> -> Encoding @ rbi/stdlib.rbi:12481
    static-field <constant:CP1252> -> Encoding @ rbi/stdlib.rbi:12482
    static-field <constant:CP1253> -> Encoding @ rbi/stdlib.rbi:12483
    static-field <constant:CP1254> -> Encoding @ rbi/stdlib.rbi:12484
    static-field <constant:CP1255> -> Encoding @ rbi/stdlib.rbi:12485
    static-field <constant:CP1256> -> Encoding @ rbi/stdlib.rbi:12486
    static-field <constant:CP1257> -> Encoding @ rbi/stdlib.rbi:12487
    static-field <constant:CP1258> -> Encoding @ rbi/stdlib.rbi:12488
    static-field <constant:CP437> -> Encoding @ rbi/stdlib.rbi:12489
    static-field <constant:CP50220> -> Encoding @ rbi/stdlib.rbi:12490
    static-field <constant:CP50221> -> Encoding @ rbi/stdlib.rbi:12491
    static-field <constant:CP51932> -> Encoding @ rbi/stdlib.rbi:12492
    static-field <constant:CP65000> -> Encoding @ rbi/stdlib.rbi:12493
    static-field <constant:CP65001> -> Encoding @ rbi/stdlib.rbi:12494
    static-field <constant:CP737> -> Encoding @ rbi/stdlib.rbi:12495
    static-field <constant:CP775> -> Encoding @ rbi/stdlib.rbi:12496
    static-field <constant:CP850> -> Encoding @ rbi/stdlib.rbi:12497
    static-field <constant:CP852> -> Encoding @ rbi/stdlib.rbi:12498
    static-field <constant:CP855> -> Encoding @ rbi/stdlib.rbi:12499
    static-field <constant:CP857> -> Encoding @ rbi/stdlib.rbi:12500
    static-field <constant:CP860> -> Encoding @ rbi/stdlib.rbi:12501
    static-field <constant:CP861> -> Encoding @ rbi/stdlib.rbi:12502
    static-field <constant:CP862> -> Encoding @ rbi/stdlib.rbi:12503
    static-field <constant:CP863> -> Encoding @ rbi/stdlib.rbi:12504
    static-field <constant:CP864> -> Encoding @ rbi/stdlib.rbi:12505
    static-field <constant:CP865> -> Encoding @ rbi/stdlib.rbi:12506
    static-field <constant:CP866> -> Encoding @ rbi/stdlib.rbi:12507
    static-field <constant:CP869> -> Encoding @ rbi/stdlib.rbi:12508
    static-field <constant:CP874> -> Encoding @ rbi/stdlib.rbi:12509
    static-field <constant:CP878> -> Encoding @ rbi/stdlib.rbi:12510
    static-field <constant:CP932> -> Encoding @ rbi/stdlib.rbi:12511
    static-field <constant:CP936> -> Encoding @ rbi/stdlib.rbi:12512
    static-field <constant:CP949> -> Encoding @ rbi/stdlib.rbi:12513
    static-field <constant:CP950> -> Encoding @ rbi/stdlib.rbi:12514
    static-field <constant:CP951> -> Encoding @ rbi/stdlib.rbi:12515
    static-field <constant:CSWINDOWS31J> -> Encoding @ rbi/stdlib.rbi:12516
    static-field <constant:EBCDIC_CP_US> -> Encoding @ rbi/stdlib.rbi:12530
    static-field <constant:EMACS_MULE> -> Encoding @ rbi/stdlib.rbi:12531
    static-field <constant:EUCCN> -> Encoding @ rbi/stdlib.rbi:12532
    static-field <constant:EUCJP> -> Encoding @ rbi/stdlib.rbi:12533
    static-field <constant:EUCJP_MS> -> Encoding @ rbi/stdlib.rbi:12534
    static-field <constant:EUCKR> -> Encoding @ rbi/stdlib.rbi:12535
    static-field <constant:EUCTW> -> Encoding @ rbi/stdlib.rbi:12536
    static-field <constant:EUC_CN> -> Encoding @ rbi/stdlib.rbi:12537
    static-field <constant:EUC_JISX0213> -> Encoding @ rbi/stdlib.rbi:12538
    static-field <constant:EUC_JIS_2004> -> Encoding @ rbi/stdlib.rbi:12539
    static-field <constant:EUC_JP> -> Encoding @ rbi/stdlib.rbi:12540
    static-field <constant:EUC_JP_MS> -> Encoding @ rbi/stdlib.rbi:12541
    static-field <constant:EUC_KR> -> Encoding @ rbi/stdlib.rbi:12542
    static-field <constant:EUC_TW> -> Encoding @ rbi/stdlib.rbi:12543
    static-field <constant:GB12345> -> Encoding @ rbi/stdlib.rbi:12544
    static-field <constant:GB18030> -> Encoding @ rbi/stdlib.rbi:12545
    static-field <constant:GB1988> -> Encoding @ rbi/stdlib.rbi:12546
    static-field <constant:GB2312> -> Encoding @ rbi/stdlib.rbi:12547
    static-field <constant:GBK> -> Encoding @ rbi/stdlib.rbi:12548
    static-field <constant:IBM037> -> Encoding @ rbi/stdlib.rbi:12549
    static-field <constant:IBM437> -> Encoding @ rbi/stdlib.rbi:12550
    static-field <constant:IBM737> -> Encoding @ rbi/stdlib.rbi:12551
    static-field <constant:IBM775> -> Encoding @ rbi/stdlib.rbi:12552
    static-field <constant:IBM850> -> Encoding @ rbi/stdlib.rbi:12553
    static-field <constant:IBM852> -> Encoding @ rbi/stdlib.rbi:12554
    static-field <constant:IBM855> -> Encoding @ rbi/stdlib.rbi:12555
    static-field <constant:IBM857> -> Encoding @ rbi/stdlib.rbi:12556
    static-field <constant:IBM860> -> Encoding @ rbi/stdlib.rbi:12557
    static-field <constant:IBM861> -> Encoding @ rbi/stdlib.rbi:12558
    static-field <constant:IBM862> -> Encoding @ rbi/stdlib.rbi:12559
    static-field <constant:IBM863> -> Encoding @ rbi/stdlib.rbi:12560
    static-field <constant:IBM864> -> Encoding @ rbi/stdlib.rbi:12561
    static-field <constant:IBM865> -> Encoding @ rbi/stdlib.rbi:12562
    static-field <constant:IBM866> -> Encoding @ rbi/stdlib.rbi:12563
    static-field <constant:IBM869> -> Encoding @ rbi/stdlib.rbi:12564
    static-field <constant:ISO2022_JP2> -> Encoding @ rbi/stdlib.rbi:12566
    static-field <constant:ISO2022_JP> -> Encoding @ rbi/stdlib.rbi:12565
    static-field <constant:ISO8859_10> -> Encoding @ rbi/stdlib.rbi:12568
    static-field <constant:ISO8859_11> -> Encoding @ rbi/stdlib.rbi:12569
    static-field <constant:ISO8859_13> -> Encoding @ rbi/stdlib.rbi:12570
    static-field <constant:ISO8859_14> -> Encoding @ rbi/stdlib.rbi:12571
    static-field <constant:ISO8859_15> -> Encoding @ rbi/stdlib.rbi:12572
    static-field <constant:ISO8859_16> -> Encoding @ rbi/stdlib.rbi:12573
    static-field <constant:ISO8859_1> -> Encoding @ rbi/stdlib.rbi:12567
    static-field <constant:ISO8859_2> -> Encoding @ rbi/stdlib.rbi:12574
    static-field <constant:ISO8859_3> -> Encoding @ rbi/stdlib.rbi:12575
    static-field <constant:ISO8859_4> -> Encoding @ rbi/stdlib.rbi:12576
    static-field <constant:ISO8859_5> -> Encoding @ rbi/stdlib.rbi:12577
    static-field <constant:ISO8859_6> -> Encoding @ rbi/stdlib.rbi:12578
    static-field <constant:ISO8859_7> -> Encoding @ rbi/stdlib.rbi:12579
    static-field <constant:ISO8859_8> -> Encoding @ rbi/stdlib.rbi:12580
    static-field <constant:ISO8859_9> -> Encoding @ rbi/stdlib.rbi:12581
    static-field <constant:ISO_2022_JP> -> Encoding @ rbi/stdlib.rbi:12582
    static-field <constant:ISO_2022_JP_2> -> Encoding @ rbi/stdlib.rbi:12583
    static-field <constant:ISO_2022_JP_KDDI> -> Encoding @ rbi/stdlib.rbi:12584
    static-field <constant:ISO_8859_10> -> Encoding @ rbi/stdlib.rbi:12586
    static-field <constant:ISO_8859_11> -> Encoding @ rbi/stdlib.rbi:12587
    static-field <constant:ISO_8859_13> -> Encoding @ rbi/stdlib.rbi:12588
    static-field <constant:ISO_8859_14> -> Encoding @ rbi/stdlib.rbi:12589
    static-field <constant:ISO_8859_15> -> Encoding @ rbi/stdlib.rbi:12590
    static-field <constant:ISO_8859_16> -> Encoding @ rbi/stdlib.rbi:12591
    static-field <constant:ISO_8859_1> -> Encoding @ rbi/stdlib.rbi:12585
    static-field <constant:ISO_8859_2> -> Encoding @ rbi/stdlib.rbi:12592
    static-field <constant:ISO_8859_3> -> Encoding @ rbi/stdlib.rbi:12593
    static-field <constant:ISO_8859_4> -> Encoding @ rbi/stdlib.rbi:12594
    static-field <constant:ISO_8859_5> -> Encoding @ rbi/stdlib.rbi:12595
    static-field <constant:ISO_8859_6> -> Encoding @ rbi/stdlib.rbi:12596
    static-field <constant:ISO_8859_7> -> Encoding @ rbi/stdlib.rbi:12597
    static-field <constant:ISO_8859_8> -> Encoding @ rbi/stdlib.rbi:12598
    static-field <constant:ISO_8859_9> -> Encoding @ rbi/stdlib.rbi:12599
    static-field <constant:KOI8_R> -> Encoding @ rbi/stdlib.rbi:12600
    static-field <constant:KOI8_U> -> Encoding @ rbi/stdlib.rbi:12601
    static-field <constant:MACCENTEURO> -> Encoding @ rbi/stdlib.rbi:12602
    static-field <constant:MACCROATIAN> -> Encoding @ rbi/stdlib.rbi:12603
    static-field <constant:MACCYRILLIC> -> Encoding @ rbi/stdlib.rbi:12604
    static-field <constant:MACGREEK> -> Encoding @ rbi/stdlib.rbi:12605
    static-field <constant:MACICELAND> -> Encoding @ rbi/stdlib.rbi:12606
    static-field <constant:MACJAPAN> -> Encoding @ rbi/stdlib.rbi:12607
    static-field <constant:MACJAPANESE> -> Encoding @ rbi/stdlib.rbi:12608
    static-field <constant:MACROMAN> -> Encoding @ rbi/stdlib.rbi:12609
    static-field <constant:MACROMANIA> -> Encoding @ rbi/stdlib.rbi:12610
    static-field <constant:MACTHAI> -> Encoding @ rbi/stdlib.rbi:12611
    static-field <constant:MACTURKISH> -> Encoding @ rbi/stdlib.rbi:12612
    static-field <constant:MACUKRAINE> -> Encoding @ rbi/stdlib.rbi:12613
    static-field <constant:PCK> -> Encoding @ rbi/stdlib.rbi:12614
    static-field <constant:SHIFT_JIS> -> Encoding @ rbi/stdlib.rbi:12615
    static-field <constant:SJIS> -> Encoding @ rbi/stdlib.rbi:12616
    static-field <constant:SJIS_DOCOMO> -> Encoding @ rbi/stdlib.rbi:12617
    static-field <constant:SJIS_KDDI> -> Encoding @ rbi/stdlib.rbi:12618
    static-field <constant:SJIS_SOFTBANK> -> Encoding @ rbi/stdlib.rbi:12619
    static-field <constant:STATELESS_ISO_2022_JP> -> Encoding @ rbi/stdlib.rbi:12620
    static-field <constant:STATELESS_ISO_2022_JP_KDDI> -> Encoding @ rbi/stdlib.rbi:12621
    static-field <constant:TIS_620> -> Encoding @ rbi/stdlib.rbi:12622
    static-field <constant:UCS_2BE> -> Encoding @ rbi/stdlib.rbi:12623
    static-field <constant:UCS_4BE> -> Encoding @ rbi/stdlib.rbi:12624
    static-field <constant:UCS_4LE> -> Encoding @ rbi/stdlib.rbi:12625
    static-field <constant:US_ASCII> -> Encoding @ rbi/stdlib.rbi:12626
    static-field <constant:UTF8_DOCOMO> -> Encoding @ rbi/stdlib.rbi:12627
    static-field <constant:UTF8_KDDI> -> Encoding @ rbi/stdlib.rbi:12628
    static-field <constant:UTF8_MAC> -> Encoding @ rbi/stdlib.rbi:12629
    static-field <constant:UTF8_SOFTBANK> -> Encoding @ rbi/stdlib.rbi:12630
    static-field <constant:UTF_16> -> Encoding @ rbi/stdlib.rbi:12631
    static-field <constant:UTF_16BE> -> Encoding @ rbi/stdlib.rbi:12632
    static-field <constant:UTF_16LE> -> Encoding @ rbi/stdlib.rbi:12633
    static-field <constant:UTF_32> -> Encoding @ rbi/stdlib.rbi:12634
    static-field <constant:UTF_32BE> -> Encoding @ rbi/stdlib.rbi:12635
    static-field <constant:UTF_32LE> -> Encoding @ rbi/stdlib.rbi:12636
    static-field <constant:UTF_7> -> Encoding @ rbi/stdlib.rbi:12637
    static-field <constant:UTF_8> -> Encoding @ rbi/stdlib.rbi:12638
    static-field <constant:UTF_8_HFS> -> Encoding @ rbi/stdlib.rbi:12639
    static-field <constant:UTF_8_MAC> -> Encoding @ rbi/stdlib.rbi:12640
    static-field <constant:WINDOWS_1250> -> Encoding @ rbi/stdlib.rbi:12641
    static-field <constant:WINDOWS_1251> -> Encoding @ rbi/stdlib.rbi:12642
    static-field <constant:WINDOWS_1252> -> Encoding @ rbi/stdlib.rbi:12643
    static-field <constant:WINDOWS_1253> -> Encoding @ rbi/stdlib.rbi:12644
    static-field <constant:WINDOWS_1254> -> Encoding @ rbi/stdlib.rbi:12645
    static-field <constant:WINDOWS_1255> -> Encoding @ rbi/stdlib.rbi:12646
    static-field <constant:WINDOWS_1256> -> Encoding @ rbi/stdlib.rbi:12647
    static-field <constant:WINDOWS_1257> -> Encoding @ rbi/stdlib.rbi:12648
    static-field <constant:WINDOWS_1258> -> Encoding @ rbi/stdlib.rbi:12649
    static-field <constant:WINDOWS_31J> -> Encoding @ rbi/stdlib.rbi:12650
    static-field <constant:WINDOWS_874> -> Encoding @ rbi/stdlib.rbi:12651
  class <constant:EncodingError> < ::<constant:StandardError> () -> <Class:EncodingError> @ rbi/stdlib.rbi:4113
    method clone () -> EncodingError @ rbi/stdlib.rbi:4115
    method dup () -> EncodingError @ rbi/stdlib.rbi:4118
    method freeze () -> EncodingError @ rbi/stdlib.rbi:4121
    method taint () -> EncodingError @ rbi/stdlib.rbi:4124
    method trust () -> EncodingError @ rbi/stdlib.rbi:4127
    method untaint () -> EncodingError @ rbi/stdlib.rbi:4130
    method untrust () -> EncodingError @ rbi/stdlib.rbi:4133
  class <constant:Enumerable>[<constant:Elem>] (<constant:BasicObject>) -> <Class:Enumerable> @ rbi/stdlib.rbi:4136
    method <overload N.1 : all?> (blk) -> TrueClass | FalseClass @ rbi/stdlib.rbi:4141
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4142
    method <overload N.1 : any?> (blk) -> TrueClass | FalseClass @ rbi/stdlib.rbi:4148
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4149
    method <overload N.1 : collect> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4158
      argument blk<block> @ rbi/stdlib.rbi:4159
    method <overload N.1 : count> (arg0) -> Integer @ rbi/stdlib.rbi:4168
      argument arg0<optional> -> BasicObject @ rbi/stdlib.rbi:4169
      argument blk<block> @ rbi/stdlib.rbi:4176
    method <overload N.1 : cycle> (n) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4183
      argument blk<block> @ rbi/stdlib.rbi:4187
      argument n<optional> -> Integer @ rbi/stdlib.rbi:4184
    method <overload N.1 : detect> (ifnone) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4194
      argument blk<block> @ rbi/stdlib.rbi:4198
      argument ifnone<optional> -> Proc @ rbi/stdlib.rbi:4195
    method <overload N.1 : drop_while> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4210
      argument blk<block> @ rbi/stdlib.rbi:4211
    method <overload N.1 : each_cons> (n) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4218
      argument blk<block> @ rbi/stdlib.rbi:4222
      argument n<> -> Integer @ rbi/stdlib.rbi:4219
    method <overload N.1 : each_slice> (n) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4451
      argument blk<block> @ rbi/stdlib.rbi:4455
      argument n<> -> Integer @ rbi/stdlib.rbi:4452
    method <overload N.1 : each_with_index> () -> AppliedType {
      klass = ::<constant:Enumerable>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4228
      argument blk<block> @ rbi/stdlib.rbi:4229
    method <overload N.1 : find> (ifnone) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4462
      argument blk<block> @ rbi/stdlib.rbi:4466
      argument ifnone<optional> -> Proc @ rbi/stdlib.rbi:4463
    method <overload N.1 : find_all> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4238
      argument blk<block> @ rbi/stdlib.rbi:4239
    method <overload N.1 : find_index> (blk) -> Integer | NilClass @ rbi/stdlib.rbi:4245
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4246
      argument value<optional> @ rbi/stdlib.rbi:4250
    method <overload N.1 : first> (n) -> AppliedType {
          klass = ::<constant:Array>
          targs = [
            <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
          ]
        } | NilClass @ rbi/stdlib.rbi:4253
      argument n<optional> -> Integer @ rbi/stdlib.rbi:4254
    method <overload N.1 : grep> (arg0, blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:4263
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:4264
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4265
    method <overload N.1 : group_by> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4274
      argument blk<block> @ rbi/stdlib.rbi:4275
    method <overload N.1 : inject> (arg0) -> untyped @ rbi/stdlib.rbi:4288
      argument arg0<optional> -> Symbol @ rbi/stdlib.rbi:4289
      argument blk<block> @ rbi/stdlib.rbi:4301
      argument initial<optional> @ rbi/stdlib.rbi:4301
    method <overload N.1 : map> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4478
      argument blk<block> @ rbi/stdlib.rbi:4479
    method <overload N.1 : max> (blk) -> LambdaParam(::<constant:Enumerable>#<constant:Elem>) @ rbi/stdlib.rbi:4304
      argument arg0<optional> @ rbi/stdlib.rbi:4317
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = Integer
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
          <constant:Arg1> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4305
    method <overload N.1 : max_by> (blk) -> LambdaParam(::<constant:Enumerable>#<constant:Elem>) @ rbi/stdlib.rbi:4320
      argument arg0<optional> @ rbi/stdlib.rbi:4333
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = Integer
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
          <constant:Arg1> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4321
    method <overload N.1 : min> (blk) -> LambdaParam(::<constant:Enumerable>#<constant:Elem>) @ rbi/stdlib.rbi:4336
      argument arg0<optional> @ rbi/stdlib.rbi:4349
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = Integer
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
          <constant:Arg1> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4337
    method <overload N.1 : min_by> (blk) -> LambdaParam(::<constant:Enumerable>#<constant:Elem>) @ rbi/stdlib.rbi:4352
      argument arg0<optional> @ rbi/stdlib.rbi:4365
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = Integer
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
          <constant:Arg1> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4353
    method <overload N.1 : minmax> (blk) -> TupleType {
      0 = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      1 = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
    } @ rbi/stdlib.rbi:4368
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = Integer
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
          <constant:Arg1> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4369
    method <overload N.1 : minmax_by> (blk) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4375
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = Integer
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
          <constant:Arg1> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4376
    method <overload N.1 : none?> (blk) -> TrueClass | FalseClass @ rbi/stdlib.rbi:4382
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4383
    method <overload N.1 : one?> (blk) -> TrueClass | FalseClass @ rbi/stdlib.rbi:4389
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4390
    method <overload N.1 : partition> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4399
      argument blk<block> @ rbi/stdlib.rbi:4400
    method <overload N.1 : reduce> (arg0) -> untyped @ rbi/stdlib.rbi:4492
      argument arg0<optional> -> Symbol @ rbi/stdlib.rbi:4493
      argument blk<block> @ rbi/stdlib.rbi:4505
      argument initial<optional> @ rbi/stdlib.rbi:4505
    method <overload N.1 : reject> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4406
      argument blk<block> @ rbi/stdlib.rbi:4407
    method <overload N.1 : reverse_each> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4413
      argument blk<block> @ rbi/stdlib.rbi:4414
    method <overload N.1 : select> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4511
      argument blk<block> @ rbi/stdlib.rbi:4512
    method <overload N.1 : sort> (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4417
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = Integer
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
          <constant:Arg1> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4418
    method <overload N.1 : sort_by> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4427
      argument blk<block> @ rbi/stdlib.rbi:4428
    method <overload N.1 : take_while> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4440
      argument blk<block> @ rbi/stdlib.rbi:4441
    method <overload N.2 : count> (blk) -> Integer @ rbi/stdlib.rbi:4172
      argument arg0<optional> @ rbi/stdlib.rbi:4176
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4173
    method <overload N.2 : find_index> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4249
      argument blk<block> @ rbi/stdlib.rbi:4250
      argument value<optional> @ rbi/stdlib.rbi:4250
    method <overload N.2 : inject> (initial, blk) -> LambdaParam(::<constant:Enumerable>#<constant:Elem>) @ rbi/stdlib.rbi:4292
      argument arg0<optional> @ rbi/stdlib.rbi:4301
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
          <constant:Arg1> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4294
      argument initial<optional> -> LambdaParam(::<constant:Enumerable>#<constant:Elem>) @ rbi/stdlib.rbi:4293
    method <overload N.2 : max> (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4308
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:4309
      argument blk<block> @ rbi/stdlib.rbi:4317
    method <overload N.2 : max_by> (arg0) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4324
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:4325
      argument blk<block> @ rbi/stdlib.rbi:4333
    method <overload N.2 : min> (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4340
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:4341
      argument blk<block> @ rbi/stdlib.rbi:4349
    method <overload N.2 : min_by> (arg0) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4356
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:4357
      argument blk<block> @ rbi/stdlib.rbi:4365
    method <overload N.2 : reduce> (initial, blk) -> LambdaParam(::<constant:Enumerable>#<constant:Elem>) @ rbi/stdlib.rbi:4496
      argument arg0<optional> @ rbi/stdlib.rbi:4505
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
          <constant:Arg1> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4498
      argument initial<optional> -> LambdaParam(::<constant:Enumerable>#<constant:Elem>) @ rbi/stdlib.rbi:4497
    method <overload N.3 : inject> (blk) -> LambdaParam(::<constant:Enumerable>#<constant:Elem>) @ rbi/stdlib.rbi:4297
      argument arg0<optional> @ rbi/stdlib.rbi:4301
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
          <constant:Arg1> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4298
      argument initial<optional> @ rbi/stdlib.rbi:4301
    method <overload N.3 : max> (arg0, blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4312
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:4313
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = Integer
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
          <constant:Arg1> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4314
    method <overload N.3 : max_by> (arg0, blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4328
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:4329
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = Integer
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
          <constant:Arg1> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4330
    method <overload N.3 : min> (arg0, blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4344
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:4345
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = Integer
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
          <constant:Arg1> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4346
    method <overload N.3 : min_by> (arg0, blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4360
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:4361
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = Integer
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
          <constant:Arg1> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4362
    method <overload N.3 : reduce> (blk) -> LambdaParam(::<constant:Enumerable>#<constant:Elem>) @ rbi/stdlib.rbi:4501
      argument arg0<optional> @ rbi/stdlib.rbi:4505
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
          <constant:Arg1> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4502
      argument initial<optional> @ rbi/stdlib.rbi:4505
    method all? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4145
      argument blk<block> @ rbi/stdlib.rbi:4145
    method any? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4152
      argument blk<block> @ rbi/stdlib.rbi:4152
    method collect (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:4159
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4155
    method collect_concat (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:4165
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = AppliedType {
              klass = ::<constant:Enumerator>
              targs = [
                <constant:Elem> = BasicObject
              ]
            }
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4162
    method count () -> Integer @ rbi/stdlib.rbi:4176
      argument arg0<optional> @ rbi/stdlib.rbi:4176
      argument blk<block> @ rbi/stdlib.rbi:4176
    method cycle (n, blk) -> NilClass @ rbi/stdlib.rbi:4187
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4180
      argument n<optional> -> Integer @ rbi/stdlib.rbi:4179
    method detect (ifnone, blk) -> NilClass | LambdaParam(::<constant:Enumerable>#<constant:Elem>) @ rbi/stdlib.rbi:4198
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4191
      argument ifnone<optional> -> Proc @ rbi/stdlib.rbi:4190
    method drop (n) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4204
      argument n<> -> Integer @ rbi/stdlib.rbi:4201
    method drop_while (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4211
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4207
    method each_cons (n, blk) -> NilClass @ rbi/stdlib.rbi:4222
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = AppliedType {
              klass = ::<constant:Array>
              targs = [
                <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
              ]
            }
        ]
      } @ rbi/stdlib.rbi:4215
      argument n<> -> Integer @ rbi/stdlib.rbi:4214
    method each_slice (n, blk) -> NilClass @ rbi/stdlib.rbi:4455
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = AppliedType {
              klass = ::<constant:Array>
              targs = [
                <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
              ]
            }
        ]
      } @ rbi/stdlib.rbi:4448
      argument n<> -> Integer @ rbi/stdlib.rbi:4447
    method each_with_index (blk) -> AppliedType {
      klass = ::<constant:Enumerable>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4229
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
          <constant:Arg1> = Integer
        ]
      } @ rbi/stdlib.rbi:4225
    method entries () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4232
    method find (ifnone, blk) -> NilClass | LambdaParam(::<constant:Enumerable>#<constant:Elem>) @ rbi/stdlib.rbi:4466
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4459
      argument ifnone<optional> -> Proc @ rbi/stdlib.rbi:4458
    method find_all (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4239
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4235
    method find_index (value) -> Integer | NilClass @ rbi/stdlib.rbi:4250
      argument blk<block> @ rbi/stdlib.rbi:4250
      argument value<optional> -> BasicObject @ rbi/stdlib.rbi:4242
    method first () -> NilClass | LambdaParam(::<constant:Enumerable>#<constant:Elem>) @ rbi/stdlib.rbi:4257
      argument n<optional> @ rbi/stdlib.rbi:4257
    method flat_map (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:4472
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = AppliedType {
              klass = ::<constant:Enumerator>
              targs = [
                <constant:Elem> = BasicObject
              ]
            }
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4469
    method grep (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4268
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:4260
      argument blk<block> @ rbi/stdlib.rbi:4268
    method group_by (blk) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = AppliedType {
            klass = ::<constant:Array>
            targs = [
              <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
            ]
          }
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:4275
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4271
    method include? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:4281
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:4278
    method inject (initial, arg0) -> untyped @ rbi/stdlib.rbi:4301
      argument arg0<optional> -> Symbol @ rbi/stdlib.rbi:4285
      argument blk<block> @ rbi/stdlib.rbi:4301
      argument initial<optional> -> BasicObject @ rbi/stdlib.rbi:4284
    method map (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:4479
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4475
    method max () -> LambdaParam(::<constant:Enumerable>#<constant:Elem>) @ rbi/stdlib.rbi:4317
      argument arg0<optional> @ rbi/stdlib.rbi:4317
      argument blk<block> @ rbi/stdlib.rbi:4317
    method max_by () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4333
      argument arg0<optional> @ rbi/stdlib.rbi:4333
      argument blk<block> @ rbi/stdlib.rbi:4333
    method member? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:4485
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:4482
    method min () -> LambdaParam(::<constant:Enumerable>#<constant:Elem>) @ rbi/stdlib.rbi:4349
      argument arg0<optional> @ rbi/stdlib.rbi:4349
      argument blk<block> @ rbi/stdlib.rbi:4349
    method min_by () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4365
      argument arg0<optional> @ rbi/stdlib.rbi:4365
      argument blk<block> @ rbi/stdlib.rbi:4365
    method minmax () -> TupleType {
      0 = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      1 = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
    } @ rbi/stdlib.rbi:4372
      argument blk<block> @ rbi/stdlib.rbi:4372
    method minmax_by () -> TupleType {
      0 = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      1 = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
    } @ rbi/stdlib.rbi:4379
      argument blk<block> @ rbi/stdlib.rbi:4379
    method none? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4386
      argument blk<block> @ rbi/stdlib.rbi:4386
    method one? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4393
      argument blk<block> @ rbi/stdlib.rbi:4393
    method partition (blk) -> TupleType {
      0 = AppliedType {
            klass = ::<constant:Array>
            targs = [
              <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
            ]
          }
      1 = AppliedType {
            klass = ::<constant:Array>
            targs = [
              <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
            ]
          }
    } @ rbi/stdlib.rbi:4400
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4396
    method reduce (initial, arg0) -> untyped @ rbi/stdlib.rbi:4505
      argument arg0<optional> -> Symbol @ rbi/stdlib.rbi:4489
      argument blk<block> @ rbi/stdlib.rbi:4505
      argument initial<optional> -> BasicObject @ rbi/stdlib.rbi:4488
    method reject (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4407
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4403
    method reverse_each (blk) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4414
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4410
    method select (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4512
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4508
    method sort () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4421
      argument blk<block> @ rbi/stdlib.rbi:4421
    method sort_by (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4428
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4424
    method take (n) -> AppliedType {
          klass = ::<constant:Array>
          targs = [
            <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
          ]
        } | NilClass @ rbi/stdlib.rbi:4434
      argument n<> -> Integer @ rbi/stdlib.rbi:4431
    method take_while (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4441
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4437
    method to_a () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4515
    method to_h () -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        <constant:V> = LambdaParam(::<constant:Enumerable>#<constant:Elem>)
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:4444
    typeMember(=) <constant:Elem> @ rbi/stdlib.rbi:4138
  class <constant:Enumerator>[<constant:Elem>] < ::<constant:Object> (<constant:Enumerable>) -> <Class:Enumerator> @ rbi/stdlib.rbi:4518
    class <constant:Generator>[<constant:Elem>] < ::<constant:Object> (<constant:Enumerable>) -> <Class:Enumerator::Generator> @ rbi/stdlib.rbi:129
      typeMember(=) <constant:Elem> @ rbi/stdlib.rbi:129
    class <constant:Lazy>[<constant:Elem>] < ::<constant:Enumerator> () -> <Class:Enumerator::Lazy> @ rbi/stdlib.rbi:132
      typeMember(=) <constant:Elem> @ rbi/stdlib.rbi:132
    class <constant:Yielder> < ::<constant:Object> () -> <Class:Enumerator::Yielder> @ rbi/stdlib.rbi:134
    class <singleton class:<constant:Generator>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:129
    class <singleton class:<constant:Lazy>> < ::<singleton class:<constant:Enumerator>> () @ rbi/stdlib.rbi:132
    class <singleton class:<constant:Yielder>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:134
    method <overload N.1 : each> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:4532
      argument blk<block> @ rbi/stdlib.rbi:4533
    method <overload N.1 : each_with_index> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = TupleType {
            0 = LambdaParam(::<constant:Enumerator>#<constant:Elem>)
            1 = Integer
          }
      ]
    } @ rbi/stdlib.rbi:4539
      argument blk<block> @ rbi/stdlib.rbi:4540
    method <overload N.1 : each_with_object> (arg0) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = TupleType {
            0 = LambdaParam(::<constant:Enumerator>#<constant:Elem>)
            1 = untyped
          }
      ]
    } @ rbi/stdlib.rbi:4547
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:4548
      argument blk<block> @ rbi/stdlib.rbi:4551
    method <overload N.1 : initialize> (arg0, blk) -> Object @ rbi/stdlib.rbi:4567
      argument arg0<optional> -> Proc @ rbi/stdlib.rbi:4568
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = AppliedType {
              klass = ::<constant:Array>
              targs = [
                <constant:Elem> = untyped
              ]
            }
        ]
      } @ rbi/stdlib.rbi:4569
    method <overload N.1 : with_index> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = TupleType {
            0 = LambdaParam(::<constant:Enumerator>#<constant:Elem>)
            1 = Integer
          }
      ]
    } @ rbi/stdlib.rbi:4611
      argument blk<block> @ rbi/stdlib.rbi:4612
    method <overload N.1 : with_object> (arg0) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = TupleType {
            0 = LambdaParam(::<constant:Enumerator>#<constant:Elem>)
            1 = untyped
          }
      ]
    } @ rbi/stdlib.rbi:4619
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:4620
      argument blk<block> @ rbi/stdlib.rbi:4623
    method clone () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:4523
    method dup () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:4526
    method each (blk) -> untyped @ rbi/stdlib.rbi:4533
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Enumerator>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:4529
    method each_with_index (blk) -> untyped @ rbi/stdlib.rbi:4540
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Enumerator>#<constant:Elem>)
          <constant:Arg1> = Integer
        ]
      } @ rbi/stdlib.rbi:4536
    method each_with_object (arg0, blk) -> untyped @ rbi/stdlib.rbi:4551
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:4543
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Enumerator>#<constant:Elem>)
          <constant:Arg1> = untyped
        ]
      } @ rbi/stdlib.rbi:4544
    method feed (arg0) -> NilClass @ rbi/stdlib.rbi:4557
      argument arg0<> -> LambdaParam(::<constant:Enumerator>#<constant:Elem>) @ rbi/stdlib.rbi:4554
    method freeze () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:4560
    method initialize (arg0, blk) -> Object @ rbi/stdlib.rbi:4572
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:4563
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = AppliedType {
              klass = ::<constant:Array>
              targs = [
                <constant:Elem> = untyped
              ]
            }
        ]
      } @ rbi/stdlib.rbi:4564
    method inspect () -> String @ rbi/stdlib.rbi:4575
    method next () -> LambdaParam(::<constant:Enumerator>#<constant:Elem>) @ rbi/stdlib.rbi:4578
    method next_values () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerator>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4581
    method peek () -> LambdaParam(::<constant:Enumerator>#<constant:Elem>) @ rbi/stdlib.rbi:4584
    method peek_values () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Enumerator>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:4587
    method rewind () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:4590
    method size () -> Integer | Float | NilClass @ rbi/stdlib.rbi:4593
    method taint () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:4596
    method trust () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:4599
    method untaint () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:4602
    method untrust () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:4605
    method with_index (blk) -> untyped @ rbi/stdlib.rbi:4612
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Enumerator>#<constant:Elem>)
          <constant:Arg1> = Integer
        ]
      } @ rbi/stdlib.rbi:4608
    method with_object (arg0, blk) -> untyped @ rbi/stdlib.rbi:4623
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:4615
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Enumerator>#<constant:Elem>)
          <constant:Arg1> = untyped
        ]
      } @ rbi/stdlib.rbi:4616
    typeMember(=) <constant:Elem> @ rbi/stdlib.rbi:4520
  class <constant:Errno> (<constant:BasicObject>) -> <Class:Errno> @ rbi/stdlib.rbi:136
    class <constant:E2BIG> < ::<constant:SystemCallError> () -> <Class:Errno::E2BIG> @ rbi/stdlib.rbi:140
    class <constant:EACCES> < ::<constant:SystemCallError> () -> <Class:Errno::EACCES> @ rbi/stdlib.rbi:142
    class <constant:EADDRINUSE> < ::<constant:SystemCallError> () -> <Class:Errno::EADDRINUSE> @ rbi/stdlib.rbi:144
    class <constant:EADDRNOTAVAIL> < ::<constant:SystemCallError> () -> <Class:Errno::EADDRNOTAVAIL> @ rbi/stdlib.rbi:146
    class <constant:EADV> < ::<constant:SystemCallError> () -> <Class:Errno::EADV> @ rbi/stdlib.rbi:148
    class <constant:EAFNOSUPPORT> < ::<constant:SystemCallError> () -> <Class:Errno::EAFNOSUPPORT> @ rbi/stdlib.rbi:150
    class <constant:EAGAIN> < ::<constant:SystemCallError> () -> <Class:Errno::EAGAIN> @ rbi/stdlib.rbi:152
    class <constant:EALREADY> < ::<constant:SystemCallError> () -> <Class:Errno::EALREADY> @ rbi/stdlib.rbi:154
    class <constant:EBADE> < ::<constant:SystemCallError> () -> <Class:Errno::EBADE> @ rbi/stdlib.rbi:156
    class <constant:EBADF> < ::<constant:SystemCallError> () -> <Class:Errno::EBADF> @ rbi/stdlib.rbi:158
    class <constant:EBADFD> < ::<constant:SystemCallError> () -> <Class:Errno::EBADFD> @ rbi/stdlib.rbi:160
    class <constant:EBADMSG> < ::<constant:SystemCallError> () -> <Class:Errno::EBADMSG> @ rbi/stdlib.rbi:162
    class <constant:EBADR> < ::<constant:SystemCallError> () -> <Class:Errno::EBADR> @ rbi/stdlib.rbi:164
    class <constant:EBADRQC> < ::<constant:SystemCallError> () -> <Class:Errno::EBADRQC> @ rbi/stdlib.rbi:166
    class <constant:EBADSLT> < ::<constant:SystemCallError> () -> <Class:Errno::EBADSLT> @ rbi/stdlib.rbi:168
    class <constant:EBFONT> < ::<constant:SystemCallError> () -> <Class:Errno::EBFONT> @ rbi/stdlib.rbi:170
    class <constant:EBUSY> < ::<constant:SystemCallError> () -> <Class:Errno::EBUSY> @ rbi/stdlib.rbi:172
    class <constant:ECANCELED> < ::<constant:SystemCallError> () -> <Class:Errno::ECANCELED> @ rbi/stdlib.rbi:174
    class <constant:ECHILD> < ::<constant:SystemCallError> () -> <Class:Errno::ECHILD> @ rbi/stdlib.rbi:176
    class <constant:ECHRNG> < ::<constant:SystemCallError> () -> <Class:Errno::ECHRNG> @ rbi/stdlib.rbi:178
    class <constant:ECOMM> < ::<constant:SystemCallError> () -> <Class:Errno::ECOMM> @ rbi/stdlib.rbi:180
    class <constant:ECONNABORTED> < ::<constant:SystemCallError> () -> <Class:Errno::ECONNABORTED> @ rbi/stdlib.rbi:182
    class <constant:ECONNREFUSED> < ::<constant:SystemCallError> () -> <Class:Errno::ECONNREFUSED> @ rbi/stdlib.rbi:184
    class <constant:ECONNRESET> < ::<constant:SystemCallError> () -> <Class:Errno::ECONNRESET> @ rbi/stdlib.rbi:186
    class <constant:EDEADLK> < ::<constant:SystemCallError> () -> <Class:Errno::EDEADLK> @ rbi/stdlib.rbi:188
    class <constant:EDESTADDRREQ> < ::<constant:SystemCallError> () -> <Class:Errno::EDESTADDRREQ> @ rbi/stdlib.rbi:190
    class <constant:EDOM> < ::<constant:SystemCallError> () -> <Class:Errno::EDOM> @ rbi/stdlib.rbi:192
    class <constant:EDOTDOT> < ::<constant:SystemCallError> () -> <Class:Errno::EDOTDOT> @ rbi/stdlib.rbi:194
    class <constant:EDQUOT> < ::<constant:SystemCallError> () -> <Class:Errno::EDQUOT> @ rbi/stdlib.rbi:196
    class <constant:EEXIST> < ::<constant:SystemCallError> () -> <Class:Errno::EEXIST> @ rbi/stdlib.rbi:198
    class <constant:EFAULT> < ::<constant:SystemCallError> () -> <Class:Errno::EFAULT> @ rbi/stdlib.rbi:200
    class <constant:EFBIG> < ::<constant:SystemCallError> () -> <Class:Errno::EFBIG> @ rbi/stdlib.rbi:202
    class <constant:EHOSTDOWN> < ::<constant:SystemCallError> () -> <Class:Errno::EHOSTDOWN> @ rbi/stdlib.rbi:204
    class <constant:EHOSTUNREACH> < ::<constant:SystemCallError> () -> <Class:Errno::EHOSTUNREACH> @ rbi/stdlib.rbi:206
    class <constant:EHWPOISON> < ::<constant:SystemCallError> () -> <Class:Errno::EHWPOISON> @ rbi/stdlib.rbi:208
    class <constant:EIDRM> < ::<constant:SystemCallError> () -> <Class:Errno::EIDRM> @ rbi/stdlib.rbi:210
    class <constant:EILSEQ> < ::<constant:SystemCallError> () -> <Class:Errno::EILSEQ> @ rbi/stdlib.rbi:212
    class <constant:EINPROGRESS> < ::<constant:SystemCallError> () -> <Class:Errno::EINPROGRESS> @ rbi/stdlib.rbi:214
    class <constant:EINTR> < ::<constant:SystemCallError> () -> <Class:Errno::EINTR> @ rbi/stdlib.rbi:216
    class <constant:EINVAL> < ::<constant:SystemCallError> () -> <Class:Errno::EINVAL> @ rbi/stdlib.rbi:218
    class <constant:EIO> < ::<constant:SystemCallError> () -> <Class:Errno::EIO> @ rbi/stdlib.rbi:220
    class <constant:EISCONN> < ::<constant:SystemCallError> () -> <Class:Errno::EISCONN> @ rbi/stdlib.rbi:222
    class <constant:EISDIR> < ::<constant:SystemCallError> () -> <Class:Errno::EISDIR> @ rbi/stdlib.rbi:224
    class <constant:EISNAM> < ::<constant:SystemCallError> () -> <Class:Errno::EISNAM> @ rbi/stdlib.rbi:226
    class <constant:EKEYEXPIRED> < ::<constant:SystemCallError> () -> <Class:Errno::EKEYEXPIRED> @ rbi/stdlib.rbi:228
    class <constant:EKEYREJECTED> < ::<constant:SystemCallError> () -> <Class:Errno::EKEYREJECTED> @ rbi/stdlib.rbi:230
    class <constant:EKEYREVOKED> < ::<constant:SystemCallError> () -> <Class:Errno::EKEYREVOKED> @ rbi/stdlib.rbi:232
    class <constant:EL2HLT> < ::<constant:SystemCallError> () -> <Class:Errno::EL2HLT> @ rbi/stdlib.rbi:234
    class <constant:EL2NSYNC> < ::<constant:SystemCallError> () -> <Class:Errno::EL2NSYNC> @ rbi/stdlib.rbi:236
    class <constant:EL3HLT> < ::<constant:SystemCallError> () -> <Class:Errno::EL3HLT> @ rbi/stdlib.rbi:238
    class <constant:EL3RST> < ::<constant:SystemCallError> () -> <Class:Errno::EL3RST> @ rbi/stdlib.rbi:240
    class <constant:ELIBACC> < ::<constant:SystemCallError> () -> <Class:Errno::ELIBACC> @ rbi/stdlib.rbi:242
    class <constant:ELIBBAD> < ::<constant:SystemCallError> () -> <Class:Errno::ELIBBAD> @ rbi/stdlib.rbi:244
    class <constant:ELIBEXEC> < ::<constant:SystemCallError> () -> <Class:Errno::ELIBEXEC> @ rbi/stdlib.rbi:246
    class <constant:ELIBMAX> < ::<constant:SystemCallError> () -> <Class:Errno::ELIBMAX> @ rbi/stdlib.rbi:248
    class <constant:ELIBSCN> < ::<constant:SystemCallError> () -> <Class:Errno::ELIBSCN> @ rbi/stdlib.rbi:250
    class <constant:ELNRNG> < ::<constant:SystemCallError> () -> <Class:Errno::ELNRNG> @ rbi/stdlib.rbi:252
    class <constant:ELOOP> < ::<constant:SystemCallError> () -> <Class:Errno::ELOOP> @ rbi/stdlib.rbi:254
    class <constant:EMEDIUMTYPE> < ::<constant:SystemCallError> () -> <Class:Errno::EMEDIUMTYPE> @ rbi/stdlib.rbi:256
    class <constant:EMFILE> < ::<constant:SystemCallError> () -> <Class:Errno::EMFILE> @ rbi/stdlib.rbi:258
    class <constant:EMLINK> < ::<constant:SystemCallError> () -> <Class:Errno::EMLINK> @ rbi/stdlib.rbi:260
    class <constant:EMSGSIZE> < ::<constant:SystemCallError> () -> <Class:Errno::EMSGSIZE> @ rbi/stdlib.rbi:262
    class <constant:EMULTIHOP> < ::<constant:SystemCallError> () -> <Class:Errno::EMULTIHOP> @ rbi/stdlib.rbi:264
    class <constant:ENAMETOOLONG> < ::<constant:SystemCallError> () -> <Class:Errno::ENAMETOOLONG> @ rbi/stdlib.rbi:266
    class <constant:ENAVAIL> < ::<constant:SystemCallError> () -> <Class:Errno::ENAVAIL> @ rbi/stdlib.rbi:268
    class <constant:ENETDOWN> < ::<constant:SystemCallError> () -> <Class:Errno::ENETDOWN> @ rbi/stdlib.rbi:270
    class <constant:ENETRESET> < ::<constant:SystemCallError> () -> <Class:Errno::ENETRESET> @ rbi/stdlib.rbi:272
    class <constant:ENETUNREACH> < ::<constant:SystemCallError> () -> <Class:Errno::ENETUNREACH> @ rbi/stdlib.rbi:274
    class <constant:ENFILE> < ::<constant:SystemCallError> () -> <Class:Errno::ENFILE> @ rbi/stdlib.rbi:276
    class <constant:ENOANO> < ::<constant:SystemCallError> () -> <Class:Errno::ENOANO> @ rbi/stdlib.rbi:278
    class <constant:ENOBUFS> < ::<constant:SystemCallError> () -> <Class:Errno::ENOBUFS> @ rbi/stdlib.rbi:280
    class <constant:ENOCSI> < ::<constant:SystemCallError> () -> <Class:Errno::ENOCSI> @ rbi/stdlib.rbi:282
    class <constant:ENODATA> < ::<constant:SystemCallError> () -> <Class:Errno::ENODATA> @ rbi/stdlib.rbi:284
    class <constant:ENODEV> < ::<constant:SystemCallError> () -> <Class:Errno::ENODEV> @ rbi/stdlib.rbi:286
    class <constant:ENOENT> < ::<constant:SystemCallError> () -> <Class:Errno::ENOENT> @ rbi/stdlib.rbi:288
    class <constant:ENOEXEC> < ::<constant:SystemCallError> () -> <Class:Errno::ENOEXEC> @ rbi/stdlib.rbi:290
    class <constant:ENOKEY> < ::<constant:SystemCallError> () -> <Class:Errno::ENOKEY> @ rbi/stdlib.rbi:292
    class <constant:ENOLCK> < ::<constant:SystemCallError> () -> <Class:Errno::ENOLCK> @ rbi/stdlib.rbi:294
    class <constant:ENOLINK> < ::<constant:SystemCallError> () -> <Class:Errno::ENOLINK> @ rbi/stdlib.rbi:296
    class <constant:ENOMEDIUM> < ::<constant:SystemCallError> () -> <Class:Errno::ENOMEDIUM> @ rbi/stdlib.rbi:298
    class <constant:ENOMEM> < ::<constant:SystemCallError> () -> <Class:Errno::ENOMEM> @ rbi/stdlib.rbi:300
    class <constant:ENOMSG> < ::<constant:SystemCallError> () -> <Class:Errno::ENOMSG> @ rbi/stdlib.rbi:302
    class <constant:ENONET> < ::<constant:SystemCallError> () -> <Class:Errno::ENONET> @ rbi/stdlib.rbi:304
    class <constant:ENOPKG> < ::<constant:SystemCallError> () -> <Class:Errno::ENOPKG> @ rbi/stdlib.rbi:306
    class <constant:ENOPROTOOPT> < ::<constant:SystemCallError> () -> <Class:Errno::ENOPROTOOPT> @ rbi/stdlib.rbi:308
    class <constant:ENOSPC> < ::<constant:SystemCallError> () -> <Class:Errno::ENOSPC> @ rbi/stdlib.rbi:310
    class <constant:ENOSR> < ::<constant:SystemCallError> () -> <Class:Errno::ENOSR> @ rbi/stdlib.rbi:312
    class <constant:ENOSTR> < ::<constant:SystemCallError> () -> <Class:Errno::ENOSTR> @ rbi/stdlib.rbi:314
    class <constant:ENOSYS> < ::<constant:SystemCallError> () -> <Class:Errno::ENOSYS> @ rbi/stdlib.rbi:316
    class <constant:ENOTBLK> < ::<constant:SystemCallError> () -> <Class:Errno::ENOTBLK> @ rbi/stdlib.rbi:318
    class <constant:ENOTCONN> < ::<constant:SystemCallError> () -> <Class:Errno::ENOTCONN> @ rbi/stdlib.rbi:320
    class <constant:ENOTDIR> < ::<constant:SystemCallError> () -> <Class:Errno::ENOTDIR> @ rbi/stdlib.rbi:322
    class <constant:ENOTEMPTY> < ::<constant:SystemCallError> () -> <Class:Errno::ENOTEMPTY> @ rbi/stdlib.rbi:324
    class <constant:ENOTNAM> < ::<constant:SystemCallError> () -> <Class:Errno::ENOTNAM> @ rbi/stdlib.rbi:326
    class <constant:ENOTRECOVERABLE> < ::<constant:SystemCallError> () -> <Class:Errno::ENOTRECOVERABLE> @ rbi/stdlib.rbi:328
    class <constant:ENOTSOCK> < ::<constant:SystemCallError> () -> <Class:Errno::ENOTSOCK> @ rbi/stdlib.rbi:330
    class <constant:ENOTTY> < ::<constant:SystemCallError> () -> <Class:Errno::ENOTTY> @ rbi/stdlib.rbi:332
    class <constant:ENOTUNIQ> < ::<constant:SystemCallError> () -> <Class:Errno::ENOTUNIQ> @ rbi/stdlib.rbi:334
    class <constant:ENXIO> < ::<constant:SystemCallError> () -> <Class:Errno::ENXIO> @ rbi/stdlib.rbi:336
    class <constant:EOPNOTSUPP> < ::<constant:SystemCallError> () -> <Class:Errno::EOPNOTSUPP> @ rbi/stdlib.rbi:338
    class <constant:EOVERFLOW> < ::<constant:SystemCallError> () -> <Class:Errno::EOVERFLOW> @ rbi/stdlib.rbi:340
    class <constant:EOWNERDEAD> < ::<constant:SystemCallError> () -> <Class:Errno::EOWNERDEAD> @ rbi/stdlib.rbi:342
    class <constant:EPERM> < ::<constant:SystemCallError> () -> <Class:Errno::EPERM> @ rbi/stdlib.rbi:344
    class <constant:EPFNOSUPPORT> < ::<constant:SystemCallError> () -> <Class:Errno::EPFNOSUPPORT> @ rbi/stdlib.rbi:346
    class <constant:EPIPE> < ::<constant:SystemCallError> () -> <Class:Errno::EPIPE> @ rbi/stdlib.rbi:348
    class <constant:EPROTO> < ::<constant:SystemCallError> () -> <Class:Errno::EPROTO> @ rbi/stdlib.rbi:350
    class <constant:EPROTONOSUPPORT> < ::<constant:SystemCallError> () -> <Class:Errno::EPROTONOSUPPORT> @ rbi/stdlib.rbi:352
    class <constant:EPROTOTYPE> < ::<constant:SystemCallError> () -> <Class:Errno::EPROTOTYPE> @ rbi/stdlib.rbi:354
    class <constant:ERANGE> < ::<constant:SystemCallError> () -> <Class:Errno::ERANGE> @ rbi/stdlib.rbi:356
    class <constant:EREMCHG> < ::<constant:SystemCallError> () -> <Class:Errno::EREMCHG> @ rbi/stdlib.rbi:358
    class <constant:EREMOTE> < ::<constant:SystemCallError> () -> <Class:Errno::EREMOTE> @ rbi/stdlib.rbi:360
    class <constant:EREMOTEIO> < ::<constant:SystemCallError> () -> <Class:Errno::EREMOTEIO> @ rbi/stdlib.rbi:362
    class <constant:ERESTART> < ::<constant:SystemCallError> () -> <Class:Errno::ERESTART> @ rbi/stdlib.rbi:364
    class <constant:ERFKILL> < ::<constant:SystemCallError> () -> <Class:Errno::ERFKILL> @ rbi/stdlib.rbi:366
    class <constant:EROFS> < ::<constant:SystemCallError> () -> <Class:Errno::EROFS> @ rbi/stdlib.rbi:368
    class <constant:ESHUTDOWN> < ::<constant:SystemCallError> () -> <Class:Errno::ESHUTDOWN> @ rbi/stdlib.rbi:370
    class <constant:ESOCKTNOSUPPORT> < ::<constant:SystemCallError> () -> <Class:Errno::ESOCKTNOSUPPORT> @ rbi/stdlib.rbi:372
    class <constant:ESPIPE> < ::<constant:SystemCallError> () -> <Class:Errno::ESPIPE> @ rbi/stdlib.rbi:374
    class <constant:ESRCH> < ::<constant:SystemCallError> () -> <Class:Errno::ESRCH> @ rbi/stdlib.rbi:376
    class <constant:ESRMNT> < ::<constant:SystemCallError> () -> <Class:Errno::ESRMNT> @ rbi/stdlib.rbi:378
    class <constant:ESTALE> < ::<constant:SystemCallError> () -> <Class:Errno::ESTALE> @ rbi/stdlib.rbi:380
    class <constant:ESTRPIPE> < ::<constant:SystemCallError> () -> <Class:Errno::ESTRPIPE> @ rbi/stdlib.rbi:382
    class <constant:ETIME> < ::<constant:SystemCallError> () -> <Class:Errno::ETIME> @ rbi/stdlib.rbi:384
    class <constant:ETIMEDOUT> < ::<constant:SystemCallError> () -> <Class:Errno::ETIMEDOUT> @ rbi/stdlib.rbi:386
    class <constant:ETOOMANYREFS> < ::<constant:SystemCallError> () -> <Class:Errno::ETOOMANYREFS> @ rbi/stdlib.rbi:388
    class <constant:ETXTBSY> < ::<constant:SystemCallError> () -> <Class:Errno::ETXTBSY> @ rbi/stdlib.rbi:390
    class <constant:EUCLEAN> < ::<constant:SystemCallError> () -> <Class:Errno::EUCLEAN> @ rbi/stdlib.rbi:392
    class <constant:EUNATCH> < ::<constant:SystemCallError> () -> <Class:Errno::EUNATCH> @ rbi/stdlib.rbi:394
    class <constant:EUSERS> < ::<constant:SystemCallError> () -> <Class:Errno::EUSERS> @ rbi/stdlib.rbi:396
    class <constant:EXDEV> < ::<constant:SystemCallError> () -> <Class:Errno::EXDEV> @ rbi/stdlib.rbi:398
    class <constant:EXFULL> < ::<constant:SystemCallError> () -> <Class:Errno::EXFULL> @ rbi/stdlib.rbi:400
    class <constant:NOERROR> < ::<constant:SystemCallError> () -> <Class:Errno::NOERROR> @ rbi/stdlib.rbi:402
    class <singleton class:<constant:E2BIG>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:140
    class <singleton class:<constant:EACCES>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:142
    class <singleton class:<constant:EADDRINUSE>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:144
    class <singleton class:<constant:EADDRNOTAVAIL>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:146
    class <singleton class:<constant:EADV>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:148
    class <singleton class:<constant:EAFNOSUPPORT>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:150
    class <singleton class:<constant:EAGAIN>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:152
    class <singleton class:<constant:EALREADY>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:154
    class <singleton class:<constant:EBADE>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:156
    class <singleton class:<constant:EBADF>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:158
    class <singleton class:<constant:EBADFD>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:160
    class <singleton class:<constant:EBADMSG>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:162
    class <singleton class:<constant:EBADR>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:164
    class <singleton class:<constant:EBADRQC>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:166
    class <singleton class:<constant:EBADSLT>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:168
    class <singleton class:<constant:EBFONT>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:170
    class <singleton class:<constant:EBUSY>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:172
    class <singleton class:<constant:ECANCELED>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:174
    class <singleton class:<constant:ECHILD>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:176
    class <singleton class:<constant:ECHRNG>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:178
    class <singleton class:<constant:ECOMM>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:180
    class <singleton class:<constant:ECONNABORTED>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:182
    class <singleton class:<constant:ECONNREFUSED>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:184
    class <singleton class:<constant:ECONNRESET>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:186
    class <singleton class:<constant:EDEADLK>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:188
    class <singleton class:<constant:EDESTADDRREQ>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:190
    class <singleton class:<constant:EDOM>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:192
    class <singleton class:<constant:EDOTDOT>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:194
    class <singleton class:<constant:EDQUOT>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:196
    class <singleton class:<constant:EEXIST>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:198
    class <singleton class:<constant:EFAULT>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:200
    class <singleton class:<constant:EFBIG>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:202
    class <singleton class:<constant:EHOSTDOWN>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:204
    class <singleton class:<constant:EHOSTUNREACH>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:206
    class <singleton class:<constant:EHWPOISON>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:208
    class <singleton class:<constant:EIDRM>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:210
    class <singleton class:<constant:EILSEQ>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:212
    class <singleton class:<constant:EINPROGRESS>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:214
    class <singleton class:<constant:EINTR>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:216
    class <singleton class:<constant:EINVAL>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:218
    class <singleton class:<constant:EIO>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:220
    class <singleton class:<constant:EISCONN>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:222
    class <singleton class:<constant:EISDIR>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:224
    class <singleton class:<constant:EISNAM>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:226
    class <singleton class:<constant:EKEYEXPIRED>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:228
    class <singleton class:<constant:EKEYREJECTED>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:230
    class <singleton class:<constant:EKEYREVOKED>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:232
    class <singleton class:<constant:EL2HLT>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:234
    class <singleton class:<constant:EL2NSYNC>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:236
    class <singleton class:<constant:EL3HLT>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:238
    class <singleton class:<constant:EL3RST>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:240
    class <singleton class:<constant:ELIBACC>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:242
    class <singleton class:<constant:ELIBBAD>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:244
    class <singleton class:<constant:ELIBEXEC>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:246
    class <singleton class:<constant:ELIBMAX>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:248
    class <singleton class:<constant:ELIBSCN>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:250
    class <singleton class:<constant:ELNRNG>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:252
    class <singleton class:<constant:ELOOP>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:254
    class <singleton class:<constant:EMEDIUMTYPE>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:256
    class <singleton class:<constant:EMFILE>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:258
    class <singleton class:<constant:EMLINK>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:260
    class <singleton class:<constant:EMSGSIZE>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:262
    class <singleton class:<constant:EMULTIHOP>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:264
    class <singleton class:<constant:ENAMETOOLONG>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:266
    class <singleton class:<constant:ENAVAIL>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:268
    class <singleton class:<constant:ENETDOWN>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:270
    class <singleton class:<constant:ENETRESET>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:272
    class <singleton class:<constant:ENETUNREACH>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:274
    class <singleton class:<constant:ENFILE>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:276
    class <singleton class:<constant:ENOANO>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:278
    class <singleton class:<constant:ENOBUFS>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:280
    class <singleton class:<constant:ENOCSI>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:282
    class <singleton class:<constant:ENODATA>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:284
    class <singleton class:<constant:ENODEV>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:286
    class <singleton class:<constant:ENOENT>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:288
    class <singleton class:<constant:ENOEXEC>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:290
    class <singleton class:<constant:ENOKEY>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:292
    class <singleton class:<constant:ENOLCK>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:294
    class <singleton class:<constant:ENOLINK>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:296
    class <singleton class:<constant:ENOMEDIUM>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:298
    class <singleton class:<constant:ENOMEM>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:300
    class <singleton class:<constant:ENOMSG>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:302
    class <singleton class:<constant:ENONET>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:304
    class <singleton class:<constant:ENOPKG>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:306
    class <singleton class:<constant:ENOPROTOOPT>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:308
    class <singleton class:<constant:ENOSPC>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:310
    class <singleton class:<constant:ENOSR>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:312
    class <singleton class:<constant:ENOSTR>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:314
    class <singleton class:<constant:ENOSYS>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:316
    class <singleton class:<constant:ENOTBLK>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:318
    class <singleton class:<constant:ENOTCONN>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:320
    class <singleton class:<constant:ENOTDIR>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:322
    class <singleton class:<constant:ENOTEMPTY>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:324
    class <singleton class:<constant:ENOTNAM>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:326
    class <singleton class:<constant:ENOTRECOVERABLE>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:328
    class <singleton class:<constant:ENOTSOCK>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:330
    class <singleton class:<constant:ENOTTY>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:332
    class <singleton class:<constant:ENOTUNIQ>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:334
    class <singleton class:<constant:ENXIO>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:336
    class <singleton class:<constant:EOPNOTSUPP>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:338
    class <singleton class:<constant:EOVERFLOW>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:340
    class <singleton class:<constant:EOWNERDEAD>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:342
    class <singleton class:<constant:EPERM>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:344
    class <singleton class:<constant:EPFNOSUPPORT>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:346
    class <singleton class:<constant:EPIPE>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:348
    class <singleton class:<constant:EPROTO>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:350
    class <singleton class:<constant:EPROTONOSUPPORT>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:352
    class <singleton class:<constant:EPROTOTYPE>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:354
    class <singleton class:<constant:ERANGE>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:356
    class <singleton class:<constant:EREMCHG>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:358
    class <singleton class:<constant:EREMOTE>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:360
    class <singleton class:<constant:EREMOTEIO>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:362
    class <singleton class:<constant:ERESTART>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:364
    class <singleton class:<constant:ERFKILL>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:366
    class <singleton class:<constant:EROFS>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:368
    class <singleton class:<constant:ESHUTDOWN>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:370
    class <singleton class:<constant:ESOCKTNOSUPPORT>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:372
    class <singleton class:<constant:ESPIPE>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:374
    class <singleton class:<constant:ESRCH>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:376
    class <singleton class:<constant:ESRMNT>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:378
    class <singleton class:<constant:ESTALE>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:380
    class <singleton class:<constant:ESTRPIPE>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:382
    class <singleton class:<constant:ETIME>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:384
    class <singleton class:<constant:ETIMEDOUT>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:386
    class <singleton class:<constant:ETOOMANYREFS>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:388
    class <singleton class:<constant:ETXTBSY>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:390
    class <singleton class:<constant:EUCLEAN>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:392
    class <singleton class:<constant:EUNATCH>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:394
    class <singleton class:<constant:EUSERS>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:396
    class <singleton class:<constant:EXDEV>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:398
    class <singleton class:<constant:EXFULL>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:400
    class <singleton class:<constant:NOERROR>> < ::<singleton class:<constant:SystemCallError>> () @ rbi/stdlib.rbi:402
  class <constant:Exception> < ::<constant:Object> () -> <Class:Exception> @ rbi/stdlib.rbi:4626
    method == (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:4631
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:4628
    method backtrace () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:4634
    method backtrace_locations () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Thread::Backtrace::Location
      ]
    } @ rbi/stdlib.rbi:4637
    method cause () -> NilClass @ rbi/stdlib.rbi:4640
    method clone () -> Exception @ rbi/stdlib.rbi:4643
    method dup () -> Exception @ rbi/stdlib.rbi:4646
    method exception (arg0) -> Exception @ rbi/stdlib.rbi:4652
      argument arg0<optional> -> String @ rbi/stdlib.rbi:4649
    method freeze () -> Exception @ rbi/stdlib.rbi:4655
    method initialize (arg0) -> Object @ rbi/stdlib.rbi:4661
      argument arg0<optional> -> String @ rbi/stdlib.rbi:4658
    method inspect () -> String @ rbi/stdlib.rbi:4664
    method message () -> String @ rbi/stdlib.rbi:4667
    method set_backtrace (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:4673
      argument arg0<> -> AppliedType {
            klass = ::<constant:Array>
            targs = [
              <constant:Elem> = String
            ]
          } | String @ rbi/stdlib.rbi:4670
    method taint () -> Exception @ rbi/stdlib.rbi:4676
    method to_s () -> String @ rbi/stdlib.rbi:4679
    method trust () -> Exception @ rbi/stdlib.rbi:4682
    method untaint () -> Exception @ rbi/stdlib.rbi:4685
    method untrust () -> Exception @ rbi/stdlib.rbi:4688
  class <constant:FalseClass> < ::<constant:Object> () -> <Class:FalseClass> @ rbi/stdlib.rbi:4691
    method clone () -> FalseClass @ rbi/stdlib.rbi:4693
    method dup () -> FalseClass @ rbi/stdlib.rbi:4696
    method freeze () -> FalseClass @ rbi/stdlib.rbi:4699
    method taint () -> FalseClass @ rbi/stdlib.rbi:4702
    method trust () -> FalseClass @ rbi/stdlib.rbi:4705
    method untaint () -> FalseClass @ rbi/stdlib.rbi:4708
    method untrust () -> FalseClass @ rbi/stdlib.rbi:4711
  class <constant:Fiber> < ::<constant:Object> () -> <Class:Fiber> @ rbi/stdlib.rbi:4714
    method clone () -> Fiber @ rbi/stdlib.rbi:4716
    method dup () -> Fiber @ rbi/stdlib.rbi:4719
    method freeze () -> Fiber @ rbi/stdlib.rbi:4722
    method taint () -> Fiber @ rbi/stdlib.rbi:4725
    method trust () -> Fiber @ rbi/stdlib.rbi:4728
    method untaint () -> Fiber @ rbi/stdlib.rbi:4731
    method untrust () -> Fiber @ rbi/stdlib.rbi:4734
  class <constant:FiberError> < ::<constant:StandardError> () -> <Class:FiberError> @ rbi/stdlib.rbi:4737
    method clone () -> FiberError @ rbi/stdlib.rbi:4739
    method dup () -> FiberError @ rbi/stdlib.rbi:4742
    method freeze () -> FiberError @ rbi/stdlib.rbi:4745
    method taint () -> FiberError @ rbi/stdlib.rbi:4748
    method trust () -> FiberError @ rbi/stdlib.rbi:4751
    method untaint () -> FiberError @ rbi/stdlib.rbi:4754
    method untrust () -> FiberError @ rbi/stdlib.rbi:4757
  class <constant:File>[<constant:Elem>] < ::<constant:IO> () -> <Class:File> @ rbi/stdlib.rbi:960
    class <constant:Constants> (<constant:BasicObject>) -> <Class:File::Constants> @ rbi/stdlib.rbi:410
      static-field <constant:APPEND> -> Integer @ rbi/stdlib.rbi:12656
      static-field <constant:BINARY> -> Integer @ rbi/stdlib.rbi:12657
      static-field <constant:CREAT> -> Integer @ rbi/stdlib.rbi:12658
      static-field <constant:DIRECT> -> Integer @ rbi/stdlib.rbi:12659
      static-field <constant:DSYNC> -> Integer @ rbi/stdlib.rbi:12660
      static-field <constant:EXCL> -> Integer @ rbi/stdlib.rbi:12661
      static-field <constant:FNM_CASEFOLD> -> Integer @ rbi/stdlib.rbi:12662
      static-field <constant:FNM_DOTMATCH> -> Integer @ rbi/stdlib.rbi:12663
      static-field <constant:FNM_EXTGLOB> -> Integer @ rbi/stdlib.rbi:12664
      static-field <constant:FNM_NOESCAPE> -> Integer @ rbi/stdlib.rbi:12665
      static-field <constant:FNM_PATHNAME> -> Integer @ rbi/stdlib.rbi:12666
      static-field <constant:FNM_SHORTNAME> -> Integer @ rbi/stdlib.rbi:12667
      static-field <constant:FNM_SYSCASE> -> Integer @ rbi/stdlib.rbi:12668
      static-field <constant:LOCK_EX> -> Integer @ rbi/stdlib.rbi:12669
      static-field <constant:LOCK_NB> -> Integer @ rbi/stdlib.rbi:12670
      static-field <constant:LOCK_SH> -> Integer @ rbi/stdlib.rbi:12671
      static-field <constant:LOCK_UN> -> Integer @ rbi/stdlib.rbi:12672
      static-field <constant:NOATIME> -> Integer @ rbi/stdlib.rbi:12673
      static-field <constant:NOCTTY> -> Integer @ rbi/stdlib.rbi:12674
      static-field <constant:NOFOLLOW> -> Integer @ rbi/stdlib.rbi:12675
      static-field <constant:NONBLOCK> -> Integer @ rbi/stdlib.rbi:12676
      static-field <constant:NULL> -> String @ rbi/stdlib.rbi:12677
      static-field <constant:RDONLY> -> Integer @ rbi/stdlib.rbi:12678
      static-field <constant:RDWR> -> Integer @ rbi/stdlib.rbi:12679
      static-field <constant:RSYNC> -> Integer @ rbi/stdlib.rbi:12680
      static-field <constant:SHARE_DELETE> -> Integer @ rbi/stdlib.rbi:12681
      static-field <constant:SYNC> -> Integer @ rbi/stdlib.rbi:12682
      static-field <constant:TMPFILE> -> Integer @ rbi/stdlib.rbi:12683
      static-field <constant:TRUNC> -> Integer @ rbi/stdlib.rbi:12684
      static-field <constant:WRONLY> -> Integer @ rbi/stdlib.rbi:12685
    class <constant:Stat> < ::<constant:Object> (<constant:Comparable>) -> <Class:File::Stat> @ rbi/stdlib.rbi:4760
      method <=> (other) -> Integer | NilClass @ rbi/stdlib.rbi:4765
        argument other<> -> File::Stat @ rbi/stdlib.rbi:4762
      method atime () -> Time @ rbi/stdlib.rbi:4768
      method birthtime () -> Time @ rbi/stdlib.rbi:4771
      method blksize () -> Integer | NilClass @ rbi/stdlib.rbi:4774
      method blockdev? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4777
      method blocks () -> Integer | NilClass @ rbi/stdlib.rbi:4780
      method chardev? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4783
      method ctime () -> Time @ rbi/stdlib.rbi:4786
      method dev () -> Integer @ rbi/stdlib.rbi:4789
      method dev_major () -> Integer @ rbi/stdlib.rbi:4792
      method dev_minor () -> Integer @ rbi/stdlib.rbi:4795
      method directory? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4798
      method executable? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4801
      method executable_real? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4804
      method file? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4807
      method ftype () -> String @ rbi/stdlib.rbi:4810
      method gid () -> Integer @ rbi/stdlib.rbi:4813
      method grpowned? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4816
      method initialize (file) -> Object @ rbi/stdlib.rbi:4822
        argument file<> -> String @ rbi/stdlib.rbi:4819
      method ino () -> Integer @ rbi/stdlib.rbi:4825
      method inspect () -> String @ rbi/stdlib.rbi:4828
      method mode () -> Integer @ rbi/stdlib.rbi:4831
      method mtime () -> Time @ rbi/stdlib.rbi:4834
      method nlink () -> Integer @ rbi/stdlib.rbi:4837
      method owned? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4840
      method pipe? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4843
      method rdev () -> Integer | NilClass @ rbi/stdlib.rbi:4846
      method rdev_major () -> Integer @ rbi/stdlib.rbi:4849
      method rdev_minor () -> Integer @ rbi/stdlib.rbi:4852
      method readable? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4855
      method readable_real? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4858
      method setgid? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4861
      method setuid? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4864
      method size () -> Integer @ rbi/stdlib.rbi:4867
      method socket? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4870
      method sticky? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4873
      method symlink? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4876
      method uid () -> Integer @ rbi/stdlib.rbi:4879
      method world_readable? () -> Integer | NilClass @ rbi/stdlib.rbi:4882
      method world_writable? () -> Integer | NilClass @ rbi/stdlib.rbi:4885
      method writable? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4888
      method writable_real? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4891
      method zero? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:4894
    class <singleton class:<constant:Constants>> < ::<constant:Module> () @ rbi/stdlib.rbi:410
    class <singleton class:<constant:Stat>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:418
    method << (arg0) -> AppliedType {
      klass = ::<constant:File>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1366
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:1363
    method <overload N.1 : set_encoding> (int_enc) -> AppliedType {
      klass = ::<constant:File>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1459
      argument ext_or_ext_int_enc<optional> @ rbi/stdlib.rbi:1464
      argument int_enc<optional> -> String | Encoding @ rbi/stdlib.rbi:1461
    method atime () -> Time @ rbi/stdlib.rbi:1369
    method binmode () -> AppliedType {
      klass = ::<constant:File>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1372
    method birthtime () -> Time @ rbi/stdlib.rbi:1375
    method chmod (mode) -> Integer @ rbi/stdlib.rbi:1381
      argument mode<> -> Integer @ rbi/stdlib.rbi:1378
    method chown (owner, group) -> Integer @ rbi/stdlib.rbi:1388
      argument group<> -> Integer @ rbi/stdlib.rbi:1385
      argument owner<> -> Integer @ rbi/stdlib.rbi:1384
    method clone () -> AppliedType {
      klass = ::<constant:File>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1391
    method ctime () -> Time @ rbi/stdlib.rbi:1394
    method dup () -> AppliedType {
      klass = ::<constant:File>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1397
    method each (sep, limit, blk) -> AppliedType {
      klass = ::<constant:File>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1405
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = String
        ]
      } @ rbi/stdlib.rbi:1402
      argument limit<optional> -> Integer @ rbi/stdlib.rbi:1401
      argument sep<optional> -> String @ rbi/stdlib.rbi:1400
    method each_byte (blk) -> AppliedType {
      klass = ::<constant:File>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1411
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = Integer
        ]
      } @ rbi/stdlib.rbi:1408
    method each_char (blk) -> AppliedType {
      klass = ::<constant:File>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1417
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = String
        ]
      } @ rbi/stdlib.rbi:1414
    method each_codepoint (blk) -> AppliedType {
      klass = ::<constant:File>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1423
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = Integer
        ]
      } @ rbi/stdlib.rbi:1420
    method flock (arg0) -> Integer | TrueClass | FalseClass @ rbi/stdlib.rbi:1429
      argument arg0<> -> Integer @ rbi/stdlib.rbi:1426
    method flush () -> AppliedType {
      klass = ::<constant:File>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1432
    method freeze () -> AppliedType {
      klass = ::<constant:File>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1435
    method initialize (file, mode, perm, opt) -> Object @ rbi/stdlib.rbi:1444
      argument file<> -> String @ rbi/stdlib.rbi:1438
      argument mode<optional> -> String @ rbi/stdlib.rbi:1439
      argument opt<optional> -> Integer @ rbi/stdlib.rbi:1441
      argument perm<optional> -> String @ rbi/stdlib.rbi:1440
    method lstat () -> File::Stat @ rbi/stdlib.rbi:1447
    method mtime () -> Time @ rbi/stdlib.rbi:1450
    method path () -> String @ rbi/stdlib.rbi:1453
    method set_encoding (ext_or_ext_int_enc) -> AppliedType {
      klass = ::<constant:File>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1464
      argument ext_or_ext_int_enc<optional> -> String | Encoding @ rbi/stdlib.rbi:1456
      argument int_enc<optional> @ rbi/stdlib.rbi:1464
    method size () -> Integer @ rbi/stdlib.rbi:1467
    method taint () -> AppliedType {
      klass = ::<constant:File>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1470
    method to_io () -> AppliedType {
      klass = ::<constant:File>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1473
    method to_path () -> String @ rbi/stdlib.rbi:1505
    method truncate (arg0) -> Integer @ rbi/stdlib.rbi:1479
      argument arg0<> -> Integer @ rbi/stdlib.rbi:1476
    method trust () -> AppliedType {
      klass = ::<constant:File>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1482
    method untaint () -> AppliedType {
      klass = ::<constant:File>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1485
    method untrust () -> AppliedType {
      klass = ::<constant:File>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1488
    static-field <constant:ALT_SEPARATOR> -> NilClass @ rbi/stdlib.rbi:12652
    static-field <constant:APPEND> -> Integer @ rbi/stdlib.rbi:12653
    static-field <constant:BINARY> -> Integer @ rbi/stdlib.rbi:12654
    static-field <constant:CREAT> -> Integer @ rbi/stdlib.rbi:12655
    static-field <constant:DIRECT> -> Integer @ rbi/stdlib.rbi:12686
    static-field <constant:DSYNC> -> Integer @ rbi/stdlib.rbi:12687
    static-field <constant:EXCL> -> Integer @ rbi/stdlib.rbi:12688
    static-field <constant:FNM_CASEFOLD> -> Integer @ rbi/stdlib.rbi:12689
    static-field <constant:FNM_DOTMATCH> -> Integer @ rbi/stdlib.rbi:12690
    static-field <constant:FNM_EXTGLOB> -> Integer @ rbi/stdlib.rbi:12691
    static-field <constant:FNM_NOESCAPE> -> Integer @ rbi/stdlib.rbi:12692
    static-field <constant:FNM_PATHNAME> -> Integer @ rbi/stdlib.rbi:12693
    static-field <constant:FNM_SHORTNAME> -> Integer @ rbi/stdlib.rbi:12694
    static-field <constant:FNM_SYSCASE> -> Integer @ rbi/stdlib.rbi:12695
    static-field <constant:LOCK_EX> -> Integer @ rbi/stdlib.rbi:12696
    static-field <constant:LOCK_NB> -> Integer @ rbi/stdlib.rbi:12697
    static-field <constant:LOCK_SH> -> Integer @ rbi/stdlib.rbi:12698
    static-field <constant:LOCK_UN> -> Integer @ rbi/stdlib.rbi:12699
    static-field <constant:NOATIME> -> Integer @ rbi/stdlib.rbi:12700
    static-field <constant:NOCTTY> -> Integer @ rbi/stdlib.rbi:12701
    static-field <constant:NOFOLLOW> -> Integer @ rbi/stdlib.rbi:12702
    static-field <constant:NONBLOCK> -> Integer @ rbi/stdlib.rbi:12703
    static-field <constant:NULL> -> String @ rbi/stdlib.rbi:12704
    static-field <constant:PATH_SEPARATOR> -> String @ rbi/stdlib.rbi:12705
    static-field <constant:RDONLY> -> Integer @ rbi/stdlib.rbi:12706
    static-field <constant:RDWR> -> Integer @ rbi/stdlib.rbi:12707
    static-field <constant:RSYNC> -> Integer @ rbi/stdlib.rbi:12708
    static-field <constant:SEEK_CUR> -> Integer @ rbi/stdlib.rbi:12709
    static-field <constant:SEEK_DATA> -> Integer @ rbi/stdlib.rbi:12710
    static-field <constant:SEEK_END> -> Integer @ rbi/stdlib.rbi:12711
    static-field <constant:SEEK_HOLE> -> Integer @ rbi/stdlib.rbi:12712
    static-field <constant:SEEK_SET> -> Integer @ rbi/stdlib.rbi:12713
    static-field <constant:SEPARATOR> -> String @ rbi/stdlib.rbi:12714
    static-field <constant:SHARE_DELETE> -> Integer @ rbi/stdlib.rbi:12715
    static-field <constant:SYNC> -> Integer @ rbi/stdlib.rbi:12716
    static-field <constant:TMPFILE> -> Integer @ rbi/stdlib.rbi:12717
    static-field <constant:TRUNC> -> Integer @ rbi/stdlib.rbi:12718
    static-field <constant:WRONLY> -> Integer @ rbi/stdlib.rbi:12719
    typeMember(=) <constant:Elem> -> String @ rbi/stdlib.rbi:962
  class <constant:FileTest> (<constant:BasicObject>) -> <Class:FileTest> @ rbi/stdlib.rbi:421
  class <constant:FileUtils> (<constant:BasicObject>) -> <Class:FileUtils> @ rbi/stdlib.rbi:4897
  class <constant:Float> < ::<constant:Numeric> () -> <Class:Float> @ rbi/stdlib.rbi:4914
    method % (arg0) -> Float @ rbi/stdlib.rbi:4931
      argument arg0<> -> Integer @ rbi/stdlib.rbi:4916
    method * (arg0) -> Float @ rbi/stdlib.rbi:4953
      argument arg0<> -> Integer @ rbi/stdlib.rbi:4934
    method ** (arg0) -> Float @ rbi/stdlib.rbi:4975
      argument arg0<> -> Integer @ rbi/stdlib.rbi:4956
    method + (arg0) -> Float @ rbi/stdlib.rbi:4997
      argument arg0<> -> Integer @ rbi/stdlib.rbi:4978
    method +@ () -> Float @ rbi/stdlib.rbi:5000
    method - (arg0) -> Float @ rbi/stdlib.rbi:5022
      argument arg0<> -> Integer @ rbi/stdlib.rbi:5003
    method -@ () -> Float @ rbi/stdlib.rbi:5025
    method / (arg0) -> Float @ rbi/stdlib.rbi:5047
      argument arg0<> -> Integer @ rbi/stdlib.rbi:5028
    method < (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5065
      argument arg0<> -> Integer @ rbi/stdlib.rbi:5050
    method <= (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5083
      argument arg0<> -> Integer @ rbi/stdlib.rbi:5068
    method <=> (arg0) -> Object @ rbi/stdlib.rbi:5101
      argument arg0<> -> Integer @ rbi/stdlib.rbi:5086
    method <overload N.1 : %> (arg0) -> Float @ rbi/stdlib.rbi:4919
      argument arg0<> -> Float @ rbi/stdlib.rbi:4920
    method <overload N.1 : **> (arg0) -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:4959
      argument arg0<> -> Float @ rbi/stdlib.rbi:4960
    method <overload N.1 : *> (arg0) -> Float @ rbi/stdlib.rbi:4937
      argument arg0<> -> Float @ rbi/stdlib.rbi:4938
    method <overload N.1 : +> (arg0) -> Float @ rbi/stdlib.rbi:4981
      argument arg0<> -> Float @ rbi/stdlib.rbi:4982
    method <overload N.1 : -> (arg0) -> Float @ rbi/stdlib.rbi:5006
      argument arg0<> -> Float @ rbi/stdlib.rbi:5007
    method <overload N.1 : /> (arg0) -> Float @ rbi/stdlib.rbi:5031
      argument arg0<> -> Float @ rbi/stdlib.rbi:5032
    method <overload N.1 : <=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5071
      argument arg0<> -> Float @ rbi/stdlib.rbi:5072
    method <overload N.1 : <=>> (arg0) -> Object @ rbi/stdlib.rbi:5089
      argument arg0<> -> Float @ rbi/stdlib.rbi:5090
    method <overload N.1 : <> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5053
      argument arg0<> -> Float @ rbi/stdlib.rbi:5054
    method <overload N.1 : >=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5137
      argument arg0<> -> Float @ rbi/stdlib.rbi:5138
    method <overload N.1 : >> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5119
      argument arg0<> -> Float @ rbi/stdlib.rbi:5120
    method <overload N.1 : coerce> (arg0) -> TupleType {
      0 = Float
      1 = Float
    } @ rbi/stdlib.rbi:5173
      argument arg0<> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:5174
    method <overload N.1 : div> (arg0) -> Integer @ rbi/stdlib.rbi:5192
      argument arg0<> -> Float @ rbi/stdlib.rbi:5193
    method <overload N.1 : fdiv> (arg0) -> Float @ rbi/stdlib.rbi:5231
      argument arg0<> -> Float @ rbi/stdlib.rbi:5232
    method <overload N.1 : modulo> (arg0) -> Float @ rbi/stdlib.rbi:5280
      argument arg0<> -> Float @ rbi/stdlib.rbi:5281
    method <overload N.1 : quo> (arg0) -> Float @ rbi/stdlib.rbi:5313
      argument arg0<> -> Float @ rbi/stdlib.rbi:5314
    method <overload N.1 : rationalize> (arg0) -> Rational @ rbi/stdlib.rbi:5332
      argument arg0<optional> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:5333
    method <overload N.1 : round> (arg0) -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:5345
      argument arg0<optional> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:5346
    method <overload N.2 : %> (arg0) -> Float @ rbi/stdlib.rbi:4923
      argument arg0<> -> Rational @ rbi/stdlib.rbi:4924
    method <overload N.2 : **> (arg0) -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:4963
      argument arg0<> -> Rational @ rbi/stdlib.rbi:4964
    method <overload N.2 : *> (arg0) -> Float @ rbi/stdlib.rbi:4941
      argument arg0<> -> Rational @ rbi/stdlib.rbi:4942
    method <overload N.2 : +> (arg0) -> Float @ rbi/stdlib.rbi:4985
      argument arg0<> -> Rational @ rbi/stdlib.rbi:4986
    method <overload N.2 : -> (arg0) -> Float @ rbi/stdlib.rbi:5010
      argument arg0<> -> Rational @ rbi/stdlib.rbi:5011
    method <overload N.2 : /> (arg0) -> Float @ rbi/stdlib.rbi:5035
      argument arg0<> -> Rational @ rbi/stdlib.rbi:5036
    method <overload N.2 : <=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5075
      argument arg0<> -> Rational @ rbi/stdlib.rbi:5076
    method <overload N.2 : <=>> (arg0) -> Object @ rbi/stdlib.rbi:5093
      argument arg0<> -> Rational @ rbi/stdlib.rbi:5094
    method <overload N.2 : <> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5057
      argument arg0<> -> Rational @ rbi/stdlib.rbi:5058
    method <overload N.2 : >=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5141
      argument arg0<> -> Rational @ rbi/stdlib.rbi:5142
    method <overload N.2 : >> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5123
      argument arg0<> -> Rational @ rbi/stdlib.rbi:5124
    method <overload N.2 : div> (arg0) -> Integer @ rbi/stdlib.rbi:5196
      argument arg0<> -> Rational @ rbi/stdlib.rbi:5197
    method <overload N.2 : fdiv> (arg0) -> Float @ rbi/stdlib.rbi:5235
      argument arg0<> -> Rational @ rbi/stdlib.rbi:5236
    method <overload N.2 : modulo> (arg0) -> Float @ rbi/stdlib.rbi:5284
      argument arg0<> -> Rational @ rbi/stdlib.rbi:5285
    method <overload N.2 : quo> (arg0) -> Float @ rbi/stdlib.rbi:5317
      argument arg0<> -> Rational @ rbi/stdlib.rbi:5318
    method <overload N.3 : %> (arg0) -> BigDecimal @ rbi/stdlib.rbi:4927
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:4928
    method <overload N.3 : **> (arg0) -> BigDecimal @ rbi/stdlib.rbi:4967
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:4968
    method <overload N.3 : *> (arg0) -> BigDecimal @ rbi/stdlib.rbi:4945
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:4946
    method <overload N.3 : +> (arg0) -> BigDecimal @ rbi/stdlib.rbi:4989
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:4990
    method <overload N.3 : -> (arg0) -> BigDecimal @ rbi/stdlib.rbi:5014
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:5015
    method <overload N.3 : /> (arg0) -> BigDecimal @ rbi/stdlib.rbi:5039
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:5040
    method <overload N.3 : <=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5079
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:5080
    method <overload N.3 : <=>> (arg0) -> Object @ rbi/stdlib.rbi:5097
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:5098
    method <overload N.3 : <> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5061
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:5062
    method <overload N.3 : >=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5145
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:5146
    method <overload N.3 : >> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5127
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:5128
    method <overload N.3 : div> (arg0) -> Integer @ rbi/stdlib.rbi:5200
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:5201
    method <overload N.3 : fdiv> (arg0) -> BigDecimal @ rbi/stdlib.rbi:5239
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:5240
    method <overload N.3 : modulo> (arg0) -> BigDecimal @ rbi/stdlib.rbi:5288
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:5289
    method <overload N.3 : quo> (arg0) -> BigDecimal @ rbi/stdlib.rbi:5321
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:5322
    method <overload N.4 : **> (arg0) -> Complex @ rbi/stdlib.rbi:4971
      argument arg0<> -> Complex @ rbi/stdlib.rbi:4972
    method <overload N.4 : *> (arg0) -> Complex @ rbi/stdlib.rbi:4949
      argument arg0<> -> Complex @ rbi/stdlib.rbi:4950
    method <overload N.4 : +> (arg0) -> Complex @ rbi/stdlib.rbi:4993
      argument arg0<> -> Complex @ rbi/stdlib.rbi:4994
    method <overload N.4 : -> (arg0) -> Complex @ rbi/stdlib.rbi:5018
      argument arg0<> -> Complex @ rbi/stdlib.rbi:5019
    method <overload N.4 : /> (arg0) -> Complex @ rbi/stdlib.rbi:5043
      argument arg0<> -> Complex @ rbi/stdlib.rbi:5044
    method <overload N.4 : fdiv> (arg0) -> Complex @ rbi/stdlib.rbi:5243
      argument arg0<> -> Complex @ rbi/stdlib.rbi:5244
    method <overload N.4 : quo> (arg0) -> Complex @ rbi/stdlib.rbi:5325
      argument arg0<> -> Complex @ rbi/stdlib.rbi:5326
    method == (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5107
      argument arg0<> -> Object @ rbi/stdlib.rbi:5104
    method === (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5113
      argument arg0<> -> Object @ rbi/stdlib.rbi:5110
    method > (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5131
      argument arg0<> -> Integer @ rbi/stdlib.rbi:5116
    method >= (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5149
      argument arg0<> -> Integer @ rbi/stdlib.rbi:5134
    method abs () -> Float @ rbi/stdlib.rbi:5152
    method abs2 () -> Float @ rbi/stdlib.rbi:5155
    method angle () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:5158
    method arg () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:5161
    method ceil () -> Integer @ rbi/stdlib.rbi:5164
    method clone () -> Float @ rbi/stdlib.rbi:5167
    method coerce (arg0) -> TupleType {
      0 = Float
      1 = Float
    } @ rbi/stdlib.rbi:5177
      argument arg0<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:5170
    method conj () -> Float @ rbi/stdlib.rbi:5180
    method conjugate () -> Float @ rbi/stdlib.rbi:5183
    method denominator () -> Integer @ rbi/stdlib.rbi:5186
    method div (arg0) -> Integer @ rbi/stdlib.rbi:5204
      argument arg0<> -> Integer @ rbi/stdlib.rbi:5189
    method divmod (arg0) -> TupleType {
      0 = Integer | Float | Rational | BigDecimal
      1 = Integer | Float | Rational | BigDecimal
    } @ rbi/stdlib.rbi:5210
      argument arg0<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:5207
    method dup () -> Float @ rbi/stdlib.rbi:5213
    method eql? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5219
      argument arg0<> -> Object @ rbi/stdlib.rbi:5216
    method equal? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5225
      argument arg0<> -> Object @ rbi/stdlib.rbi:5222
    method fdiv (arg0) -> Float @ rbi/stdlib.rbi:5247
      argument arg0<> -> Integer @ rbi/stdlib.rbi:5228
    method finite? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:5250
    method floor () -> Integer @ rbi/stdlib.rbi:5253
    method freeze () -> Float @ rbi/stdlib.rbi:5256
    method hash () -> Integer @ rbi/stdlib.rbi:5259
    method imag () -> Integer @ rbi/stdlib.rbi:5262
    method imaginary () -> Integer @ rbi/stdlib.rbi:5265
    method infinite? () -> Object @ rbi/stdlib.rbi:5268
    method inspect () -> String @ rbi/stdlib.rbi:5271
    method magnitude () -> Float @ rbi/stdlib.rbi:5274
    method modulo (arg0) -> Float @ rbi/stdlib.rbi:5292
      argument arg0<> -> Integer @ rbi/stdlib.rbi:5277
    method nan? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:5295
    method next_float () -> Float @ rbi/stdlib.rbi:5298
    method numerator () -> Integer @ rbi/stdlib.rbi:5301
    method phase () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:5304
    method prev_float () -> Float @ rbi/stdlib.rbi:5307
    method quo (arg0) -> Float @ rbi/stdlib.rbi:5329
      argument arg0<> -> Integer @ rbi/stdlib.rbi:5310
    method rationalize () -> Rational @ rbi/stdlib.rbi:5336
      argument arg0<optional> @ rbi/stdlib.rbi:5336
    method real () -> Float @ rbi/stdlib.rbi:5339
    method real? () -> TrueClass @ rbi/stdlib.rbi:5342
    method round () -> Integer @ rbi/stdlib.rbi:5349
      argument arg0<optional> @ rbi/stdlib.rbi:5349
    method taint () -> Float @ rbi/stdlib.rbi:5352
    method to_c () -> Complex @ rbi/stdlib.rbi:5355
    method to_f () -> Float @ rbi/stdlib.rbi:5358
    method to_i () -> Integer @ rbi/stdlib.rbi:5361
    method to_int () -> Integer @ rbi/stdlib.rbi:5364
    method to_r () -> Rational @ rbi/stdlib.rbi:5367
    method to_s () -> String @ rbi/stdlib.rbi:5370
    method truncate () -> Integer @ rbi/stdlib.rbi:5373
    method trust () -> Float @ rbi/stdlib.rbi:5376
    method untaint () -> Float @ rbi/stdlib.rbi:5379
    method untrust () -> Float @ rbi/stdlib.rbi:5382
    method zero? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:5385
    static-field <constant:DIG> -> Integer @ rbi/stdlib.rbi:12720
    static-field <constant:EPSILON> -> Float @ rbi/stdlib.rbi:12721
    static-field <constant:INFINITY> -> Float @ rbi/stdlib.rbi:12722
    static-field <constant:MANT_DIG> -> Integer @ rbi/stdlib.rbi:12723
    static-field <constant:MAX> -> Float @ rbi/stdlib.rbi:12724
    static-field <constant:MAX_10_EXP> -> Integer @ rbi/stdlib.rbi:12725
    static-field <constant:MAX_EXP> -> Integer @ rbi/stdlib.rbi:12726
    static-field <constant:MIN> -> Float @ rbi/stdlib.rbi:12727
    static-field <constant:MIN_10_EXP> -> Integer @ rbi/stdlib.rbi:12728
    static-field <constant:MIN_EXP> -> Integer @ rbi/stdlib.rbi:12729
    static-field <constant:NAN> -> Float @ rbi/stdlib.rbi:12730
    static-field <constant:RADIX> -> Integer @ rbi/stdlib.rbi:12731
    static-field <constant:ROUNDS> -> Integer @ rbi/stdlib.rbi:12732
  class <constant:FloatDomainError> < ::<constant:RangeError> () -> <Class:FloatDomainError> @ rbi/stdlib.rbi:5388
    method clone () -> FloatDomainError @ rbi/stdlib.rbi:5390
    method dup () -> FloatDomainError @ rbi/stdlib.rbi:5393
    method freeze () -> FloatDomainError @ rbi/stdlib.rbi:5396
    method taint () -> FloatDomainError @ rbi/stdlib.rbi:5399
    method trust () -> FloatDomainError @ rbi/stdlib.rbi:5402
    method untaint () -> FloatDomainError @ rbi/stdlib.rbi:5405
    method untrust () -> FloatDomainError @ rbi/stdlib.rbi:5408
  class <constant:Forwardable> (<constant:BasicObject>) -> <Class:Forwardable> @ rbi/stdlib.rbi:429
    static-field <constant:FILTER_EXCEPTION> -> String @ rbi/stdlib.rbi:12733
    static-field <constant:FORWARDABLE_VERSION> -> String @ rbi/stdlib.rbi:12734
  class <constant:GC> (<constant:BasicObject>) -> <Class:GC> @ rbi/stdlib.rbi:5411
    class <constant:Profiler> (<constant:BasicObject>) -> <Class:GC::Profiler> @ rbi/stdlib.rbi:433
    class <singleton class:<constant:Profiler>> < ::<constant:Module> () @ rbi/stdlib.rbi:433
    static-field <constant:INTERNAL_CONSTANTS> -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12735
    static-field <constant:OPTS> -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12736
  class <constant:Gem> (<constant:BasicObject>) -> <Class:Gem> @ rbi/stdlib.rbi:5438
    class <constant:BasicSpecification> < ::<constant:Object> () -> <Class:Gem::BasicSpecification> @ rbi/stdlib.rbi:437
    class <constant:CommandLineError> < ::<constant:Gem>::<constant:Exception> () -> <Class:Gem::CommandLineError> @ rbi/stdlib.rbi:441
    class <constant:ConfigFile> () -> untyped @ rbi/stdlib.rbi:5465
    class <constant:ConflictError> < ::<constant:Gem>::<constant:LoadError> () -> <Class:Gem::ConflictError> @ rbi/stdlib.rbi:449
    class <constant:Dependency> < ::<constant:Object> () -> <Class:Gem::Dependency> @ rbi/stdlib.rbi:451
      static-field <constant:TYPES> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:12738
    class <constant:DependencyError> < ::<constant:Gem>::<constant:Exception> () -> <Class:Gem::DependencyError> @ rbi/stdlib.rbi:453
    class <constant:DependencyRemovalException> < ::<constant:Gem>::<constant:Exception> () -> <Class:Gem::DependencyRemovalException> @ rbi/stdlib.rbi:455
    class <constant:DependencyResolutionError> < ::<constant:Gem>::<constant:DependencyError> () -> <Class:Gem::DependencyResolutionError> @ rbi/stdlib.rbi:457
    class <constant:Deprecate> (<constant:BasicObject>) -> <Class:Gem::Deprecate> @ rbi/stdlib.rbi:459
    class <constant:DocumentError> < ::<constant:Gem>::<constant:Exception> () -> <Class:Gem::DocumentError> @ rbi/stdlib.rbi:461
    class <constant:EndOfYAMLException> < ::<constant:Gem>::<constant:Exception> () -> <Class:Gem::EndOfYAMLException> @ rbi/stdlib.rbi:463
    class <constant:ErrorReason> < ::<constant:Object> () -> <Class:Gem::ErrorReason> @ rbi/stdlib.rbi:465
    class <constant:Exception> < ::<constant:RuntimeError> () -> <Class:Gem::Exception> @ rbi/stdlib.rbi:439
    class <constant:FilePermissionError> < ::<constant:Gem>::<constant:Exception> () -> <Class:Gem::FilePermissionError> @ rbi/stdlib.rbi:467
    class <constant:FormatException> < ::<constant:Gem>::<constant:Exception> () -> <Class:Gem::FormatException> @ rbi/stdlib.rbi:469
    class <constant:GemNotFoundException> < ::<constant:Gem>::<constant:Exception> () -> <Class:Gem::GemNotFoundException> @ rbi/stdlib.rbi:471
    class <constant:GemNotInHomeException> < ::<constant:Gem>::<constant:Exception> () -> <Class:Gem::GemNotInHomeException> @ rbi/stdlib.rbi:473
    class <constant:ImpossibleDependenciesError> < ::<constant:Gem>::<constant:Exception> () -> <Class:Gem::ImpossibleDependenciesError> @ rbi/stdlib.rbi:475
    class <constant:InstallError> < ::<constant:Gem>::<constant:Exception> () -> <Class:Gem::InstallError> @ rbi/stdlib.rbi:477
    class <constant:InvalidSpecificationException> < ::<constant:Gem>::<constant:Exception> () -> <Class:Gem::InvalidSpecificationException> @ rbi/stdlib.rbi:479
    class <constant:List>[<constant:Elem>] < ::<constant:Object> (<constant:Enumerable>) -> <Class:Gem::List> @ rbi/stdlib.rbi:481
      typeMember(=) <constant:Elem> @ rbi/stdlib.rbi:481
    class <constant:LoadError> < ::<constant:LoadError> () -> <Class:Gem::LoadError> @ rbi/stdlib.rbi:447
    class <constant:MissingSpecError> < ::<constant:Gem>::<constant:LoadError> () -> <Class:Gem::MissingSpecError> @ rbi/stdlib.rbi:484
    class <constant:MissingSpecVersionError> < ::<constant:Gem>::<constant:MissingSpecError> () -> <Class:Gem::MissingSpecVersionError> @ rbi/stdlib.rbi:486
    class <constant:OperationNotSupportedError> < ::<constant:Gem>::<constant:Exception> () -> <Class:Gem::OperationNotSupportedError> @ rbi/stdlib.rbi:488
    class <constant:PathSupport> < ::<constant:Object> () -> <Class:Gem::PathSupport> @ rbi/stdlib.rbi:490
    class <constant:Platform> < ::<constant:Object> () -> <Class:Gem::Platform> @ rbi/stdlib.rbi:492
      static-field <constant:CURRENT> -> String @ rbi/stdlib.rbi:12743
      static-field <constant:RUBY> -> String @ rbi/stdlib.rbi:12744
    class <constant:PlatformMismatch> < ::<constant:Gem>::<constant:ErrorReason> () -> <Class:Gem::PlatformMismatch> @ rbi/stdlib.rbi:494
    class <constant:RemoteError> < ::<constant:Gem>::<constant:Exception> () -> <Class:Gem::RemoteError> @ rbi/stdlib.rbi:496
    class <constant:RemoteInstallationCancelled> < ::<constant:Gem>::<constant:Exception> () -> <Class:Gem::RemoteInstallationCancelled> @ rbi/stdlib.rbi:498
    class <constant:RemoteInstallationSkipped> < ::<constant:Gem>::<constant:Exception> () -> <Class:Gem::RemoteInstallationSkipped> @ rbi/stdlib.rbi:500
    class <constant:RemoteSourceException> < ::<constant:Gem>::<constant:Exception> () -> <Class:Gem::RemoteSourceException> @ rbi/stdlib.rbi:502
    class <constant:Requirement> < ::<constant:Object> () -> <Class:Gem::Requirement> @ rbi/stdlib.rbi:504
      class <constant:BadRequirementError> < ::<constant:ArgumentError> () -> <Class:Gem::Requirement::BadRequirementError> @ rbi/stdlib.rbi:506
      class <singleton class:<constant:BadRequirementError>> < ::<singleton class:<constant:ArgumentError>> () @ rbi/stdlib.rbi:506
      static-field <constant:OPS> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:12749
      static-field <constant:PATTERN> -> Regexp @ rbi/stdlib.rbi:12750
      static-field <constant:PATTERN_RAW> -> String @ rbi/stdlib.rbi:12751
      static-field <constant:SOURCE_SET_REQUIREMENT> -> Object @ rbi/stdlib.rbi:12752
    class <constant:RubyVersionMismatch> < ::<constant:Gem>::<constant:Exception> () -> <Class:Gem::RubyVersionMismatch> @ rbi/stdlib.rbi:508
    class <constant:SourceFetchProblem> < ::<constant:Gem>::<constant:ErrorReason> () -> <Class:Gem::SourceFetchProblem> @ rbi/stdlib.rbi:510
    class <constant:SpecificGemNotFoundException> < ::<constant:Gem>::<constant:GemNotFoundException> () -> <Class:Gem::SpecificGemNotFoundException> @ rbi/stdlib.rbi:512
    class <constant:Specification> < ::<constant:Gem>::<constant:BasicSpecification> () -> <Class:Gem::Specification> @ rbi/stdlib.rbi:514
      static-field <constant:CURRENT_SPECIFICATION_VERSION> -> Integer @ rbi/stdlib.rbi:12753
      static-field <constant:EMPTY> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:12754
      static-field <constant:MARSHAL_FIELDS> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:12755
      static-field <constant:NONEXISTENT_SPECIFICATION_VERSION> -> Integer @ rbi/stdlib.rbi:12756
      static-field <constant:NOT_FOUND> -> Object @ rbi/stdlib.rbi:12757
      static-field <constant:SPECIFICATION_VERSION_HISTORY> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:12758
      static-field <constant:TODAY> -> Time @ rbi/stdlib.rbi:12759
      static-field <constant:VALID_NAME_PATTERN> -> Regexp @ rbi/stdlib.rbi:12760
    class <constant:StubSpecification> < ::<constant:Gem>::<constant:BasicSpecification> () -> <Class:Gem::StubSpecification> @ rbi/stdlib.rbi:516
      class <constant:StubLine> < ::<constant:Object> () -> <Class:Gem::StubSpecification::StubLine> @ rbi/stdlib.rbi:518
        static-field <constant:NO_EXTENSIONS> -> AppliedType {
          klass = ::<constant:Array>
          targs = [
            <constant:Elem> = untyped
          ]
        } @ rbi/stdlib.rbi:12763
        static-field <constant:REQUIRE_PATHS> -> AppliedType {
          klass = ::<constant:Hash>
          targs = [
            <constant:K> = untyped
            <constant:V> = untyped
            <constant:Elem> = untyped
          ]
        } @ rbi/stdlib.rbi:12764
        static-field <constant:REQUIRE_PATH_LIST> -> AppliedType {
          klass = ::<constant:Hash>
          targs = [
            <constant:K> = untyped
            <constant:V> = untyped
            <constant:Elem> = untyped
          ]
        } @ rbi/stdlib.rbi:12765
      class <singleton class:<constant:StubLine>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:518
      static-field <constant:OPEN_MODE> -> String @ rbi/stdlib.rbi:12761
      static-field <constant:PREFIX> -> String @ rbi/stdlib.rbi:12762
    class <constant:SystemExitException> < ::<constant:SystemExit> () -> <Class:Gem::SystemExitException> @ rbi/stdlib.rbi:522
    class <constant:UnsatisfiableDependencyError> < ::<constant:Gem>::<constant:DependencyError> () -> <Class:Gem::UnsatisfiableDependencyError> @ rbi/stdlib.rbi:524
    class <constant:VerificationError> < ::<constant:Gem>::<constant:Exception> () -> <Class:Gem::VerificationError> @ rbi/stdlib.rbi:526
    class <constant:Version> < ::<constant:Object> (<constant:Comparable>) -> <Class:Gem::Version> @ rbi/stdlib.rbi:528
      static-field <constant:ANCHORED_VERSION_PATTERN> -> Regexp @ rbi/stdlib.rbi:12767
      static-field <constant:VERSION_PATTERN> -> String @ rbi/stdlib.rbi:12768
    class <singleton class:<constant:BasicSpecification>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:437
    class <singleton class:<constant:CommandLineError>> < ::<constant:Gem>::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:441
    class <singleton class:<constant:ConflictError>> < ::<constant:Gem>::<singleton class:<constant:LoadError>> () @ rbi/stdlib.rbi:449
    class <singleton class:<constant:Dependency>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:451
    class <singleton class:<constant:DependencyError>> < ::<constant:Gem>::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:453
    class <singleton class:<constant:DependencyRemovalException>> < ::<constant:Gem>::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:455
    class <singleton class:<constant:DependencyResolutionError>> < ::<constant:Gem>::<singleton class:<constant:DependencyError>> () @ rbi/stdlib.rbi:457
    class <singleton class:<constant:Deprecate>> < ::<constant:Module> () @ rbi/stdlib.rbi:459
    class <singleton class:<constant:DocumentError>> < ::<constant:Gem>::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:461
    class <singleton class:<constant:EndOfYAMLException>> < ::<constant:Gem>::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:463
    class <singleton class:<constant:ErrorReason>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:465
    class <singleton class:<constant:Exception>> < ::<singleton class:<constant:RuntimeError>> () @ rbi/stdlib.rbi:439
    class <singleton class:<constant:FilePermissionError>> < ::<constant:Gem>::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:467
    class <singleton class:<constant:FormatException>> < ::<constant:Gem>::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:469
    class <singleton class:<constant:GemNotFoundException>> < ::<constant:Gem>::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:471
    class <singleton class:<constant:GemNotInHomeException>> < ::<constant:Gem>::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:473
    class <singleton class:<constant:ImpossibleDependenciesError>> < ::<constant:Gem>::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:475
    class <singleton class:<constant:InstallError>> < ::<constant:Gem>::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:477
    class <singleton class:<constant:InvalidSpecificationException>> < ::<constant:Gem>::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:479
    class <singleton class:<constant:List>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:481
    class <singleton class:<constant:LoadError>> < ::<singleton class:<constant:LoadError>> () @ rbi/stdlib.rbi:447
    class <singleton class:<constant:MissingSpecError>> < ::<constant:Gem>::<singleton class:<constant:LoadError>> () @ rbi/stdlib.rbi:484
    class <singleton class:<constant:MissingSpecVersionError>> < ::<constant:Gem>::<singleton class:<constant:MissingSpecError>> () @ rbi/stdlib.rbi:486
    class <singleton class:<constant:OperationNotSupportedError>> < ::<constant:Gem>::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:488
    class <singleton class:<constant:PathSupport>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:490
    class <singleton class:<constant:Platform>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:492
    class <singleton class:<constant:PlatformMismatch>> < ::<constant:Gem>::<singleton class:<constant:ErrorReason>> () @ rbi/stdlib.rbi:494
    class <singleton class:<constant:RemoteError>> < ::<constant:Gem>::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:496
    class <singleton class:<constant:RemoteInstallationCancelled>> < ::<constant:Gem>::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:498
    class <singleton class:<constant:RemoteInstallationSkipped>> < ::<constant:Gem>::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:500
    class <singleton class:<constant:RemoteSourceException>> < ::<constant:Gem>::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:502
    class <singleton class:<constant:Requirement>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:504
    class <singleton class:<constant:RubyVersionMismatch>> < ::<constant:Gem>::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:508
    class <singleton class:<constant:SourceFetchProblem>> < ::<constant:Gem>::<singleton class:<constant:ErrorReason>> () @ rbi/stdlib.rbi:510
    class <singleton class:<constant:SpecificGemNotFoundException>> < ::<constant:Gem>::<singleton class:<constant:GemNotFoundException>> () @ rbi/stdlib.rbi:512
    class <singleton class:<constant:Specification>> < ::<constant:Gem>::<singleton class:<constant:BasicSpecification>> () @ rbi/stdlib.rbi:514
    class <singleton class:<constant:StubSpecification>> < ::<constant:Gem>::<singleton class:<constant:BasicSpecification>> () @ rbi/stdlib.rbi:516
    class <singleton class:<constant:SystemExitException>> < ::<singleton class:<constant:SystemExit>> () @ rbi/stdlib.rbi:522
    class <singleton class:<constant:UnsatisfiableDependencyError>> < ::<constant:Gem>::<singleton class:<constant:DependencyError>> () @ rbi/stdlib.rbi:524
    class <singleton class:<constant:VerificationError>> < ::<constant:Gem>::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:526
    class <singleton class:<constant:Version>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:528
    static-field <constant:DEFAULT_HOST> -> String @ rbi/stdlib.rbi:12737
    static-field <constant:GEM_DEP_FILES> -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12739
    static-field <constant:GEM_PRELUDE_SUCKAGE> -> NilClass @ rbi/stdlib.rbi:12740
    static-field <constant:LOADED_SPECS_MUTEX> -> Thread::Mutex @ rbi/stdlib.rbi:12741
    static-field <constant:MARSHAL_SPEC_DIR> -> String @ rbi/stdlib.rbi:12742
    static-field <constant:READ_BINARY_ERRORS> -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12745
    static-field <constant:REPOSITORY_DEFAULT_GEM_SUBDIRECTORIES> -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12746
    static-field <constant:REPOSITORY_SUBDIRECTORIES> -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12747
    static-field <constant:RUBYGEMS_DIR> -> String @ rbi/stdlib.rbi:12748
    static-field <constant:VERSION> -> String @ rbi/stdlib.rbi:12766
    static-field <constant:WIN_PATTERNS> -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12769
    static-field <constant:WRITE_BINARY_ERRORS> -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12770
  class <constant:Hash>[<constant:K>, <constant:V>, <constant:Elem>] < ::<constant:Object> (<constant:Enumerable>) -> <Class:Hash> @ rbi/stdlib.rbi:5505
    method <overload N.1 : default> (arg0, blk) -> LambdaParam(::<constant:Hash>#<constant:V>) @ rbi/stdlib.rbi:5552
      argument arg0<optional> -> LambdaParam(::<constant:Hash>#<constant:K>) @ rbi/stdlib.rbi:5553
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = LambdaParam(::<constant:Hash>#<constant:V>)
          <constant:Arg0> = LambdaParam(::<constant:Hash>#<constant:K>)
        ]
      } @ rbi/stdlib.rbi:5554
    method <overload N.1 : delete> (arg0, blk) -> untyped @ rbi/stdlib.rbi:5569
      argument arg0<> -> LambdaParam(::<constant:Hash>#<constant:K>) @ rbi/stdlib.rbi:5570
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Hash>#<constant:K>)
        ]
      } @ rbi/stdlib.rbi:5571
    method <overload N.1 : delete_if> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = TupleType {
            0 = LambdaParam(::<constant:Hash>#<constant:K>)
            1 = LambdaParam(::<constant:Hash>#<constant:V>)
          }
      ]
    } @ rbi/stdlib.rbi:5580
      argument blk<block> @ rbi/stdlib.rbi:5581
    method <overload N.1 : each> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = TupleType {
            0 = LambdaParam(::<constant:Hash>#<constant:K>)
            1 = LambdaParam(::<constant:Hash>#<constant:V>)
          }
      ]
    } @ rbi/stdlib.rbi:5590
      argument blk<block> @ rbi/stdlib.rbi:5591
    method <overload N.1 : each_key> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = TupleType {
            0 = LambdaParam(::<constant:Hash>#<constant:K>)
            1 = LambdaParam(::<constant:Hash>#<constant:V>)
          }
      ]
    } @ rbi/stdlib.rbi:5597
      argument blk<block> @ rbi/stdlib.rbi:5598
    method <overload N.1 : each_pair> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = TupleType {
            0 = LambdaParam(::<constant:Hash>#<constant:K>)
            1 = LambdaParam(::<constant:Hash>#<constant:V>)
          }
      ]
    } @ rbi/stdlib.rbi:5604
      argument blk<block> @ rbi/stdlib.rbi:5605
    method <overload N.1 : each_value> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = TupleType {
            0 = LambdaParam(::<constant:Hash>#<constant:K>)
            1 = LambdaParam(::<constant:Hash>#<constant:V>)
          }
      ]
    } @ rbi/stdlib.rbi:5611
      argument blk<block> @ rbi/stdlib.rbi:5612
    method <overload N.1 : fetch> (arg0, arg1) -> LambdaParam(::<constant:Hash>#<constant:V>) @ rbi/stdlib.rbi:5621
      argument arg0<> -> LambdaParam(::<constant:Hash>#<constant:K>) @ rbi/stdlib.rbi:5622
      argument arg1<optional> -> LambdaParam(::<constant:Hash>#<constant:V>) @ rbi/stdlib.rbi:5623
      argument blk<block> @ rbi/stdlib.rbi:5631
    method <overload N.1 : keep_if> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = TupleType {
            0 = LambdaParam(::<constant:Hash>#<constant:K>)
            1 = LambdaParam(::<constant:Hash>#<constant:V>)
          }
      ]
    } @ rbi/stdlib.rbi:5658
      argument blk<block> @ rbi/stdlib.rbi:5659
    method <overload N.1 : merge> (arg0, blk) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5689
      argument arg0<> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = BasicObject
          <constant:V> = BasicObject
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:5690
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc3>
        targs = [
          <constant:Return> = BasicObject | LambdaParam(::<constant:Hash>#<constant:V>)
          <constant:Arg0> = LambdaParam(::<constant:Hash>#<constant:K>)
          <constant:Arg1> = LambdaParam(::<constant:Hash>#<constant:V>)
          <constant:Arg2> = untyped
        ]
      } @ rbi/stdlib.rbi:5691
    method <overload N.1 : reject> (blk) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = LambdaParam(::<constant:Hash>#<constant:K>)
        <constant:V> = LambdaParam(::<constant:Hash>#<constant:V>)
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5706
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Hash>#<constant:K>)
          <constant:Arg1> = LambdaParam(::<constant:Hash>#<constant:V>)
        ]
      } @ rbi/stdlib.rbi:5707
    method <overload N.2 : fetch> (arg0, blk) -> LambdaParam(::<constant:Hash>#<constant:V>) @ rbi/stdlib.rbi:5626
      argument arg0<> -> LambdaParam(::<constant:Hash>#<constant:K>) @ rbi/stdlib.rbi:5627
      argument arg1<optional> @ rbi/stdlib.rbi:5631
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = LambdaParam(::<constant:Hash>#<constant:V>)
          <constant:Arg0> = LambdaParam(::<constant:Hash>#<constant:K>)
        ]
      } @ rbi/stdlib.rbi:5628
    method [] (arg0) -> LambdaParam(::<constant:Hash>#<constant:V>) @ rbi/stdlib.rbi:5521
      argument arg0<> -> LambdaParam(::<constant:Hash>#<constant:K>) @ rbi/stdlib.rbi:5518
    method []= (arg0, arg1) -> LambdaParam(::<constant:Hash>#<constant:V>) @ rbi/stdlib.rbi:5528
      argument arg0<> -> LambdaParam(::<constant:Hash>#<constant:K>) @ rbi/stdlib.rbi:5524
      argument arg1<> -> LambdaParam(::<constant:Hash>#<constant:V>) @ rbi/stdlib.rbi:5525
    method assoc (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Hash>#<constant:K>) | LambdaParam(::<constant:Hash>#<constant:V>)
      ]
    } @ rbi/stdlib.rbi:5534
      argument arg0<> -> LambdaParam(::<constant:Hash>#<constant:K>) @ rbi/stdlib.rbi:5531
    method clear () -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = LambdaParam(::<constant:Hash>#<constant:K>)
        <constant:V> = LambdaParam(::<constant:Hash>#<constant:V>)
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5537
    method clone () -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5540
    method compare_by_identity () -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = LambdaParam(::<constant:Hash>#<constant:K>)
        <constant:V> = LambdaParam(::<constant:Hash>#<constant:V>)
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5543
    method compare_by_identity? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:5546
    method default (arg0) -> LambdaParam(::<constant:Hash>#<constant:V>) @ rbi/stdlib.rbi:5557
      argument arg0<optional> -> LambdaParam(::<constant:Hash>#<constant:K>) @ rbi/stdlib.rbi:5549
      argument blk<block> @ rbi/stdlib.rbi:5557
    method default= (arg0) -> LambdaParam(::<constant:Hash>#<constant:V>) @ rbi/stdlib.rbi:5563
      argument arg0<> -> LambdaParam(::<constant:Hash>#<constant:V>) @ rbi/stdlib.rbi:5560
    method delete (arg0) -> LambdaParam(::<constant:Hash>#<constant:V>) @ rbi/stdlib.rbi:5574
      argument arg0<> -> LambdaParam(::<constant:Hash>#<constant:K>) @ rbi/stdlib.rbi:5566
      argument blk<block> @ rbi/stdlib.rbi:5574
    method delete_if (blk) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = LambdaParam(::<constant:Hash>#<constant:K>)
        <constant:V> = LambdaParam(::<constant:Hash>#<constant:V>)
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5581
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Hash>#<constant:K>)
          <constant:Arg1> = LambdaParam(::<constant:Hash>#<constant:V>)
        ]
      } @ rbi/stdlib.rbi:5577
    method dup () -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5584
    method each (blk) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = LambdaParam(::<constant:Hash>#<constant:K>)
        <constant:V> = LambdaParam(::<constant:Hash>#<constant:V>)
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5591
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Hash>#<constant:K>)
          <constant:Arg1> = LambdaParam(::<constant:Hash>#<constant:V>)
        ]
      } @ rbi/stdlib.rbi:5587
    method each_key (blk) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = LambdaParam(::<constant:Hash>#<constant:K>)
        <constant:V> = LambdaParam(::<constant:Hash>#<constant:V>)
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5598
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Hash>#<constant:K>)
        ]
      } @ rbi/stdlib.rbi:5594
    method each_pair (blk) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = LambdaParam(::<constant:Hash>#<constant:K>)
        <constant:V> = LambdaParam(::<constant:Hash>#<constant:V>)
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5605
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Hash>#<constant:K>)
          <constant:Arg1> = LambdaParam(::<constant:Hash>#<constant:V>)
        ]
      } @ rbi/stdlib.rbi:5601
    method each_value (blk) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = LambdaParam(::<constant:Hash>#<constant:K>)
        <constant:V> = LambdaParam(::<constant:Hash>#<constant:V>)
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5612
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Hash>#<constant:V>)
        ]
      } @ rbi/stdlib.rbi:5608
    method empty? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:5615
    method fetch (arg0) -> LambdaParam(::<constant:Hash>#<constant:V>) @ rbi/stdlib.rbi:5631
      argument arg0<> -> LambdaParam(::<constant:Hash>#<constant:K>) @ rbi/stdlib.rbi:5618
      argument arg1<optional> @ rbi/stdlib.rbi:5631
      argument blk<block> @ rbi/stdlib.rbi:5631
    method freeze () -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5634
    method has_key? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5640
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:5637
    method has_value? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5646
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:5643
    method inspect () -> String @ rbi/stdlib.rbi:5649
    method invert () -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = LambdaParam(::<constant:Hash>#<constant:V>)
        <constant:V> = LambdaParam(::<constant:Hash>#<constant:K>)
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5652
    method keep_if (blk) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = LambdaParam(::<constant:Hash>#<constant:K>)
        <constant:V> = LambdaParam(::<constant:Hash>#<constant:V>)
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5659
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Hash>#<constant:K>)
          <constant:Arg1> = LambdaParam(::<constant:Hash>#<constant:V>)
        ]
      } @ rbi/stdlib.rbi:5655
    method key (arg0) -> LambdaParam(::<constant:Hash>#<constant:K>) @ rbi/stdlib.rbi:5665
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:5662
    method key? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5671
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:5668
    method keys () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Hash>#<constant:K>)
      ]
    } @ rbi/stdlib.rbi:5674
    method length () -> Integer @ rbi/stdlib.rbi:5677
    method member? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5683
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:5680
    method merge (arg0) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5694
      argument arg0<> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = BasicObject
          <constant:V> = BasicObject
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:5686
      argument blk<block> @ rbi/stdlib.rbi:5694
    method rassoc (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Hash>#<constant:K>) | LambdaParam(::<constant:Hash>#<constant:V>)
      ]
    } @ rbi/stdlib.rbi:5700
      argument arg0<> -> LambdaParam(::<constant:Hash>#<constant:K>) @ rbi/stdlib.rbi:5697
    method rehash () -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = LambdaParam(::<constant:Hash>#<constant:K>)
        <constant:V> = LambdaParam(::<constant:Hash>#<constant:V>)
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5703
    method reject () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = TupleType {
            0 = LambdaParam(::<constant:Hash>#<constant:K>)
            1 = LambdaParam(::<constant:Hash>#<constant:V>)
          }
      ]
    } @ rbi/stdlib.rbi:5710
      argument blk<block> @ rbi/stdlib.rbi:5710
    method reject! (blk) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = LambdaParam(::<constant:Hash>#<constant:K>)
        <constant:V> = LambdaParam(::<constant:Hash>#<constant:V>)
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5716
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Hash>#<constant:K>)
          <constant:Arg1> = LambdaParam(::<constant:Hash>#<constant:V>)
        ]
      } @ rbi/stdlib.rbi:5713
    method select (blk) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = LambdaParam(::<constant:Hash>#<constant:K>)
        <constant:V> = LambdaParam(::<constant:Hash>#<constant:V>)
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5722
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Hash>#<constant:K>)
          <constant:Arg1> = LambdaParam(::<constant:Hash>#<constant:V>)
        ]
      } @ rbi/stdlib.rbi:5719
    method select! (blk) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = LambdaParam(::<constant:Hash>#<constant:K>)
        <constant:V> = LambdaParam(::<constant:Hash>#<constant:V>)
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5728
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Hash>#<constant:K>)
          <constant:Arg1> = LambdaParam(::<constant:Hash>#<constant:V>)
        ]
      } @ rbi/stdlib.rbi:5725
    method shift () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Hash>#<constant:K>) | LambdaParam(::<constant:Hash>#<constant:V>)
      ]
    } @ rbi/stdlib.rbi:5731
    method size () -> Integer @ rbi/stdlib.rbi:5734
    method store (arg0, arg1) -> LambdaParam(::<constant:Hash>#<constant:V>) @ rbi/stdlib.rbi:5741
      argument arg0<> -> LambdaParam(::<constant:Hash>#<constant:K>) @ rbi/stdlib.rbi:5737
      argument arg1<> -> LambdaParam(::<constant:Hash>#<constant:V>) @ rbi/stdlib.rbi:5738
    method taint () -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5744
    method to_a () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = AppliedType {
            klass = ::<constant:Array>
            targs = [
              <constant:Elem> = LambdaParam(::<constant:Hash>#<constant:K>) | LambdaParam(::<constant:Hash>#<constant:V>)
            ]
          }
      ]
    } @ rbi/stdlib.rbi:5747
    method to_hash () -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = LambdaParam(::<constant:Hash>#<constant:K>)
        <constant:V> = LambdaParam(::<constant:Hash>#<constant:V>)
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5750
    method to_s () -> String @ rbi/stdlib.rbi:5753
    method trust () -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5756
    method untaint () -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5759
    method untrust () -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5762
    method value? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5768
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:5765
    method values () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Hash>#<constant:V>)
      ]
    } @ rbi/stdlib.rbi:5771
    method values_at (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Hash>#<constant:V>)
      ]
    } @ rbi/stdlib.rbi:5777
      argument arg0<repeated> -> LambdaParam(::<constant:Hash>#<constant:K>) @ rbi/stdlib.rbi:5774
    typeMember(=) <constant:Elem> @ rbi/stdlib.rbi:5509
    typeMember(=) <constant:K> @ rbi/stdlib.rbi:5507
    typeMember(=) <constant:V> @ rbi/stdlib.rbi:5508
  class <constant:IO>[<constant:Elem>] < ::<constant:Object> (<constant:Constants>, <constant:Enumerable>) -> <Class:IO> @ rbi/stdlib.rbi:1508
    class <constant:EAGAINWaitReadable> < ::<constant:Errno>::<constant:EAGAIN> (<constant:WaitReadable>) -> <Class:IO::EAGAINWaitReadable> @ rbi/stdlib.rbi:536
    class <constant:EAGAINWaitWritable> < ::<constant:Errno>::<constant:EAGAIN> (<constant:WaitWritable>) -> <Class:IO::EAGAINWaitWritable> @ rbi/stdlib.rbi:541
    class <constant:EINPROGRESSWaitReadable> < ::<constant:Errno>::<constant:EINPROGRESS> (<constant:WaitReadable>) -> <Class:IO::EINPROGRESSWaitReadable> @ rbi/stdlib.rbi:544
    class <constant:EINPROGRESSWaitWritable> < ::<constant:Errno>::<constant:EINPROGRESS> (<constant:WaitWritable>) -> <Class:IO::EINPROGRESSWaitWritable> @ rbi/stdlib.rbi:547
    class <constant:WaitReadable> (<constant:BasicObject>) -> <Class:IO::WaitReadable> @ rbi/stdlib.rbi:534
    class <constant:WaitWritable> (<constant:BasicObject>) -> <Class:IO::WaitWritable> @ rbi/stdlib.rbi:539
    class <singleton class:<constant:EAGAINWaitReadable>> < ::<constant:Errno>::<singleton class:<constant:EAGAIN>> () @ rbi/stdlib.rbi:536
    class <singleton class:<constant:EAGAINWaitWritable>> < ::<constant:Errno>::<singleton class:<constant:EAGAIN>> () @ rbi/stdlib.rbi:541
    class <singleton class:<constant:EINPROGRESSWaitReadable>> < ::<constant:Errno>::<singleton class:<constant:EINPROGRESS>> () @ rbi/stdlib.rbi:544
    class <singleton class:<constant:EINPROGRESSWaitWritable>> < ::<constant:Errno>::<singleton class:<constant:EINPROGRESS>> () @ rbi/stdlib.rbi:547
    class <singleton class:<constant:WaitReadable>> < ::<constant:Module> () @ rbi/stdlib.rbi:534
    class <singleton class:<constant:WaitWritable>> < ::<constant:Module> () @ rbi/stdlib.rbi:539
    method << (arg0) -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1516
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:1513
    method <overload N.1 : bytes> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = Integer
      ]
    } @ rbi/stdlib.rbi:2080
      argument blk<block> @ rbi/stdlib.rbi:2081
    method <overload N.1 : chars> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:2087
      argument blk<block> @ rbi/stdlib.rbi:2088
    method <overload N.1 : codepoints> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = Integer
      ]
    } @ rbi/stdlib.rbi:2094
      argument blk<block> @ rbi/stdlib.rbi:2095
    method <overload N.1 : each> (sep, limit) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1574
      argument blk<block> @ rbi/stdlib.rbi:1579
      argument limit<optional> -> Integer @ rbi/stdlib.rbi:1576
      argument sep<optional> -> String @ rbi/stdlib.rbi:1575
    method <overload N.1 : each_byte> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = Integer
      ]
    } @ rbi/stdlib.rbi:1585
      argument blk<block> @ rbi/stdlib.rbi:1586
    method <overload N.1 : each_char> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1592
      argument blk<block> @ rbi/stdlib.rbi:1593
    method <overload N.1 : each_codepoint> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = Integer
      ]
    } @ rbi/stdlib.rbi:1599
      argument blk<block> @ rbi/stdlib.rbi:1600
    method <overload N.1 : each_line> (sep, limit) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:2103
      argument blk<block> @ rbi/stdlib.rbi:2108
      argument limit<optional> -> Integer @ rbi/stdlib.rbi:2105
      argument sep<optional> -> String @ rbi/stdlib.rbi:2104
    method <overload N.1 : lines> (sep, limit) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:2119
      argument blk<block> @ rbi/stdlib.rbi:2124
      argument limit<optional> -> Integer @ rbi/stdlib.rbi:2121
      argument sep<optional> -> String @ rbi/stdlib.rbi:2120
    method <overload N.1 : read_nonblock> (len, buf) -> String @ rbi/stdlib.rbi:1721
      argument buf<optional> -> String @ rbi/stdlib.rbi:1723
      argument len<> -> Integer @ rbi/stdlib.rbi:1722
    method <overload N.1 : readpartial> (maxlen, outbuf) -> String @ rbi/stdlib.rbi:1752
      argument maxlen<> -> Integer @ rbi/stdlib.rbi:1753
      argument outbuf<optional> -> String @ rbi/stdlib.rbi:1754
    method <overload N.1 : reopen> (mode_str) -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1763
      argument mode_str<optional> -> String @ rbi/stdlib.rbi:1765
      argument other_IO<> @ rbi/stdlib.rbi:1768
    method <overload N.1 : set_encoding> (int_enc) -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1784
      argument ext_or_ext_int_enc<optional> @ rbi/stdlib.rbi:1789
      argument int_enc<optional> -> String | Encoding @ rbi/stdlib.rbi:1786
    method advise (arg0, offset, len) -> NilClass @ rbi/stdlib.rbi:1524
      argument arg0<> -> Symbol @ rbi/stdlib.rbi:1519
      argument len<optional> -> Integer @ rbi/stdlib.rbi:1521
      argument offset<optional> -> Integer @ rbi/stdlib.rbi:1520
    method autoclose= (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:1530
      argument arg0<> -> TrueClass | FalseClass @ rbi/stdlib.rbi:1527
    method autoclose? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:1533
    method binmode () -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1536
    method binmode? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:1539
    method bytes (blk) -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:2081
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = Integer
        ]
      } @ rbi/stdlib.rbi:2077
    method chars (blk) -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:2088
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = String
        ]
      } @ rbi/stdlib.rbi:2084
    method clone () -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1542
    method close () -> NilClass @ rbi/stdlib.rbi:1545
    method close_on_exec= (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:1551
      argument arg0<> -> TrueClass | FalseClass @ rbi/stdlib.rbi:1548
    method close_on_exec? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:1554
    method close_read () -> NilClass @ rbi/stdlib.rbi:1557
    method close_write () -> NilClass @ rbi/stdlib.rbi:1560
    method closed? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:1563
    method codepoints (blk) -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:2095
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = Integer
        ]
      } @ rbi/stdlib.rbi:2091
    method dup () -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1566
    method each (sep, limit, blk) -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1579
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = String
        ]
      } @ rbi/stdlib.rbi:1571
      argument limit<optional> -> Integer @ rbi/stdlib.rbi:1570
      argument sep<optional> -> String @ rbi/stdlib.rbi:1569
    method each_byte (blk) -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1586
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = Integer
        ]
      } @ rbi/stdlib.rbi:1582
    method each_char (blk) -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1593
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = String
        ]
      } @ rbi/stdlib.rbi:1589
    method each_codepoint (blk) -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1600
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = Integer
        ]
      } @ rbi/stdlib.rbi:1596
    method each_line (sep, limit, blk) -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:2108
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = String
        ]
      } @ rbi/stdlib.rbi:2100
      argument limit<optional> -> Integer @ rbi/stdlib.rbi:2099
      argument sep<optional> -> String @ rbi/stdlib.rbi:2098
    method eof () -> TrueClass | FalseClass @ rbi/stdlib.rbi:1603
    method eof? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:2111
    method fcntl (integer_cmd, arg) -> Integer @ rbi/stdlib.rbi:1610
      argument arg<> -> String | Integer @ rbi/stdlib.rbi:1607
      argument integer_cmd<> -> Integer @ rbi/stdlib.rbi:1606
    method fdatasync () -> Integer | NilClass @ rbi/stdlib.rbi:1613
    method fileno () -> Integer @ rbi/stdlib.rbi:1616
    method flush () -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1619
    method freeze () -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1622
    method fsync () -> Integer | NilClass @ rbi/stdlib.rbi:1625
    method getbyte () -> Integer | NilClass @ rbi/stdlib.rbi:1628
    method getc () -> String | NilClass @ rbi/stdlib.rbi:1631
    method gets (sep, limit) -> String | NilClass @ rbi/stdlib.rbi:1638
      argument limit<optional> -> Integer @ rbi/stdlib.rbi:1635
      argument sep<optional> -> String @ rbi/stdlib.rbi:1634
    method initialize (fd, mode, opt) -> Object @ rbi/stdlib.rbi:1646
      argument fd<> -> Integer @ rbi/stdlib.rbi:1641
      argument mode<optional> -> Integer @ rbi/stdlib.rbi:1642
      argument opt<optional> -> Integer @ rbi/stdlib.rbi:1643
    method inspect () -> String @ rbi/stdlib.rbi:1649
    method internal_encoding () -> Encoding @ rbi/stdlib.rbi:1652
    method ioctl (integer_cmd, arg) -> Integer @ rbi/stdlib.rbi:1659
      argument arg<> -> String | Integer @ rbi/stdlib.rbi:1656
      argument integer_cmd<> -> Integer @ rbi/stdlib.rbi:1655
    method isatty () -> TrueClass | FalseClass @ rbi/stdlib.rbi:1662
    method lineno () -> Integer @ rbi/stdlib.rbi:1665
    method lineno= (arg0) -> Integer @ rbi/stdlib.rbi:1671
      argument arg0<> -> Integer @ rbi/stdlib.rbi:1668
    method lines (sep, limit, blk) -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:2124
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = String
        ]
      } @ rbi/stdlib.rbi:2116
      argument limit<optional> -> Integer @ rbi/stdlib.rbi:2115
      argument sep<optional> -> String @ rbi/stdlib.rbi:2114
    method pid () -> Integer @ rbi/stdlib.rbi:1674
    method pos () -> Integer @ rbi/stdlib.rbi:1677
    method pos= (arg0) -> Integer @ rbi/stdlib.rbi:1683
      argument arg0<> -> Integer @ rbi/stdlib.rbi:1680
    method print (arg0) -> NilClass @ rbi/stdlib.rbi:1689
      argument arg0<repeated> -> BasicObject @ rbi/stdlib.rbi:1686
    method printf (format_string, arg0) -> NilClass @ rbi/stdlib.rbi:1696
      argument arg0<repeated> -> BasicObject @ rbi/stdlib.rbi:1693
      argument format_string<> -> String @ rbi/stdlib.rbi:1692
    method putc (arg0) -> untyped @ rbi/stdlib.rbi:1702
      argument arg0<> -> Numeric | String @ rbi/stdlib.rbi:1699
    method puts (arg0) -> NilClass @ rbi/stdlib.rbi:1708
      argument arg0<repeated> -> BasicObject @ rbi/stdlib.rbi:1705
    method read (length, outbuf) -> String | NilClass @ rbi/stdlib.rbi:1715
      argument length<optional> -> Integer @ rbi/stdlib.rbi:1711
      argument outbuf<optional> -> String @ rbi/stdlib.rbi:1712
    method read_nonblock (len) -> String @ rbi/stdlib.rbi:1726
      argument buf<optional> @ rbi/stdlib.rbi:1726
      argument len<> -> Integer @ rbi/stdlib.rbi:1718
    method readbyte () -> Integer @ rbi/stdlib.rbi:1729
    method readchar () -> String @ rbi/stdlib.rbi:1732
    method readline (sep, limit) -> String @ rbi/stdlib.rbi:1739
      argument limit<optional> -> Integer @ rbi/stdlib.rbi:1736
      argument sep<optional> -> String @ rbi/stdlib.rbi:1735
    method readlines (sep, limit) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1746
      argument limit<optional> -> Integer @ rbi/stdlib.rbi:1743
      argument sep<optional> -> String @ rbi/stdlib.rbi:1742
    method readpartial (maxlen) -> String @ rbi/stdlib.rbi:1757
      argument maxlen<> -> Integer @ rbi/stdlib.rbi:1749
      argument outbuf<optional> @ rbi/stdlib.rbi:1757
    method reopen (other_IO) -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1768
      argument mode_str<optional> @ rbi/stdlib.rbi:1768
      argument other_IO<> -> AppliedType {
        klass = ::<constant:IO>
        targs = [
          <constant:Elem> = String
        ]
      } @ rbi/stdlib.rbi:1760
    method rewind () -> Integer @ rbi/stdlib.rbi:1771
    method seek (amount, whence) -> Integer @ rbi/stdlib.rbi:1778
      argument amount<> -> Integer @ rbi/stdlib.rbi:1774
      argument whence<optional> -> Integer @ rbi/stdlib.rbi:1775
    method set_encoding (ext_or_ext_int_enc) -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1789
      argument ext_or_ext_int_enc<optional> -> String | Encoding @ rbi/stdlib.rbi:1781
      argument int_enc<optional> @ rbi/stdlib.rbi:1789
    method stat () -> File::Stat @ rbi/stdlib.rbi:1792
    method sync () -> TrueClass | FalseClass @ rbi/stdlib.rbi:1795
    method sync= (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:1801
      argument arg0<> -> TrueClass | FalseClass @ rbi/stdlib.rbi:1798
    method sysread (maxlen, outbuf) -> String @ rbi/stdlib.rbi:1808
      argument maxlen<> -> Integer @ rbi/stdlib.rbi:1804
      argument outbuf<> -> String @ rbi/stdlib.rbi:1805
    method sysseek (amount, whence) -> Integer @ rbi/stdlib.rbi:1815
      argument amount<> -> Integer @ rbi/stdlib.rbi:1811
      argument whence<optional> -> Integer @ rbi/stdlib.rbi:1812
    method syswrite (arg0) -> Integer @ rbi/stdlib.rbi:1821
      argument arg0<> -> String @ rbi/stdlib.rbi:1818
    method taint () -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1824
    method tell () -> Integer @ rbi/stdlib.rbi:1827
    method to_i () -> Integer @ rbi/stdlib.rbi:2127
    method to_io () -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1830
    method trust () -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1833
    method tty? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:1836
    method ungetbyte (arg0) -> NilClass @ rbi/stdlib.rbi:1842
      argument arg0<> -> String | Integer @ rbi/stdlib.rbi:1839
    method ungetc (arg0) -> NilClass @ rbi/stdlib.rbi:1848
      argument arg0<> -> String @ rbi/stdlib.rbi:1845
    method untaint () -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1851
    method untrust () -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1854
    method write (arg0) -> Integer @ rbi/stdlib.rbi:1860
      argument arg0<> -> String @ rbi/stdlib.rbi:1857
    static-field <constant:APPEND> -> Integer @ rbi/stdlib.rbi:12771
    static-field <constant:BINARY> -> Integer @ rbi/stdlib.rbi:12772
    static-field <constant:CREAT> -> Integer @ rbi/stdlib.rbi:12773
    static-field <constant:DIRECT> -> Integer @ rbi/stdlib.rbi:12774
    static-field <constant:DSYNC> -> Integer @ rbi/stdlib.rbi:12775
    static-field <constant:EXCL> -> Integer @ rbi/stdlib.rbi:12776
    static-field <constant:FNM_CASEFOLD> -> Integer @ rbi/stdlib.rbi:12777
    static-field <constant:FNM_DOTMATCH> -> Integer @ rbi/stdlib.rbi:12778
    static-field <constant:FNM_EXTGLOB> -> Integer @ rbi/stdlib.rbi:12779
    static-field <constant:FNM_NOESCAPE> -> Integer @ rbi/stdlib.rbi:12780
    static-field <constant:FNM_PATHNAME> -> Integer @ rbi/stdlib.rbi:12781
    static-field <constant:FNM_SHORTNAME> -> Integer @ rbi/stdlib.rbi:12782
    static-field <constant:FNM_SYSCASE> -> Integer @ rbi/stdlib.rbi:12783
    static-field <constant:LOCK_EX> -> Integer @ rbi/stdlib.rbi:12784
    static-field <constant:LOCK_NB> -> Integer @ rbi/stdlib.rbi:12785
    static-field <constant:LOCK_SH> -> Integer @ rbi/stdlib.rbi:12786
    static-field <constant:LOCK_UN> -> Integer @ rbi/stdlib.rbi:12787
    static-field <constant:NOATIME> -> Integer @ rbi/stdlib.rbi:12788
    static-field <constant:NOCTTY> -> Integer @ rbi/stdlib.rbi:12789
    static-field <constant:NOFOLLOW> -> Integer @ rbi/stdlib.rbi:12790
    static-field <constant:NONBLOCK> -> Integer @ rbi/stdlib.rbi:12791
    static-field <constant:NULL> -> String @ rbi/stdlib.rbi:12792
    static-field <constant:RDONLY> -> Integer @ rbi/stdlib.rbi:12793
    static-field <constant:RDWR> -> Integer @ rbi/stdlib.rbi:12794
    static-field <constant:RSYNC> -> Integer @ rbi/stdlib.rbi:12795
    static-field <constant:SEEK_CUR> -> Integer @ rbi/stdlib.rbi:12796
    static-field <constant:SEEK_DATA> -> Integer @ rbi/stdlib.rbi:12797
    static-field <constant:SEEK_END> -> Integer @ rbi/stdlib.rbi:12798
    static-field <constant:SEEK_HOLE> -> Integer @ rbi/stdlib.rbi:12799
    static-field <constant:SEEK_SET> -> Integer @ rbi/stdlib.rbi:12800
    static-field <constant:SHARE_DELETE> -> Integer @ rbi/stdlib.rbi:12801
    static-field <constant:SYNC> -> Integer @ rbi/stdlib.rbi:12802
    static-field <constant:TMPFILE> -> Integer @ rbi/stdlib.rbi:12803
    static-field <constant:TRUNC> -> Integer @ rbi/stdlib.rbi:12804
    static-field <constant:WRONLY> -> Integer @ rbi/stdlib.rbi:12805
    typeMember(=) <constant:Elem> -> String @ rbi/stdlib.rbi:1510
  class <constant:IOError> < ::<constant:StandardError> () -> <Class:IOError> @ rbi/stdlib.rbi:5780
    method clone () -> IOError @ rbi/stdlib.rbi:5782
    method dup () -> IOError @ rbi/stdlib.rbi:5785
    method freeze () -> IOError @ rbi/stdlib.rbi:5788
    method taint () -> IOError @ rbi/stdlib.rbi:5791
    method trust () -> IOError @ rbi/stdlib.rbi:5794
    method untaint () -> IOError @ rbi/stdlib.rbi:5797
    method untrust () -> IOError @ rbi/stdlib.rbi:5800
  class <constant:IndexError> < ::<constant:StandardError> () -> <Class:IndexError> @ rbi/stdlib.rbi:5803
    method clone () -> IndexError @ rbi/stdlib.rbi:5805
    method dup () -> IndexError @ rbi/stdlib.rbi:5808
    method freeze () -> IndexError @ rbi/stdlib.rbi:5811
    method taint () -> IndexError @ rbi/stdlib.rbi:5814
    method trust () -> IndexError @ rbi/stdlib.rbi:5817
    method untaint () -> IndexError @ rbi/stdlib.rbi:5820
    method untrust () -> IndexError @ rbi/stdlib.rbi:5823
  class <constant:Integer> < ::<constant:Numeric> () -> <Class:Integer> @ rbi/stdlib.rbi:5826
    method % (arg0) -> Integer @ rbi/stdlib.rbi:5843
      argument arg0<> -> Integer @ rbi/stdlib.rbi:5828
    method & (arg0) -> Integer @ rbi/stdlib.rbi:5849
      argument arg0<> -> Integer @ rbi/stdlib.rbi:5846
    method * (arg0) -> Integer @ rbi/stdlib.rbi:5871
      argument arg0<> -> Integer @ rbi/stdlib.rbi:5852
    method ** (arg0) -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:5893
      argument arg0<> -> Integer @ rbi/stdlib.rbi:5874
    method + (arg0) -> Integer @ rbi/stdlib.rbi:5915
      argument arg0<> -> Integer @ rbi/stdlib.rbi:5896
    method +@ () -> Integer @ rbi/stdlib.rbi:5918
    method - (arg0) -> Integer @ rbi/stdlib.rbi:5940
      argument arg0<> -> Integer @ rbi/stdlib.rbi:5921
    method -@ () -> Integer @ rbi/stdlib.rbi:5943
    method / (arg0) -> Integer @ rbi/stdlib.rbi:5965
      argument arg0<> -> Integer @ rbi/stdlib.rbi:5946
    method < (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5983
      argument arg0<> -> Integer @ rbi/stdlib.rbi:5968
    method << (arg0) -> Integer @ rbi/stdlib.rbi:5989
      argument arg0<> -> Integer @ rbi/stdlib.rbi:5986
    method <= (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:6007
      argument arg0<> -> Integer @ rbi/stdlib.rbi:5992
    method <=> (arg0) -> Object @ rbi/stdlib.rbi:6025
      argument arg0<> -> Integer @ rbi/stdlib.rbi:6010
    method <overload N.1 : %> (arg0) -> Float @ rbi/stdlib.rbi:5831
      argument arg0<> -> Float @ rbi/stdlib.rbi:5832
    method <overload N.1 : **> (arg0) -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:5877
      argument arg0<> -> Float @ rbi/stdlib.rbi:5878
    method <overload N.1 : *> (arg0) -> Float @ rbi/stdlib.rbi:5855
      argument arg0<> -> Float @ rbi/stdlib.rbi:5856
    method <overload N.1 : +> (arg0) -> Float @ rbi/stdlib.rbi:5899
      argument arg0<> -> Float @ rbi/stdlib.rbi:5900
    method <overload N.1 : -> (arg0) -> Float @ rbi/stdlib.rbi:5924
      argument arg0<> -> Float @ rbi/stdlib.rbi:5925
    method <overload N.1 : /> (arg0) -> Float @ rbi/stdlib.rbi:5949
      argument arg0<> -> Float @ rbi/stdlib.rbi:5950
    method <overload N.1 : <=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5995
      argument arg0<> -> Float @ rbi/stdlib.rbi:5996
    method <overload N.1 : <=>> (arg0) -> Object @ rbi/stdlib.rbi:6013
      argument arg0<> -> Float @ rbi/stdlib.rbi:6014
    method <overload N.1 : <> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5971
      argument arg0<> -> Float @ rbi/stdlib.rbi:5972
    method <overload N.1 : >=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:6061
      argument arg0<> -> Float @ rbi/stdlib.rbi:6062
    method <overload N.1 : >> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:6043
      argument arg0<> -> Float @ rbi/stdlib.rbi:6044
    method <overload N.1 : []> (arg0) -> Integer @ rbi/stdlib.rbi:6085
      argument arg0<> -> Rational @ rbi/stdlib.rbi:6086
    method <overload N.1 : div> (arg0) -> Integer @ rbi/stdlib.rbi:6151
      argument arg0<> -> Float @ rbi/stdlib.rbi:6152
    method <overload N.1 : downto> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = Integer
      ]
    } @ rbi/stdlib.rbi:6176
      argument arg0<> @ rbi/stdlib.rbi:6180
      argument blk<block> @ rbi/stdlib.rbi:6180
    method <overload N.1 : fdiv> (arg0) -> Float @ rbi/stdlib.rbi:6204
      argument arg0<> -> Float @ rbi/stdlib.rbi:6205
    method <overload N.1 : modulo> (arg0) -> Float @ rbi/stdlib.rbi:6268
      argument arg0<> -> Float @ rbi/stdlib.rbi:6269
    method <overload N.1 : quo> (arg0) -> Float @ rbi/stdlib.rbi:6304
      argument arg0<> -> Float @ rbi/stdlib.rbi:6305
    method <overload N.1 : rationalize> (arg0) -> Rational @ rbi/stdlib.rbi:6323
      argument arg0<optional> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:6324
    method <overload N.1 : remainder> (arg0) -> Float @ rbi/stdlib.rbi:6339
      argument arg0<> -> Float @ rbi/stdlib.rbi:6340
    method <overload N.1 : round> (arg0) -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:6354
      argument arg0<optional> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:6355
    method <overload N.1 : times> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = Integer
      ]
    } @ rbi/stdlib.rbi:6373
      argument blk<block> @ rbi/stdlib.rbi:6374
    method <overload N.1 : upto> (arg0) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = Integer
      ]
    } @ rbi/stdlib.rbi:6411
      argument arg0<> -> Integer @ rbi/stdlib.rbi:6412
      argument blk<block> @ rbi/stdlib.rbi:6415
    method <overload N.2 : %> (arg0) -> Rational @ rbi/stdlib.rbi:5835
      argument arg0<> -> Rational @ rbi/stdlib.rbi:5836
    method <overload N.2 : **> (arg0) -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:5881
      argument arg0<> -> Rational @ rbi/stdlib.rbi:5882
    method <overload N.2 : *> (arg0) -> Rational @ rbi/stdlib.rbi:5859
      argument arg0<> -> Rational @ rbi/stdlib.rbi:5860
    method <overload N.2 : +> (arg0) -> Rational @ rbi/stdlib.rbi:5903
      argument arg0<> -> Rational @ rbi/stdlib.rbi:5904
    method <overload N.2 : -> (arg0) -> Rational @ rbi/stdlib.rbi:5928
      argument arg0<> -> Rational @ rbi/stdlib.rbi:5929
    method <overload N.2 : /> (arg0) -> Rational @ rbi/stdlib.rbi:5953
      argument arg0<> -> Rational @ rbi/stdlib.rbi:5954
    method <overload N.2 : <=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5999
      argument arg0<> -> Rational @ rbi/stdlib.rbi:6000
    method <overload N.2 : <=>> (arg0) -> Object @ rbi/stdlib.rbi:6017
      argument arg0<> -> Rational @ rbi/stdlib.rbi:6018
    method <overload N.2 : <> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5975
      argument arg0<> -> Rational @ rbi/stdlib.rbi:5976
    method <overload N.2 : >=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:6065
      argument arg0<> -> Rational @ rbi/stdlib.rbi:6066
    method <overload N.2 : >> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:6047
      argument arg0<> -> Rational @ rbi/stdlib.rbi:6048
    method <overload N.2 : []> (arg0) -> Integer @ rbi/stdlib.rbi:6089
      argument arg0<> -> Float @ rbi/stdlib.rbi:6090
    method <overload N.2 : div> (arg0) -> Integer @ rbi/stdlib.rbi:6155
      argument arg0<> -> Rational @ rbi/stdlib.rbi:6156
    method <overload N.2 : fdiv> (arg0) -> Float @ rbi/stdlib.rbi:6208
      argument arg0<> -> Rational @ rbi/stdlib.rbi:6209
    method <overload N.2 : modulo> (arg0) -> Rational @ rbi/stdlib.rbi:6272
      argument arg0<> -> Rational @ rbi/stdlib.rbi:6273
    method <overload N.2 : quo> (arg0) -> Rational @ rbi/stdlib.rbi:6308
      argument arg0<> -> Rational @ rbi/stdlib.rbi:6309
    method <overload N.2 : remainder> (arg0) -> Rational @ rbi/stdlib.rbi:6343
      argument arg0<> -> Rational @ rbi/stdlib.rbi:6344
    method <overload N.3 : %> (arg0) -> BigDecimal @ rbi/stdlib.rbi:5839
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:5840
    method <overload N.3 : **> (arg0) -> BigDecimal @ rbi/stdlib.rbi:5885
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:5886
    method <overload N.3 : *> (arg0) -> BigDecimal @ rbi/stdlib.rbi:5863
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:5864
    method <overload N.3 : +> (arg0) -> BigDecimal @ rbi/stdlib.rbi:5907
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:5908
    method <overload N.3 : -> (arg0) -> BigDecimal @ rbi/stdlib.rbi:5932
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:5933
    method <overload N.3 : /> (arg0) -> BigDecimal @ rbi/stdlib.rbi:5957
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:5958
    method <overload N.3 : <=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:6003
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:6004
    method <overload N.3 : <=>> (arg0) -> Object @ rbi/stdlib.rbi:6021
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:6022
    method <overload N.3 : <> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:5979
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:5980
    method <overload N.3 : >=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:6069
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:6070
    method <overload N.3 : >> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:6051
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:6052
    method <overload N.3 : []> (arg0) -> Integer @ rbi/stdlib.rbi:6093
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:6094
    method <overload N.3 : div> (arg0) -> Integer @ rbi/stdlib.rbi:6159
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:6160
    method <overload N.3 : fdiv> (arg0) -> BigDecimal @ rbi/stdlib.rbi:6212
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:6213
    method <overload N.3 : modulo> (arg0) -> BigDecimal @ rbi/stdlib.rbi:6276
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:6277
    method <overload N.3 : quo> (arg0) -> BigDecimal @ rbi/stdlib.rbi:6312
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:6313
    method <overload N.3 : remainder> (arg0) -> BigDecimal @ rbi/stdlib.rbi:6347
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:6348
    method <overload N.4 : **> (arg0) -> Complex @ rbi/stdlib.rbi:5889
      argument arg0<> -> Complex @ rbi/stdlib.rbi:5890
    method <overload N.4 : *> (arg0) -> Complex @ rbi/stdlib.rbi:5867
      argument arg0<> -> Complex @ rbi/stdlib.rbi:5868
    method <overload N.4 : +> (arg0) -> Complex @ rbi/stdlib.rbi:5911
      argument arg0<> -> Complex @ rbi/stdlib.rbi:5912
    method <overload N.4 : -> (arg0) -> Complex @ rbi/stdlib.rbi:5936
      argument arg0<> -> Complex @ rbi/stdlib.rbi:5937
    method <overload N.4 : /> (arg0) -> Complex @ rbi/stdlib.rbi:5961
      argument arg0<> -> Complex @ rbi/stdlib.rbi:5962
    method <overload N.4 : fdiv> (arg0) -> Complex @ rbi/stdlib.rbi:6216
      argument arg0<> -> Complex @ rbi/stdlib.rbi:6217
    method <overload N.4 : quo> (arg0) -> Complex @ rbi/stdlib.rbi:6316
      argument arg0<> -> Complex @ rbi/stdlib.rbi:6317
    method == (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:6031
      argument arg0<> -> Object @ rbi/stdlib.rbi:6028
    method === (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:6037
      argument arg0<> -> Object @ rbi/stdlib.rbi:6034
    method > (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:6055
      argument arg0<> -> Integer @ rbi/stdlib.rbi:6040
    method >= (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:6073
      argument arg0<> -> Integer @ rbi/stdlib.rbi:6058
    method >> (arg0) -> Integer @ rbi/stdlib.rbi:6079
      argument arg0<> -> Integer @ rbi/stdlib.rbi:6076
    method [] (arg0) -> Integer @ rbi/stdlib.rbi:6097
      argument arg0<> -> Integer @ rbi/stdlib.rbi:6082
    method ^ (arg0) -> Integer @ rbi/stdlib.rbi:6103
      argument arg0<> -> Integer @ rbi/stdlib.rbi:6100
    method abs () -> Integer @ rbi/stdlib.rbi:6106
    method abs2 () -> Integer @ rbi/stdlib.rbi:6109
    method angle () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:6112
    method arg () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:6115
    method bit_length () -> Integer @ rbi/stdlib.rbi:6118
    method ceil () -> Integer @ rbi/stdlib.rbi:6121
    method chr (arg0) -> String @ rbi/stdlib.rbi:6127
      argument arg0<> -> Encoding @ rbi/stdlib.rbi:6124
    method clone () -> Integer @ rbi/stdlib.rbi:6130
    method coerce (arg0) -> TupleType {
      0 = Integer | Float | Rational | BigDecimal
      1 = Integer | Float | Rational | BigDecimal
    } @ rbi/stdlib.rbi:6136
      argument arg0<> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:6133
    method conj () -> Integer @ rbi/stdlib.rbi:6139
    method conjugate () -> Integer @ rbi/stdlib.rbi:6142
    method denominator () -> Integer @ rbi/stdlib.rbi:6145
    method div (arg0) -> Integer @ rbi/stdlib.rbi:6163
      argument arg0<> -> Integer @ rbi/stdlib.rbi:6148
    method divmod (arg0) -> TupleType {
      0 = Integer | Float | Rational | BigDecimal
      1 = Integer | Float | Rational | BigDecimal
    } @ rbi/stdlib.rbi:6169
      argument arg0<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:6166
    method downto (arg0, blk) -> Integer @ rbi/stdlib.rbi:6180
      argument arg0<> -> Integer @ rbi/stdlib.rbi:6172
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = Integer
        ]
      } @ rbi/stdlib.rbi:6173
    method dup () -> Integer @ rbi/stdlib.rbi:6183
    method eql? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:6189
      argument arg0<> -> Object @ rbi/stdlib.rbi:6186
    method equal? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:6195
      argument arg0<> -> Object @ rbi/stdlib.rbi:6192
    method even? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:6198
    method fdiv (arg0) -> Float @ rbi/stdlib.rbi:6220
      argument arg0<> -> Integer @ rbi/stdlib.rbi:6201
    method floor () -> Integer @ rbi/stdlib.rbi:6223
    method freeze () -> Integer @ rbi/stdlib.rbi:6226
    method gcd (arg0) -> Integer @ rbi/stdlib.rbi:6232
      argument arg0<> -> Integer @ rbi/stdlib.rbi:6229
    method gcdlcm (arg0) -> TupleType {
      0 = Integer
      1 = Integer
    } @ rbi/stdlib.rbi:6238
      argument arg0<> -> Integer @ rbi/stdlib.rbi:6235
    method hash () -> Integer @ rbi/stdlib.rbi:6241
    method imag () -> Integer @ rbi/stdlib.rbi:6244
    method imaginary () -> Integer @ rbi/stdlib.rbi:6247
    method inspect () -> String @ rbi/stdlib.rbi:6250
    method integer? () -> TrueClass @ rbi/stdlib.rbi:6253
    method lcm (arg0) -> Integer @ rbi/stdlib.rbi:6259
      argument arg0<> -> Integer @ rbi/stdlib.rbi:6256
    method magnitude () -> Integer @ rbi/stdlib.rbi:6262
    method modulo (arg0) -> Integer @ rbi/stdlib.rbi:6280
      argument arg0<> -> Integer @ rbi/stdlib.rbi:6265
    method next () -> Integer @ rbi/stdlib.rbi:6283
    method numerator () -> Integer @ rbi/stdlib.rbi:6286
    method odd? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:6289
    method ord () -> Integer @ rbi/stdlib.rbi:6292
    method phase () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:6295
    method pred () -> Integer @ rbi/stdlib.rbi:6298
    method quo (arg0) -> Rational @ rbi/stdlib.rbi:6320
      argument arg0<> -> Integer @ rbi/stdlib.rbi:6301
    method rationalize () -> Rational @ rbi/stdlib.rbi:6327
      argument arg0<optional> @ rbi/stdlib.rbi:6327
    method real () -> Integer @ rbi/stdlib.rbi:6330
    method real? () -> TrueClass @ rbi/stdlib.rbi:6333
    method remainder (arg0) -> Integer @ rbi/stdlib.rbi:6351
      argument arg0<> -> Integer @ rbi/stdlib.rbi:6336
    method round () -> Integer @ rbi/stdlib.rbi:6358
      argument arg0<optional> @ rbi/stdlib.rbi:6358
    method size () -> Integer @ rbi/stdlib.rbi:6361
    method succ () -> Integer @ rbi/stdlib.rbi:6364
    method taint () -> Integer @ rbi/stdlib.rbi:6367
    method times (blk) -> Integer @ rbi/stdlib.rbi:6374
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = Integer
        ]
      } @ rbi/stdlib.rbi:6370
    method to_c () -> Complex @ rbi/stdlib.rbi:6377
    method to_f () -> Float @ rbi/stdlib.rbi:6380
    method to_i () -> Integer @ rbi/stdlib.rbi:6383
    method to_int () -> Integer @ rbi/stdlib.rbi:6386
    method to_r () -> Rational @ rbi/stdlib.rbi:6389
    method to_s () -> String @ rbi/stdlib.rbi:6392
    method truncate () -> Integer @ rbi/stdlib.rbi:6395
    method trust () -> Integer @ rbi/stdlib.rbi:6398
    method untaint () -> Integer @ rbi/stdlib.rbi:6401
    method untrust () -> Integer @ rbi/stdlib.rbi:6404
    method upto (arg0, blk) -> Integer @ rbi/stdlib.rbi:6415
      argument arg0<> -> Integer @ rbi/stdlib.rbi:6407
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = Integer
        ]
      } @ rbi/stdlib.rbi:6408
    method zero? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:6418
    method | (arg0) -> Integer @ rbi/stdlib.rbi:6424
      argument arg0<> -> Integer @ rbi/stdlib.rbi:6421
    method ~ () -> Integer @ rbi/stdlib.rbi:6427
  class <constant:Interrupt> < ::<constant:SignalException> () -> <Class:Interrupt> @ rbi/stdlib.rbi:6430
    method clone () -> Interrupt @ rbi/stdlib.rbi:6432
    method dup () -> Interrupt @ rbi/stdlib.rbi:6435
    method freeze () -> Interrupt @ rbi/stdlib.rbi:6438
    method taint () -> Interrupt @ rbi/stdlib.rbi:6441
    method trust () -> Interrupt @ rbi/stdlib.rbi:6444
    method untaint () -> Interrupt @ rbi/stdlib.rbi:6447
    method untrust () -> Interrupt @ rbi/stdlib.rbi:6450
  class <constant:Kernel> (<constant:BasicObject>) -> <Class:Kernel> @ rbi/stdlib.rbi:6453
    method <overload N.1 : Complex> (x) -> Complex @ rbi/stdlib.rbi:6802
      argument x<> -> String @ rbi/stdlib.rbi:6803
      argument y<optional> @ rbi/stdlib.rbi:6806
    method <overload N.1 : Rational> (x) -> Rational @ rbi/stdlib.rbi:6832
      argument x<> -> Object @ rbi/stdlib.rbi:6833
      argument y<optional> @ rbi/stdlib.rbi:6836
    method <overload N.1 : exit> (status) -> NilClass @ rbi/stdlib.rbi:6888
      argument status<optional> -> Integer | TrueClass | FalseClass @ rbi/stdlib.rbi:6889
    method <overload N.1 : fail> (arg0) -> NilClass @ rbi/stdlib.rbi:6901
      argument arg0<optional> -> String @ rbi/stdlib.rbi:6902
      argument arg1<optional> @ rbi/stdlib.rbi:6916
      argument arg2<optional> @ rbi/stdlib.rbi:6916
    method <overload N.1 : raise> (arg0) -> NilClass @ rbi/stdlib.rbi:7053
      argument arg0<optional> -> String @ rbi/stdlib.rbi:7054
      argument arg1<optional> @ rbi/stdlib.rbi:7069
      argument arg2<optional> @ rbi/stdlib.rbi:7069
    method <overload N.1 : send> (arg0, arg1, blk) -> untyped @ rbi/stdlib.rbi:6780
      argument arg0<> -> String | Symbol @ rbi/stdlib.rbi:6781
      argument arg1<repeated> -> BasicObject @ rbi/stdlib.rbi:6782
      argument blk<block> -> BasicObject @ rbi/stdlib.rbi:6783
    method <overload N.2 : fail> (arg0, arg1) -> NilClass @ rbi/stdlib.rbi:6905
      argument arg0<optional> -> Class @ rbi/stdlib.rbi:6906
      argument arg1<optional> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = String
        ]
      } @ rbi/stdlib.rbi:6907
      argument arg2<optional> @ rbi/stdlib.rbi:6916
    method <overload N.2 : raise> (arg0, arg1, arg2) -> NilClass @ rbi/stdlib.rbi:7057
      argument arg0<optional> -> Class @ rbi/stdlib.rbi:7058
      argument arg1<optional> -> String @ rbi/stdlib.rbi:7059
      argument arg2<optional> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = String
        ]
      } @ rbi/stdlib.rbi:7060
    method <overload N.3 : fail> (arg0, arg1, arg2) -> NilClass @ rbi/stdlib.rbi:6910
      argument arg0<optional> -> Class @ rbi/stdlib.rbi:6911
      argument arg1<optional> -> String @ rbi/stdlib.rbi:6912
      argument arg2<optional> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = String
        ]
      } @ rbi/stdlib.rbi:6913
    method <overload N.3 : raise> (arg0, arg1, arg2) -> NilClass @ rbi/stdlib.rbi:7063
      argument arg0<optional> -> Exception @ rbi/stdlib.rbi:7064
      argument arg1<optional> -> String @ rbi/stdlib.rbi:7065
      argument arg2<optional> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = String
        ]
      } @ rbi/stdlib.rbi:7066
    method Array (x) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:6795
      argument x<> -> Object @ rbi/stdlib.rbi:6792
    method Complex (x, y) -> Complex @ rbi/stdlib.rbi:6806
      argument x<> -> Numeric @ rbi/stdlib.rbi:6798
      argument y<optional> -> Numeric @ rbi/stdlib.rbi:6799
    method Float (x) -> Float @ rbi/stdlib.rbi:6812
      argument x<> -> Numeric @ rbi/stdlib.rbi:6809
    method Hash (x) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:6818
      argument x<> -> Object @ rbi/stdlib.rbi:6815
    method Integer (arg, base) -> Integer @ rbi/stdlib.rbi:6825
      argument arg<> -> Numeric | String @ rbi/stdlib.rbi:6821
      argument base<optional> -> Integer @ rbi/stdlib.rbi:6822
    method Rational (x, y) -> Rational @ rbi/stdlib.rbi:6836
      argument x<> -> Numeric @ rbi/stdlib.rbi:6828
      argument y<optional> -> Numeric @ rbi/stdlib.rbi:6829
    method String (x) -> String @ rbi/stdlib.rbi:6842
      argument x<> -> Object @ rbi/stdlib.rbi:6839
    method __callee__ () -> Symbol | NilClass @ rbi/stdlib.rbi:6845
    method __dir__ () -> String | NilClass @ rbi/stdlib.rbi:6848
    method __method__ () -> Symbol | NilClass @ rbi/stdlib.rbi:6851
    method ` (arg0) -> String @ rbi/stdlib.rbi:6857
      argument arg0<> -> String @ rbi/stdlib.rbi:6854
    method abort (msg) -> NilClass @ rbi/stdlib.rbi:6863
      argument msg<optional> -> String @ rbi/stdlib.rbi:6860
    method at_exit (blk) -> Proc @ rbi/stdlib.rbi:6869
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc0>
        targs = [
          <constant:Return> = BasicObject
        ]
      } @ rbi/stdlib.rbi:6866
    method autoload (_module, filename) -> NilClass @ rbi/stdlib.rbi:6876
      argument _module<> -> String | Symbol @ rbi/stdlib.rbi:6872
      argument filename<> -> String @ rbi/stdlib.rbi:6873
    method autoload? (name) -> String | NilClass @ rbi/stdlib.rbi:6882
      argument name<> -> Symbol | String @ rbi/stdlib.rbi:6879
    method binding () -> Binding @ rbi/stdlib.rbi:6885
    method clone () -> Kernel @ rbi/stdlib.rbi:6773
    method configatron () @ ???
    method exit () -> NilClass @ rbi/stdlib.rbi:6892
      argument status<optional> @ rbi/stdlib.rbi:6892
    method exit! (status) -> NilClass @ rbi/stdlib.rbi:6898
      argument status<> -> Integer | TrueClass | FalseClass @ rbi/stdlib.rbi:6895
    method fail () -> NilClass @ rbi/stdlib.rbi:6916
      argument arg0<optional> @ rbi/stdlib.rbi:6916
      argument arg1<optional> @ rbi/stdlib.rbi:6916
      argument arg2<optional> @ rbi/stdlib.rbi:6916
    method format (format, args) -> String @ rbi/stdlib.rbi:6923
      argument args<repeated> -> BasicObject @ rbi/stdlib.rbi:6920
      argument format<> -> String @ rbi/stdlib.rbi:6919
    method gets (arg0, arg1) -> String @ rbi/stdlib.rbi:6930
      argument arg0<optional> -> String @ rbi/stdlib.rbi:6926
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:6927
    method global_variables () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Symbol
      ]
    } @ rbi/stdlib.rbi:6933
    method hard_assert (predicate, msg, opts) -> NilClass @ rbi/assertions.rbi:8
      argument msg<optional> -> String | NilClass @ rbi/assertions.rbi:4
      argument opts<keyword, repeated> -> untyped @ rbi/assertions.rbi:5
      argument predicate<> -> TrueClass | FalseClass @ rbi/assertions.rbi:3
    method load (filename, arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:6940
      argument arg0<optional> -> TrueClass | FalseClass @ rbi/stdlib.rbi:6937
      argument filename<> -> String @ rbi/stdlib.rbi:6936
    method open (name, rest, block) -> AppliedType {
          klass = ::<constant:IO>
          targs = [
            <constant:Elem> = String
          ]
        } | NilClass @ rbi/stdlib.rbi:6948
      argument block<optional> -> String @ rbi/stdlib.rbi:6945
      argument name<> -> String @ rbi/stdlib.rbi:6943
      argument rest<optional> -> String | Integer @ rbi/stdlib.rbi:6944
    method printf (arg0, arg1, arg2) -> NilClass @ rbi/stdlib.rbi:6956
      argument arg0<optional> -> AppliedType {
        klass = ::<constant:IO>
        targs = [
          <constant:Elem> = String
        ]
      } @ rbi/stdlib.rbi:6951
      argument arg1<optional> -> String @ rbi/stdlib.rbi:6952
      argument arg2<repeated> -> BasicObject @ rbi/stdlib.rbi:6953
    method proc (blk) -> Proc @ rbi/stdlib.rbi:6962
      argument blk<block> -> BasicObject @ rbi/stdlib.rbi:6959
    method putc (arg0) -> Integer @ rbi/stdlib.rbi:6968
      argument arg0<> -> Integer @ rbi/stdlib.rbi:6965
    method puts (arg0) -> NilClass @ rbi/stdlib.rbi:6974
      argument arg0<repeated> -> BasicObject @ rbi/stdlib.rbi:6971
    method raise () -> NilClass @ rbi/stdlib.rbi:7069
      argument arg0<optional> @ rbi/stdlib.rbi:7069
      argument arg1<optional> @ rbi/stdlib.rbi:7069
      argument arg2<optional> @ rbi/stdlib.rbi:7069
    method readline (arg0, arg1) -> String @ rbi/stdlib.rbi:6981
      argument arg0<optional> -> String @ rbi/stdlib.rbi:6977
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:6978
    method readlines (arg0, arg1) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:6988
      argument arg0<optional> -> String @ rbi/stdlib.rbi:6984
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:6985
    method require (path) -> TrueClass | FalseClass @ rbi/stdlib.rbi:6994
      argument path<> -> String @ rbi/stdlib.rbi:6991
    method require_relative (feature) -> TrueClass | FalseClass @ rbi/stdlib.rbi:7000
      argument feature<> -> String @ rbi/stdlib.rbi:6997
    method select (read, write, error, timeout) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:7009
      argument error<optional> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = AppliedType {
              klass = ::<constant:IO>
              targs = [
                <constant:Elem> = String
              ]
            }
        ]
      } @ rbi/stdlib.rbi:7005
      argument read<> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = AppliedType {
              klass = ::<constant:IO>
              targs = [
                <constant:Elem> = String
              ]
            }
        ]
      } @ rbi/stdlib.rbi:7003
      argument timeout<optional> -> Integer @ rbi/stdlib.rbi:7006
      argument write<optional> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = AppliedType {
              klass = ::<constant:IO>
              targs = [
                <constant:Elem> = String
              ]
            }
        ]
      } @ rbi/stdlib.rbi:7004
    method send (arg0, arg1) -> untyped @ rbi/stdlib.rbi:6786
      argument arg0<> -> String | Symbol @ rbi/stdlib.rbi:6776
      argument arg1<repeated> -> BasicObject @ rbi/stdlib.rbi:6777
      argument blk<block> @ rbi/stdlib.rbi:6786
    method sleep (duration) -> Integer @ rbi/stdlib.rbi:7015
      argument duration<> -> Numeric @ rbi/stdlib.rbi:7012
    method sprintf (format, args) -> String @ rbi/stdlib.rbi:7029
      argument args<repeated> -> BasicObject @ rbi/stdlib.rbi:7026
      argument format<> -> String @ rbi/stdlib.rbi:7025
    method syscall (num, args) -> untyped @ rbi/stdlib.rbi:7036
      argument args<repeated> -> BasicObject @ rbi/stdlib.rbi:7033
      argument num<> -> Integer @ rbi/stdlib.rbi:7032
    method test (cmd, file1, file2) -> TrueClass | FalseClass | Time @ rbi/stdlib.rbi:7044
      argument cmd<> -> String @ rbi/stdlib.rbi:7039
      argument file1<> -> String @ rbi/stdlib.rbi:7040
      argument file2<optional> -> String @ rbi/stdlib.rbi:7041
    method to_s () -> String @ rbi/stdlib.rbi:6789
    method warn (msg) -> NilClass @ rbi/stdlib.rbi:7050
      argument msg<repeated> -> String @ rbi/stdlib.rbi:7047
    static-field <constant:RUBYGEMS_ACTIVATION_MONITOR> -> Monitor @ rbi/stdlib.rbi:12806
  class <constant:KeyError> < ::<constant:IndexError> () -> <Class:KeyError> @ rbi/stdlib.rbi:7072
    method clone () -> KeyError @ rbi/stdlib.rbi:7074
    method dup () -> KeyError @ rbi/stdlib.rbi:7077
    method freeze () -> KeyError @ rbi/stdlib.rbi:7080
    method taint () -> KeyError @ rbi/stdlib.rbi:7083
    method trust () -> KeyError @ rbi/stdlib.rbi:7086
    method untaint () -> KeyError @ rbi/stdlib.rbi:7089
    method untrust () -> KeyError @ rbi/stdlib.rbi:7092
  class <constant:LoadError> < ::<constant:ScriptError> () -> <Class:LoadError> @ rbi/stdlib.rbi:7095
    method clone () -> LoadError @ rbi/stdlib.rbi:7097
    method dup () -> LoadError @ rbi/stdlib.rbi:7100
    method freeze () -> LoadError @ rbi/stdlib.rbi:7103
    method taint () -> LoadError @ rbi/stdlib.rbi:7106
    method trust () -> LoadError @ rbi/stdlib.rbi:7109
    method untaint () -> LoadError @ rbi/stdlib.rbi:7112
    method untrust () -> LoadError @ rbi/stdlib.rbi:7115
  class <constant:LocalJumpError> < ::<constant:StandardError> () -> <Class:LocalJumpError> @ rbi/stdlib.rbi:7118
    method clone () -> LocalJumpError @ rbi/stdlib.rbi:7120
    method dup () -> LocalJumpError @ rbi/stdlib.rbi:7123
    method freeze () -> LocalJumpError @ rbi/stdlib.rbi:7126
    method taint () -> LocalJumpError @ rbi/stdlib.rbi:7129
    method trust () -> LocalJumpError @ rbi/stdlib.rbi:7132
    method untaint () -> LocalJumpError @ rbi/stdlib.rbi:7135
    method untrust () -> LocalJumpError @ rbi/stdlib.rbi:7138
  class <constant:Marshal> (<constant:BasicObject>) -> <Class:Marshal> @ rbi/stdlib.rbi:7141
    static-field <constant:MAJOR_VERSION> -> Integer @ rbi/stdlib.rbi:12807
    static-field <constant:MINOR_VERSION> -> Integer @ rbi/stdlib.rbi:12808
  class <constant:MatchData> < ::<constant:Object> () -> <Class:MatchData> @ rbi/stdlib.rbi:7163
    method <overload N.1 : []> (length) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:7174
      argument i<> @ rbi/stdlib.rbi:7187
      argument length<optional> -> Integer @ rbi/stdlib.rbi:7176
    method <overload N.2 : []> () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:7179
      argument i<> @ rbi/stdlib.rbi:7187
      argument length<optional> @ rbi/stdlib.rbi:7187
    method <overload N.3 : []> () -> String | NilClass @ rbi/stdlib.rbi:7183
      argument i<> @ rbi/stdlib.rbi:7187
      argument length<optional> @ rbi/stdlib.rbi:7187
    method == (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:7168
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:7165
    method [] (i) -> String | NilClass @ rbi/stdlib.rbi:7187
      argument i<> -> Integer @ rbi/stdlib.rbi:7171
      argument length<optional> @ rbi/stdlib.rbi:7187
    method begin (n) -> Integer @ rbi/stdlib.rbi:7193
      argument n<> -> Integer @ rbi/stdlib.rbi:7190
    method captures () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:7196
    method clone () -> MatchData @ rbi/stdlib.rbi:7199
    method dup () -> MatchData @ rbi/stdlib.rbi:7202
    method end (n) -> Integer @ rbi/stdlib.rbi:7208
      argument n<> -> Integer @ rbi/stdlib.rbi:7205
    method eql? (other) -> TrueClass | FalseClass @ rbi/stdlib.rbi:7214
      argument other<> -> BasicObject @ rbi/stdlib.rbi:7211
    method freeze () -> MatchData @ rbi/stdlib.rbi:7217
    method hash () -> Integer @ rbi/stdlib.rbi:7220
    method inspect () -> String @ rbi/stdlib.rbi:7223
    method length () -> Integer @ rbi/stdlib.rbi:7226
    method names () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:7229
    method offset (n) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Integer
      ]
    } @ rbi/stdlib.rbi:7235
      argument n<> -> Integer @ rbi/stdlib.rbi:7232
    method post_match () -> String @ rbi/stdlib.rbi:7238
    method pre_match () -> String @ rbi/stdlib.rbi:7241
    method regexp () -> Regexp @ rbi/stdlib.rbi:7244
    method size () -> Integer @ rbi/stdlib.rbi:7247
    method string () -> String @ rbi/stdlib.rbi:7250
    method taint () -> MatchData @ rbi/stdlib.rbi:7253
    method to_a () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:7256
    method to_s () -> String @ rbi/stdlib.rbi:7259
    method trust () -> MatchData @ rbi/stdlib.rbi:7262
    method untaint () -> MatchData @ rbi/stdlib.rbi:7265
    method untrust () -> MatchData @ rbi/stdlib.rbi:7268
    method values_at (indexes) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:7274
      argument indexes<repeated> -> Integer @ rbi/stdlib.rbi:7271
  class <constant:Math> (<constant:BasicObject>) -> <Class:Math> @ rbi/stdlib.rbi:7277
    class <constant:DomainError> < ::<constant:StandardError> () -> <Class:Math::DomainError> @ rbi/stdlib.rbi:566
    class <singleton class:<constant:DomainError>> < ::<singleton class:<constant:StandardError>> () @ rbi/stdlib.rbi:566
    static-field <constant:E> -> Float @ rbi/stdlib.rbi:12809
    static-field <constant:PI> -> Float @ rbi/stdlib.rbi:12810
  class <constant:Method> < ::<constant:Object> () -> <Class:Method> @ rbi/stdlib.rbi:7439
    method clone () -> Method @ rbi/stdlib.rbi:7441
    method dup () -> Method @ rbi/stdlib.rbi:7444
    method freeze () -> Method @ rbi/stdlib.rbi:7447
    method taint () -> Method @ rbi/stdlib.rbi:7450
    method trust () -> Method @ rbi/stdlib.rbi:7453
    method untaint () -> Method @ rbi/stdlib.rbi:7456
    method untrust () -> Method @ rbi/stdlib.rbi:7459
  class <constant:Module> < ::<constant:Object> () -> <Class:Module> @ rbi/stdlib.rbi:7462
    method < (other) -> TrueClass | FalseClass | NilClass @ rbi/stdlib.rbi:7473
      argument other<> -> Module @ rbi/stdlib.rbi:7470
    method <= (other) -> TrueClass | FalseClass | NilClass @ rbi/stdlib.rbi:7479
      argument other<> -> Module @ rbi/stdlib.rbi:7476
    method <=> (other) -> Integer | NilClass @ rbi/stdlib.rbi:7485
      argument other<> -> Module @ rbi/stdlib.rbi:7482
    method <overload N.1 : define_method> (arg0, blk) -> Symbol @ rbi/stdlib.rbi:7639
      argument arg0<> -> Symbol @ rbi/stdlib.rbi:7640
      argument arg1<optional> @ rbi/stdlib.rbi:7644
      argument blk<block> -> BasicObject @ rbi/stdlib.rbi:7641
    method <overload N.1 : initialize> (blk) -> Object @ rbi/stdlib.rbi:7698
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = Module
        ]
      } @ rbi/stdlib.rbi:7699
    method == (other) -> TrueClass | FalseClass @ rbi/stdlib.rbi:7491
      argument other<> -> BasicObject @ rbi/stdlib.rbi:7488
    method === (other) -> TrueClass | FalseClass @ rbi/stdlib.rbi:7497
      argument other<> -> BasicObject @ rbi/stdlib.rbi:7494
    method > (other) -> TrueClass | FalseClass | NilClass @ rbi/stdlib.rbi:7503
      argument other<> -> Module @ rbi/stdlib.rbi:7500
    method >= (other) -> TrueClass | FalseClass | NilClass @ rbi/stdlib.rbi:7509
      argument other<> -> Module @ rbi/stdlib.rbi:7506
    method alias_method (new_name, old_name) -> Module @ rbi/stdlib.rbi:7516
      argument new_name<> -> Symbol @ rbi/stdlib.rbi:7512
      argument old_name<> -> Symbol @ rbi/stdlib.rbi:7513
    method ancestors () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Module
      ]
    } @ rbi/stdlib.rbi:7519
    method append_features (arg0) -> Module @ rbi/stdlib.rbi:7525
      argument arg0<> -> Module @ rbi/stdlib.rbi:7522
    method attr (arg0) -> NilClass @ rbi/stdlib.rbi:7922
      argument arg0<repeated> -> Symbol | String @ rbi/stdlib.rbi:7919
    method attr_accessor (arg0) -> NilClass @ rbi/stdlib.rbi:7531
      argument arg0<repeated> -> Symbol | String @ rbi/stdlib.rbi:7528
    method attr_reader (arg0) -> NilClass @ rbi/stdlib.rbi:7537
      argument arg0<repeated> -> Symbol | String @ rbi/stdlib.rbi:7534
    method attr_writer (arg0) -> NilClass @ rbi/stdlib.rbi:7543
      argument arg0<repeated> -> Symbol | String @ rbi/stdlib.rbi:7540
    method autoload (_module, filename) -> NilClass @ rbi/stdlib.rbi:7550
      argument _module<> -> Symbol @ rbi/stdlib.rbi:7546
      argument filename<> -> String @ rbi/stdlib.rbi:7547
    method autoload? (name) -> String | NilClass @ rbi/stdlib.rbi:7556
      argument name<> -> Symbol @ rbi/stdlib.rbi:7553
    method class_eval (arg0, filename, lineno) -> untyped @ rbi/stdlib.rbi:7564
      argument arg0<> -> String @ rbi/stdlib.rbi:7559
      argument filename<optional> -> String @ rbi/stdlib.rbi:7560
      argument lineno<optional> -> Integer @ rbi/stdlib.rbi:7561
    method class_exec (args, blk) -> untyped @ rbi/stdlib.rbi:7571
      argument args<repeated> -> BasicObject @ rbi/stdlib.rbi:7567
      argument blk<block> -> BasicObject @ rbi/stdlib.rbi:7568
    method class_variable_defined? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:7577
      argument arg0<> -> Symbol | String @ rbi/stdlib.rbi:7574
    method class_variable_get (arg0) -> untyped @ rbi/stdlib.rbi:7583
      argument arg0<> -> Symbol | String @ rbi/stdlib.rbi:7580
    method class_variable_set (arg0, arg1) -> untyped @ rbi/stdlib.rbi:7590
      argument arg0<> -> Symbol | String @ rbi/stdlib.rbi:7586
      argument arg1<> -> BasicObject @ rbi/stdlib.rbi:7587
    method class_variables (inherit) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Symbol
      ]
    } @ rbi/stdlib.rbi:7596
      argument inherit<optional> -> TrueClass | FalseClass @ rbi/stdlib.rbi:7593
    method clone () -> Module @ rbi/stdlib.rbi:7599
    method const_defined? (arg0, inherit) -> TrueClass | FalseClass @ rbi/stdlib.rbi:7606
      argument arg0<> -> Symbol | String @ rbi/stdlib.rbi:7602
      argument inherit<optional> -> TrueClass | FalseClass @ rbi/stdlib.rbi:7603
    method const_get (arg0, inherit) -> untyped @ rbi/stdlib.rbi:7613
      argument arg0<> -> Symbol | String @ rbi/stdlib.rbi:7609
      argument inherit<optional> -> TrueClass | FalseClass @ rbi/stdlib.rbi:7610
    method const_missing (arg0) -> untyped @ rbi/stdlib.rbi:7619
      argument arg0<> -> Symbol @ rbi/stdlib.rbi:7616
    method const_set (arg0, arg1) -> untyped @ rbi/stdlib.rbi:7626
      argument arg0<> -> Symbol | String @ rbi/stdlib.rbi:7622
      argument arg1<> -> BasicObject @ rbi/stdlib.rbi:7623
    method constants (inherit) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Symbol
      ]
    } @ rbi/stdlib.rbi:7632
      argument inherit<optional> -> TrueClass | FalseClass @ rbi/stdlib.rbi:7629
    method define_method (arg0, arg1) -> Symbol @ rbi/stdlib.rbi:7644
      argument arg0<> -> Symbol @ rbi/stdlib.rbi:7635
      argument arg1<optional> -> Method @ rbi/stdlib.rbi:7636
      argument blk<block> @ rbi/stdlib.rbi:7644
    method dup () -> Module @ rbi/stdlib.rbi:7647
    method eql? (other) -> TrueClass | FalseClass @ rbi/stdlib.rbi:7653
      argument other<> -> BasicObject @ rbi/stdlib.rbi:7650
    method equal? (other) -> TrueClass | FalseClass @ rbi/stdlib.rbi:7659
      argument other<> -> BasicObject @ rbi/stdlib.rbi:7656
    method extend_object (arg0) -> untyped @ rbi/stdlib.rbi:7665
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:7662
    method extended (othermod) -> untyped @ rbi/stdlib.rbi:7671
      argument othermod<> -> Module @ rbi/stdlib.rbi:7668
    method freeze () -> Module @ rbi/stdlib.rbi:7674
    method include (arg0) -> Module @ rbi/stdlib.rbi:7680
      argument arg0<repeated> -> Module @ rbi/stdlib.rbi:7677
    method include? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:7686
      argument arg0<> -> Module @ rbi/stdlib.rbi:7683
    method included (othermod) -> untyped @ rbi/stdlib.rbi:7692
      argument othermod<> -> Module @ rbi/stdlib.rbi:7689
    method included_modules () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Module
      ]
    } @ rbi/stdlib.rbi:7695
    method initialize () -> Object @ rbi/stdlib.rbi:7702
      argument blk<block> @ rbi/stdlib.rbi:7702
    method inspect () -> String @ rbi/stdlib.rbi:7916
    method instance_method (arg0) -> UnboundMethod @ rbi/stdlib.rbi:7708
      argument arg0<> -> Symbol @ rbi/stdlib.rbi:7705
    method instance_methods (include_super) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Symbol
      ]
    } @ rbi/stdlib.rbi:7714
      argument include_super<optional> -> TrueClass | FalseClass @ rbi/stdlib.rbi:7711
    method method_added (meth) -> untyped @ rbi/stdlib.rbi:7720
      argument meth<> -> Symbol @ rbi/stdlib.rbi:7717
    method method_defined? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:7726
      argument arg0<> -> Symbol | String @ rbi/stdlib.rbi:7723
    method method_removed (method_name) -> untyped @ rbi/stdlib.rbi:7732
      argument method_name<> -> Symbol @ rbi/stdlib.rbi:7729
    method module_eval (arg0, filename, lineno) -> untyped @ rbi/stdlib.rbi:7740
      argument arg0<> -> String @ rbi/stdlib.rbi:7735
      argument filename<optional> -> String @ rbi/stdlib.rbi:7736
      argument lineno<optional> -> Integer @ rbi/stdlib.rbi:7737
    method module_exec (args, blk) -> untyped @ rbi/stdlib.rbi:7747
      argument args<repeated> -> BasicObject @ rbi/stdlib.rbi:7743
      argument blk<block> -> BasicObject @ rbi/stdlib.rbi:7744
    method module_function (arg0) -> Module @ rbi/stdlib.rbi:7753
      argument arg0<repeated> -> Symbol | String @ rbi/stdlib.rbi:7750
    method name () -> String @ rbi/stdlib.rbi:7756
    method prepend (arg0) -> Module @ rbi/stdlib.rbi:7762
      argument arg0<repeated> -> Module @ rbi/stdlib.rbi:7759
    method prepend_features (arg0) -> Module @ rbi/stdlib.rbi:7768
      argument arg0<> -> Module @ rbi/stdlib.rbi:7765
    method prepended (othermod) -> untyped @ rbi/stdlib.rbi:7774
      argument othermod<> -> Module @ rbi/stdlib.rbi:7771
    method private (arg0) -> Module @ rbi/stdlib.rbi:7780
      argument arg0<repeated> -> Symbol | String @ rbi/stdlib.rbi:7777
    method private_class_method (arg0) -> Module @ rbi/stdlib.rbi:7786
      argument arg0<repeated> -> Symbol | String @ rbi/stdlib.rbi:7783
    method private_constant (arg0) -> Module @ rbi/stdlib.rbi:7792
      argument arg0<repeated> -> Symbol @ rbi/stdlib.rbi:7789
    method private_instance_methods (include_super) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Symbol
      ]
    } @ rbi/stdlib.rbi:7798
      argument include_super<optional> -> TrueClass | FalseClass @ rbi/stdlib.rbi:7795
    method private_method_defined? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:7804
      argument arg0<> -> Symbol | String @ rbi/stdlib.rbi:7801
    method protected (arg0) -> Module @ rbi/stdlib.rbi:7810
      argument arg0<repeated> -> Symbol | String @ rbi/stdlib.rbi:7807
    method protected_instance_methods (include_super) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Symbol
      ]
    } @ rbi/stdlib.rbi:7816
      argument include_super<optional> -> TrueClass | FalseClass @ rbi/stdlib.rbi:7813
    method protected_method_defined? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:7822
      argument arg0<> -> Symbol | String @ rbi/stdlib.rbi:7819
    method public (arg0) -> Module @ rbi/stdlib.rbi:7828
      argument arg0<repeated> -> Symbol | String @ rbi/stdlib.rbi:7825
    method public_class_method (arg0) -> Module @ rbi/stdlib.rbi:7834
      argument arg0<repeated> -> Symbol | String @ rbi/stdlib.rbi:7831
    method public_constant (arg0) -> Module @ rbi/stdlib.rbi:7840
      argument arg0<repeated> -> Symbol @ rbi/stdlib.rbi:7837
    method public_instance_method (arg0) -> UnboundMethod @ rbi/stdlib.rbi:7846
      argument arg0<> -> Symbol @ rbi/stdlib.rbi:7843
    method public_instance_methods (include_super) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Symbol
      ]
    } @ rbi/stdlib.rbi:7852
      argument include_super<optional> -> TrueClass | FalseClass @ rbi/stdlib.rbi:7849
    method public_method_defined? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:7858
      argument arg0<> -> Symbol | String @ rbi/stdlib.rbi:7855
    method refine (arg0, blk) -> Module @ rbi/stdlib.rbi:7865
      argument arg0<> -> Class @ rbi/stdlib.rbi:7861
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = untyped
        ]
      } @ rbi/stdlib.rbi:7862
    method remove_class_variable (arg0) -> untyped @ rbi/stdlib.rbi:7871
      argument arg0<> -> Symbol @ rbi/stdlib.rbi:7868
    method remove_const (arg0) -> untyped @ rbi/stdlib.rbi:7877
      argument arg0<> -> Symbol @ rbi/stdlib.rbi:7874
    method remove_method (arg0) -> Module @ rbi/stdlib.rbi:7883
      argument arg0<> -> Symbol | String @ rbi/stdlib.rbi:7880
    method singleton_class? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:7886
    method taint () -> Module @ rbi/stdlib.rbi:7889
    method to_s () -> String @ rbi/stdlib.rbi:7892
    method trust () -> Module @ rbi/stdlib.rbi:7895
    method undef_method (arg0) -> Module @ rbi/stdlib.rbi:7901
      argument arg0<> -> Symbol | String @ rbi/stdlib.rbi:7898
    method untaint () -> Module @ rbi/stdlib.rbi:7904
    method untrust () -> Module @ rbi/stdlib.rbi:7907
    method using (arg0) -> Module @ rbi/stdlib.rbi:7913
      argument arg0<> -> Module @ rbi/stdlib.rbi:7910
    static-field <constant:ARGF> -> Object @ rbi/stdlib.rbi:12811
    static-field <constant:ARGV> -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12812
    static-field <constant:CROSS_COMPILING> -> NilClass @ rbi/stdlib.rbi:12813
    static-field <constant:ENV> -> Object @ rbi/stdlib.rbi:12814
    static-field <constant:FALSE> -> FalseClass @ rbi/stdlib.rbi:12815
    static-field <constant:NIL> -> NilClass @ rbi/stdlib.rbi:12816
    static-field <constant:RUBY_COPYRIGHT> -> String @ rbi/stdlib.rbi:12817
    static-field <constant:RUBY_DESCRIPTION> -> String @ rbi/stdlib.rbi:12818
    static-field <constant:RUBY_ENGINE> -> String @ rbi/stdlib.rbi:12819
    static-field <constant:RUBY_ENGINE_VERSION> -> String @ rbi/stdlib.rbi:12820
    static-field <constant:RUBY_PATCHLEVEL> -> Integer @ rbi/stdlib.rbi:12821
    static-field <constant:RUBY_PLATFORM> -> String @ rbi/stdlib.rbi:12822
    static-field <constant:RUBY_RELEASE_DATE> -> String @ rbi/stdlib.rbi:12823
    static-field <constant:RUBY_REVISION> -> Integer @ rbi/stdlib.rbi:12824
    static-field <constant:RUBY_VERSION> -> String @ rbi/stdlib.rbi:12825
    static-field <constant:STDERR> -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:12826
    static-field <constant:STDIN> -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:12827
    static-field <constant:STDOUT> -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:12828
    static-field <constant:TOPLEVEL_BINDING> -> Binding @ rbi/stdlib.rbi:12829
    static-field <constant:TRUE> -> TrueClass @ rbi/stdlib.rbi:12830
  class <constant:Monitor> < ::<constant:Object> (<constant:MonitorMixin>) -> <Class:Monitor> @ rbi/stdlib.rbi:7925
    method clone () -> Monitor @ rbi/stdlib.rbi:7927
    method dup () -> Monitor @ rbi/stdlib.rbi:7930
    method freeze () -> Monitor @ rbi/stdlib.rbi:7933
    method taint () -> Monitor @ rbi/stdlib.rbi:7936
    method trust () -> Monitor @ rbi/stdlib.rbi:7939
    method untaint () -> Monitor @ rbi/stdlib.rbi:7942
    method untrust () -> Monitor @ rbi/stdlib.rbi:7945
  class <constant:MonitorMixin> (<constant:BasicObject>) -> <Class:MonitorMixin> @ rbi/stdlib.rbi:570
    class <constant:ConditionVariable> < ::<constant:Object> () -> <Class:MonitorMixin::ConditionVariable> @ rbi/stdlib.rbi:575
      class <constant:Timeout> < ::<constant:Exception> () -> <Class:MonitorMixin::ConditionVariable::Timeout> @ rbi/stdlib.rbi:577
      class <singleton class:<constant:Timeout>> < ::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:577
    class <singleton class:<constant:ConditionVariable>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:575
  class <constant:NameError> < ::<constant:StandardError> () -> <Class:NameError> @ rbi/stdlib.rbi:7948
    method clone () -> NameError @ rbi/stdlib.rbi:7950
    method dup () -> NameError @ rbi/stdlib.rbi:7953
    method freeze () -> NameError @ rbi/stdlib.rbi:7956
    method taint () -> NameError @ rbi/stdlib.rbi:7959
    method trust () -> NameError @ rbi/stdlib.rbi:7962
    method untaint () -> NameError @ rbi/stdlib.rbi:7965
    method untrust () -> NameError @ rbi/stdlib.rbi:7968
  class <constant:NilClass> < ::<constant:Object> () -> <Class:NilClass> @ rbi/stdlib.rbi:7971
    method & (obj) -> FalseClass @ rbi/stdlib.rbi:7976
      argument obj<> -> BasicObject @ rbi/stdlib.rbi:7973
    method ^ (obj) -> TrueClass | FalseClass @ rbi/stdlib.rbi:7982
      argument obj<> -> BasicObject @ rbi/stdlib.rbi:7979
    method clone () -> NilClass @ rbi/stdlib.rbi:7985
    method dup () -> NilClass @ rbi/stdlib.rbi:7988
    method freeze () -> NilClass @ rbi/stdlib.rbi:7991
    method rationalize () -> Rational @ rbi/stdlib.rbi:7994
    method taint () -> NilClass @ rbi/stdlib.rbi:7997
    method to_a () -> TupleType {
    } @ rbi/stdlib.rbi:8000
    method to_c () -> Complex @ rbi/stdlib.rbi:8003
    method to_f () -> Float @ rbi/stdlib.rbi:8006
    method to_h () -> untyped @ rbi/stdlib.rbi:8009
    method to_r () -> Rational @ rbi/stdlib.rbi:8012
    method trust () -> NilClass @ rbi/stdlib.rbi:8015
    method untaint () -> NilClass @ rbi/stdlib.rbi:8018
    method untrust () -> NilClass @ rbi/stdlib.rbi:8021
    method | (obj) -> TrueClass | FalseClass @ rbi/stdlib.rbi:8027
      argument obj<> -> BasicObject @ rbi/stdlib.rbi:8024
  class <constant:NoMemoryError> < ::<constant:Exception> () -> <Class:NoMemoryError> @ rbi/stdlib.rbi:8030
    method clone () -> NoMemoryError @ rbi/stdlib.rbi:8032
    method dup () -> NoMemoryError @ rbi/stdlib.rbi:8035
    method freeze () -> NoMemoryError @ rbi/stdlib.rbi:8038
    method taint () -> NoMemoryError @ rbi/stdlib.rbi:8041
    method trust () -> NoMemoryError @ rbi/stdlib.rbi:8044
    method untaint () -> NoMemoryError @ rbi/stdlib.rbi:8047
    method untrust () -> NoMemoryError @ rbi/stdlib.rbi:8050
  class <constant:NoMethodError> < ::<constant:NameError> () -> <Class:NoMethodError> @ rbi/stdlib.rbi:8053
    method clone () -> NoMethodError @ rbi/stdlib.rbi:8055
    method dup () -> NoMethodError @ rbi/stdlib.rbi:8058
    method freeze () -> NoMethodError @ rbi/stdlib.rbi:8061
    method taint () -> NoMethodError @ rbi/stdlib.rbi:8064
    method trust () -> NoMethodError @ rbi/stdlib.rbi:8067
    method untaint () -> NoMethodError @ rbi/stdlib.rbi:8070
    method untrust () -> NoMethodError @ rbi/stdlib.rbi:8073
  class <constant:NotImplementedError> < ::<constant:ScriptError> () -> <Class:NotImplementedError> @ rbi/stdlib.rbi:8076
    method clone () -> NotImplementedError @ rbi/stdlib.rbi:8078
    method dup () -> NotImplementedError @ rbi/stdlib.rbi:8081
    method freeze () -> NotImplementedError @ rbi/stdlib.rbi:8084
    method taint () -> NotImplementedError @ rbi/stdlib.rbi:8087
    method trust () -> NotImplementedError @ rbi/stdlib.rbi:8090
    method untaint () -> NotImplementedError @ rbi/stdlib.rbi:8093
    method untrust () -> NotImplementedError @ rbi/stdlib.rbi:8096
  class <constant:Numeric> < ::<constant:Object> (<constant:Comparable>) -> <Class:Numeric> @ rbi/stdlib.rbi:8099
    method % (arg0) -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8104
      argument arg0<> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8101
    method +@ () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8107
    method -@ () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8110
    method <=> (arg0) -> Object @ rbi/stdlib.rbi:8116
      argument arg0<> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8113
    method <overload N.1 : step> (arg0) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = Integer | Float | Rational | BigDecimal | Complex
      ]
    } @ rbi/stdlib.rbi:8258
      argument arg0<> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8259
      argument arg1<optional> @ rbi/stdlib.rbi:8273
      argument blk<block> @ rbi/stdlib.rbi:8273
    method <overload N.2 : step> (arg0, arg1, blk) -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8262
      argument arg0<> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8263
      argument arg1<optional> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8264
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = Integer | Float | Rational | BigDecimal | Complex
        ]
      } @ rbi/stdlib.rbi:8265
    method <overload N.3 : step> (arg0, arg1) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = Integer | Float | Rational | BigDecimal | Complex
      ]
    } @ rbi/stdlib.rbi:8268
      argument arg0<> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8269
      argument arg1<optional> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8270
      argument blk<block> @ rbi/stdlib.rbi:8273
    method abs () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8119
    method abs2 () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8122
    method angle () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8125
    method arg () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8128
    method ceil () -> Integer @ rbi/stdlib.rbi:8131
    method clone () -> Numeric @ rbi/stdlib.rbi:8134
    method coerce (arg0) -> TupleType {
      0 = Integer | Float | Rational | BigDecimal | Complex
      1 = Integer | Float | Rational | BigDecimal | Complex
    } @ rbi/stdlib.rbi:8140
      argument arg0<> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8137
    method conj () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8143
    method conjugate () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8146
    method denominator () -> Integer @ rbi/stdlib.rbi:8149
    method div (arg0) -> Integer @ rbi/stdlib.rbi:8155
      argument arg0<> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8152
    method divmod (arg0) -> TupleType {
      0 = Integer | Float | Rational | BigDecimal | Complex
      1 = Integer | Float | Rational | BigDecimal | Complex
    } @ rbi/stdlib.rbi:8161
      argument arg0<> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8158
    method dup () -> Numeric @ rbi/stdlib.rbi:8164
    method eql? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:8170
      argument arg0<> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8167
    method fdiv (arg0) -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8176
      argument arg0<> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8173
    method floor () -> Integer @ rbi/stdlib.rbi:8179
    method freeze () -> Numeric @ rbi/stdlib.rbi:8182
    method i () -> Complex @ rbi/stdlib.rbi:8185
    method imag () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8188
    method imaginary () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8191
    method integer? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8194
    method magnitude () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8197
    method modulo (arg0) -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:8203
      argument arg0<> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8200
    method nonzero? () -> untyped @ rbi/stdlib.rbi:8206
    method numerator () -> Integer @ rbi/stdlib.rbi:8209
    method phase () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8212
    method polar () -> TupleType {
      0 = Integer | Float | Rational | BigDecimal | Complex
      1 = Integer | Float | Rational | BigDecimal | Complex
    } @ rbi/stdlib.rbi:8215
    method quo (arg0) -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8221
      argument arg0<> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8218
    method real () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8224
    method real? () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8227
    method rect () -> TupleType {
      0 = Integer | Float | Rational | BigDecimal | Complex
      1 = Integer | Float | Rational | BigDecimal | Complex
    } @ rbi/stdlib.rbi:8230
    method rectangular () -> TupleType {
      0 = Integer | Float | Rational | BigDecimal | Complex
      1 = Integer | Float | Rational | BigDecimal | Complex
    } @ rbi/stdlib.rbi:8233
    method remainder (arg0) -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:8239
      argument arg0<> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8236
    method round (arg0) -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8245
      argument arg0<> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8242
    method singleton_method_added (arg0) -> TypeError @ rbi/stdlib.rbi:8251
      argument arg0<> -> Symbol @ rbi/stdlib.rbi:8248
    method step (arg0, blk) -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8273
      argument arg0<> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:8254
      argument arg1<optional> @ rbi/stdlib.rbi:8273
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = Integer | Float | Rational | BigDecimal | Complex
        ]
      } @ rbi/stdlib.rbi:8255
    method taint () -> Numeric @ rbi/stdlib.rbi:8276
    method to_c () -> Complex @ rbi/stdlib.rbi:8279
    method to_int () -> Integer @ rbi/stdlib.rbi:8282
    method truncate () -> Integer @ rbi/stdlib.rbi:8285
    method trust () -> Numeric @ rbi/stdlib.rbi:8288
    method untaint () -> Numeric @ rbi/stdlib.rbi:8291
    method untrust () -> Numeric @ rbi/stdlib.rbi:8294
    method zero? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8297
  class <constant:Object> < ::<constant:BasicObject> (<constant:Kernel>) -> <Class:Object> @ rbi/stdlib.rbi:8300
    method !~ (other) -> TrueClass | FalseClass @ rbi/stdlib.rbi:8305
      argument other<> -> BasicObject @ rbi/stdlib.rbi:8302
    method <=> (other) -> Integer | NilClass @ rbi/stdlib.rbi:8311
      argument other<> -> BasicObject @ rbi/stdlib.rbi:8308
    method <overload N.1 : enum_for> (method, args, blk) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:8342
      argument args<repeated> -> BasicObject @ rbi/stdlib.rbi:8344
      argument blk<block> -> BasicObject @ rbi/stdlib.rbi:8345
      argument method<optional> -> Symbol @ rbi/stdlib.rbi:8343
    method <overload N.1 : to_enum> (method, args, blk) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:8499
      argument args<repeated> -> BasicObject @ rbi/stdlib.rbi:8501
      argument blk<block> -> BasicObject @ rbi/stdlib.rbi:8502
      argument method<optional> -> Symbol @ rbi/stdlib.rbi:8500
    method === (other) -> TrueClass | FalseClass @ rbi/stdlib.rbi:8317
      argument other<> -> BasicObject @ rbi/stdlib.rbi:8314
    method =~ (other) -> NilClass @ rbi/stdlib.rbi:8323
      argument other<> -> BasicObject @ rbi/stdlib.rbi:8320
    method clone () -> Object @ rbi/stdlib.rbi:8326
    method display (port) -> NilClass @ rbi/stdlib.rbi:8332
      argument port<> -> AppliedType {
        klass = ::<constant:IO>
        targs = [
          <constant:Elem> = String
        ]
      } @ rbi/stdlib.rbi:8329
    method dup () -> Object @ rbi/stdlib.rbi:8335
    method enum_for (method, args) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:8348
      argument args<repeated> -> BasicObject @ rbi/stdlib.rbi:8339
      argument blk<block> @ rbi/stdlib.rbi:8348
      argument method<optional> -> Symbol @ rbi/stdlib.rbi:8338
    method eql? (other) -> TrueClass | FalseClass @ rbi/stdlib.rbi:8354
      argument other<> -> BasicObject @ rbi/stdlib.rbi:8351
    method extend (mod) -> NilClass @ rbi/stdlib.rbi:8360
      argument mod<> -> Module @ rbi/stdlib.rbi:8357
    method freeze () -> Object @ rbi/stdlib.rbi:8363
    method frozen? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8366
    method hash () -> Integer @ rbi/stdlib.rbi:8369
    method inspect () -> String @ rbi/stdlib.rbi:8372
    method instance_of? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:8378
      argument arg0<> -> Class @ rbi/stdlib.rbi:8375
    method instance_variable_defined? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:8384
      argument arg0<> -> Symbol | String @ rbi/stdlib.rbi:8381
    method instance_variable_get (arg0) -> untyped @ rbi/stdlib.rbi:8390
      argument arg0<> -> Symbol | String @ rbi/stdlib.rbi:8387
    method instance_variable_set (arg0, arg1) -> untyped @ rbi/stdlib.rbi:8397
      argument arg0<> -> Symbol | String @ rbi/stdlib.rbi:8393
      argument arg1<> -> BasicObject @ rbi/stdlib.rbi:8394
    method instance_variables () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Symbol
      ]
    } @ rbi/stdlib.rbi:8400
    method is_a? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:8406
      argument arg0<> -> Module @ rbi/stdlib.rbi:8403
    method kind_of? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:8412
      argument arg0<> -> Class @ rbi/stdlib.rbi:8409
    method method (arg0) -> Method @ rbi/stdlib.rbi:8418
      argument arg0<> -> Symbol @ rbi/stdlib.rbi:8415
    method methods (regular) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Symbol
      ]
    } @ rbi/stdlib.rbi:8424
      argument regular<optional> -> TrueClass | FalseClass @ rbi/stdlib.rbi:8421
    method nil? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8427
    method private_methods (all) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Symbol
      ]
    } @ rbi/stdlib.rbi:8433
      argument all<optional> -> TrueClass | FalseClass @ rbi/stdlib.rbi:8430
    method protected_methods (all) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Symbol
      ]
    } @ rbi/stdlib.rbi:8439
      argument all<optional> -> TrueClass | FalseClass @ rbi/stdlib.rbi:8436
    method public_method (arg0) -> Method @ rbi/stdlib.rbi:8445
      argument arg0<> -> Symbol @ rbi/stdlib.rbi:8442
    method public_methods (all) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Symbol
      ]
    } @ rbi/stdlib.rbi:8451
      argument all<optional> -> TrueClass | FalseClass @ rbi/stdlib.rbi:8448
    method public_send (arg0, args) -> untyped @ rbi/stdlib.rbi:8458
      argument arg0<> -> Symbol | String @ rbi/stdlib.rbi:8454
      argument args<repeated> -> BasicObject @ rbi/stdlib.rbi:8455
    method remove_instance_variable (arg0) -> untyped @ rbi/stdlib.rbi:8464
      argument arg0<> -> Symbol @ rbi/stdlib.rbi:8461
    method send (arg0, args) -> untyped @ rbi/stdlib.rbi:8471
      argument arg0<> -> Symbol | String @ rbi/stdlib.rbi:8467
      argument args<repeated> -> BasicObject @ rbi/stdlib.rbi:8468
    method singleton_class () -> Class @ rbi/stdlib.rbi:8474
    method singleton_method (arg0) -> Method @ rbi/stdlib.rbi:8480
      argument arg0<> -> Symbol @ rbi/stdlib.rbi:8477
    method singleton_methods (all) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Symbol
      ]
    } @ rbi/stdlib.rbi:8486
      argument all<optional> -> TrueClass | FalseClass @ rbi/stdlib.rbi:8483
    method taint () -> Object @ rbi/stdlib.rbi:8489
    method tainted? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8492
    method to_enum (method, args) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:8505
      argument args<repeated> -> BasicObject @ rbi/stdlib.rbi:8496
      argument blk<block> @ rbi/stdlib.rbi:8505
      argument method<optional> -> Symbol @ rbi/stdlib.rbi:8495
    method trust () -> Object @ rbi/stdlib.rbi:8508
    method untaint () -> Object @ rbi/stdlib.rbi:8511
    method untrust () -> Object @ rbi/stdlib.rbi:8514
    method untrusted? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8517
    static-field <constant:ARGF> -> Object @ rbi/stdlib.rbi:12831
    static-field <constant:ARGV> -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12832
    static-field <constant:CROSS_COMPILING> -> NilClass @ rbi/stdlib.rbi:12833
    static-field <constant:ENV> -> Object @ rbi/stdlib.rbi:12834
    static-field <constant:FALSE> -> FalseClass @ rbi/stdlib.rbi:12835
    static-field <constant:NIL> -> NilClass @ rbi/stdlib.rbi:12836
    static-field <constant:RUBYGEMS_ACTIVATION_MONITOR> -> Monitor @ rbi/stdlib.rbi:12837
    static-field <constant:RUBY_COPYRIGHT> -> String @ rbi/stdlib.rbi:12838
    static-field <constant:RUBY_DESCRIPTION> -> String @ rbi/stdlib.rbi:12839
    static-field <constant:RUBY_ENGINE> -> String @ rbi/stdlib.rbi:12840
    static-field <constant:RUBY_ENGINE_VERSION> -> String @ rbi/stdlib.rbi:12841
    static-field <constant:RUBY_PATCHLEVEL> -> Integer @ rbi/stdlib.rbi:12842
    static-field <constant:RUBY_PLATFORM> -> String @ rbi/stdlib.rbi:12843
    static-field <constant:RUBY_RELEASE_DATE> -> String @ rbi/stdlib.rbi:12844
    static-field <constant:RUBY_REVISION> -> Integer @ rbi/stdlib.rbi:12845
    static-field <constant:RUBY_VERSION> -> String @ rbi/stdlib.rbi:12846
    static-field <constant:STDERR> -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:12847
    static-field <constant:STDIN> -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:12848
    static-field <constant:STDOUT> -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:12849
    static-field <constant:TOPLEVEL_BINDING> -> Binding @ rbi/stdlib.rbi:12850
    static-field <constant:TRUE> -> TrueClass @ rbi/stdlib.rbi:12851
  class <constant:ObjectSpace> (<constant:BasicObject>) -> <Class:ObjectSpace> @ rbi/stdlib.rbi:589
    class <constant:WeakMap>[<constant:Elem>] < ::<constant:Object> (<constant:Enumerable>) -> <Class:ObjectSpace::WeakMap> @ rbi/stdlib.rbi:591
      typeMember(=) <constant:Elem> @ rbi/stdlib.rbi:591
    class <singleton class:<constant:WeakMap>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:591
  class <constant:Opus> () -> <Class:Opus> @ ???
    class <constant:DB> () -> <Class:Opus::DB> @ ???
      class <constant:Model> () -> <Class:Opus::DB::Model> @ ???
      class <singleton class:<constant:Model>> < ::<constant:Module> () @ ???
    class <singleton class:<constant:DB>> < ::<constant:Module> () @ ???
  class <constant:Pathname> < ::<constant:Object> () -> <Class:Pathname> @ rbi/stdlib.rbi:8520
    method + (other) -> Pathname @ rbi/stdlib.rbi:8535
      argument other<> -> String | Pathname @ rbi/stdlib.rbi:8532
    method / (other) -> Pathname @ rbi/stdlib.rbi:8973
      argument other<> -> String | Pathname @ rbi/stdlib.rbi:8970
    method <=> (p1) -> Integer | NilClass @ rbi/stdlib.rbi:8541
      argument p1<> -> BasicObject @ rbi/stdlib.rbi:8538
    method <overload N.1 : each_filename> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:8656
      argument blk<block> @ rbi/stdlib.rbi:8657
    method <overload N.1 : each_line> (sep, limit) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:8665
      argument blk<block> @ rbi/stdlib.rbi:8670
      argument limit<optional> -> Integer @ rbi/stdlib.rbi:8667
      argument sep<optional> -> String @ rbi/stdlib.rbi:8666
    method <overload N.1 : find> (ignore_error) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = Pathname
      ]
    } @ rbi/stdlib.rbi:8707
      argument blk<block> @ rbi/stdlib.rbi:8711
      argument ignore_error<> -> TrueClass | FalseClass @ rbi/stdlib.rbi:8708
    method <overload N.1 : open> (mode, perm, opt, blk) -> untyped @ rbi/stdlib.rbi:8778
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = AppliedType {
              klass = ::<constant:File>
              targs = [
                <constant:Elem> = String
              ]
            }
        ]
      } @ rbi/stdlib.rbi:8782
      argument mode<optional> -> String @ rbi/stdlib.rbi:8779
      argument opt<optional> -> Integer @ rbi/stdlib.rbi:8781
      argument perm<optional> -> String @ rbi/stdlib.rbi:8780
    method <overload N.1 : opendir> (arg0, blk) -> untyped @ rbi/stdlib.rbi:8791
      argument arg0<optional> -> Encoding @ rbi/stdlib.rbi:8792
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = AppliedType {
              klass = ::<constant:Dir>
              targs = [
                <constant:Elem> = String
              ]
            }
        ]
      } @ rbi/stdlib.rbi:8793
    method <overload N.1 : symlink?> () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8908
      argument old<optional> @ rbi/stdlib.rbi:8909
    method == (p1) -> TrueClass | FalseClass @ rbi/stdlib.rbi:8547
      argument p1<> -> BasicObject @ rbi/stdlib.rbi:8544
    method === (p1) -> TrueClass | FalseClass @ rbi/stdlib.rbi:8553
      argument p1<> -> BasicObject @ rbi/stdlib.rbi:8550
    method absolute? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8556
    method ascend (blk) -> untyped @ rbi/stdlib.rbi:8562
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = Pathname
        ]
      } @ rbi/stdlib.rbi:8559
    method atime () -> Time @ rbi/stdlib.rbi:8565
    method basename (p1) -> Pathname @ rbi/stdlib.rbi:8571
      argument p1<optional> -> String @ rbi/stdlib.rbi:8568
    method binread (length, offset) -> String @ rbi/stdlib.rbi:8578
      argument length<optional> -> Integer @ rbi/stdlib.rbi:8574
      argument offset<optional> -> Integer @ rbi/stdlib.rbi:8575
    method binwrite (arg0, offset) -> Integer @ rbi/stdlib.rbi:8585
      argument arg0<> -> String @ rbi/stdlib.rbi:8581
      argument offset<optional> -> Integer @ rbi/stdlib.rbi:8582
    method birthtime () -> Time @ rbi/stdlib.rbi:8588
    method blockdev? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8591
    method chardev? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8594
    method children (with_directory) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Pathname
      ]
    } @ rbi/stdlib.rbi:8600
      argument with_directory<> -> TrueClass | FalseClass @ rbi/stdlib.rbi:8597
    method chmod (mode) -> Integer @ rbi/stdlib.rbi:8606
      argument mode<> -> Integer @ rbi/stdlib.rbi:8603
    method chown (owner, group) -> Integer @ rbi/stdlib.rbi:8613
      argument group<> -> Integer @ rbi/stdlib.rbi:8610
      argument owner<> -> Integer @ rbi/stdlib.rbi:8609
    method cleanpath (consider_symlink) -> untyped @ rbi/stdlib.rbi:8619
      argument consider_symlink<optional> -> TrueClass | FalseClass @ rbi/stdlib.rbi:8616
    method ctime () -> Time @ rbi/stdlib.rbi:8622
    method delete () -> untyped @ rbi/stdlib.rbi:8625
    method descend (blk) -> untyped @ rbi/stdlib.rbi:8631
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = Pathname
        ]
      } @ rbi/stdlib.rbi:8628
    method directory? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8634
    method dirname () -> Pathname @ rbi/stdlib.rbi:8637
    method each_child (with_directory, blk) -> untyped @ rbi/stdlib.rbi:8644
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = Pathname
        ]
      } @ rbi/stdlib.rbi:8641
      argument with_directory<> -> TrueClass | FalseClass @ rbi/stdlib.rbi:8640
    method each_entry (blk) -> untyped @ rbi/stdlib.rbi:8650
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = Pathname
        ]
      } @ rbi/stdlib.rbi:8647
    method each_filename (blk) -> untyped @ rbi/stdlib.rbi:8657
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = String
        ]
      } @ rbi/stdlib.rbi:8653
    method each_line (sep, limit, blk) -> untyped @ rbi/stdlib.rbi:8670
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = String
        ]
      } @ rbi/stdlib.rbi:8662
      argument limit<optional> -> Integer @ rbi/stdlib.rbi:8661
      argument sep<optional> -> String @ rbi/stdlib.rbi:8660
    method entries () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Pathname
      ]
    } @ rbi/stdlib.rbi:8673
    method eql? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:8679
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:8676
    method executable? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8682
    method executable_real? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8685
    method exist? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8688
    method expand_path (p1) -> Pathname @ rbi/stdlib.rbi:8694
      argument p1<optional> -> String | Pathname @ rbi/stdlib.rbi:8691
    method extname () -> String @ rbi/stdlib.rbi:8697
    method file? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8700
    method find (ignore_error, blk) -> untyped @ rbi/stdlib.rbi:8711
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = Pathname
        ]
      } @ rbi/stdlib.rbi:8704
      argument ignore_error<> -> TrueClass | FalseClass @ rbi/stdlib.rbi:8703
    method fnmatch (pattern, flags) -> TrueClass | FalseClass @ rbi/stdlib.rbi:8718
      argument flags<optional> -> Integer @ rbi/stdlib.rbi:8715
      argument pattern<> -> String @ rbi/stdlib.rbi:8714
    method freeze () -> Pathname @ rbi/stdlib.rbi:8721
    method ftype () -> String @ rbi/stdlib.rbi:8724
    method grpowned? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8727
    method join (args) -> Pathname @ rbi/stdlib.rbi:8733
      argument args<repeated> -> String | Pathname @ rbi/stdlib.rbi:8730
    method lchmod (mode) -> Integer @ rbi/stdlib.rbi:8739
      argument mode<> -> Integer @ rbi/stdlib.rbi:8736
    method lchown (owner, group) -> Integer @ rbi/stdlib.rbi:8746
      argument group<> -> Integer @ rbi/stdlib.rbi:8743
      argument owner<> -> Integer @ rbi/stdlib.rbi:8742
    method lstat () -> File::Stat @ rbi/stdlib.rbi:8749
    method make_link (old) -> Integer @ rbi/stdlib.rbi:8755
      argument old<> -> String @ rbi/stdlib.rbi:8752
    method mkdir (p1) -> Integer @ rbi/stdlib.rbi:8761
      argument p1<> -> String @ rbi/stdlib.rbi:8758
    method mkpath () -> untyped @ rbi/stdlib.rbi:8764
    method mountpoint? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8767
    method mtime () -> Time @ rbi/stdlib.rbi:8770
    method open (mode, perm, opt) -> AppliedType {
      klass = ::<constant:File>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:8785
      argument blk<block> @ rbi/stdlib.rbi:8785
      argument mode<optional> -> String @ rbi/stdlib.rbi:8773
      argument opt<optional> -> Integer @ rbi/stdlib.rbi:8775
      argument perm<optional> -> String @ rbi/stdlib.rbi:8774
    method opendir (arg0) -> AppliedType {
      klass = ::<constant:Dir>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:8796
      argument arg0<optional> -> Encoding @ rbi/stdlib.rbi:8788
      argument blk<block> @ rbi/stdlib.rbi:8796
    method owned? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8799
    method parent () -> Pathname @ rbi/stdlib.rbi:8802
    method pipe? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8805
    method read (length, offset, open_args) -> String @ rbi/stdlib.rbi:8813
      argument length<optional> -> Integer @ rbi/stdlib.rbi:8808
      argument offset<optional> -> Integer @ rbi/stdlib.rbi:8809
      argument open_args<optional> -> Integer @ rbi/stdlib.rbi:8810
    method readable? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8816
    method readable_real? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8819
    method readlines (sep, limit, open_args) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:8827
      argument limit<optional> -> Integer @ rbi/stdlib.rbi:8823
      argument open_args<optional> -> Integer @ rbi/stdlib.rbi:8824
      argument sep<optional> -> String @ rbi/stdlib.rbi:8822
    method readlink () -> String @ rbi/stdlib.rbi:8830
    method realdirpath (p1) -> String @ rbi/stdlib.rbi:8836
      argument p1<optional> -> String @ rbi/stdlib.rbi:8833
    method realpath (p1) -> String @ rbi/stdlib.rbi:8842
      argument p1<optional> -> String @ rbi/stdlib.rbi:8839
    method relative? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8845
    method relative_path_from (base_directory) -> Pathname @ rbi/stdlib.rbi:8851
      argument base_directory<> -> String | Pathname @ rbi/stdlib.rbi:8848
    method rename (p1) -> Integer @ rbi/stdlib.rbi:8857
      argument p1<> -> String @ rbi/stdlib.rbi:8854
    method rmdir () -> Integer @ rbi/stdlib.rbi:8860
    method rmtree () -> Integer @ rbi/stdlib.rbi:8863
    method root? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8866
    method setgid? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8869
    method setuid? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8872
    method size () -> Integer @ rbi/stdlib.rbi:8875
    method size? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8878
    method socket? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8881
    method split () -> TupleType {
      0 = Pathname
      1 = Pathname
    } @ rbi/stdlib.rbi:8884
    method stat () -> File::Stat @ rbi/stdlib.rbi:8887
    method sticky? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8890
    method sub (args) -> Pathname @ rbi/stdlib.rbi:8896
      argument args<repeated> -> String @ rbi/stdlib.rbi:8893
    method sub_ext (p1) -> Pathname @ rbi/stdlib.rbi:8902
      argument p1<> -> String @ rbi/stdlib.rbi:8899
    method symlink? (old) -> Integer @ rbi/stdlib.rbi:8909
      argument old<optional> -> String @ rbi/stdlib.rbi:8905
    method sysopen (mode, perm) -> Integer @ rbi/stdlib.rbi:8916
      argument mode<optional> -> Integer @ rbi/stdlib.rbi:8912
      argument perm<optional> -> Integer @ rbi/stdlib.rbi:8913
    method taint () -> Pathname @ rbi/stdlib.rbi:8919
    method to_path () -> String @ rbi/stdlib.rbi:8922
    method to_s () -> String @ rbi/stdlib.rbi:8976
    method truncate (length) -> Integer @ rbi/stdlib.rbi:8928
      argument length<> -> Integer @ rbi/stdlib.rbi:8925
    method unlink () -> Integer @ rbi/stdlib.rbi:8931
    method untaint () -> Pathname @ rbi/stdlib.rbi:8934
    method utime (atime, mtime) -> Integer @ rbi/stdlib.rbi:8941
      argument atime<> -> Time @ rbi/stdlib.rbi:8937
      argument mtime<> -> Time @ rbi/stdlib.rbi:8938
    method world_readable? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8944
    method world_writable? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8947
    method writable? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8950
    method writable_real? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8953
    method write (arg0, offset, open_args) -> Integer @ rbi/stdlib.rbi:8961
      argument arg0<> -> String @ rbi/stdlib.rbi:8956
      argument offset<optional> -> Integer @ rbi/stdlib.rbi:8957
      argument open_args<optional> -> Integer @ rbi/stdlib.rbi:8958
    method zero? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:8964
  class <constant:Proc0>[<constant:Return>] < ::<constant:Proc> () -> <Class:Proc0> @ bazel-out/host/genfiles/rbi/procs.rbi:1
    method <static-init> () @ bazel-out/host/genfiles/rbi/procs.rbi:10
    method [] () -> AliasType { symbol = ::<constant:Proc0>#call } @ bazel-out/host/genfiles/rbi/procs.rbi:7
    method call () -> LambdaParam(::<constant:Proc0>#<constant:Return>) @ bazel-out/host/genfiles/rbi/procs.rbi:7
    typeMember(=) <constant:Return> @ bazel-out/host/genfiles/rbi/procs.rbi:2
  class <constant:Proc10>[<constant:Return>, <constant:Arg0>, <constant:Arg1>, <constant:Arg2>, <constant:Arg3>, <constant:Arg4>, <constant:Arg5>, <constant:Arg6>, <constant:Arg7>, <constant:Arg8>, <constant:Arg9>] < ::<constant:Proc> () -> <Class:Proc10> @ bazel-out/host/genfiles/rbi/procs.rbi:221
    method <static-init> () @ bazel-out/host/genfiles/rbi/procs.rbi:250
    method [] () -> AliasType { symbol = ::<constant:Proc10>#call } @ bazel-out/host/genfiles/rbi/procs.rbi:247
    method call (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) -> LambdaParam(::<constant:Proc10>#<constant:Return>) @ bazel-out/host/genfiles/rbi/procs.rbi:247
      argument arg0<> -> LambdaParam(::<constant:Proc10>#<constant:Arg0>) @ bazel-out/host/genfiles/rbi/procs.rbi:235
      argument arg1<> -> LambdaParam(::<constant:Proc10>#<constant:Arg1>) @ bazel-out/host/genfiles/rbi/procs.rbi:236
      argument arg2<> -> LambdaParam(::<constant:Proc10>#<constant:Arg2>) @ bazel-out/host/genfiles/rbi/procs.rbi:237
      argument arg3<> -> LambdaParam(::<constant:Proc10>#<constant:Arg3>) @ bazel-out/host/genfiles/rbi/procs.rbi:238
      argument arg4<> -> LambdaParam(::<constant:Proc10>#<constant:Arg4>) @ bazel-out/host/genfiles/rbi/procs.rbi:239
      argument arg5<> -> LambdaParam(::<constant:Proc10>#<constant:Arg5>) @ bazel-out/host/genfiles/rbi/procs.rbi:240
      argument arg6<> -> LambdaParam(::<constant:Proc10>#<constant:Arg6>) @ bazel-out/host/genfiles/rbi/procs.rbi:241
      argument arg7<> -> LambdaParam(::<constant:Proc10>#<constant:Arg7>) @ bazel-out/host/genfiles/rbi/procs.rbi:242
      argument arg8<> -> LambdaParam(::<constant:Proc10>#<constant:Arg8>) @ bazel-out/host/genfiles/rbi/procs.rbi:243
      argument arg9<> -> LambdaParam(::<constant:Proc10>#<constant:Arg9>) @ bazel-out/host/genfiles/rbi/procs.rbi:244
    typeMember(=) <constant:Arg0> @ bazel-out/host/genfiles/rbi/procs.rbi:223
    typeMember(=) <constant:Arg1> @ bazel-out/host/genfiles/rbi/procs.rbi:224
    typeMember(=) <constant:Arg2> @ bazel-out/host/genfiles/rbi/procs.rbi:225
    typeMember(=) <constant:Arg3> @ bazel-out/host/genfiles/rbi/procs.rbi:226
    typeMember(=) <constant:Arg4> @ bazel-out/host/genfiles/rbi/procs.rbi:227
    typeMember(=) <constant:Arg5> @ bazel-out/host/genfiles/rbi/procs.rbi:228
    typeMember(=) <constant:Arg6> @ bazel-out/host/genfiles/rbi/procs.rbi:229
    typeMember(=) <constant:Arg7> @ bazel-out/host/genfiles/rbi/procs.rbi:230
    typeMember(=) <constant:Arg8> @ bazel-out/host/genfiles/rbi/procs.rbi:231
    typeMember(=) <constant:Arg9> @ bazel-out/host/genfiles/rbi/procs.rbi:232
    typeMember(=) <constant:Return> @ bazel-out/host/genfiles/rbi/procs.rbi:222
  class <constant:Proc1>[<constant:Return>, <constant:Arg0>] < ::<constant:Proc> () -> <Class:Proc1> @ bazel-out/host/genfiles/rbi/procs.rbi:14
    method <static-init> () @ bazel-out/host/genfiles/rbi/procs.rbi:25
    method [] () -> AliasType { symbol = ::<constant:Proc1>#call } @ bazel-out/host/genfiles/rbi/procs.rbi:22
    method call (arg0) -> LambdaParam(::<constant:Proc1>#<constant:Return>) @ bazel-out/host/genfiles/rbi/procs.rbi:22
      argument arg0<> -> LambdaParam(::<constant:Proc1>#<constant:Arg0>) @ bazel-out/host/genfiles/rbi/procs.rbi:19
    typeMember(=) <constant:Arg0> @ bazel-out/host/genfiles/rbi/procs.rbi:16
    typeMember(=) <constant:Return> @ bazel-out/host/genfiles/rbi/procs.rbi:15
  class <constant:Proc2>[<constant:Return>, <constant:Arg0>, <constant:Arg1>] < ::<constant:Proc> () -> <Class:Proc2> @ bazel-out/host/genfiles/rbi/procs.rbi:29
    method <static-init> () @ bazel-out/host/genfiles/rbi/procs.rbi:42
    method [] () -> AliasType { symbol = ::<constant:Proc2>#call } @ bazel-out/host/genfiles/rbi/procs.rbi:39
    method call (arg0, arg1) -> LambdaParam(::<constant:Proc2>#<constant:Return>) @ bazel-out/host/genfiles/rbi/procs.rbi:39
      argument arg0<> -> LambdaParam(::<constant:Proc2>#<constant:Arg0>) @ bazel-out/host/genfiles/rbi/procs.rbi:35
      argument arg1<> -> LambdaParam(::<constant:Proc2>#<constant:Arg1>) @ bazel-out/host/genfiles/rbi/procs.rbi:36
    typeMember(=) <constant:Arg0> @ bazel-out/host/genfiles/rbi/procs.rbi:31
    typeMember(=) <constant:Arg1> @ bazel-out/host/genfiles/rbi/procs.rbi:32
    typeMember(=) <constant:Return> @ bazel-out/host/genfiles/rbi/procs.rbi:30
  class <constant:Proc3>[<constant:Return>, <constant:Arg0>, <constant:Arg1>, <constant:Arg2>] < ::<constant:Proc> () -> <Class:Proc3> @ bazel-out/host/genfiles/rbi/procs.rbi:46
    method <static-init> () @ bazel-out/host/genfiles/rbi/procs.rbi:61
    method [] () -> AliasType { symbol = ::<constant:Proc3>#call } @ bazel-out/host/genfiles/rbi/procs.rbi:58
    method call (arg0, arg1, arg2) -> LambdaParam(::<constant:Proc3>#<constant:Return>) @ bazel-out/host/genfiles/rbi/procs.rbi:58
      argument arg0<> -> LambdaParam(::<constant:Proc3>#<constant:Arg0>) @ bazel-out/host/genfiles/rbi/procs.rbi:53
      argument arg1<> -> LambdaParam(::<constant:Proc3>#<constant:Arg1>) @ bazel-out/host/genfiles/rbi/procs.rbi:54
      argument arg2<> -> LambdaParam(::<constant:Proc3>#<constant:Arg2>) @ bazel-out/host/genfiles/rbi/procs.rbi:55
    typeMember(=) <constant:Arg0> @ bazel-out/host/genfiles/rbi/procs.rbi:48
    typeMember(=) <constant:Arg1> @ bazel-out/host/genfiles/rbi/procs.rbi:49
    typeMember(=) <constant:Arg2> @ bazel-out/host/genfiles/rbi/procs.rbi:50
    typeMember(=) <constant:Return> @ bazel-out/host/genfiles/rbi/procs.rbi:47
  class <constant:Proc4>[<constant:Return>, <constant:Arg0>, <constant:Arg1>, <constant:Arg2>, <constant:Arg3>] < ::<constant:Proc> () -> <Class:Proc4> @ bazel-out/host/genfiles/rbi/procs.rbi:65
    method <static-init> () @ bazel-out/host/genfiles/rbi/procs.rbi:82
    method [] () -> AliasType { symbol = ::<constant:Proc4>#call } @ bazel-out/host/genfiles/rbi/procs.rbi:79
    method call (arg0, arg1, arg2, arg3) -> LambdaParam(::<constant:Proc4>#<constant:Return>) @ bazel-out/host/genfiles/rbi/procs.rbi:79
      argument arg0<> -> LambdaParam(::<constant:Proc4>#<constant:Arg0>) @ bazel-out/host/genfiles/rbi/procs.rbi:73
      argument arg1<> -> LambdaParam(::<constant:Proc4>#<constant:Arg1>) @ bazel-out/host/genfiles/rbi/procs.rbi:74
      argument arg2<> -> LambdaParam(::<constant:Proc4>#<constant:Arg2>) @ bazel-out/host/genfiles/rbi/procs.rbi:75
      argument arg3<> -> LambdaParam(::<constant:Proc4>#<constant:Arg3>) @ bazel-out/host/genfiles/rbi/procs.rbi:76
    typeMember(=) <constant:Arg0> @ bazel-out/host/genfiles/rbi/procs.rbi:67
    typeMember(=) <constant:Arg1> @ bazel-out/host/genfiles/rbi/procs.rbi:68
    typeMember(=) <constant:Arg2> @ bazel-out/host/genfiles/rbi/procs.rbi:69
    typeMember(=) <constant:Arg3> @ bazel-out/host/genfiles/rbi/procs.rbi:70
    typeMember(=) <constant:Return> @ bazel-out/host/genfiles/rbi/procs.rbi:66
  class <constant:Proc5>[<constant:Return>, <constant:Arg0>, <constant:Arg1>, <constant:Arg2>, <constant:Arg3>, <constant:Arg4>] < ::<constant:Proc> () -> <Class:Proc5> @ bazel-out/host/genfiles/rbi/procs.rbi:86
    method <static-init> () @ bazel-out/host/genfiles/rbi/procs.rbi:105
    method [] () -> AliasType { symbol = ::<constant:Proc5>#call } @ bazel-out/host/genfiles/rbi/procs.rbi:102
    method call (arg0, arg1, arg2, arg3, arg4) -> LambdaParam(::<constant:Proc5>#<constant:Return>) @ bazel-out/host/genfiles/rbi/procs.rbi:102
      argument arg0<> -> LambdaParam(::<constant:Proc5>#<constant:Arg0>) @ bazel-out/host/genfiles/rbi/procs.rbi:95
      argument arg1<> -> LambdaParam(::<constant:Proc5>#<constant:Arg1>) @ bazel-out/host/genfiles/rbi/procs.rbi:96
      argument arg2<> -> LambdaParam(::<constant:Proc5>#<constant:Arg2>) @ bazel-out/host/genfiles/rbi/procs.rbi:97
      argument arg3<> -> LambdaParam(::<constant:Proc5>#<constant:Arg3>) @ bazel-out/host/genfiles/rbi/procs.rbi:98
      argument arg4<> -> LambdaParam(::<constant:Proc5>#<constant:Arg4>) @ bazel-out/host/genfiles/rbi/procs.rbi:99
    typeMember(=) <constant:Arg0> @ bazel-out/host/genfiles/rbi/procs.rbi:88
    typeMember(=) <constant:Arg1> @ bazel-out/host/genfiles/rbi/procs.rbi:89
    typeMember(=) <constant:Arg2> @ bazel-out/host/genfiles/rbi/procs.rbi:90
    typeMember(=) <constant:Arg3> @ bazel-out/host/genfiles/rbi/procs.rbi:91
    typeMember(=) <constant:Arg4> @ bazel-out/host/genfiles/rbi/procs.rbi:92
    typeMember(=) <constant:Return> @ bazel-out/host/genfiles/rbi/procs.rbi:87
  class <constant:Proc6>[<constant:Return>, <constant:Arg0>, <constant:Arg1>, <constant:Arg2>, <constant:Arg3>, <constant:Arg4>, <constant:Arg5>] < ::<constant:Proc> () -> <Class:Proc6> @ bazel-out/host/genfiles/rbi/procs.rbi:109
    method <static-init> () @ bazel-out/host/genfiles/rbi/procs.rbi:130
    method [] () -> AliasType { symbol = ::<constant:Proc6>#call } @ bazel-out/host/genfiles/rbi/procs.rbi:127
    method call (arg0, arg1, arg2, arg3, arg4, arg5) -> LambdaParam(::<constant:Proc6>#<constant:Return>) @ bazel-out/host/genfiles/rbi/procs.rbi:127
      argument arg0<> -> LambdaParam(::<constant:Proc6>#<constant:Arg0>) @ bazel-out/host/genfiles/rbi/procs.rbi:119
      argument arg1<> -> LambdaParam(::<constant:Proc6>#<constant:Arg1>) @ bazel-out/host/genfiles/rbi/procs.rbi:120
      argument arg2<> -> LambdaParam(::<constant:Proc6>#<constant:Arg2>) @ bazel-out/host/genfiles/rbi/procs.rbi:121
      argument arg3<> -> LambdaParam(::<constant:Proc6>#<constant:Arg3>) @ bazel-out/host/genfiles/rbi/procs.rbi:122
      argument arg4<> -> LambdaParam(::<constant:Proc6>#<constant:Arg4>) @ bazel-out/host/genfiles/rbi/procs.rbi:123
      argument arg5<> -> LambdaParam(::<constant:Proc6>#<constant:Arg5>) @ bazel-out/host/genfiles/rbi/procs.rbi:124
    typeMember(=) <constant:Arg0> @ bazel-out/host/genfiles/rbi/procs.rbi:111
    typeMember(=) <constant:Arg1> @ bazel-out/host/genfiles/rbi/procs.rbi:112
    typeMember(=) <constant:Arg2> @ bazel-out/host/genfiles/rbi/procs.rbi:113
    typeMember(=) <constant:Arg3> @ bazel-out/host/genfiles/rbi/procs.rbi:114
    typeMember(=) <constant:Arg4> @ bazel-out/host/genfiles/rbi/procs.rbi:115
    typeMember(=) <constant:Arg5> @ bazel-out/host/genfiles/rbi/procs.rbi:116
    typeMember(=) <constant:Return> @ bazel-out/host/genfiles/rbi/procs.rbi:110
  class <constant:Proc7>[<constant:Return>, <constant:Arg0>, <constant:Arg1>, <constant:Arg2>, <constant:Arg3>, <constant:Arg4>, <constant:Arg5>, <constant:Arg6>] < ::<constant:Proc> () -> <Class:Proc7> @ bazel-out/host/genfiles/rbi/procs.rbi:134
    method <static-init> () @ bazel-out/host/genfiles/rbi/procs.rbi:157
    method [] () -> AliasType { symbol = ::<constant:Proc7>#call } @ bazel-out/host/genfiles/rbi/procs.rbi:154
    method call (arg0, arg1, arg2, arg3, arg4, arg5, arg6) -> LambdaParam(::<constant:Proc7>#<constant:Return>) @ bazel-out/host/genfiles/rbi/procs.rbi:154
      argument arg0<> -> LambdaParam(::<constant:Proc7>#<constant:Arg0>) @ bazel-out/host/genfiles/rbi/procs.rbi:145
      argument arg1<> -> LambdaParam(::<constant:Proc7>#<constant:Arg1>) @ bazel-out/host/genfiles/rbi/procs.rbi:146
      argument arg2<> -> LambdaParam(::<constant:Proc7>#<constant:Arg2>) @ bazel-out/host/genfiles/rbi/procs.rbi:147
      argument arg3<> -> LambdaParam(::<constant:Proc7>#<constant:Arg3>) @ bazel-out/host/genfiles/rbi/procs.rbi:148
      argument arg4<> -> LambdaParam(::<constant:Proc7>#<constant:Arg4>) @ bazel-out/host/genfiles/rbi/procs.rbi:149
      argument arg5<> -> LambdaParam(::<constant:Proc7>#<constant:Arg5>) @ bazel-out/host/genfiles/rbi/procs.rbi:150
      argument arg6<> -> LambdaParam(::<constant:Proc7>#<constant:Arg6>) @ bazel-out/host/genfiles/rbi/procs.rbi:151
    typeMember(=) <constant:Arg0> @ bazel-out/host/genfiles/rbi/procs.rbi:136
    typeMember(=) <constant:Arg1> @ bazel-out/host/genfiles/rbi/procs.rbi:137
    typeMember(=) <constant:Arg2> @ bazel-out/host/genfiles/rbi/procs.rbi:138
    typeMember(=) <constant:Arg3> @ bazel-out/host/genfiles/rbi/procs.rbi:139
    typeMember(=) <constant:Arg4> @ bazel-out/host/genfiles/rbi/procs.rbi:140
    typeMember(=) <constant:Arg5> @ bazel-out/host/genfiles/rbi/procs.rbi:141
    typeMember(=) <constant:Arg6> @ bazel-out/host/genfiles/rbi/procs.rbi:142
    typeMember(=) <constant:Return> @ bazel-out/host/genfiles/rbi/procs.rbi:135
  class <constant:Proc8>[<constant:Return>, <constant:Arg0>, <constant:Arg1>, <constant:Arg2>, <constant:Arg3>, <constant:Arg4>, <constant:Arg5>, <constant:Arg6>, <constant:Arg7>] < ::<constant:Proc> () -> <Class:Proc8> @ bazel-out/host/genfiles/rbi/procs.rbi:161
    method <static-init> () @ bazel-out/host/genfiles/rbi/procs.rbi:186
    method [] () -> AliasType { symbol = ::<constant:Proc8>#call } @ bazel-out/host/genfiles/rbi/procs.rbi:183
    method call (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) -> LambdaParam(::<constant:Proc8>#<constant:Return>) @ bazel-out/host/genfiles/rbi/procs.rbi:183
      argument arg0<> -> LambdaParam(::<constant:Proc8>#<constant:Arg0>) @ bazel-out/host/genfiles/rbi/procs.rbi:173
      argument arg1<> -> LambdaParam(::<constant:Proc8>#<constant:Arg1>) @ bazel-out/host/genfiles/rbi/procs.rbi:174
      argument arg2<> -> LambdaParam(::<constant:Proc8>#<constant:Arg2>) @ bazel-out/host/genfiles/rbi/procs.rbi:175
      argument arg3<> -> LambdaParam(::<constant:Proc8>#<constant:Arg3>) @ bazel-out/host/genfiles/rbi/procs.rbi:176
      argument arg4<> -> LambdaParam(::<constant:Proc8>#<constant:Arg4>) @ bazel-out/host/genfiles/rbi/procs.rbi:177
      argument arg5<> -> LambdaParam(::<constant:Proc8>#<constant:Arg5>) @ bazel-out/host/genfiles/rbi/procs.rbi:178
      argument arg6<> -> LambdaParam(::<constant:Proc8>#<constant:Arg6>) @ bazel-out/host/genfiles/rbi/procs.rbi:179
      argument arg7<> -> LambdaParam(::<constant:Proc8>#<constant:Arg7>) @ bazel-out/host/genfiles/rbi/procs.rbi:180
    typeMember(=) <constant:Arg0> @ bazel-out/host/genfiles/rbi/procs.rbi:163
    typeMember(=) <constant:Arg1> @ bazel-out/host/genfiles/rbi/procs.rbi:164
    typeMember(=) <constant:Arg2> @ bazel-out/host/genfiles/rbi/procs.rbi:165
    typeMember(=) <constant:Arg3> @ bazel-out/host/genfiles/rbi/procs.rbi:166
    typeMember(=) <constant:Arg4> @ bazel-out/host/genfiles/rbi/procs.rbi:167
    typeMember(=) <constant:Arg5> @ bazel-out/host/genfiles/rbi/procs.rbi:168
    typeMember(=) <constant:Arg6> @ bazel-out/host/genfiles/rbi/procs.rbi:169
    typeMember(=) <constant:Arg7> @ bazel-out/host/genfiles/rbi/procs.rbi:170
    typeMember(=) <constant:Return> @ bazel-out/host/genfiles/rbi/procs.rbi:162
  class <constant:Proc9>[<constant:Return>, <constant:Arg0>, <constant:Arg1>, <constant:Arg2>, <constant:Arg3>, <constant:Arg4>, <constant:Arg5>, <constant:Arg6>, <constant:Arg7>, <constant:Arg8>] < ::<constant:Proc> () -> <Class:Proc9> @ bazel-out/host/genfiles/rbi/procs.rbi:190
    method <static-init> () @ bazel-out/host/genfiles/rbi/procs.rbi:217
    method [] () -> AliasType { symbol = ::<constant:Proc9>#call } @ bazel-out/host/genfiles/rbi/procs.rbi:214
    method call (arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) -> LambdaParam(::<constant:Proc9>#<constant:Return>) @ bazel-out/host/genfiles/rbi/procs.rbi:214
      argument arg0<> -> LambdaParam(::<constant:Proc9>#<constant:Arg0>) @ bazel-out/host/genfiles/rbi/procs.rbi:203
      argument arg1<> -> LambdaParam(::<constant:Proc9>#<constant:Arg1>) @ bazel-out/host/genfiles/rbi/procs.rbi:204
      argument arg2<> -> LambdaParam(::<constant:Proc9>#<constant:Arg2>) @ bazel-out/host/genfiles/rbi/procs.rbi:205
      argument arg3<> -> LambdaParam(::<constant:Proc9>#<constant:Arg3>) @ bazel-out/host/genfiles/rbi/procs.rbi:206
      argument arg4<> -> LambdaParam(::<constant:Proc9>#<constant:Arg4>) @ bazel-out/host/genfiles/rbi/procs.rbi:207
      argument arg5<> -> LambdaParam(::<constant:Proc9>#<constant:Arg5>) @ bazel-out/host/genfiles/rbi/procs.rbi:208
      argument arg6<> -> LambdaParam(::<constant:Proc9>#<constant:Arg6>) @ bazel-out/host/genfiles/rbi/procs.rbi:209
      argument arg7<> -> LambdaParam(::<constant:Proc9>#<constant:Arg7>) @ bazel-out/host/genfiles/rbi/procs.rbi:210
      argument arg8<> -> LambdaParam(::<constant:Proc9>#<constant:Arg8>) @ bazel-out/host/genfiles/rbi/procs.rbi:211
    typeMember(=) <constant:Arg0> @ bazel-out/host/genfiles/rbi/procs.rbi:192
    typeMember(=) <constant:Arg1> @ bazel-out/host/genfiles/rbi/procs.rbi:193
    typeMember(=) <constant:Arg2> @ bazel-out/host/genfiles/rbi/procs.rbi:194
    typeMember(=) <constant:Arg3> @ bazel-out/host/genfiles/rbi/procs.rbi:195
    typeMember(=) <constant:Arg4> @ bazel-out/host/genfiles/rbi/procs.rbi:196
    typeMember(=) <constant:Arg5> @ bazel-out/host/genfiles/rbi/procs.rbi:197
    typeMember(=) <constant:Arg6> @ bazel-out/host/genfiles/rbi/procs.rbi:198
    typeMember(=) <constant:Arg7> @ bazel-out/host/genfiles/rbi/procs.rbi:199
    typeMember(=) <constant:Arg8> @ bazel-out/host/genfiles/rbi/procs.rbi:200
    typeMember(=) <constant:Return> @ bazel-out/host/genfiles/rbi/procs.rbi:191
  class <constant:Proc> < ::<constant:Object> () -> <Class:Proc> @ rbi/stdlib.rbi:8979
    method arity () -> Integer @ rbi/stdlib.rbi:8981
    method binding () -> Binding @ rbi/stdlib.rbi:8984
    method clone () -> Proc @ rbi/stdlib.rbi:8987
    method curry (arity) -> Proc @ rbi/stdlib.rbi:8993
      argument arity<optional> -> Integer @ rbi/stdlib.rbi:8990
    method dup () -> Proc @ rbi/stdlib.rbi:8996
    method freeze () -> Proc @ rbi/stdlib.rbi:8999
    method hash () -> Integer @ rbi/stdlib.rbi:9002
    method inspect () -> String @ rbi/stdlib.rbi:9032
    method lambda () -> TrueClass | FalseClass @ rbi/stdlib.rbi:9005
    method parameters () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = TupleType {
            0 = Symbol
            1 = Symbol
          }
      ]
    } @ rbi/stdlib.rbi:9008
    method source_location () -> TupleType {
      0 = String
      1 = Integer
    } @ rbi/stdlib.rbi:9011
    method taint () -> Proc @ rbi/stdlib.rbi:9014
    method to_proc () -> Proc @ rbi/stdlib.rbi:9017
    method to_s () -> String @ rbi/stdlib.rbi:9020
    method trust () -> Proc @ rbi/stdlib.rbi:9023
    method untaint () -> Proc @ rbi/stdlib.rbi:9026
    method untrust () -> Proc @ rbi/stdlib.rbi:9029
  class <constant:Process> (<constant:BasicObject>) -> <Class:Process> @ rbi/stdlib.rbi:9035
    class <constant:GID> (<constant:BasicObject>) -> <Class:Process::GID> @ rbi/stdlib.rbi:9260
    class <constant:Status> < ::<constant:Object> () -> <Class:Process::Status> @ rbi/stdlib.rbi:9308
      method & (num) -> Integer @ rbi/stdlib.rbi:9313
        argument num<> -> Integer @ rbi/stdlib.rbi:9310
      method == (other) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9319
        argument other<> -> BasicObject @ rbi/stdlib.rbi:9316
      method >> (num) -> Integer @ rbi/stdlib.rbi:9325
        argument num<> -> Integer @ rbi/stdlib.rbi:9322
      method coredump? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:9328
      method exited? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:9331
      method exitstatus () -> Integer | NilClass @ rbi/stdlib.rbi:9334
      method inspect () -> String @ rbi/stdlib.rbi:9337
      method pid () -> Integer @ rbi/stdlib.rbi:9340
      method signaled? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:9343
      method stopped? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:9346
      method stopsig () -> Integer | NilClass @ rbi/stdlib.rbi:9349
      method success? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:9352
      method termsig () -> Integer | NilClass @ rbi/stdlib.rbi:9355
      method to_i () -> Integer @ rbi/stdlib.rbi:9358
      method to_s () -> String @ rbi/stdlib.rbi:9361
    class <constant:Sys> (<constant:BasicObject>) -> <Class:Process::Sys> @ rbi/stdlib.rbi:9364
    class <constant:Tms>[<constant:Elem>] < ::<constant:Struct> () -> <Class:Process::Tms> @ rbi/stdlib.rbi:604
      typeMember(=) <constant:Elem> @ rbi/stdlib.rbi:604
    class <constant:UID> (<constant:BasicObject>) -> <Class:Process::UID> @ rbi/stdlib.rbi:9444
    class <constant:Waiter> < ::<constant:Thread> () -> <Class:Process::Waiter> @ rbi/stdlib.rbi:9492
      method pid () -> Integer @ rbi/stdlib.rbi:9494
    class <singleton class:<constant:GID>> < ::<constant:Module> () @ rbi/stdlib.rbi:598
      method <overload N.1 : switch> (blk) -> untyped @ rbi/stdlib.rbi:9295
        argument blk<block> -> AppliedType {
          klass = ::<constant:Proc0>
          targs = [
            <constant:Return> = BasicObject
          ]
        } @ rbi/stdlib.rbi:9296
      method change_privilege (group) -> Integer @ rbi/stdlib.rbi:9265
        argument group<> -> Integer @ rbi/stdlib.rbi:9262
      method eid () -> Integer @ rbi/stdlib.rbi:9268
      method eid= (group) -> Integer @ rbi/stdlib.rbi:9305
        argument group<> -> Integer @ rbi/stdlib.rbi:9302
      method from_name (name) -> Integer @ rbi/stdlib.rbi:9274
        argument name<> -> String @ rbi/stdlib.rbi:9271
      method grant_privilege (group) -> Integer @ rbi/stdlib.rbi:9280
        argument group<> -> Integer @ rbi/stdlib.rbi:9277
      method re_exchange () -> Integer @ rbi/stdlib.rbi:9283
      method re_exchangeable? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:9286
      method rid () -> Integer @ rbi/stdlib.rbi:9289
      method sid_available? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:9292
      method switch () -> Integer @ rbi/stdlib.rbi:9299
        argument blk<block> @ rbi/stdlib.rbi:9299
    class <singleton class:<constant:Status>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:600
    class <singleton class:<constant:Sys>> < ::<constant:Module> () @ rbi/stdlib.rbi:602
      method geteuid () -> Integer @ rbi/stdlib.rbi:9366
      method getgid () -> Integer @ rbi/stdlib.rbi:9369
      method getuid () -> Integer @ rbi/stdlib.rbi:9372
      method issetugid () -> TrueClass | FalseClass @ rbi/stdlib.rbi:9375
      method setegid (group) -> NilClass @ rbi/stdlib.rbi:9381
        argument group<> -> Integer @ rbi/stdlib.rbi:9378
      method seteuid (user) -> NilClass @ rbi/stdlib.rbi:9387
        argument user<> -> Integer @ rbi/stdlib.rbi:9384
      method setgid (group) -> NilClass @ rbi/stdlib.rbi:9393
        argument group<> -> Integer @ rbi/stdlib.rbi:9390
      method setregid (rid, eid) -> NilClass @ rbi/stdlib.rbi:9400
        argument eid<> -> Integer @ rbi/stdlib.rbi:9397
        argument rid<> -> Integer @ rbi/stdlib.rbi:9396
      method setresgid (rid, eid, sid) -> NilClass @ rbi/stdlib.rbi:9408
        argument eid<> -> Integer @ rbi/stdlib.rbi:9404
        argument rid<> -> Integer @ rbi/stdlib.rbi:9403
        argument sid<> -> Integer @ rbi/stdlib.rbi:9405
      method setresuid (rid, eid, sid) -> NilClass @ rbi/stdlib.rbi:9416
        argument eid<> -> Integer @ rbi/stdlib.rbi:9412
        argument rid<> -> Integer @ rbi/stdlib.rbi:9411
        argument sid<> -> Integer @ rbi/stdlib.rbi:9413
      method setreuid (rid, eid) -> NilClass @ rbi/stdlib.rbi:9423
        argument eid<> -> Integer @ rbi/stdlib.rbi:9420
        argument rid<> -> Integer @ rbi/stdlib.rbi:9419
      method setrgid (group) -> NilClass @ rbi/stdlib.rbi:9429
        argument group<> -> Integer @ rbi/stdlib.rbi:9426
      method setruid (user) -> NilClass @ rbi/stdlib.rbi:9435
        argument user<> -> Integer @ rbi/stdlib.rbi:9432
      method setuid (user) -> NilClass @ rbi/stdlib.rbi:9441
        argument user<> -> Integer @ rbi/stdlib.rbi:9438
    class <singleton class:<constant:Tms>> < ::<singleton class:<constant:Struct>> () @ rbi/stdlib.rbi:604
    class <singleton class:<constant:UID>> < ::<constant:Module> () @ rbi/stdlib.rbi:606
      method <overload N.1 : switch> (blk) -> untyped @ rbi/stdlib.rbi:9479
        argument blk<block> -> AppliedType {
          klass = ::<constant:Proc0>
          targs = [
            <constant:Return> = BasicObject
          ]
        } @ rbi/stdlib.rbi:9480
      method change_privilege (user) -> Integer @ rbi/stdlib.rbi:9449
        argument user<> -> Integer @ rbi/stdlib.rbi:9446
      method eid () -> Integer @ rbi/stdlib.rbi:9452
      method eid= (user) -> Integer @ rbi/stdlib.rbi:9489
        argument user<> -> Integer @ rbi/stdlib.rbi:9486
      method from_name (name) -> Integer @ rbi/stdlib.rbi:9458
        argument name<> -> String @ rbi/stdlib.rbi:9455
      method grant_privilege (user) -> Integer @ rbi/stdlib.rbi:9464
        argument user<> -> Integer @ rbi/stdlib.rbi:9461
      method re_exchange () -> Integer @ rbi/stdlib.rbi:9467
      method re_exchangeable? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:9470
      method rid () -> Integer @ rbi/stdlib.rbi:9473
      method sid_available? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:9476
      method switch () -> Integer @ rbi/stdlib.rbi:9483
        argument blk<block> @ rbi/stdlib.rbi:9483
    class <singleton class:<constant:Waiter>> < ::<singleton class:<constant:Thread>> () @ rbi/stdlib.rbi:610
    static-field <constant:CLOCK_BOOTTIME> -> Integer @ rbi/stdlib.rbi:12852
    static-field <constant:CLOCK_BOOTTIME_ALARM> -> Integer @ rbi/stdlib.rbi:12853
    static-field <constant:CLOCK_MONOTONIC> -> Integer @ rbi/stdlib.rbi:12854
    static-field <constant:CLOCK_MONOTONIC_COARSE> -> Integer @ rbi/stdlib.rbi:12855
    static-field <constant:CLOCK_MONOTONIC_RAW> -> Integer @ rbi/stdlib.rbi:12856
    static-field <constant:CLOCK_PROCESS_CPUTIME_ID> -> Integer @ rbi/stdlib.rbi:12857
    static-field <constant:CLOCK_REALTIME> -> Integer @ rbi/stdlib.rbi:12858
    static-field <constant:CLOCK_REALTIME_ALARM> -> Integer @ rbi/stdlib.rbi:12859
    static-field <constant:CLOCK_REALTIME_COARSE> -> Integer @ rbi/stdlib.rbi:12860
    static-field <constant:CLOCK_THREAD_CPUTIME_ID> -> Integer @ rbi/stdlib.rbi:12861
    static-field <constant:PRIO_PGRP> -> Integer @ rbi/stdlib.rbi:12862
    static-field <constant:PRIO_PROCESS> -> Integer @ rbi/stdlib.rbi:12863
    static-field <constant:PRIO_USER> -> Integer @ rbi/stdlib.rbi:12864
    static-field <constant:RLIMIT_AS> -> Integer @ rbi/stdlib.rbi:12865
    static-field <constant:RLIMIT_CORE> -> Integer @ rbi/stdlib.rbi:12866
    static-field <constant:RLIMIT_CPU> -> Integer @ rbi/stdlib.rbi:12867
    static-field <constant:RLIMIT_DATA> -> Integer @ rbi/stdlib.rbi:12868
    static-field <constant:RLIMIT_FSIZE> -> Integer @ rbi/stdlib.rbi:12869
    static-field <constant:RLIMIT_MEMLOCK> -> Integer @ rbi/stdlib.rbi:12870
    static-field <constant:RLIMIT_MSGQUEUE> -> Integer @ rbi/stdlib.rbi:12871
    static-field <constant:RLIMIT_NICE> -> Integer @ rbi/stdlib.rbi:12872
    static-field <constant:RLIMIT_NOFILE> -> Integer @ rbi/stdlib.rbi:12873
    static-field <constant:RLIMIT_NPROC> -> Integer @ rbi/stdlib.rbi:12874
    static-field <constant:RLIMIT_RSS> -> Integer @ rbi/stdlib.rbi:12875
    static-field <constant:RLIMIT_RTPRIO> -> Integer @ rbi/stdlib.rbi:12876
    static-field <constant:RLIMIT_RTTIME> -> Integer @ rbi/stdlib.rbi:12877
    static-field <constant:RLIMIT_SIGPENDING> -> Integer @ rbi/stdlib.rbi:12878
    static-field <constant:RLIMIT_STACK> -> Integer @ rbi/stdlib.rbi:12879
    static-field <constant:RLIM_INFINITY> -> Integer @ rbi/stdlib.rbi:12880
    static-field <constant:RLIM_SAVED_CUR> -> Integer @ rbi/stdlib.rbi:12881
    static-field <constant:RLIM_SAVED_MAX> -> Integer @ rbi/stdlib.rbi:12882
    static-field <constant:WNOHANG> -> Integer @ rbi/stdlib.rbi:12883
    static-field <constant:WUNTRACED> -> Integer @ rbi/stdlib.rbi:12884
  class <constant:Random> < ::<constant:Object> (<constant:Formatter>) -> <Class:Random> @ rbi/stdlib.rbi:9497
    class <constant:Formatter> (<constant:BasicObject>) -> <Class:Random::Formatter> @ rbi/stdlib.rbi:612
    class <singleton class:<constant:Formatter>> < ::<constant:Module> () @ rbi/stdlib.rbi:612
    method <overload N.1 : rand> (max) -> Float @ rbi/stdlib.rbi:9529
      argument max<optional> -> AppliedType {
            klass = ::<constant:Range>
            targs = [
              <constant:Elem> = Float
            ]
          } | Float @ rbi/stdlib.rbi:9530
    method == (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9502
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:9499
    method bytes (size) -> String @ rbi/stdlib.rbi:9508
      argument size<> -> Integer @ rbi/stdlib.rbi:9505
    method clone () -> Random @ rbi/stdlib.rbi:9511
    method dup () -> Random @ rbi/stdlib.rbi:9514
    method freeze () -> Random @ rbi/stdlib.rbi:9517
    method initialize (seed) -> Object @ rbi/stdlib.rbi:9523
      argument seed<optional> -> Integer @ rbi/stdlib.rbi:9520
    method rand (max) -> Integer @ rbi/stdlib.rbi:9533
      argument max<optional> -> AppliedType {
            klass = ::<constant:Range>
            targs = [
              <constant:Elem> = Integer
            ]
          } | Integer @ rbi/stdlib.rbi:9526
    method seed () -> Integer @ rbi/stdlib.rbi:9536
    method taint () -> Random @ rbi/stdlib.rbi:9539
    method trust () -> Random @ rbi/stdlib.rbi:9542
    method untaint () -> Random @ rbi/stdlib.rbi:9545
    method untrust () -> Random @ rbi/stdlib.rbi:9548
    static-field <constant:DEFAULT> -> Random @ rbi/stdlib.rbi:12885
  class <constant:Range>[<constant:Elem>] < ::<constant:Object> (<constant:Enumerable>) -> <Class:Range> @ rbi/stdlib.rbi:9566
    method <overload N.1 : each> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Range>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:9607
      argument blk<block> @ rbi/stdlib.rbi:9608
    method <overload N.1 : first> (n) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Range>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:9617
      argument n<optional> -> Integer @ rbi/stdlib.rbi:9618
    method <overload N.1 : last> (n) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Range>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:9647
      argument n<optional> -> Integer @ rbi/stdlib.rbi:9648
    method <overload N.1 : max> (blk) -> LambdaParam(::<constant:Range>#<constant:Elem>) @ rbi/stdlib.rbi:9654
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = Integer
          <constant:Arg0> = LambdaParam(::<constant:Range>#<constant:Elem>)
          <constant:Arg1> = LambdaParam(::<constant:Range>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:9655
      argument n<optional> @ rbi/stdlib.rbi:9667
    method <overload N.1 : min> (blk) -> LambdaParam(::<constant:Range>#<constant:Elem>) @ rbi/stdlib.rbi:9670
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = Integer
          <constant:Arg0> = LambdaParam(::<constant:Range>#<constant:Elem>)
          <constant:Arg1> = LambdaParam(::<constant:Range>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:9671
      argument n<optional> @ rbi/stdlib.rbi:9683
    method <overload N.1 : step> (n) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Range>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:9693
      argument blk<block> @ rbi/stdlib.rbi:9697
      argument n<optional> -> Integer @ rbi/stdlib.rbi:9694
    method <overload N.2 : max> (n) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Range>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:9658
      argument blk<block> @ rbi/stdlib.rbi:9667
      argument n<optional> -> Integer @ rbi/stdlib.rbi:9659
    method <overload N.2 : min> (n) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Range>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:9674
      argument blk<block> @ rbi/stdlib.rbi:9683
      argument n<optional> -> Integer @ rbi/stdlib.rbi:9675
    method <overload N.3 : max> (n, blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Range>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:9662
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = Integer
          <constant:Arg0> = LambdaParam(::<constant:Range>#<constant:Elem>)
          <constant:Arg1> = LambdaParam(::<constant:Range>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:9664
      argument n<optional> -> Integer @ rbi/stdlib.rbi:9663
    method <overload N.3 : min> (n, blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Range>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:9678
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc2>
        targs = [
          <constant:Return> = Integer
          <constant:Arg0> = LambdaParam(::<constant:Range>#<constant:Elem>)
          <constant:Arg1> = LambdaParam(::<constant:Range>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:9680
      argument n<optional> -> Integer @ rbi/stdlib.rbi:9679
    method == (obj) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9574
      argument obj<> -> BasicObject @ rbi/stdlib.rbi:9571
    method === (obj) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9580
      argument obj<> -> BasicObject @ rbi/stdlib.rbi:9577
    method begin () -> LambdaParam(::<constant:Range>#<constant:Elem>) @ rbi/stdlib.rbi:9583
    method bsearch (blk) -> untyped @ rbi/stdlib.rbi:9589
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Range>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:9586
    method clone () -> AppliedType {
      klass = ::<constant:Range>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:9592
    method cover? (obj) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9598
      argument obj<> -> BasicObject @ rbi/stdlib.rbi:9595
    method dup () -> AppliedType {
      klass = ::<constant:Range>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:9601
    method each (blk) -> AppliedType {
      klass = ::<constant:Range>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:9608
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Range>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:9604
    method end () -> LambdaParam(::<constant:Range>#<constant:Elem>) @ rbi/stdlib.rbi:9611
    method eql? (obj) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9718
      argument obj<> -> BasicObject @ rbi/stdlib.rbi:9715
    method exclude_end? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:9614
    method first () -> LambdaParam(::<constant:Range>#<constant:Elem>) @ rbi/stdlib.rbi:9621
      argument n<optional> @ rbi/stdlib.rbi:9621
    method freeze () -> AppliedType {
      klass = ::<constant:Range>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:9624
    method hash () -> Integer @ rbi/stdlib.rbi:9627
    method include? (obj) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9633
      argument obj<> -> BasicObject @ rbi/stdlib.rbi:9630
    method initialize (_begin, _end, exclude_end) -> Object @ rbi/stdlib.rbi:9641
      argument _begin<> -> Integer @ rbi/stdlib.rbi:9636
      argument _end<> -> Integer @ rbi/stdlib.rbi:9637
      argument exclude_end<optional> -> TrueClass | FalseClass @ rbi/stdlib.rbi:9638
    method inspect () -> String @ rbi/stdlib.rbi:9644
    method last () -> LambdaParam(::<constant:Range>#<constant:Elem>) @ rbi/stdlib.rbi:9651
      argument n<optional> @ rbi/stdlib.rbi:9651
    method max () -> LambdaParam(::<constant:Range>#<constant:Elem>) @ rbi/stdlib.rbi:9667
      argument blk<block> @ rbi/stdlib.rbi:9667
      argument n<optional> @ rbi/stdlib.rbi:9667
    method member? (obj) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9724
      argument obj<> -> BasicObject @ rbi/stdlib.rbi:9721
    method min () -> LambdaParam(::<constant:Range>#<constant:Elem>) @ rbi/stdlib.rbi:9683
      argument blk<block> @ rbi/stdlib.rbi:9683
      argument n<optional> @ rbi/stdlib.rbi:9683
    method size () -> Integer | NilClass @ rbi/stdlib.rbi:9686
    method step (n, blk) -> AppliedType {
      klass = ::<constant:Range>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:9697
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Range>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:9690
      argument n<optional> -> Integer @ rbi/stdlib.rbi:9689
    method taint () -> AppliedType {
      klass = ::<constant:Range>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:9700
    method to_s () -> String @ rbi/stdlib.rbi:9703
    method trust () -> AppliedType {
      klass = ::<constant:Range>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:9706
    method untaint () -> AppliedType {
      klass = ::<constant:Range>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:9709
    method untrust () -> AppliedType {
      klass = ::<constant:Range>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:9712
    typeMember(=) <constant:Elem> @ rbi/stdlib.rbi:9568
  class <constant:RangeError> < ::<constant:StandardError> () -> <Class:RangeError> @ rbi/stdlib.rbi:9727
    method clone () -> RangeError @ rbi/stdlib.rbi:9729
    method dup () -> RangeError @ rbi/stdlib.rbi:9732
    method freeze () -> RangeError @ rbi/stdlib.rbi:9735
    method taint () -> RangeError @ rbi/stdlib.rbi:9738
    method trust () -> RangeError @ rbi/stdlib.rbi:9741
    method untaint () -> RangeError @ rbi/stdlib.rbi:9744
    method untrust () -> RangeError @ rbi/stdlib.rbi:9747
  class <constant:Rational> < ::<constant:Numeric> () -> <Class:Rational> @ rbi/stdlib.rbi:9750
    method % (arg0) -> Rational @ rbi/stdlib.rbi:9767
      argument arg0<> -> Integer @ rbi/stdlib.rbi:9752
    method * (arg0) -> Rational @ rbi/stdlib.rbi:9789
      argument arg0<> -> Integer @ rbi/stdlib.rbi:9770
    method ** (arg0) -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:9811
      argument arg0<> -> Integer @ rbi/stdlib.rbi:9792
    method + (arg0) -> Rational @ rbi/stdlib.rbi:9833
      argument arg0<> -> Integer @ rbi/stdlib.rbi:9814
    method +@ () -> Rational @ rbi/stdlib.rbi:9836
    method - (arg0) -> Rational @ rbi/stdlib.rbi:9858
      argument arg0<> -> Integer @ rbi/stdlib.rbi:9839
    method -@ () -> Rational @ rbi/stdlib.rbi:9861
    method / (arg0) -> Rational @ rbi/stdlib.rbi:9883
      argument arg0<> -> Integer @ rbi/stdlib.rbi:9864
    method < (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9901
      argument arg0<> -> Integer @ rbi/stdlib.rbi:9886
    method <= (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9919
      argument arg0<> -> Integer @ rbi/stdlib.rbi:9904
    method <=> (arg0) -> Object @ rbi/stdlib.rbi:9937
      argument arg0<> -> Integer @ rbi/stdlib.rbi:9922
    method <overload N.1 : %> (arg0) -> Float @ rbi/stdlib.rbi:9755
      argument arg0<> -> Float @ rbi/stdlib.rbi:9756
    method <overload N.1 : **> (arg0) -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:9795
      argument arg0<> -> Float @ rbi/stdlib.rbi:9796
    method <overload N.1 : *> (arg0) -> Float @ rbi/stdlib.rbi:9773
      argument arg0<> -> Float @ rbi/stdlib.rbi:9774
    method <overload N.1 : +> (arg0) -> Float @ rbi/stdlib.rbi:9817
      argument arg0<> -> Float @ rbi/stdlib.rbi:9818
    method <overload N.1 : -> (arg0) -> Float @ rbi/stdlib.rbi:9842
      argument arg0<> -> Float @ rbi/stdlib.rbi:9843
    method <overload N.1 : /> (arg0) -> Float @ rbi/stdlib.rbi:9867
      argument arg0<> -> Float @ rbi/stdlib.rbi:9868
    method <overload N.1 : <=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9907
      argument arg0<> -> Float @ rbi/stdlib.rbi:9908
    method <overload N.1 : <=>> (arg0) -> Object @ rbi/stdlib.rbi:9925
      argument arg0<> -> Float @ rbi/stdlib.rbi:9926
    method <overload N.1 : <> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9889
      argument arg0<> -> Float @ rbi/stdlib.rbi:9890
    method <overload N.1 : >=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9967
      argument arg0<> -> Float @ rbi/stdlib.rbi:9968
    method <overload N.1 : >> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9949
      argument arg0<> -> Float @ rbi/stdlib.rbi:9950
    method <overload N.1 : ceil> (arg0) -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:9994
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:9995
    method <overload N.1 : coerce> (arg0) -> TupleType {
      0 = Float
      1 = Float
    } @ rbi/stdlib.rbi:10007
      argument arg0<> -> Float @ rbi/stdlib.rbi:10008
    method <overload N.1 : div> (arg0) -> Integer @ rbi/stdlib.rbi:10034
      argument arg0<> -> Float @ rbi/stdlib.rbi:10035
    method <overload N.1 : fdiv> (arg0) -> Float @ rbi/stdlib.rbi:10067
      argument arg0<> -> Float @ rbi/stdlib.rbi:10068
    method <overload N.1 : floor> (arg0) -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:10086
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:10087
    method <overload N.1 : modulo> (arg0) -> Float @ rbi/stdlib.rbi:10111
      argument arg0<> -> Float @ rbi/stdlib.rbi:10112
    method <overload N.1 : quo> (arg0) -> Float @ rbi/stdlib.rbi:10135
      argument arg0<> -> Float @ rbi/stdlib.rbi:10136
    method <overload N.1 : rationalize> (arg0) -> Rational @ rbi/stdlib.rbi:10154
      argument arg0<optional> -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:10155
    method <overload N.1 : round> (arg0) -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:10167
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:10168
    method <overload N.1 : truncate> (arg0) -> Rational @ rbi/stdlib.rbi:10192
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:10193
    method <overload N.2 : %> (arg0) -> Rational @ rbi/stdlib.rbi:9759
      argument arg0<> -> Rational @ rbi/stdlib.rbi:9760
    method <overload N.2 : **> (arg0) -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:9799
      argument arg0<> -> Rational @ rbi/stdlib.rbi:9800
    method <overload N.2 : *> (arg0) -> Rational @ rbi/stdlib.rbi:9777
      argument arg0<> -> Rational @ rbi/stdlib.rbi:9778
    method <overload N.2 : +> (arg0) -> Rational @ rbi/stdlib.rbi:9821
      argument arg0<> -> Rational @ rbi/stdlib.rbi:9822
    method <overload N.2 : -> (arg0) -> Rational @ rbi/stdlib.rbi:9846
      argument arg0<> -> Rational @ rbi/stdlib.rbi:9847
    method <overload N.2 : /> (arg0) -> Rational @ rbi/stdlib.rbi:9871
      argument arg0<> -> Rational @ rbi/stdlib.rbi:9872
    method <overload N.2 : <=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9911
      argument arg0<> -> Rational @ rbi/stdlib.rbi:9912
    method <overload N.2 : <=>> (arg0) -> Object @ rbi/stdlib.rbi:9929
      argument arg0<> -> Rational @ rbi/stdlib.rbi:9930
    method <overload N.2 : <> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9893
      argument arg0<> -> Rational @ rbi/stdlib.rbi:9894
    method <overload N.2 : >=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9971
      argument arg0<> -> Rational @ rbi/stdlib.rbi:9972
    method <overload N.2 : >> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9953
      argument arg0<> -> Rational @ rbi/stdlib.rbi:9954
    method <overload N.2 : coerce> (arg0) -> TupleType {
      0 = Rational
      1 = Rational
    } @ rbi/stdlib.rbi:10011
      argument arg0<> -> Rational @ rbi/stdlib.rbi:10012
    method <overload N.2 : div> (arg0) -> Integer @ rbi/stdlib.rbi:10038
      argument arg0<> -> Rational @ rbi/stdlib.rbi:10039
    method <overload N.2 : fdiv> (arg0) -> Float @ rbi/stdlib.rbi:10071
      argument arg0<> -> Rational @ rbi/stdlib.rbi:10072
    method <overload N.2 : modulo> (arg0) -> Rational @ rbi/stdlib.rbi:10115
      argument arg0<> -> Rational @ rbi/stdlib.rbi:10116
    method <overload N.2 : quo> (arg0) -> Rational @ rbi/stdlib.rbi:10139
      argument arg0<> -> Rational @ rbi/stdlib.rbi:10140
    method <overload N.3 : %> (arg0) -> BigDecimal @ rbi/stdlib.rbi:9763
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:9764
    method <overload N.3 : **> (arg0) -> BigDecimal @ rbi/stdlib.rbi:9803
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:9804
    method <overload N.3 : *> (arg0) -> BigDecimal @ rbi/stdlib.rbi:9781
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:9782
    method <overload N.3 : +> (arg0) -> BigDecimal @ rbi/stdlib.rbi:9825
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:9826
    method <overload N.3 : -> (arg0) -> BigDecimal @ rbi/stdlib.rbi:9850
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:9851
    method <overload N.3 : /> (arg0) -> BigDecimal @ rbi/stdlib.rbi:9875
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:9876
    method <overload N.3 : <=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9915
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:9916
    method <overload N.3 : <=>> (arg0) -> Object @ rbi/stdlib.rbi:9933
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:9934
    method <overload N.3 : <> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9897
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:9898
    method <overload N.3 : >=> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9975
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:9976
    method <overload N.3 : >> (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9957
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:9958
    method <overload N.3 : coerce> (arg0) -> TupleType {
      0 = Integer | Float | Rational | BigDecimal | Complex
      1 = Integer | Float | Rational | BigDecimal | Complex
    } @ rbi/stdlib.rbi:10015
      argument arg0<> -> Complex @ rbi/stdlib.rbi:10016
    method <overload N.3 : div> (arg0) -> Integer @ rbi/stdlib.rbi:10042
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:10043
    method <overload N.3 : fdiv> (arg0) -> Float @ rbi/stdlib.rbi:10075
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:10076
    method <overload N.3 : modulo> (arg0) -> BigDecimal @ rbi/stdlib.rbi:10119
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:10120
    method <overload N.3 : quo> (arg0) -> BigDecimal @ rbi/stdlib.rbi:10143
      argument arg0<> -> BigDecimal @ rbi/stdlib.rbi:10144
    method <overload N.4 : **> (arg0) -> Complex @ rbi/stdlib.rbi:9807
      argument arg0<> -> Complex @ rbi/stdlib.rbi:9808
    method <overload N.4 : *> (arg0) -> Complex @ rbi/stdlib.rbi:9785
      argument arg0<> -> Complex @ rbi/stdlib.rbi:9786
    method <overload N.4 : +> (arg0) -> Complex @ rbi/stdlib.rbi:9829
      argument arg0<> -> Complex @ rbi/stdlib.rbi:9830
    method <overload N.4 : -> (arg0) -> Complex @ rbi/stdlib.rbi:9854
      argument arg0<> -> Complex @ rbi/stdlib.rbi:9855
    method <overload N.4 : /> (arg0) -> Complex @ rbi/stdlib.rbi:9879
      argument arg0<> -> Complex @ rbi/stdlib.rbi:9880
    method <overload N.4 : fdiv> (arg0) -> Float @ rbi/stdlib.rbi:10079
      argument arg0<> -> Complex @ rbi/stdlib.rbi:10080
    method <overload N.4 : quo> (arg0) -> Complex @ rbi/stdlib.rbi:10147
      argument arg0<> -> Complex @ rbi/stdlib.rbi:10148
    method == (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9943
      argument arg0<> -> Object @ rbi/stdlib.rbi:9940
    method > (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9961
      argument arg0<> -> Integer @ rbi/stdlib.rbi:9946
    method >= (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:9979
      argument arg0<> -> Integer @ rbi/stdlib.rbi:9964
    method abs () -> Rational @ rbi/stdlib.rbi:9982
    method abs2 () -> Rational @ rbi/stdlib.rbi:9985
    method angle () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:9988
    method arg () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:9991
    method ceil () -> Integer @ rbi/stdlib.rbi:9998
      argument arg0<optional> @ rbi/stdlib.rbi:9998
    method clone () -> Rational @ rbi/stdlib.rbi:10001
    method coerce (arg0) -> TupleType {
      0 = Rational
      1 = Rational
    } @ rbi/stdlib.rbi:10019
      argument arg0<> -> Integer @ rbi/stdlib.rbi:10004
    method conj () -> Rational @ rbi/stdlib.rbi:10022
    method conjugate () -> Rational @ rbi/stdlib.rbi:10025
    method denominator () -> Integer @ rbi/stdlib.rbi:10028
    method div (arg0) -> Integer @ rbi/stdlib.rbi:10046
      argument arg0<> -> Integer @ rbi/stdlib.rbi:10031
    method divmod (arg0) -> TupleType {
      0 = Integer | Float | Rational | BigDecimal
      1 = Integer | Float | Rational | BigDecimal
    } @ rbi/stdlib.rbi:10052
      argument arg0<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:10049
    method dup () -> Rational @ rbi/stdlib.rbi:10055
    method equal? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:10061
      argument arg0<> -> Object @ rbi/stdlib.rbi:10058
    method fdiv (arg0) -> Float @ rbi/stdlib.rbi:10083
      argument arg0<> -> Integer @ rbi/stdlib.rbi:10064
    method floor () -> Integer @ rbi/stdlib.rbi:10090
      argument arg0<optional> @ rbi/stdlib.rbi:10090
    method freeze () -> Rational @ rbi/stdlib.rbi:10093
    method hash () -> Integer @ rbi/stdlib.rbi:10096
    method imag () -> Integer @ rbi/stdlib.rbi:10099
    method imaginary () -> Integer @ rbi/stdlib.rbi:10102
    method inspect () -> String @ rbi/stdlib.rbi:10105
    method modulo (arg0) -> Rational @ rbi/stdlib.rbi:10123
      argument arg0<> -> Integer @ rbi/stdlib.rbi:10108
    method numerator () -> Integer @ rbi/stdlib.rbi:10126
    method phase () -> Integer | Float | Rational | BigDecimal | Complex @ rbi/stdlib.rbi:10129
    method quo (arg0) -> Rational @ rbi/stdlib.rbi:10151
      argument arg0<> -> Integer @ rbi/stdlib.rbi:10132
    method rationalize () -> Rational @ rbi/stdlib.rbi:10158
      argument arg0<optional> @ rbi/stdlib.rbi:10158
    method real () -> Rational @ rbi/stdlib.rbi:10161
    method real? () -> TrueClass @ rbi/stdlib.rbi:10164
    method round () -> Integer @ rbi/stdlib.rbi:10171
      argument arg0<optional> @ rbi/stdlib.rbi:10171
    method taint () -> Rational @ rbi/stdlib.rbi:10174
    method to_c () -> Complex @ rbi/stdlib.rbi:10177
    method to_f () -> Float @ rbi/stdlib.rbi:10180
    method to_i () -> Integer @ rbi/stdlib.rbi:10183
    method to_r () -> Rational @ rbi/stdlib.rbi:10186
    method to_s () -> String @ rbi/stdlib.rbi:10189
    method truncate () -> Integer @ rbi/stdlib.rbi:10196
      argument arg0<optional> @ rbi/stdlib.rbi:10196
    method trust () -> Rational @ rbi/stdlib.rbi:10199
    method untaint () -> Rational @ rbi/stdlib.rbi:10202
    method untrust () -> Rational @ rbi/stdlib.rbi:10205
    method zero? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:10208
  class <constant:RbConfig> (<constant:BasicObject>) -> <Class:RbConfig> @ rbi/stdlib.rbi:622
    static-field <constant:CONFIG> -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12886
    static-field <constant:DESTDIR> -> String @ rbi/stdlib.rbi:12887
    static-field <constant:MAKEFILE_CONFIG> -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12888
    static-field <constant:TOPDIR> -> String @ rbi/stdlib.rbi:12889
  class <constant:Regexp> < ::<constant:Object> () -> <Class:Regexp> @ rbi/stdlib.rbi:10211
    method <overload N.1 : initialize> (arg0) -> Object @ rbi/stdlib.rbi:10276
      argument arg0<> -> Regexp @ rbi/stdlib.rbi:10277
      argument kcode<optional> @ rbi/stdlib.rbi:10280
      argument options<optional> @ rbi/stdlib.rbi:10280
    method == (other) -> TrueClass | FalseClass @ rbi/stdlib.rbi:10235
      argument other<> -> BasicObject @ rbi/stdlib.rbi:10232
    method === (other) -> TrueClass | FalseClass @ rbi/stdlib.rbi:10241
      argument other<> -> BasicObject @ rbi/stdlib.rbi:10238
    method =~ (str) -> Integer | NilClass @ rbi/stdlib.rbi:10247
      argument str<> -> String @ rbi/stdlib.rbi:10244
    method casefold? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:10250
    method clone () -> Regexp @ rbi/stdlib.rbi:10253
    method dup () -> Regexp @ rbi/stdlib.rbi:10256
    method encoding () -> Encoding @ rbi/stdlib.rbi:10259
    method eql? (other) -> TrueClass | FalseClass @ rbi/stdlib.rbi:10344
      argument other<> -> BasicObject @ rbi/stdlib.rbi:10341
    method fixed_encoding? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:10262
    method freeze () -> Regexp @ rbi/stdlib.rbi:10265
    method hash () -> Integer @ rbi/stdlib.rbi:10268
    method initialize (arg0, options, kcode) -> Object @ rbi/stdlib.rbi:10280
      argument arg0<> -> String @ rbi/stdlib.rbi:10271
      argument kcode<optional> -> String @ rbi/stdlib.rbi:10273
      argument options<optional> -> BasicObject @ rbi/stdlib.rbi:10272
    method inspect () -> String @ rbi/stdlib.rbi:10283
    method match (arg0, arg1) -> MatchData | NilClass @ rbi/stdlib.rbi:10290
      argument arg0<> -> String @ rbi/stdlib.rbi:10286
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:10287
    method named_captures () -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = String
        <constant:V> = AppliedType {
            klass = ::<constant:Array>
            targs = [
              <constant:Elem> = Integer
            ]
          }
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10293
    method names () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:10296
    method options () -> Integer @ rbi/stdlib.rbi:10299
    method source () -> String @ rbi/stdlib.rbi:10302
    method taint () -> Regexp @ rbi/stdlib.rbi:10305
    method to_s () -> String @ rbi/stdlib.rbi:10308
    method trust () -> Regexp @ rbi/stdlib.rbi:10311
    method untaint () -> Regexp @ rbi/stdlib.rbi:10314
    method untrust () -> Regexp @ rbi/stdlib.rbi:10317
    method ~ () -> Integer | NilClass @ rbi/stdlib.rbi:10320
    static-field <constant:EXTENDED> -> Integer @ rbi/stdlib.rbi:12890
    static-field <constant:FIXEDENCODING> -> Integer @ rbi/stdlib.rbi:12891
    static-field <constant:IGNORECASE> -> Integer @ rbi/stdlib.rbi:12892
    static-field <constant:MULTILINE> -> Integer @ rbi/stdlib.rbi:12893
    static-field <constant:NOENCODING> -> Integer @ rbi/stdlib.rbi:12894
  class <constant:RegexpError> < ::<constant:StandardError> () -> <Class:RegexpError> @ rbi/stdlib.rbi:10347
    method clone () -> RegexpError @ rbi/stdlib.rbi:10349
    method dup () -> RegexpError @ rbi/stdlib.rbi:10352
    method freeze () -> RegexpError @ rbi/stdlib.rbi:10355
    method taint () -> RegexpError @ rbi/stdlib.rbi:10358
    method trust () -> RegexpError @ rbi/stdlib.rbi:10361
    method untaint () -> RegexpError @ rbi/stdlib.rbi:10364
    method untrust () -> RegexpError @ rbi/stdlib.rbi:10367
  class <constant:RubyTyper> () -> <Class:RubyTyper> @ ???
    class <constant:DynamicStruct>[<constant:Elem>] < ::<constant:Struct> () -> <Class:RubyTyper::DynamicStruct> @ rbi/ruby_typer.rbi:12
      typeMember(=) <constant:Elem> -> untyped @ rbi/ruby_typer.rbi:13
    class <constant:StubClass> < ::<constant:Object> () -> <Class:RubyTyper::StubClass> @ rbi/ruby_typer.rbi:22
    class <singleton class:<constant:DynamicStruct>> < ::<singleton class:<constant:Struct>> () @ rbi/ruby_typer.rbi:12
      method new (arg1) -> AppliedType {
        klass = ::<constant:RubyTyper>::<constant:DynamicStruct>
        targs = [
          <constant:Elem> = untyped
        ]
      } @ rbi/ruby_typer.rbi:19
        argument arg1<repeated> -> untyped @ rbi/ruby_typer.rbi:19
    class <singleton class:<constant:StubClass>> < ::<singleton class:<constant:Object>> () @ ???
  class <constant:RubyVM> < ::<constant:Object> () -> <Class:RubyVM> @ rbi/stdlib.rbi:10370
    class <constant:InstructionSequence> < ::<constant:Object> () -> <Class:RubyVM::InstructionSequence> @ rbi/stdlib.rbi:630
    class <singleton class:<constant:InstructionSequence>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:630
    method clone () -> RubyVM @ rbi/stdlib.rbi:10372
    method dup () -> RubyVM @ rbi/stdlib.rbi:10375
    method freeze () -> RubyVM @ rbi/stdlib.rbi:10378
    method taint () -> RubyVM @ rbi/stdlib.rbi:10381
    method trust () -> RubyVM @ rbi/stdlib.rbi:10384
    method untaint () -> RubyVM @ rbi/stdlib.rbi:10387
    method untrust () -> RubyVM @ rbi/stdlib.rbi:10390
    static-field <constant:DEFAULT_PARAMS> -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12895
    static-field <constant:INSTRUCTION_NAMES> -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12896
    static-field <constant:OPTS> -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12897
  class <constant:RuntimeError> < ::<constant:StandardError> () -> <Class:RuntimeError> @ rbi/stdlib.rbi:10393
    method clone () -> RuntimeError @ rbi/stdlib.rbi:10395
    method dup () -> RuntimeError @ rbi/stdlib.rbi:10398
    method freeze () -> RuntimeError @ rbi/stdlib.rbi:10401
    method taint () -> RuntimeError @ rbi/stdlib.rbi:10404
    method trust () -> RuntimeError @ rbi/stdlib.rbi:10407
    method untaint () -> RuntimeError @ rbi/stdlib.rbi:10410
    method untrust () -> RuntimeError @ rbi/stdlib.rbi:10413
  class <constant:ScriptError> < ::<constant:Exception> () -> <Class:ScriptError> @ rbi/stdlib.rbi:10416
    method clone () -> ScriptError @ rbi/stdlib.rbi:10418
    method dup () -> ScriptError @ rbi/stdlib.rbi:10421
    method freeze () -> ScriptError @ rbi/stdlib.rbi:10424
    method taint () -> ScriptError @ rbi/stdlib.rbi:10427
    method trust () -> ScriptError @ rbi/stdlib.rbi:10430
    method untaint () -> ScriptError @ rbi/stdlib.rbi:10433
    method untrust () -> ScriptError @ rbi/stdlib.rbi:10436
  class <constant:SecurityError> < ::<constant:Exception> () -> <Class:SecurityError> @ rbi/stdlib.rbi:10439
    method clone () -> SecurityError @ rbi/stdlib.rbi:10441
    method dup () -> SecurityError @ rbi/stdlib.rbi:10444
    method freeze () -> SecurityError @ rbi/stdlib.rbi:10447
    method taint () -> SecurityError @ rbi/stdlib.rbi:10450
    method trust () -> SecurityError @ rbi/stdlib.rbi:10453
    method untaint () -> SecurityError @ rbi/stdlib.rbi:10456
    method untrust () -> SecurityError @ rbi/stdlib.rbi:10459
  class <constant:Set>[<constant:Elem>] < ::<constant:Object> (<constant:Enumerable>) -> <Class:Set> @ rbi/stdlib.rbi:10462
    method & (enum) -> untyped @ rbi/stdlib.rbi:10672
      argument enum<> -> AppliedType {
        klass = ::<constant:Enumerable>
        targs = [
          <constant:Elem> = LambdaParam(::<constant:Set>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:10669
    method + (enum) -> untyped @ rbi/stdlib.rbi:10476
      argument enum<> -> AppliedType {
        klass = ::<constant:Enumerable>
        targs = [
          <constant:Elem> = LambdaParam(::<constant:Set>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:10473
    method - (enum) -> untyped @ rbi/stdlib.rbi:10678
      argument enum<> -> AppliedType {
        klass = ::<constant:Enumerable>
        targs = [
          <constant:Elem> = LambdaParam(::<constant:Set>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:10675
    method < (set) -> TrueClass | FalseClass @ rbi/stdlib.rbi:10684
      argument set<> -> untyped @ rbi/stdlib.rbi:10681
    method << (o) -> AppliedType {
      klass = ::<constant:Set>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10690
      argument o<> -> LambdaParam(::<constant:Set>#<constant:Elem>) @ rbi/stdlib.rbi:10687
    method <= (set) -> TrueClass | FalseClass @ rbi/stdlib.rbi:10696
      argument set<> -> untyped @ rbi/stdlib.rbi:10693
    method <overload N.1 : each> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Set>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:10545
      argument blk<block> @ rbi/stdlib.rbi:10546
    method > (set) -> TrueClass | FalseClass @ rbi/stdlib.rbi:10702
      argument set<> -> untyped @ rbi/stdlib.rbi:10699
    method >= (set) -> TrueClass | FalseClass @ rbi/stdlib.rbi:10708
      argument set<> -> untyped @ rbi/stdlib.rbi:10705
    method ^ (enum) -> untyped @ rbi/stdlib.rbi:10482
      argument enum<> -> AppliedType {
        klass = ::<constant:Enumerable>
        targs = [
          <constant:Elem> = LambdaParam(::<constant:Set>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:10479
    method add (o) -> AppliedType {
      klass = ::<constant:Set>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10488
      argument o<> -> LambdaParam(::<constant:Set>#<constant:Elem>) @ rbi/stdlib.rbi:10485
    method add? (o) -> untyped @ rbi/stdlib.rbi:10494
      argument o<> -> LambdaParam(::<constant:Set>#<constant:Elem>) @ rbi/stdlib.rbi:10491
    method classify (blk) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10500
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = LambdaParam(::<constant:Set>#<constant:Elem>)
          <constant:Arg0> = untyped
        ]
      } @ rbi/stdlib.rbi:10497
    method clear () -> AppliedType {
      klass = ::<constant:Set>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10503
    method clone () -> AppliedType {
      klass = ::<constant:Set>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10506
    method collect! (blk) -> untyped @ rbi/stdlib.rbi:10714
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Set>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:10711
    method delete (o) -> AppliedType {
      klass = ::<constant:Set>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10512
      argument o<> -> LambdaParam(::<constant:Set>#<constant:Elem>) @ rbi/stdlib.rbi:10509
    method delete? (o) -> untyped @ rbi/stdlib.rbi:10518
      argument o<> -> LambdaParam(::<constant:Set>#<constant:Elem>) @ rbi/stdlib.rbi:10515
    method delete_if (blk) -> AppliedType {
      klass = ::<constant:Set>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10524
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Set>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:10521
    method difference (enum) -> untyped @ rbi/stdlib.rbi:10530
      argument enum<> -> AppliedType {
        klass = ::<constant:Enumerable>
        targs = [
          <constant:Elem> = LambdaParam(::<constant:Set>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:10527
    method disjoint? (set) -> TrueClass | FalseClass @ rbi/stdlib.rbi:10536
      argument set<> -> untyped @ rbi/stdlib.rbi:10533
    method dup () -> AppliedType {
      klass = ::<constant:Set>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10539
    method each (blk) -> AppliedType {
      klass = ::<constant:Set>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10546
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Set>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:10542
    method empty? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:10549
    method flatten () -> AppliedType {
      klass = ::<constant:Set>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10552
    method flatten! () -> untyped @ rbi/stdlib.rbi:10555
    method freeze () -> AppliedType {
      klass = ::<constant:Set>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10558
    method include? (o) -> TrueClass | FalseClass @ rbi/stdlib.rbi:10720
      argument o<> -> LambdaParam(::<constant:Set>#<constant:Elem>) @ rbi/stdlib.rbi:10717
    method initialize (enum) -> Object @ rbi/stdlib.rbi:10564
      argument enum<optional> -> AppliedType {
        klass = ::<constant:Enumerable>
        targs = [
          <constant:Elem> = BasicObject
        ]
      } @ rbi/stdlib.rbi:10561
    method intersect? (set) -> TrueClass | FalseClass @ rbi/stdlib.rbi:10570
      argument set<> -> untyped @ rbi/stdlib.rbi:10567
    method intersection (enum) -> untyped @ rbi/stdlib.rbi:10576
      argument enum<> -> AppliedType {
        klass = ::<constant:Enumerable>
        targs = [
          <constant:Elem> = LambdaParam(::<constant:Set>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:10573
    method keep_if (blk) -> AppliedType {
      klass = ::<constant:Set>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10582
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Set>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:10579
    method length () -> Integer @ rbi/stdlib.rbi:10723
    method map! (blk) -> untyped @ rbi/stdlib.rbi:10588
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:Set>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:10585
    method member? (o) -> TrueClass | FalseClass @ rbi/stdlib.rbi:10594
      argument o<> -> LambdaParam(::<constant:Set>#<constant:Elem>) @ rbi/stdlib.rbi:10591
    method merge (enum) -> AppliedType {
      klass = ::<constant:Set>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10600
      argument enum<> -> AppliedType {
        klass = ::<constant:Enumerable>
        targs = [
          <constant:Elem> = LambdaParam(::<constant:Set>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:10597
    method proper_subset? (set) -> TrueClass | FalseClass @ rbi/stdlib.rbi:10606
      argument set<> -> untyped @ rbi/stdlib.rbi:10603
    method proper_superset? (set) -> TrueClass | FalseClass @ rbi/stdlib.rbi:10612
      argument set<> -> untyped @ rbi/stdlib.rbi:10609
    method reject! (blk) -> untyped @ rbi/stdlib.rbi:10618
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Set>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:10615
    method replace (enum) -> untyped @ rbi/stdlib.rbi:10624
      argument enum<> -> AppliedType {
        klass = ::<constant:Enumerable>
        targs = [
          <constant:Elem> = BasicObject
        ]
      } @ rbi/stdlib.rbi:10621
    method select! (blk) -> untyped @ rbi/stdlib.rbi:10630
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:Set>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:10627
    method size () -> Integer @ rbi/stdlib.rbi:10633
    method subset? (set) -> TrueClass | FalseClass @ rbi/stdlib.rbi:10639
      argument set<> -> untyped @ rbi/stdlib.rbi:10636
    method subtract (enum) -> AppliedType {
      klass = ::<constant:Set>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10645
      argument enum<> -> AppliedType {
        klass = ::<constant:Enumerable>
        targs = [
          <constant:Elem> = LambdaParam(::<constant:Set>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:10642
    method superset? (set) -> TrueClass | FalseClass @ rbi/stdlib.rbi:10651
      argument set<> -> untyped @ rbi/stdlib.rbi:10648
    method taint () -> AppliedType {
      klass = ::<constant:Set>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10654
    method to_a () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = LambdaParam(::<constant:Set>#<constant:Elem>)
      ]
    } @ rbi/stdlib.rbi:10657
    method trust () -> AppliedType {
      klass = ::<constant:Set>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10660
    method union (enum) -> untyped @ rbi/stdlib.rbi:10735
      argument enum<> -> AppliedType {
        klass = ::<constant:Enumerable>
        targs = [
          <constant:Elem> = LambdaParam(::<constant:Set>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:10732
    method untaint () -> AppliedType {
      klass = ::<constant:Set>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10663
    method untrust () -> AppliedType {
      klass = ::<constant:Set>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10666
    method | (enum) -> untyped @ rbi/stdlib.rbi:10729
      argument enum<> -> AppliedType {
        klass = ::<constant:Enumerable>
        targs = [
          <constant:Elem> = LambdaParam(::<constant:Set>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:10726
    typeMember(=) <constant:Elem> @ rbi/stdlib.rbi:10464
  class <constant:Signal> (<constant:BasicObject>) -> <Class:Signal> @ rbi/stdlib.rbi:10738
  class <constant:SignalException> < ::<constant:Exception> () -> <Class:SignalException> @ rbi/stdlib.rbi:10760
    method clone () -> SignalException @ rbi/stdlib.rbi:10762
    method dup () -> SignalException @ rbi/stdlib.rbi:10765
    method freeze () -> SignalException @ rbi/stdlib.rbi:10768
    method taint () -> SignalException @ rbi/stdlib.rbi:10771
    method trust () -> SignalException @ rbi/stdlib.rbi:10774
    method untaint () -> SignalException @ rbi/stdlib.rbi:10777
    method untrust () -> SignalException @ rbi/stdlib.rbi:10780
  class <constant:SingleForwardable> (<constant:BasicObject>) -> <Class:SingleForwardable> @ rbi/stdlib.rbi:639
  class <constant:SortedSet>[<constant:Elem>] < ::<constant:Set> () -> <Class:SortedSet> @ rbi/stdlib.rbi:10783
    method add (o) -> AppliedType {
      klass = ::<constant:SortedSet>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10791
      argument o<> -> LambdaParam(::<constant:SortedSet>#<constant:Elem>) @ rbi/stdlib.rbi:10788
    method clear () -> AppliedType {
      klass = ::<constant:SortedSet>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10794
    method clone () -> AppliedType {
      klass = ::<constant:SortedSet>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10797
    method delete (o) -> AppliedType {
      klass = ::<constant:SortedSet>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10803
      argument o<> -> LambdaParam(::<constant:SortedSet>#<constant:Elem>) @ rbi/stdlib.rbi:10800
    method delete_if (blk) -> AppliedType {
      klass = ::<constant:SortedSet>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10809
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:SortedSet>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:10806
    method dup () -> AppliedType {
      klass = ::<constant:SortedSet>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10812
    method each (blk) -> AppliedType {
      klass = ::<constant:SortedSet>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10818
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = LambdaParam(::<constant:SortedSet>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:10815
    method freeze () -> AppliedType {
      klass = ::<constant:SortedSet>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10821
    method keep_if (blk) -> AppliedType {
      klass = ::<constant:SortedSet>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10827
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = TrueClass | FalseClass
          <constant:Arg0> = LambdaParam(::<constant:SortedSet>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:10824
    method merge (enum) -> AppliedType {
      klass = ::<constant:SortedSet>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10833
      argument enum<> -> AppliedType {
        klass = ::<constant:Enumerable>
        targs = [
          <constant:Elem> = LambdaParam(::<constant:SortedSet>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:10830
    method subtract (enum) -> AppliedType {
      klass = ::<constant:SortedSet>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10839
      argument enum<> -> AppliedType {
        klass = ::<constant:Enumerable>
        targs = [
          <constant:Elem> = LambdaParam(::<constant:SortedSet>#<constant:Elem>)
        ]
      } @ rbi/stdlib.rbi:10836
    method taint () -> AppliedType {
      klass = ::<constant:SortedSet>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10842
    method trust () -> AppliedType {
      klass = ::<constant:SortedSet>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10845
    method untaint () -> AppliedType {
      klass = ::<constant:SortedSet>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10848
    method untrust () -> AppliedType {
      klass = ::<constant:SortedSet>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10851
    typeMember(=) <constant:Elem> @ rbi/stdlib.rbi:10785
  class <constant:StandardError> < ::<constant:Exception> () -> <Class:StandardError> @ rbi/stdlib.rbi:10854
    method clone () -> StandardError @ rbi/stdlib.rbi:10856
    method dup () -> StandardError @ rbi/stdlib.rbi:10859
    method freeze () -> StandardError @ rbi/stdlib.rbi:10862
    method taint () -> StandardError @ rbi/stdlib.rbi:10865
    method trust () -> StandardError @ rbi/stdlib.rbi:10868
    method untaint () -> StandardError @ rbi/stdlib.rbi:10871
    method untrust () -> StandardError @ rbi/stdlib.rbi:10874
  class <constant:StopIteration> < ::<constant:IndexError> () -> <Class:StopIteration> @ rbi/stdlib.rbi:10877
    method clone () -> StopIteration @ rbi/stdlib.rbi:10879
    method dup () -> StopIteration @ rbi/stdlib.rbi:10882
    method freeze () -> StopIteration @ rbi/stdlib.rbi:10885
    method taint () -> StopIteration @ rbi/stdlib.rbi:10888
    method trust () -> StopIteration @ rbi/stdlib.rbi:10891
    method untaint () -> StopIteration @ rbi/stdlib.rbi:10894
    method untrust () -> StopIteration @ rbi/stdlib.rbi:10897
  class <constant:String> < ::<constant:Object> (<constant:Comparable>) -> <Class:String> @ rbi/stdlib.rbi:10900
    method % (arg0) -> String @ rbi/stdlib.rbi:10905
      argument arg0<> -> Object @ rbi/stdlib.rbi:10902
    method * (arg0) -> String @ rbi/stdlib.rbi:10911
      argument arg0<> -> Integer @ rbi/stdlib.rbi:10908
    method + (arg0) -> String @ rbi/stdlib.rbi:10917
      argument arg0<> -> String @ rbi/stdlib.rbi:10914
    method << (arg0) -> String @ rbi/stdlib.rbi:10923
      argument arg0<> -> Object @ rbi/stdlib.rbi:10920
    method <=> (other) -> Integer | NilClass @ rbi/stdlib.rbi:10929
      argument other<> -> String @ rbi/stdlib.rbi:10926
    method <overload N.1 : []> (arg0) -> String | NilClass @ rbi/stdlib.rbi:10954
      argument arg0<> -> AppliedType {
            klass = ::<constant:Range>
            targs = [
              <constant:Elem> = Integer
            ]
          } | Regexp @ rbi/stdlib.rbi:10955
      argument arg1<optional> @ rbi/stdlib.rbi:10972
    method <overload N.1 : byteslice> (arg0) -> String | NilClass @ rbi/stdlib.rbi:10991
      argument arg0<> -> AppliedType {
        klass = ::<constant:Range>
        targs = [
          <constant:Elem> = Integer
        ]
      } @ rbi/stdlib.rbi:10992
      argument arg1<optional> @ rbi/stdlib.rbi:10995
    method <overload N.1 : codepoints> (blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Integer
      ]
    } @ rbi/stdlib.rbi:11047
      argument blk<block> -> BasicObject @ rbi/stdlib.rbi:11048
    method <overload N.1 : each_byte> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:11102
      argument blk<block> @ rbi/stdlib.rbi:11103
    method <overload N.1 : each_char> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:11109
      argument blk<block> @ rbi/stdlib.rbi:11110
    method <overload N.1 : each_codepoint> () -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:11116
      argument blk<block> @ rbi/stdlib.rbi:11117
    method <overload N.1 : each_line> (arg0) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:11124
      argument arg0<optional> -> String @ rbi/stdlib.rbi:11125
      argument blk<block> @ rbi/stdlib.rbi:11128
    method <overload N.1 : gsub!> (arg0, blk) -> String | NilClass @ rbi/stdlib.rbi:11193
      argument arg0<> -> Regexp | String @ rbi/stdlib.rbi:11194
      argument arg1<optional> @ rbi/stdlib.rbi:11202
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = String
        ]
      } @ rbi/stdlib.rbi:11195
    method <overload N.1 : gsub> (arg0, arg1) -> String @ rbi/stdlib.rbi:11168
      argument arg0<> -> Regexp | String @ rbi/stdlib.rbi:11169
      argument arg1<optional> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:11170
      argument blk<block> @ rbi/stdlib.rbi:11186
    method <overload N.1 : match> (arg0, arg1) -> MatchData @ rbi/stdlib.rbi:11268
      argument arg0<> -> Regexp | String @ rbi/stdlib.rbi:11269
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:11270
    method <overload N.1 : scan> (arg0, blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = AppliedType {
                klass = ::<constant:Array>
                targs = [
                  <constant:Elem> = String
                ]
              } | String
      ]
    } @ rbi/stdlib.rbi:11338
      argument arg0<> -> Regexp | String @ rbi/stdlib.rbi:11339
      argument blk<block> -> BasicObject @ rbi/stdlib.rbi:11340
    method <overload N.1 : scrub!> (arg0, blk) -> String @ rbi/stdlib.rbi:11360
      argument arg0<optional> -> String @ rbi/stdlib.rbi:11361
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = untyped
        ]
      } @ rbi/stdlib.rbi:11362
    method <overload N.1 : scrub> (arg0, blk) -> String @ rbi/stdlib.rbi:11349
      argument arg0<optional> -> String @ rbi/stdlib.rbi:11350
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = untyped
        ]
      } @ rbi/stdlib.rbi:11351
    method <overload N.1 : slice!> (arg0) -> String | NilClass @ rbi/stdlib.rbi:11382
      argument arg0<> -> AppliedType {
            klass = ::<constant:Range>
            targs = [
              <constant:Elem> = Integer
            ]
          } | Regexp @ rbi/stdlib.rbi:11383
      argument arg1<optional> @ rbi/stdlib.rbi:11400
    method <overload N.1 : slice> (arg0) -> String | NilClass @ rbi/stdlib.rbi:11579
      argument arg0<> -> AppliedType {
            klass = ::<constant:Range>
            targs = [
              <constant:Elem> = Integer
            ]
          } | Regexp @ rbi/stdlib.rbi:11580
      argument arg1<optional> @ rbi/stdlib.rbi:11597
    method <overload N.1 : split> (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:11407
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:11408
      argument arg1<optional> @ rbi/stdlib.rbi:11411
    method <overload N.1 : sub!> (arg0, blk) -> String @ rbi/stdlib.rbi:11454
      argument arg0<> -> Regexp | String @ rbi/stdlib.rbi:11455
      argument arg1<optional> @ rbi/stdlib.rbi:11459
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = String
        ]
      } @ rbi/stdlib.rbi:11456
    method <overload N.1 : sub> (arg0, blk) -> String @ rbi/stdlib.rbi:11442
      argument arg0<> -> Regexp | String @ rbi/stdlib.rbi:11443
      argument arg1<optional> @ rbi/stdlib.rbi:11447
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = String
        ]
      } @ rbi/stdlib.rbi:11444
    method <overload N.1 : upto> (arg0, arg1, blk) -> String @ rbi/stdlib.rbi:11557
      argument arg0<> -> String @ rbi/stdlib.rbi:11558
      argument arg1<optional> -> BasicObject @ rbi/stdlib.rbi:11559
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = String
        ]
      } @ rbi/stdlib.rbi:11560
    method <overload N.2 : []> (arg0, arg1) -> String | NilClass @ rbi/stdlib.rbi:10958
      argument arg0<> -> Regexp @ rbi/stdlib.rbi:10959
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:10960
    method <overload N.2 : gsub!> (arg0) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:11198
      argument arg0<> -> Regexp | String @ rbi/stdlib.rbi:11199
      argument arg1<optional> @ rbi/stdlib.rbi:11202
      argument blk<block> @ rbi/stdlib.rbi:11202
    method <overload N.2 : gsub> (arg0, blk) -> String @ rbi/stdlib.rbi:11173
      argument arg0<> -> Regexp | String @ rbi/stdlib.rbi:11174
      argument arg1<optional> @ rbi/stdlib.rbi:11186
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = String
        ]
      } @ rbi/stdlib.rbi:11175
    method <overload N.2 : slice!> (arg0, arg1) -> String | NilClass @ rbi/stdlib.rbi:11386
      argument arg0<> -> Regexp @ rbi/stdlib.rbi:11387
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:11388
    method <overload N.2 : slice> (arg0, arg1) -> String | NilClass @ rbi/stdlib.rbi:11583
      argument arg0<> -> Regexp @ rbi/stdlib.rbi:11584
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:11585
    method <overload N.3 : []> (arg0, arg1) -> String | NilClass @ rbi/stdlib.rbi:10963
      argument arg0<> -> Regexp @ rbi/stdlib.rbi:10964
      argument arg1<optional> -> String @ rbi/stdlib.rbi:10965
    method <overload N.3 : gsub> (arg0) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:11178
      argument arg0<> -> Regexp | String @ rbi/stdlib.rbi:11179
      argument arg1<optional> @ rbi/stdlib.rbi:11186
      argument blk<block> @ rbi/stdlib.rbi:11186
    method <overload N.3 : slice!> (arg0, arg1) -> String | NilClass @ rbi/stdlib.rbi:11391
      argument arg0<> -> Regexp @ rbi/stdlib.rbi:11392
      argument arg1<optional> -> String @ rbi/stdlib.rbi:11393
    method <overload N.3 : slice> (arg0, arg1) -> String | NilClass @ rbi/stdlib.rbi:11588
      argument arg0<> -> Regexp @ rbi/stdlib.rbi:11589
      argument arg1<optional> -> String @ rbi/stdlib.rbi:11590
    method <overload N.4 : []> (arg0) -> String | NilClass @ rbi/stdlib.rbi:10968
      argument arg0<> -> String @ rbi/stdlib.rbi:10969
      argument arg1<optional> @ rbi/stdlib.rbi:10972
    method <overload N.4 : gsub> (arg0) -> String @ rbi/stdlib.rbi:11182
      argument arg0<> -> Regexp | String @ rbi/stdlib.rbi:11183
      argument arg1<optional> @ rbi/stdlib.rbi:11186
      argument blk<block> @ rbi/stdlib.rbi:11186
    method <overload N.4 : slice!> (arg0) -> String | NilClass @ rbi/stdlib.rbi:11396
      argument arg0<> -> String @ rbi/stdlib.rbi:11397
      argument arg1<optional> @ rbi/stdlib.rbi:11400
    method <overload N.4 : slice> (arg0) -> String | NilClass @ rbi/stdlib.rbi:11593
      argument arg0<> -> String @ rbi/stdlib.rbi:11594
      argument arg1<optional> @ rbi/stdlib.rbi:11597
    method == (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:10935
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:10932
    method === (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:10941
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:10938
    method =~ (arg0) -> Integer | NilClass @ rbi/stdlib.rbi:10947
      argument arg0<> -> Object @ rbi/stdlib.rbi:10944
    method [] (arg0, arg1) -> String | NilClass @ rbi/stdlib.rbi:10972
      argument arg0<> -> Integer @ rbi/stdlib.rbi:10950
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:10951
    method ascii_only? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:10975
    method b () -> String @ rbi/stdlib.rbi:10978
    method bytes () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10981
    method bytesize () -> Integer @ rbi/stdlib.rbi:10984
    method byteslice (arg0, arg1) -> String | NilClass @ rbi/stdlib.rbi:10995
      argument arg0<> -> Integer @ rbi/stdlib.rbi:10987
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:10988
    method capitalize () -> String @ rbi/stdlib.rbi:10998
    method capitalize! () -> String | NilClass @ rbi/stdlib.rbi:11001
    method casecmp (arg0) -> NilClass | Integer @ rbi/stdlib.rbi:11007
      argument arg0<> -> String @ rbi/stdlib.rbi:11004
    method center (arg0, arg1) -> String @ rbi/stdlib.rbi:11014
      argument arg0<> -> Integer @ rbi/stdlib.rbi:11010
      argument arg1<optional> -> String @ rbi/stdlib.rbi:11011
    method chars () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:11017
    method chomp (arg0) -> String @ rbi/stdlib.rbi:11023
      argument arg0<optional> -> String @ rbi/stdlib.rbi:11020
    method chomp! (arg0) -> String | NilClass @ rbi/stdlib.rbi:11029
      argument arg0<optional> -> String @ rbi/stdlib.rbi:11026
    method chop () -> String @ rbi/stdlib.rbi:11032
    method chop! () -> String | NilClass @ rbi/stdlib.rbi:11035
    method chr () -> String @ rbi/stdlib.rbi:11038
    method clear () -> String @ rbi/stdlib.rbi:11041
    method clone () -> String @ rbi/stdlib.rbi:11044
    method codepoints () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Integer
      ]
    } @ rbi/stdlib.rbi:11051
      argument blk<block> @ rbi/stdlib.rbi:11051
    method concat (arg0) -> String @ rbi/stdlib.rbi:11057
      argument arg0<> -> Object @ rbi/stdlib.rbi:11054
    method count (arg0, arg1) -> Integer @ rbi/stdlib.rbi:11064
      argument arg0<> -> String @ rbi/stdlib.rbi:11060
      argument arg1<repeated> -> String @ rbi/stdlib.rbi:11061
    method crypt (arg0) -> String @ rbi/stdlib.rbi:11070
      argument arg0<> -> String @ rbi/stdlib.rbi:11067
    method delete (arg0, arg1) -> String @ rbi/stdlib.rbi:11077
      argument arg0<> -> String @ rbi/stdlib.rbi:11073
      argument arg1<repeated> -> String @ rbi/stdlib.rbi:11074
    method delete! (arg0, arg1) -> String | NilClass @ rbi/stdlib.rbi:11084
      argument arg0<> -> String @ rbi/stdlib.rbi:11080
      argument arg1<repeated> -> String @ rbi/stdlib.rbi:11081
    method downcase () -> String @ rbi/stdlib.rbi:11087
    method downcase! () -> String | NilClass @ rbi/stdlib.rbi:11090
    method dump () -> String @ rbi/stdlib.rbi:11093
    method dup () -> String @ rbi/stdlib.rbi:11096
    method each_byte (blk) -> String @ rbi/stdlib.rbi:11103
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = Integer
        ]
      } @ rbi/stdlib.rbi:11099
    method each_char (blk) -> String @ rbi/stdlib.rbi:11110
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = String
        ]
      } @ rbi/stdlib.rbi:11106
    method each_codepoint (blk) -> String @ rbi/stdlib.rbi:11117
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = Integer
        ]
      } @ rbi/stdlib.rbi:11113
    method each_line (arg0, blk) -> String @ rbi/stdlib.rbi:11128
      argument arg0<optional> -> String @ rbi/stdlib.rbi:11120
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = Integer
        ]
      } @ rbi/stdlib.rbi:11121
    method empty? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:11131
    method encoding () -> Encoding @ rbi/stdlib.rbi:11134
    method end_with? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:11140
      argument arg0<repeated> -> String @ rbi/stdlib.rbi:11137
    method eql? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:11146
      argument arg0<> -> String @ rbi/stdlib.rbi:11143
    method force_encoding (arg0) -> String @ rbi/stdlib.rbi:11152
      argument arg0<> -> String | Encoding @ rbi/stdlib.rbi:11149
    method freeze () -> String @ rbi/stdlib.rbi:11155
    method getbyte (arg0) -> Integer | NilClass @ rbi/stdlib.rbi:11161
      argument arg0<> -> Integer @ rbi/stdlib.rbi:11158
    method gsub (arg0, arg1) -> String @ rbi/stdlib.rbi:11186
      argument arg0<> -> Regexp | String @ rbi/stdlib.rbi:11164
      argument arg1<optional> -> String @ rbi/stdlib.rbi:11165
      argument blk<block> @ rbi/stdlib.rbi:11186
    method gsub! (arg0, arg1) -> String | NilClass @ rbi/stdlib.rbi:11202
      argument arg0<> -> Regexp | String @ rbi/stdlib.rbi:11189
      argument arg1<optional> -> String @ rbi/stdlib.rbi:11190
      argument blk<block> @ rbi/stdlib.rbi:11202
    method hash () -> Integer @ rbi/stdlib.rbi:11205
    method hex () -> Integer @ rbi/stdlib.rbi:11208
    method include? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:11214
      argument arg0<> -> String @ rbi/stdlib.rbi:11211
    method index (arg0, arg1) -> Integer | NilClass @ rbi/stdlib.rbi:11221
      argument arg0<> -> Regexp | String @ rbi/stdlib.rbi:11217
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:11218
    method initialize (str) -> Object @ rbi/stdlib.rbi:11227
      argument str<optional> -> String @ rbi/stdlib.rbi:11224
    method insert (arg0, arg1) -> String @ rbi/stdlib.rbi:11234
      argument arg0<> -> Integer @ rbi/stdlib.rbi:11230
      argument arg1<> -> String @ rbi/stdlib.rbi:11231
    method inspect () -> String @ rbi/stdlib.rbi:11237
    method intern () -> Symbol @ rbi/stdlib.rbi:11240
    method length () -> Integer @ rbi/stdlib.rbi:11243
    method lines (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:11249
      argument arg0<optional> -> String @ rbi/stdlib.rbi:11246
    method ljust (arg0, arg1) -> String @ rbi/stdlib.rbi:11256
      argument arg0<> -> Integer @ rbi/stdlib.rbi:11252
      argument arg1<optional> -> String @ rbi/stdlib.rbi:11253
    method lstrip () -> String @ rbi/stdlib.rbi:11259
    method lstrip! () -> String | NilClass @ rbi/stdlib.rbi:11262
    method match (arg0) -> MatchData @ rbi/stdlib.rbi:11273
      argument arg0<> -> Regexp | String @ rbi/stdlib.rbi:11265
      argument arg1<optional> @ rbi/stdlib.rbi:11273
    method next () -> String @ rbi/stdlib.rbi:11276
    method next! () -> String @ rbi/stdlib.rbi:11279
    method oct () -> Integer @ rbi/stdlib.rbi:11282
    method ord () -> Integer @ rbi/stdlib.rbi:11285
    method partition (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:11291
      argument arg0<> -> Regexp | String @ rbi/stdlib.rbi:11288
    method prepend (arg0) -> String @ rbi/stdlib.rbi:11297
      argument arg0<> -> String @ rbi/stdlib.rbi:11294
    method replace (arg0) -> String @ rbi/stdlib.rbi:11303
      argument arg0<> -> String @ rbi/stdlib.rbi:11300
    method reverse () -> String @ rbi/stdlib.rbi:11306
    method rindex (arg0, arg1) -> Integer | NilClass @ rbi/stdlib.rbi:11313
      argument arg0<> -> String | Regexp @ rbi/stdlib.rbi:11309
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:11310
    method rjust (arg0, arg1) -> String @ rbi/stdlib.rbi:11320
      argument arg0<> -> Integer @ rbi/stdlib.rbi:11316
      argument arg1<optional> -> String @ rbi/stdlib.rbi:11317
    method rpartition (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:11326
      argument arg0<> -> String | Regexp @ rbi/stdlib.rbi:11323
    method rstrip () -> String @ rbi/stdlib.rbi:11329
    method rstrip! () -> String @ rbi/stdlib.rbi:11332
    method scan (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = AppliedType {
                klass = ::<constant:Array>
                targs = [
                  <constant:Elem> = String
                ]
              } | String
      ]
    } @ rbi/stdlib.rbi:11343
      argument arg0<> -> Regexp | String @ rbi/stdlib.rbi:11335
      argument blk<block> @ rbi/stdlib.rbi:11343
    method scrub (arg0) -> String @ rbi/stdlib.rbi:11354
      argument arg0<optional> -> String @ rbi/stdlib.rbi:11346
      argument blk<block> @ rbi/stdlib.rbi:11354
    method scrub! (arg0) -> String @ rbi/stdlib.rbi:11365
      argument arg0<optional> -> String @ rbi/stdlib.rbi:11357
      argument blk<block> @ rbi/stdlib.rbi:11365
    method setbyte (arg0, arg1) -> Integer @ rbi/stdlib.rbi:11372
      argument arg0<> -> Integer @ rbi/stdlib.rbi:11368
      argument arg1<> -> Integer @ rbi/stdlib.rbi:11369
    method size () -> Integer @ rbi/stdlib.rbi:11375
    method slice (arg0, arg1) -> String | NilClass @ rbi/stdlib.rbi:11597
      argument arg0<> -> Integer @ rbi/stdlib.rbi:11575
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:11576
    method slice! (arg0, arg1) -> String | NilClass @ rbi/stdlib.rbi:11400
      argument arg0<> -> Integer @ rbi/stdlib.rbi:11378
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:11379
    method split (arg0, arg1) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:11411
      argument arg0<optional> -> Regexp | String @ rbi/stdlib.rbi:11403
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:11404
    method squeeze (arg0) -> String @ rbi/stdlib.rbi:11417
      argument arg0<optional> -> String @ rbi/stdlib.rbi:11414
    method squeeze! (arg0) -> String @ rbi/stdlib.rbi:11423
      argument arg0<optional> -> String @ rbi/stdlib.rbi:11420
    method start_with? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:11429
      argument arg0<repeated> -> String @ rbi/stdlib.rbi:11426
    method strip () -> String @ rbi/stdlib.rbi:11432
    method strip! () -> String @ rbi/stdlib.rbi:11435
    method sub (arg0, arg1) -> String @ rbi/stdlib.rbi:11447
      argument arg0<> -> Regexp | String @ rbi/stdlib.rbi:11438
      argument arg1<optional> -> AppliedType {
            klass = ::<constant:Hash>
            targs = [
              <constant:K> = untyped
              <constant:V> = untyped
              <constant:Elem> = untyped
            ]
          } | String @ rbi/stdlib.rbi:11439
      argument blk<block> @ rbi/stdlib.rbi:11447
    method sub! (arg0, arg1) -> String @ rbi/stdlib.rbi:11459
      argument arg0<> -> Regexp | String @ rbi/stdlib.rbi:11450
      argument arg1<optional> -> String @ rbi/stdlib.rbi:11451
      argument blk<block> @ rbi/stdlib.rbi:11459
    method succ () -> String @ rbi/stdlib.rbi:11462
    method sum (arg0) -> Integer @ rbi/stdlib.rbi:11468
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:11465
    method swapcase () -> String @ rbi/stdlib.rbi:11471
    method swapcase! () -> String | NilClass @ rbi/stdlib.rbi:11474
    method taint () -> String @ rbi/stdlib.rbi:11477
    method to_c () -> Complex @ rbi/stdlib.rbi:11480
    method to_f () -> Float @ rbi/stdlib.rbi:11483
    method to_i (arg0) -> Integer @ rbi/stdlib.rbi:11489
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:11486
    method to_r () -> Rational @ rbi/stdlib.rbi:11492
    method to_s () -> String @ rbi/stdlib.rbi:11495
    method to_str () -> String @ rbi/stdlib.rbi:11498
    method to_sym () -> Symbol @ rbi/stdlib.rbi:11501
    method tr (arg0, arg1) -> String @ rbi/stdlib.rbi:11508
      argument arg0<> -> String @ rbi/stdlib.rbi:11504
      argument arg1<> -> String @ rbi/stdlib.rbi:11505
    method tr! (arg0, arg1) -> String | NilClass @ rbi/stdlib.rbi:11515
      argument arg0<> -> String @ rbi/stdlib.rbi:11511
      argument arg1<> -> String @ rbi/stdlib.rbi:11512
    method tr_s (arg0, arg1) -> String @ rbi/stdlib.rbi:11522
      argument arg0<> -> String @ rbi/stdlib.rbi:11518
      argument arg1<> -> String @ rbi/stdlib.rbi:11519
    method tr_s! (arg0, arg1) -> String | NilClass @ rbi/stdlib.rbi:11529
      argument arg0<> -> String @ rbi/stdlib.rbi:11525
      argument arg1<> -> String @ rbi/stdlib.rbi:11526
    method trust () -> String @ rbi/stdlib.rbi:11532
    method unpack (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:11538
      argument arg0<> -> String @ rbi/stdlib.rbi:11535
    method untaint () -> String @ rbi/stdlib.rbi:11541
    method untrust () -> String @ rbi/stdlib.rbi:11544
    method upcase () -> String @ rbi/stdlib.rbi:11547
    method upcase! () -> String | NilClass @ rbi/stdlib.rbi:11550
    method upto (arg0, arg1) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:11563
      argument arg0<> -> String @ rbi/stdlib.rbi:11553
      argument arg1<optional> -> BasicObject @ rbi/stdlib.rbi:11554
      argument blk<block> @ rbi/stdlib.rbi:11563
    method valid_encoding? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:11566
  class <constant:StringIO>[<constant:Elem>] < ::<constant:Data> (<constant:Enumerable>) -> <Class:StringIO> @ rbi/stdlib.rbi:2130
    method clone () -> AppliedType {
      klass = ::<constant:StringIO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:2135
    method dup () -> AppliedType {
      klass = ::<constant:StringIO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:2138
    method freeze () -> AppliedType {
      klass = ::<constant:StringIO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:2141
    method taint () -> AppliedType {
      klass = ::<constant:StringIO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:2144
    method trust () -> AppliedType {
      klass = ::<constant:StringIO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:2147
    method untaint () -> AppliedType {
      klass = ::<constant:StringIO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:2150
    method untrust () -> AppliedType {
      klass = ::<constant:StringIO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:2153
    typeMember(=) <constant:Elem> -> String @ rbi/stdlib.rbi:2132
  class <constant:StringScanner> < ::<constant:Object> () -> <Class:StringScanner> @ rbi/stdlib.rbi:11600
    method eos? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:11609
    method getch () -> String @ rbi/stdlib.rbi:11612
    method scan (arg0) -> String @ rbi/stdlib.rbi:11618
      argument arg0<> -> Regexp @ rbi/stdlib.rbi:11615
  class <constant:Struct>[<constant:Elem>] < ::<constant:Object> (<constant:Enumerable>) -> <Class:Struct> @ rbi/stdlib.rbi:2156
    method clone () -> AppliedType {
      klass = ::<constant:Struct>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:2161
    method dup () -> AppliedType {
      klass = ::<constant:Struct>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:2164
    method freeze () -> AppliedType {
      klass = ::<constant:Struct>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:2167
    method taint () -> AppliedType {
      klass = ::<constant:Struct>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:2170
    method trust () -> AppliedType {
      klass = ::<constant:Struct>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:2173
    method untaint () -> AppliedType {
      klass = ::<constant:Struct>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:2176
    method untrust () -> AppliedType {
      klass = ::<constant:Struct>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:2179
    typeMember(=) <constant:Elem> -> untyped @ rbi/stdlib.rbi:2158
  class <constant:Symbol> < ::<constant:Object> (<constant:Comparable>) -> <Class:Symbol> @ rbi/stdlib.rbi:11621
    method <=> (other) -> Integer | NilClass @ rbi/stdlib.rbi:11629
      argument other<> -> Symbol @ rbi/stdlib.rbi:11626
    method <overload N.1 : []> (n) -> String @ rbi/stdlib.rbi:11647
      argument idx<> @ rbi/stdlib.rbi:11656
      argument n<optional> -> Integer @ rbi/stdlib.rbi:11649
    method <overload N.1 : slice> (n) -> String @ rbi/stdlib.rbi:11734
      argument idx<> @ rbi/stdlib.rbi:11743
      argument n<optional> -> Integer @ rbi/stdlib.rbi:11736
    method <overload N.2 : []> () -> String @ rbi/stdlib.rbi:11652
      argument idx<> @ rbi/stdlib.rbi:11656
      argument n<optional> @ rbi/stdlib.rbi:11656
    method <overload N.2 : slice> () -> String @ rbi/stdlib.rbi:11739
      argument idx<> @ rbi/stdlib.rbi:11743
      argument n<optional> @ rbi/stdlib.rbi:11743
    method == (obj) -> TrueClass | FalseClass @ rbi/stdlib.rbi:11635
      argument obj<> -> BasicObject @ rbi/stdlib.rbi:11632
    method =~ (obj) -> Integer | NilClass @ rbi/stdlib.rbi:11641
      argument obj<> -> BasicObject @ rbi/stdlib.rbi:11638
    method [] (idx) -> String @ rbi/stdlib.rbi:11656
      argument idx<> -> Integer @ rbi/stdlib.rbi:11644
      argument n<optional> @ rbi/stdlib.rbi:11656
    method capitalize () -> Symbol @ rbi/stdlib.rbi:11659
    method casecmp (other) -> Integer | NilClass @ rbi/stdlib.rbi:11665
      argument other<> -> Symbol @ rbi/stdlib.rbi:11662
    method clone () -> Symbol @ rbi/stdlib.rbi:11668
    method downcase () -> Symbol @ rbi/stdlib.rbi:11671
    method dup () -> Symbol @ rbi/stdlib.rbi:11674
    method empty? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:11677
    method encoding () -> Encoding @ rbi/stdlib.rbi:11680
    method freeze () -> Symbol @ rbi/stdlib.rbi:11683
    method id2name () -> String @ rbi/stdlib.rbi:11686
    method inspect () -> String @ rbi/stdlib.rbi:11689
    method intern () -> Symbol @ rbi/stdlib.rbi:11692
    method length () -> Integer @ rbi/stdlib.rbi:11695
    method match (obj) -> Integer | NilClass @ rbi/stdlib.rbi:11701
      argument obj<> -> BasicObject @ rbi/stdlib.rbi:11698
    method size () -> Integer @ rbi/stdlib.rbi:11728
    method slice (idx) -> String @ rbi/stdlib.rbi:11743
      argument idx<> -> Integer @ rbi/stdlib.rbi:11731
      argument n<optional> @ rbi/stdlib.rbi:11743
    method succ () -> Symbol @ rbi/stdlib.rbi:11704
    method swapcase () -> Symbol @ rbi/stdlib.rbi:11707
    method taint () -> Symbol @ rbi/stdlib.rbi:11710
    method to_proc () -> Proc @ rbi/stdlib.rbi:11713
    method to_s () -> String @ rbi/stdlib.rbi:11746
    method to_sym () -> Symbol @ rbi/stdlib.rbi:11749
    method trust () -> Symbol @ rbi/stdlib.rbi:11716
    method untaint () -> Symbol @ rbi/stdlib.rbi:11719
    method untrust () -> Symbol @ rbi/stdlib.rbi:11722
    method upcase () -> Symbol @ rbi/stdlib.rbi:11725
  class <constant:SyntaxError> < ::<constant:ScriptError> () -> <Class:SyntaxError> @ rbi/stdlib.rbi:11752
    method clone () -> SyntaxError @ rbi/stdlib.rbi:11754
    method dup () -> SyntaxError @ rbi/stdlib.rbi:11757
    method freeze () -> SyntaxError @ rbi/stdlib.rbi:11760
    method taint () -> SyntaxError @ rbi/stdlib.rbi:11763
    method trust () -> SyntaxError @ rbi/stdlib.rbi:11766
    method untaint () -> SyntaxError @ rbi/stdlib.rbi:11769
    method untrust () -> SyntaxError @ rbi/stdlib.rbi:11772
  class <constant:SystemCallError> < ::<constant:StandardError> () -> <Class:SystemCallError> @ rbi/stdlib.rbi:11775
    method clone () -> SystemCallError @ rbi/stdlib.rbi:11777
    method dup () -> SystemCallError @ rbi/stdlib.rbi:11780
    method freeze () -> SystemCallError @ rbi/stdlib.rbi:11783
    method taint () -> SystemCallError @ rbi/stdlib.rbi:11786
    method trust () -> SystemCallError @ rbi/stdlib.rbi:11789
    method untaint () -> SystemCallError @ rbi/stdlib.rbi:11792
    method untrust () -> SystemCallError @ rbi/stdlib.rbi:11795
  class <constant:SystemExit> < ::<constant:Exception> () -> <Class:SystemExit> @ rbi/stdlib.rbi:11798
    method clone () -> SystemExit @ rbi/stdlib.rbi:11800
    method dup () -> SystemExit @ rbi/stdlib.rbi:11803
    method freeze () -> SystemExit @ rbi/stdlib.rbi:11806
    method taint () -> SystemExit @ rbi/stdlib.rbi:11809
    method trust () -> SystemExit @ rbi/stdlib.rbi:11812
    method untaint () -> SystemExit @ rbi/stdlib.rbi:11815
    method untrust () -> SystemExit @ rbi/stdlib.rbi:11818
  class <constant:SystemStackError> < ::<constant:Exception> () -> <Class:SystemStackError> @ rbi/stdlib.rbi:11821
    method clone () -> SystemStackError @ rbi/stdlib.rbi:11823
    method dup () -> SystemStackError @ rbi/stdlib.rbi:11826
    method freeze () -> SystemStackError @ rbi/stdlib.rbi:11829
    method taint () -> SystemStackError @ rbi/stdlib.rbi:11832
    method trust () -> SystemStackError @ rbi/stdlib.rbi:11835
    method untaint () -> SystemStackError @ rbi/stdlib.rbi:11838
    method untrust () -> SystemStackError @ rbi/stdlib.rbi:11841
  class <constant:T> < ::<constant:Object> () -> <Class:T> @ ???
    class <constant:Array> () -> <Class:T::Array> @ ???
    class <constant:Enumerable> () -> <Class:T::Enumerable> @ ???
    class <constant:Generic> (<constant:BasicObject>, <constant:Helpers>) -> <Class:T::Generic> @ rbi/t.rbi:3
    class <constant:Hash> () -> <Class:T::Hash> @ ???
    class <constant:Helpers> (<constant:BasicObject>) -> <Class:T::Helpers> @ rbi/t.rbi:1
    class <constant:Proc> () -> <Class:T::Proc> @ ???
    class <singleton class:<constant:Array>> < ::<constant:Module> () @ ???
    class <singleton class:<constant:Enumerable>> < ::<constant:Module> () @ ???
    class <singleton class:<constant:Generic>> < ::<constant:Module> () @ rbi/t.rbi:3
    class <singleton class:<constant:Hash>> < ::<constant:Module> () @ ???
    class <singleton class:<constant:Helpers>> < ::<constant:Module> () @ rbi/t.rbi:1
    class <singleton class:<constant:Proc>> < ::<constant:Module> () @ ???
    method all () @ ???
    method any () @ ???
    method nilable () @ ???
    method untyped () @ ???
  class <constant:Thread> < ::<constant:Object> () -> <Class:Thread> @ rbi/stdlib.rbi:11844
    class <constant:Backtrace> < ::<constant:Object> () -> <Class:Thread::Backtrace> @ rbi/stdlib.rbi:656
      class <constant:Location> < ::<constant:Object> () -> <Class:Thread::Backtrace::Location> @ rbi/stdlib.rbi:658
      class <singleton class:<constant:Location>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:658
    class <constant:ConditionVariable> < ::<constant:Object> () -> <Class:Thread::ConditionVariable> @ rbi/stdlib.rbi:660
    class <constant:Mutex> < ::<constant:Object> () -> <Class:Thread::Mutex> @ rbi/stdlib.rbi:662
    class <constant:Queue> < ::<constant:Object> () -> <Class:Thread::Queue> @ rbi/stdlib.rbi:664
    class <constant:SizedQueue> < ::<constant:Thread>::<constant:Queue> () -> <Class:Thread::SizedQueue> @ rbi/stdlib.rbi:666
    class <singleton class:<constant:Backtrace>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:656
    class <singleton class:<constant:ConditionVariable>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:660
    class <singleton class:<constant:Mutex>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:662
    class <singleton class:<constant:Queue>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:664
    class <singleton class:<constant:SizedQueue>> < ::<constant:Thread>::<singleton class:<constant:Queue>> () @ rbi/stdlib.rbi:666
    method clone () -> Thread @ rbi/stdlib.rbi:11846
    method dup () -> Thread @ rbi/stdlib.rbi:11849
    method freeze () -> Thread @ rbi/stdlib.rbi:11852
    method taint () -> Thread @ rbi/stdlib.rbi:11855
    method trust () -> Thread @ rbi/stdlib.rbi:11858
    method untaint () -> Thread @ rbi/stdlib.rbi:11861
    method untrust () -> Thread @ rbi/stdlib.rbi:11864
  class <constant:ThreadError> < ::<constant:StandardError> () -> <Class:ThreadError> @ rbi/stdlib.rbi:11867
    method clone () -> ThreadError @ rbi/stdlib.rbi:11869
    method dup () -> ThreadError @ rbi/stdlib.rbi:11872
    method freeze () -> ThreadError @ rbi/stdlib.rbi:11875
    method taint () -> ThreadError @ rbi/stdlib.rbi:11878
    method trust () -> ThreadError @ rbi/stdlib.rbi:11881
    method untaint () -> ThreadError @ rbi/stdlib.rbi:11884
    method untrust () -> ThreadError @ rbi/stdlib.rbi:11887
  class <constant:ThreadGroup> < ::<constant:Object> () -> <Class:ThreadGroup> @ rbi/stdlib.rbi:11890
    method clone () -> ThreadGroup @ rbi/stdlib.rbi:11892
    method dup () -> ThreadGroup @ rbi/stdlib.rbi:11895
    method freeze () -> ThreadGroup @ rbi/stdlib.rbi:11898
    method taint () -> ThreadGroup @ rbi/stdlib.rbi:11901
    method trust () -> ThreadGroup @ rbi/stdlib.rbi:11904
    method untaint () -> ThreadGroup @ rbi/stdlib.rbi:11907
    method untrust () -> ThreadGroup @ rbi/stdlib.rbi:11910
  class <constant:Time> < ::<constant:Object> (<constant:Comparable>) -> <Class:Time> @ rbi/stdlib.rbi:11913
    method + (arg0) -> Time @ rbi/stdlib.rbi:11972
      argument arg0<> -> Numeric @ rbi/stdlib.rbi:11969
    method - (arg0) -> Float @ rbi/stdlib.rbi:11982
      argument arg0<> -> Time @ rbi/stdlib.rbi:11975
    method <=> (other) -> Integer | NilClass @ rbi/stdlib.rbi:11988
      argument other<> -> Time @ rbi/stdlib.rbi:11985
    method <overload N.1 : -> (arg0) -> Time @ rbi/stdlib.rbi:11978
      argument arg0<> -> Numeric @ rbi/stdlib.rbi:11979
    method asctime () -> String @ rbi/stdlib.rbi:11991
    method clone () -> Time @ rbi/stdlib.rbi:11994
    method ctime () -> String @ rbi/stdlib.rbi:11997
    method day () -> Integer @ rbi/stdlib.rbi:12000
    method dst? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:12003
    method dup () -> Time @ rbi/stdlib.rbi:12006
    method eql? (arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:12012
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:12009
    method freeze () -> Time @ rbi/stdlib.rbi:12015
    method friday? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:12018
    method getgm () -> Time @ rbi/stdlib.rbi:12021
    method getlocal (utc_offset) -> Time @ rbi/stdlib.rbi:12027
      argument utc_offset<optional> -> Integer @ rbi/stdlib.rbi:12024
    method getutc () -> Time @ rbi/stdlib.rbi:12030
    method gmt? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:12033
    method gmt_offset () -> Integer @ rbi/stdlib.rbi:12036
    method gmtime () -> Time @ rbi/stdlib.rbi:12039
    method gmtoff () -> Integer @ rbi/stdlib.rbi:12195
    method hash () -> Integer @ rbi/stdlib.rbi:12042
    method hour () -> Integer @ rbi/stdlib.rbi:12045
    method initialize (year, month, day, hour, min, sec, usec_with_frac) -> Object @ rbi/stdlib.rbi:12057
      argument day<optional> -> Integer @ rbi/stdlib.rbi:12050
      argument hour<optional> -> Integer @ rbi/stdlib.rbi:12051
      argument min<optional> -> Integer @ rbi/stdlib.rbi:12052
      argument month<optional> -> Integer | String @ rbi/stdlib.rbi:12049
      argument sec<optional> -> Numeric @ rbi/stdlib.rbi:12053
      argument usec_with_frac<optional> -> Numeric @ rbi/stdlib.rbi:12054
      argument year<optional> -> Integer @ rbi/stdlib.rbi:12048
    method inspect () -> String @ rbi/stdlib.rbi:12060
    method isdst () -> TrueClass | FalseClass @ rbi/stdlib.rbi:12063
    method localtime (utc_offset) -> Time @ rbi/stdlib.rbi:12069
      argument utc_offset<optional> -> String @ rbi/stdlib.rbi:12066
    method mday () -> Integer @ rbi/stdlib.rbi:12072
    method min () -> Integer @ rbi/stdlib.rbi:12075
    method mon () -> Integer @ rbi/stdlib.rbi:12078
    method monday? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:12081
    method month () -> Integer @ rbi/stdlib.rbi:12198
    method nsec () -> Integer @ rbi/stdlib.rbi:12084
    method round (arg0) -> Time @ rbi/stdlib.rbi:12090
      argument arg0<> -> Integer @ rbi/stdlib.rbi:12087
    method saturday? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:12093
    method sec () -> Integer @ rbi/stdlib.rbi:12096
    method strftime (arg0) -> String @ rbi/stdlib.rbi:12102
      argument arg0<> -> String @ rbi/stdlib.rbi:12099
    method subsec () -> Numeric @ rbi/stdlib.rbi:12105
    method succ () -> Time @ rbi/stdlib.rbi:12108
    method sunday? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:12111
    method taint () -> Time @ rbi/stdlib.rbi:12114
    method thursday? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:12117
    method to_a () -> TupleType {
      0 = Integer
      1 = Integer
      2 = Integer
      3 = Integer
      4 = Integer
      5 = Integer
      6 = Integer
      7 = Integer
      8 = TrueClass | FalseClass
      9 = String
    } @ rbi/stdlib.rbi:12120
    method to_date () -> Date @ rbi/date.rbi:498
    method to_datetime () -> DateTime @ rbi/date.rbi:501
    method to_f () -> Float @ rbi/stdlib.rbi:12123
    method to_i () -> Numeric @ rbi/stdlib.rbi:12126
    method to_r () -> Rational @ rbi/stdlib.rbi:12129
    method to_s () -> String @ rbi/stdlib.rbi:12132
    method to_time () -> Time @ rbi/date.rbi:495
    method trust () -> Time @ rbi/stdlib.rbi:12135
    method tuesday? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:12138
    method tv_nsec () -> Numeric @ rbi/stdlib.rbi:12141
    method tv_sec () -> Numeric @ rbi/stdlib.rbi:12144
    method tv_usec () -> Numeric @ rbi/stdlib.rbi:12147
    method untaint () -> Time @ rbi/stdlib.rbi:12150
    method untrust () -> Time @ rbi/stdlib.rbi:12153
    method usec () -> Numeric @ rbi/stdlib.rbi:12156
    method utc () -> Time @ rbi/stdlib.rbi:12159
    method utc? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:12162
    method utc_offset () -> Integer @ rbi/stdlib.rbi:12165
    method wday () -> Integer @ rbi/stdlib.rbi:12168
    method wednesday? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:12171
    method yday () -> Integer @ rbi/stdlib.rbi:12174
    method year () -> Integer @ rbi/stdlib.rbi:12177
    method zone () -> String @ rbi/stdlib.rbi:12180
    static-field <constant:RFC2822_DAY_NAME> -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12898
    static-field <constant:RFC2822_MONTH_NAME> -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12899
  class <constant:TracePoint> < ::<constant:Object> () -> <Class:TracePoint> @ rbi/stdlib.rbi:12201
    method clone () -> TracePoint @ rbi/stdlib.rbi:12203
    method dup () -> TracePoint @ rbi/stdlib.rbi:12206
    method freeze () -> TracePoint @ rbi/stdlib.rbi:12209
    method taint () -> TracePoint @ rbi/stdlib.rbi:12212
    method trust () -> TracePoint @ rbi/stdlib.rbi:12215
    method untaint () -> TracePoint @ rbi/stdlib.rbi:12218
    method untrust () -> TracePoint @ rbi/stdlib.rbi:12221
  class <constant:TrueClass> < ::<constant:Object> () -> <Class:TrueClass> @ rbi/stdlib.rbi:12224
    method clone () -> TrueClass @ rbi/stdlib.rbi:12226
    method dup () -> TrueClass @ rbi/stdlib.rbi:12229
    method freeze () -> TrueClass @ rbi/stdlib.rbi:12232
    method taint () -> TrueClass @ rbi/stdlib.rbi:12235
    method trust () -> TrueClass @ rbi/stdlib.rbi:12238
    method untaint () -> TrueClass @ rbi/stdlib.rbi:12241
    method untrust () -> TrueClass @ rbi/stdlib.rbi:12244
  class <constant:TypeError> < ::<constant:StandardError> () -> <Class:TypeError> @ rbi/stdlib.rbi:12247
    method clone () -> TypeError @ rbi/stdlib.rbi:12249
    method dup () -> TypeError @ rbi/stdlib.rbi:12252
    method freeze () -> TypeError @ rbi/stdlib.rbi:12255
    method taint () -> TypeError @ rbi/stdlib.rbi:12258
    method trust () -> TypeError @ rbi/stdlib.rbi:12261
    method untaint () -> TypeError @ rbi/stdlib.rbi:12264
    method untrust () -> TypeError @ rbi/stdlib.rbi:12267
  class <constant:URI> (<constant:BasicObject>) -> <Class:URI> @ rbi/stdlib.rbi:12270
    class <constant:BadURIError> < ::<constant:URI>::<constant:Error> () -> <Class:URI::BadURIError> @ rbi/stdlib.rbi:687
    class <constant:Error> < ::<constant:StandardError> () -> <Class:URI::Error> @ rbi/stdlib.rbi:685
    class <constant:Escape> (<constant:BasicObject>) -> <Class:URI::Escape> @ rbi/stdlib.rbi:689
    class <constant:FTP> < ::<constant:URI>::<constant:Generic> () -> <Class:URI::FTP> @ rbi/stdlib.rbi:695
      static-field <constant:ABS_PATH> -> Regexp @ rbi/stdlib.rbi:12906
      static-field <constant:ABS_URI> -> Regexp @ rbi/stdlib.rbi:12907
      static-field <constant:ABS_URI_REF> -> Regexp @ rbi/stdlib.rbi:12908
      static-field <constant:COMPONENT> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:12909
      static-field <constant:DEFAULT_PARSER> -> URI::RFC2396_Parser @ rbi/stdlib.rbi:12910
      static-field <constant:DEFAULT_PORT> -> Integer @ rbi/stdlib.rbi:12911
      static-field <constant:ESCAPED> -> Regexp @ rbi/stdlib.rbi:12912
      static-field <constant:FRAGMENT> -> Regexp @ rbi/stdlib.rbi:12913
      static-field <constant:HOST> -> Regexp @ rbi/stdlib.rbi:12914
      static-field <constant:HTML5ASCIIINCOMPAT> -> String @ rbi/stdlib.rbi:12915
      static-field <constant:OPAQUE> -> Regexp @ rbi/stdlib.rbi:12916
      static-field <constant:PORT> -> Regexp @ rbi/stdlib.rbi:12917
      static-field <constant:QUERY> -> Regexp @ rbi/stdlib.rbi:12918
      static-field <constant:REGISTRY> -> Regexp @ rbi/stdlib.rbi:12919
      static-field <constant:REL_PATH> -> Regexp @ rbi/stdlib.rbi:12920
      static-field <constant:REL_URI> -> Regexp @ rbi/stdlib.rbi:12921
      static-field <constant:REL_URI_REF> -> Regexp @ rbi/stdlib.rbi:12922
      static-field <constant:RFC3986_PARSER> -> URI::RFC3986_Parser @ rbi/stdlib.rbi:12923
      static-field <constant:SCHEME> -> Regexp @ rbi/stdlib.rbi:12924
      static-field <constant:TBLDECWWWCOMP_> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:12925
      static-field <constant:TBLENCWWWCOMP_> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:12926
      static-field <constant:TYPECODE> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:12927
      static-field <constant:TYPECODE_PREFIX> -> String @ rbi/stdlib.rbi:12928
      static-field <constant:UNSAFE> -> Regexp @ rbi/stdlib.rbi:12929
      static-field <constant:URI_REF> -> Regexp @ rbi/stdlib.rbi:12930
      static-field <constant:USERINFO> -> Regexp @ rbi/stdlib.rbi:12931
      static-field <constant:USE_REGISTRY> -> FalseClass @ rbi/stdlib.rbi:12932
      static-field <constant:VERSION> -> String @ rbi/stdlib.rbi:12933
      static-field <constant:VERSION_CODE> -> String @ rbi/stdlib.rbi:12934
      static-field <constant:WEB_ENCODINGS_> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:12935
    class <constant:Generic> < ::<constant:Object> (<constant:URI>, <constant:RFC2396_REGEXP>) -> <Class:URI::Generic> @ rbi/stdlib.rbi:691
      static-field <constant:ABS_PATH> -> Regexp @ rbi/stdlib.rbi:12936
      static-field <constant:ABS_URI> -> Regexp @ rbi/stdlib.rbi:12937
      static-field <constant:ABS_URI_REF> -> Regexp @ rbi/stdlib.rbi:12938
      static-field <constant:COMPONENT> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:12939
      static-field <constant:DEFAULT_PARSER> -> URI::RFC2396_Parser @ rbi/stdlib.rbi:12940
      static-field <constant:DEFAULT_PORT> -> NilClass @ rbi/stdlib.rbi:12941
      static-field <constant:ESCAPED> -> Regexp @ rbi/stdlib.rbi:12942
      static-field <constant:FRAGMENT> -> Regexp @ rbi/stdlib.rbi:12943
      static-field <constant:HOST> -> Regexp @ rbi/stdlib.rbi:12944
      static-field <constant:HTML5ASCIIINCOMPAT> -> String @ rbi/stdlib.rbi:12945
      static-field <constant:OPAQUE> -> Regexp @ rbi/stdlib.rbi:12946
      static-field <constant:PORT> -> Regexp @ rbi/stdlib.rbi:12947
      static-field <constant:QUERY> -> Regexp @ rbi/stdlib.rbi:12948
      static-field <constant:REGISTRY> -> Regexp @ rbi/stdlib.rbi:12949
      static-field <constant:REL_PATH> -> Regexp @ rbi/stdlib.rbi:12950
      static-field <constant:REL_URI> -> Regexp @ rbi/stdlib.rbi:12951
      static-field <constant:REL_URI_REF> -> Regexp @ rbi/stdlib.rbi:12952
      static-field <constant:RFC3986_PARSER> -> URI::RFC3986_Parser @ rbi/stdlib.rbi:12953
      static-field <constant:SCHEME> -> Regexp @ rbi/stdlib.rbi:12954
      static-field <constant:TBLDECWWWCOMP_> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:12955
      static-field <constant:TBLENCWWWCOMP_> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:12956
      static-field <constant:UNSAFE> -> Regexp @ rbi/stdlib.rbi:12957
      static-field <constant:URI_REF> -> Regexp @ rbi/stdlib.rbi:12958
      static-field <constant:USERINFO> -> Regexp @ rbi/stdlib.rbi:12959
      static-field <constant:USE_REGISTRY> -> FalseClass @ rbi/stdlib.rbi:12960
      static-field <constant:VERSION> -> String @ rbi/stdlib.rbi:12961
      static-field <constant:VERSION_CODE> -> String @ rbi/stdlib.rbi:12962
      static-field <constant:WEB_ENCODINGS_> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:12963
    class <constant:HTTP> < ::<constant:URI>::<constant:Generic> () -> <Class:URI::HTTP> @ rbi/stdlib.rbi:697
      static-field <constant:ABS_PATH> -> Regexp @ rbi/stdlib.rbi:12966
      static-field <constant:ABS_URI> -> Regexp @ rbi/stdlib.rbi:12967
      static-field <constant:ABS_URI_REF> -> Regexp @ rbi/stdlib.rbi:12968
      static-field <constant:COMPONENT> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:12969
      static-field <constant:DEFAULT_PARSER> -> URI::RFC2396_Parser @ rbi/stdlib.rbi:12970
      static-field <constant:DEFAULT_PORT> -> Integer @ rbi/stdlib.rbi:12971
      static-field <constant:ESCAPED> -> Regexp @ rbi/stdlib.rbi:12972
      static-field <constant:FRAGMENT> -> Regexp @ rbi/stdlib.rbi:12973
      static-field <constant:HOST> -> Regexp @ rbi/stdlib.rbi:12974
      static-field <constant:HTML5ASCIIINCOMPAT> -> String @ rbi/stdlib.rbi:12975
      static-field <constant:OPAQUE> -> Regexp @ rbi/stdlib.rbi:12976
      static-field <constant:PORT> -> Regexp @ rbi/stdlib.rbi:12977
      static-field <constant:QUERY> -> Regexp @ rbi/stdlib.rbi:12978
      static-field <constant:REGISTRY> -> Regexp @ rbi/stdlib.rbi:12979
      static-field <constant:REL_PATH> -> Regexp @ rbi/stdlib.rbi:12980
      static-field <constant:REL_URI> -> Regexp @ rbi/stdlib.rbi:12981
      static-field <constant:REL_URI_REF> -> Regexp @ rbi/stdlib.rbi:12982
      static-field <constant:RFC3986_PARSER> -> URI::RFC3986_Parser @ rbi/stdlib.rbi:12983
      static-field <constant:SCHEME> -> Regexp @ rbi/stdlib.rbi:12984
      static-field <constant:TBLDECWWWCOMP_> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:12985
      static-field <constant:TBLENCWWWCOMP_> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:12986
      static-field <constant:UNSAFE> -> Regexp @ rbi/stdlib.rbi:12987
      static-field <constant:URI_REF> -> Regexp @ rbi/stdlib.rbi:12988
      static-field <constant:USERINFO> -> Regexp @ rbi/stdlib.rbi:12989
      static-field <constant:USE_REGISTRY> -> FalseClass @ rbi/stdlib.rbi:12990
      static-field <constant:VERSION> -> String @ rbi/stdlib.rbi:12991
      static-field <constant:VERSION_CODE> -> String @ rbi/stdlib.rbi:12992
      static-field <constant:WEB_ENCODINGS_> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:12993
    class <constant:HTTPS> < ::<constant:URI>::<constant:HTTP> () -> <Class:URI::HTTPS> @ rbi/stdlib.rbi:699
      static-field <constant:ABS_PATH> -> Regexp @ rbi/stdlib.rbi:12994
      static-field <constant:ABS_URI> -> Regexp @ rbi/stdlib.rbi:12995
      static-field <constant:ABS_URI_REF> -> Regexp @ rbi/stdlib.rbi:12996
      static-field <constant:COMPONENT> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:12997
      static-field <constant:DEFAULT_PARSER> -> URI::RFC2396_Parser @ rbi/stdlib.rbi:12998
      static-field <constant:DEFAULT_PORT> -> Integer @ rbi/stdlib.rbi:12999
      static-field <constant:ESCAPED> -> Regexp @ rbi/stdlib.rbi:13000
      static-field <constant:FRAGMENT> -> Regexp @ rbi/stdlib.rbi:13001
      static-field <constant:HOST> -> Regexp @ rbi/stdlib.rbi:13002
      static-field <constant:HTML5ASCIIINCOMPAT> -> String @ rbi/stdlib.rbi:13003
      static-field <constant:OPAQUE> -> Regexp @ rbi/stdlib.rbi:13004
      static-field <constant:PORT> -> Regexp @ rbi/stdlib.rbi:13005
      static-field <constant:QUERY> -> Regexp @ rbi/stdlib.rbi:13006
      static-field <constant:REGISTRY> -> Regexp @ rbi/stdlib.rbi:13007
      static-field <constant:REL_PATH> -> Regexp @ rbi/stdlib.rbi:13008
      static-field <constant:REL_URI> -> Regexp @ rbi/stdlib.rbi:13009
      static-field <constant:REL_URI_REF> -> Regexp @ rbi/stdlib.rbi:13010
      static-field <constant:RFC3986_PARSER> -> URI::RFC3986_Parser @ rbi/stdlib.rbi:13011
      static-field <constant:SCHEME> -> Regexp @ rbi/stdlib.rbi:13012
      static-field <constant:TBLDECWWWCOMP_> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:13013
      static-field <constant:TBLENCWWWCOMP_> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:13014
      static-field <constant:UNSAFE> -> Regexp @ rbi/stdlib.rbi:13015
      static-field <constant:URI_REF> -> Regexp @ rbi/stdlib.rbi:13016
      static-field <constant:USERINFO> -> Regexp @ rbi/stdlib.rbi:13017
      static-field <constant:USE_REGISTRY> -> FalseClass @ rbi/stdlib.rbi:13018
      static-field <constant:VERSION> -> String @ rbi/stdlib.rbi:13019
      static-field <constant:VERSION_CODE> -> String @ rbi/stdlib.rbi:13020
      static-field <constant:WEB_ENCODINGS_> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:13021
    class <constant:InvalidComponentError> < ::<constant:URI>::<constant:Error> () -> <Class:URI::InvalidComponentError> @ rbi/stdlib.rbi:701
    class <constant:InvalidURIError> < ::<constant:URI>::<constant:Error> () -> <Class:URI::InvalidURIError> @ rbi/stdlib.rbi:703
    class <constant:LDAP> < ::<constant:URI>::<constant:Generic> () -> <Class:URI::LDAP> @ rbi/stdlib.rbi:705
      static-field <constant:ABS_PATH> -> Regexp @ rbi/stdlib.rbi:13022
      static-field <constant:ABS_URI> -> Regexp @ rbi/stdlib.rbi:13023
      static-field <constant:ABS_URI_REF> -> Regexp @ rbi/stdlib.rbi:13024
      static-field <constant:COMPONENT> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:13025
      static-field <constant:DEFAULT_PARSER> -> URI::RFC2396_Parser @ rbi/stdlib.rbi:13026
      static-field <constant:DEFAULT_PORT> -> Integer @ rbi/stdlib.rbi:13027
      static-field <constant:ESCAPED> -> Regexp @ rbi/stdlib.rbi:13028
      static-field <constant:FRAGMENT> -> Regexp @ rbi/stdlib.rbi:13029
      static-field <constant:HOST> -> Regexp @ rbi/stdlib.rbi:13030
      static-field <constant:HTML5ASCIIINCOMPAT> -> String @ rbi/stdlib.rbi:13031
      static-field <constant:OPAQUE> -> Regexp @ rbi/stdlib.rbi:13032
      static-field <constant:PORT> -> Regexp @ rbi/stdlib.rbi:13033
      static-field <constant:QUERY> -> Regexp @ rbi/stdlib.rbi:13034
      static-field <constant:REGISTRY> -> Regexp @ rbi/stdlib.rbi:13035
      static-field <constant:REL_PATH> -> Regexp @ rbi/stdlib.rbi:13036
      static-field <constant:REL_URI> -> Regexp @ rbi/stdlib.rbi:13037
      static-field <constant:REL_URI_REF> -> Regexp @ rbi/stdlib.rbi:13038
      static-field <constant:RFC3986_PARSER> -> URI::RFC3986_Parser @ rbi/stdlib.rbi:13039
      static-field <constant:SCHEME> -> Regexp @ rbi/stdlib.rbi:13040
      static-field <constant:SCOPE> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:13041
      static-field <constant:SCOPE_BASE> -> String @ rbi/stdlib.rbi:13042
      static-field <constant:SCOPE_ONE> -> String @ rbi/stdlib.rbi:13043
      static-field <constant:SCOPE_SUB> -> String @ rbi/stdlib.rbi:13044
      static-field <constant:TBLDECWWWCOMP_> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:13045
      static-field <constant:TBLENCWWWCOMP_> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:13046
      static-field <constant:UNSAFE> -> Regexp @ rbi/stdlib.rbi:13047
      static-field <constant:URI_REF> -> Regexp @ rbi/stdlib.rbi:13048
      static-field <constant:USERINFO> -> Regexp @ rbi/stdlib.rbi:13049
      static-field <constant:USE_REGISTRY> -> FalseClass @ rbi/stdlib.rbi:13050
      static-field <constant:VERSION> -> String @ rbi/stdlib.rbi:13051
      static-field <constant:VERSION_CODE> -> String @ rbi/stdlib.rbi:13052
      static-field <constant:WEB_ENCODINGS_> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:13053
    class <constant:LDAPS> < ::<constant:URI>::<constant:LDAP> () -> <Class:URI::LDAPS> @ rbi/stdlib.rbi:707
      static-field <constant:ABS_PATH> -> Regexp @ rbi/stdlib.rbi:13054
      static-field <constant:ABS_URI> -> Regexp @ rbi/stdlib.rbi:13055
      static-field <constant:ABS_URI_REF> -> Regexp @ rbi/stdlib.rbi:13056
      static-field <constant:COMPONENT> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:13057
      static-field <constant:DEFAULT_PARSER> -> URI::RFC2396_Parser @ rbi/stdlib.rbi:13058
      static-field <constant:DEFAULT_PORT> -> Integer @ rbi/stdlib.rbi:13059
      static-field <constant:ESCAPED> -> Regexp @ rbi/stdlib.rbi:13060
      static-field <constant:FRAGMENT> -> Regexp @ rbi/stdlib.rbi:13061
      static-field <constant:HOST> -> Regexp @ rbi/stdlib.rbi:13062
      static-field <constant:HTML5ASCIIINCOMPAT> -> String @ rbi/stdlib.rbi:13063
      static-field <constant:OPAQUE> -> Regexp @ rbi/stdlib.rbi:13064
      static-field <constant:PORT> -> Regexp @ rbi/stdlib.rbi:13065
      static-field <constant:QUERY> -> Regexp @ rbi/stdlib.rbi:13066
      static-field <constant:REGISTRY> -> Regexp @ rbi/stdlib.rbi:13067
      static-field <constant:REL_PATH> -> Regexp @ rbi/stdlib.rbi:13068
      static-field <constant:REL_URI> -> Regexp @ rbi/stdlib.rbi:13069
      static-field <constant:REL_URI_REF> -> Regexp @ rbi/stdlib.rbi:13070
      static-field <constant:RFC3986_PARSER> -> URI::RFC3986_Parser @ rbi/stdlib.rbi:13071
      static-field <constant:SCHEME> -> Regexp @ rbi/stdlib.rbi:13072
      static-field <constant:SCOPE> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:13073
      static-field <constant:SCOPE_BASE> -> String @ rbi/stdlib.rbi:13074
      static-field <constant:SCOPE_ONE> -> String @ rbi/stdlib.rbi:13075
      static-field <constant:SCOPE_SUB> -> String @ rbi/stdlib.rbi:13076
      static-field <constant:TBLDECWWWCOMP_> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:13077
      static-field <constant:TBLENCWWWCOMP_> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:13078
      static-field <constant:UNSAFE> -> Regexp @ rbi/stdlib.rbi:13079
      static-field <constant:URI_REF> -> Regexp @ rbi/stdlib.rbi:13080
      static-field <constant:USERINFO> -> Regexp @ rbi/stdlib.rbi:13081
      static-field <constant:USE_REGISTRY> -> FalseClass @ rbi/stdlib.rbi:13082
      static-field <constant:VERSION> -> String @ rbi/stdlib.rbi:13083
      static-field <constant:VERSION_CODE> -> String @ rbi/stdlib.rbi:13084
      static-field <constant:WEB_ENCODINGS_> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:13085
    class <constant:MailTo> < ::<constant:URI>::<constant:Generic> () -> <Class:URI::MailTo> @ rbi/stdlib.rbi:709
      static-field <constant:ABS_PATH> -> Regexp @ rbi/stdlib.rbi:13086
      static-field <constant:ABS_URI> -> Regexp @ rbi/stdlib.rbi:13087
      static-field <constant:ABS_URI_REF> -> Regexp @ rbi/stdlib.rbi:13088
      static-field <constant:COMPONENT> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:13089
      static-field <constant:DEFAULT_PARSER> -> URI::RFC2396_Parser @ rbi/stdlib.rbi:13090
      static-field <constant:DEFAULT_PORT> -> NilClass @ rbi/stdlib.rbi:13091
      static-field <constant:EMAIL_REGEXP> -> Regexp @ rbi/stdlib.rbi:13092
      static-field <constant:ESCAPED> -> Regexp @ rbi/stdlib.rbi:13093
      static-field <constant:FRAGMENT> -> Regexp @ rbi/stdlib.rbi:13094
      static-field <constant:HEADER_REGEXP> -> Regexp @ rbi/stdlib.rbi:13095
      static-field <constant:HOST> -> Regexp @ rbi/stdlib.rbi:13096
      static-field <constant:HTML5ASCIIINCOMPAT> -> String @ rbi/stdlib.rbi:13097
      static-field <constant:OPAQUE> -> Regexp @ rbi/stdlib.rbi:13098
      static-field <constant:PORT> -> Regexp @ rbi/stdlib.rbi:13099
      static-field <constant:QUERY> -> Regexp @ rbi/stdlib.rbi:13100
      static-field <constant:REGISTRY> -> Regexp @ rbi/stdlib.rbi:13101
      static-field <constant:REL_PATH> -> Regexp @ rbi/stdlib.rbi:13102
      static-field <constant:REL_URI> -> Regexp @ rbi/stdlib.rbi:13103
      static-field <constant:REL_URI_REF> -> Regexp @ rbi/stdlib.rbi:13104
      static-field <constant:RFC3986_PARSER> -> URI::RFC3986_Parser @ rbi/stdlib.rbi:13105
      static-field <constant:SCHEME> -> Regexp @ rbi/stdlib.rbi:13106
      static-field <constant:TBLDECWWWCOMP_> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:13107
      static-field <constant:TBLENCWWWCOMP_> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:13108
      static-field <constant:UNSAFE> -> Regexp @ rbi/stdlib.rbi:13109
      static-field <constant:URI_REF> -> Regexp @ rbi/stdlib.rbi:13110
      static-field <constant:USERINFO> -> Regexp @ rbi/stdlib.rbi:13111
      static-field <constant:USE_REGISTRY> -> FalseClass @ rbi/stdlib.rbi:13112
      static-field <constant:VERSION> -> String @ rbi/stdlib.rbi:13113
      static-field <constant:VERSION_CODE> -> String @ rbi/stdlib.rbi:13114
      static-field <constant:WEB_ENCODINGS_> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = untyped
          <constant:V> = untyped
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:13115
    class <constant:RFC2396_Parser> < ::<constant:Object> (<constant:RFC2396_REGEXP>) -> <Class:URI::RFC2396_Parser> @ rbi/stdlib.rbi:711
    class <constant:RFC2396_REGEXP> (<constant:BasicObject>) -> <Class:URI::RFC2396_REGEXP> @ rbi/stdlib.rbi:681
      class <constant:PATTERN> (<constant:BasicObject>) -> <Class:URI::RFC2396_REGEXP::PATTERN> @ rbi/stdlib.rbi:714
        static-field <constant:ABS_PATH> -> String @ rbi/stdlib.rbi:13123
        static-field <constant:ABS_URI> -> String @ rbi/stdlib.rbi:13124
        static-field <constant:ALNUM> -> String @ rbi/stdlib.rbi:13125
        static-field <constant:ALPHA> -> String @ rbi/stdlib.rbi:13126
        static-field <constant:DOMLABEL> -> String @ rbi/stdlib.rbi:13127
        static-field <constant:ESCAPED> -> String @ rbi/stdlib.rbi:13128
        static-field <constant:FRAGMENT> -> String @ rbi/stdlib.rbi:13129
        static-field <constant:HEX> -> String @ rbi/stdlib.rbi:13130
        static-field <constant:HIER_PART> -> String @ rbi/stdlib.rbi:13131
        static-field <constant:HOST> -> String @ rbi/stdlib.rbi:13132
        static-field <constant:HOSTNAME> -> String @ rbi/stdlib.rbi:13133
        static-field <constant:HOSTPORT> -> String @ rbi/stdlib.rbi:13134
        static-field <constant:IPV4ADDR> -> String @ rbi/stdlib.rbi:13135
        static-field <constant:IPV6ADDR> -> String @ rbi/stdlib.rbi:13136
        static-field <constant:IPV6REF> -> String @ rbi/stdlib.rbi:13137
        static-field <constant:NET_PATH> -> String @ rbi/stdlib.rbi:13138
        static-field <constant:OPAQUE_PART> -> String @ rbi/stdlib.rbi:13139
        static-field <constant:PATH_SEGMENTS> -> String @ rbi/stdlib.rbi:13140
        static-field <constant:PORT> -> String @ rbi/stdlib.rbi:13141
        static-field <constant:QUERY> -> String @ rbi/stdlib.rbi:13142
        static-field <constant:REG_NAME> -> String @ rbi/stdlib.rbi:13143
        static-field <constant:REL_PATH> -> String @ rbi/stdlib.rbi:13144
        static-field <constant:REL_SEGMENT> -> String @ rbi/stdlib.rbi:13145
        static-field <constant:REL_URI> -> String @ rbi/stdlib.rbi:13146
        static-field <constant:RESERVED> -> String @ rbi/stdlib.rbi:13147
        static-field <constant:SCHEME> -> String @ rbi/stdlib.rbi:13148
        static-field <constant:TOPLABEL> -> String @ rbi/stdlib.rbi:13149
        static-field <constant:UNRESERVED> -> String @ rbi/stdlib.rbi:13150
        static-field <constant:URIC> -> String @ rbi/stdlib.rbi:13151
        static-field <constant:URIC_NO_SLASH> -> String @ rbi/stdlib.rbi:13152
        static-field <constant:URI_REF> -> String @ rbi/stdlib.rbi:13153
        static-field <constant:USERINFO> -> String @ rbi/stdlib.rbi:13154
        static-field <constant:X_ABS_URI> -> String @ rbi/stdlib.rbi:13155
        static-field <constant:X_REL_URI> -> String @ rbi/stdlib.rbi:13156
      class <singleton class:<constant:PATTERN>> < ::<constant:Module> () @ rbi/stdlib.rbi:714
    class <constant:RFC3986_Parser> < ::<constant:Object> () -> <Class:URI::RFC3986_Parser> @ rbi/stdlib.rbi:716
      static-field <constant:RFC3986_URI> -> Regexp @ rbi/stdlib.rbi:13158
    class <constant:Util> (<constant:BasicObject>) -> <Class:URI::Util> @ rbi/stdlib.rbi:718
    class <singleton class:<constant:BadURIError>> < ::<constant:URI>::<singleton class:<constant:Error>> () @ rbi/stdlib.rbi:687
    class <singleton class:<constant:Error>> < ::<singleton class:<constant:StandardError>> () @ rbi/stdlib.rbi:685
    class <singleton class:<constant:Escape>> < ::<constant:Module> () @ rbi/stdlib.rbi:689
    class <singleton class:<constant:FTP>> < ::<constant:URI>::<singleton class:<constant:Generic>> () @ rbi/stdlib.rbi:695
    class <singleton class:<constant:Generic>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:691
    class <singleton class:<constant:HTTP>> < ::<constant:URI>::<singleton class:<constant:Generic>> () @ rbi/stdlib.rbi:697
    class <singleton class:<constant:HTTPS>> < ::<constant:URI>::<singleton class:<constant:HTTP>> () @ rbi/stdlib.rbi:699
    class <singleton class:<constant:InvalidComponentError>> < ::<constant:URI>::<singleton class:<constant:Error>> () @ rbi/stdlib.rbi:701
    class <singleton class:<constant:InvalidURIError>> < ::<constant:URI>::<singleton class:<constant:Error>> () @ rbi/stdlib.rbi:703
    class <singleton class:<constant:LDAP>> < ::<constant:URI>::<singleton class:<constant:Generic>> () @ rbi/stdlib.rbi:705
    class <singleton class:<constant:LDAPS>> < ::<constant:URI>::<singleton class:<constant:LDAP>> () @ rbi/stdlib.rbi:707
    class <singleton class:<constant:MailTo>> < ::<constant:URI>::<singleton class:<constant:Generic>> () @ rbi/stdlib.rbi:709
    class <singleton class:<constant:RFC2396_Parser>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:711
    class <singleton class:<constant:RFC2396_REGEXP>> < ::<constant:Module> () @ rbi/stdlib.rbi:681
    class <singleton class:<constant:RFC3986_Parser>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:716
    class <singleton class:<constant:Util>> < ::<constant:Module> () @ rbi/stdlib.rbi:718
    static-field <constant:ABS_PATH> -> Regexp @ rbi/stdlib.rbi:12900
    static-field <constant:ABS_URI> -> Regexp @ rbi/stdlib.rbi:12901
    static-field <constant:ABS_URI_REF> -> Regexp @ rbi/stdlib.rbi:12902
    static-field <constant:DEFAULT_PARSER> -> URI::RFC2396_Parser @ rbi/stdlib.rbi:12903
    static-field <constant:ESCAPED> -> Regexp @ rbi/stdlib.rbi:12904
    static-field <constant:FRAGMENT> -> Regexp @ rbi/stdlib.rbi:12905
    static-field <constant:HOST> -> Regexp @ rbi/stdlib.rbi:12964
    static-field <constant:HTML5ASCIIINCOMPAT> -> String @ rbi/stdlib.rbi:12965
    static-field <constant:OPAQUE> -> Regexp @ rbi/stdlib.rbi:13116
    static-field <constant:PORT> -> Regexp @ rbi/stdlib.rbi:13117
    static-field <constant:QUERY> -> Regexp @ rbi/stdlib.rbi:13118
    static-field <constant:REGISTRY> -> Regexp @ rbi/stdlib.rbi:13119
    static-field <constant:REL_PATH> -> Regexp @ rbi/stdlib.rbi:13120
    static-field <constant:REL_URI> -> Regexp @ rbi/stdlib.rbi:13121
    static-field <constant:REL_URI_REF> -> Regexp @ rbi/stdlib.rbi:13122
    static-field <constant:RFC3986_PARSER> -> URI::RFC3986_Parser @ rbi/stdlib.rbi:13157
    static-field <constant:SCHEME> -> Regexp @ rbi/stdlib.rbi:13159
    static-field <constant:TBLDECWWWCOMP_> -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:13160
    static-field <constant:TBLENCWWWCOMP_> -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:13161
    static-field <constant:UNSAFE> -> Regexp @ rbi/stdlib.rbi:13162
    static-field <constant:URI_REF> -> Regexp @ rbi/stdlib.rbi:13163
    static-field <constant:USERINFO> -> Regexp @ rbi/stdlib.rbi:13164
    static-field <constant:VERSION> -> String @ rbi/stdlib.rbi:13165
    static-field <constant:VERSION_CODE> -> String @ rbi/stdlib.rbi:13166
    static-field <constant:WEB_ENCODINGS_> -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:13167
  class <constant:UnboundMethod> < ::<constant:Object> () -> <Class:UnboundMethod> @ rbi/stdlib.rbi:12350
    method clone () -> UnboundMethod @ rbi/stdlib.rbi:12352
    method dup () -> UnboundMethod @ rbi/stdlib.rbi:12355
    method freeze () -> UnboundMethod @ rbi/stdlib.rbi:12358
    method taint () -> UnboundMethod @ rbi/stdlib.rbi:12361
    method trust () -> UnboundMethod @ rbi/stdlib.rbi:12364
    method untaint () -> UnboundMethod @ rbi/stdlib.rbi:12367
    method untrust () -> UnboundMethod @ rbi/stdlib.rbi:12370
  class <constant:UncaughtThrowError> < ::<constant:ArgumentError> () -> <Class:UncaughtThrowError> @ rbi/stdlib.rbi:12373
    method clone () -> UncaughtThrowError @ rbi/stdlib.rbi:12375
    method dup () -> UncaughtThrowError @ rbi/stdlib.rbi:12378
    method freeze () -> UncaughtThrowError @ rbi/stdlib.rbi:12381
    method taint () -> UncaughtThrowError @ rbi/stdlib.rbi:12384
    method trust () -> UncaughtThrowError @ rbi/stdlib.rbi:12387
    method untaint () -> UncaughtThrowError @ rbi/stdlib.rbi:12390
    method untrust () -> UncaughtThrowError @ rbi/stdlib.rbi:12393
  class <constant:Warning> (<constant:BasicObject>) -> <Class:Warning> @ rbi/stdlib.rbi:724
  class <constant:ZeroDivisionError> < ::<constant:StandardError> () -> <Class:ZeroDivisionError> @ rbi/stdlib.rbi:12396
    method clone () -> ZeroDivisionError @ rbi/stdlib.rbi:12398
    method dup () -> ZeroDivisionError @ rbi/stdlib.rbi:12401
    method freeze () -> ZeroDivisionError @ rbi/stdlib.rbi:12404
    method taint () -> ZeroDivisionError @ rbi/stdlib.rbi:12407
    method trust () -> ZeroDivisionError @ rbi/stdlib.rbi:12410
    method untaint () -> ZeroDivisionError @ rbi/stdlib.rbi:12413
    method untrust () -> ZeroDivisionError @ rbi/stdlib.rbi:12416
  class <constant:nil> < ::<constant:Object> () -> NilClass @ ???
  class <constant:untyped> () -> untyped @ ???
  class <singleton class:<constant:<<JUNK>>>> < ::<constant:Module> () @ ???
  class <singleton class:<constant:<root>>> < ::<singleton class:<constant:Object>> () @ ???
  class <singleton class:<constant:<todo sym>>> < ::<constant:Module> () @ ???
  class <singleton class:<constant:Abbrev>> < ::<constant:Module> () @ rbi/stdlib.rbi:1
    method abbrev (words) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = String
        <constant:V> = String
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:2187
      argument words<> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = String
        ]
      } @ rbi/stdlib.rbi:2184
  class <singleton class:<constant:ArgumentError>> < ::<singleton class:<constant:StandardError>> () @ rbi/stdlib.rbi:14
  class <singleton class:<constant:Array>> < ::<singleton class:<constant:Object>> (<constant:Generic>) @ ???
    method [] (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:2221
      argument arg0<repeated> -> BasicObject @ rbi/stdlib.rbi:2218
  class <singleton class:<constant:Base64>> < ::<constant:Module> () @ rbi/stdlib.rbi:2826
    method decode64 (str) -> String @ rbi/stdlib.rbi:2831
      argument str<> -> String @ rbi/stdlib.rbi:2828
    method encode64 (bin) -> String @ rbi/stdlib.rbi:2837
      argument bin<> -> String @ rbi/stdlib.rbi:2834
    method strict_decode64 (str) -> String @ rbi/stdlib.rbi:2843
      argument str<> -> String @ rbi/stdlib.rbi:2840
    method strict_encode64 (bin) -> String @ rbi/stdlib.rbi:2849
      argument bin<> -> String @ rbi/stdlib.rbi:2846
    method urlsafe_decode64 (str) -> String @ rbi/stdlib.rbi:2855
      argument str<> -> String @ rbi/stdlib.rbi:2852
    method urlsafe_encode64 (bin) -> String @ rbi/stdlib.rbi:2861
      argument bin<> -> String @ rbi/stdlib.rbi:2858
  class <singleton class:<constant:BasicObject>> < ::<constant:Class> () @ ???
  class <singleton class:<constant:Benchmark>> < ::<constant:Module> () @ rbi/stdlib.rbi:21
    method benchmark (caption, label_width, format, labels) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Benchmark::Tms
      ]
    } @ rbi/stdlib.rbi:2924
      argument caption<> -> String @ rbi/stdlib.rbi:2918
      argument format<optional> -> String @ rbi/stdlib.rbi:2920
      argument label_width<optional> -> Integer @ rbi/stdlib.rbi:2919
      argument labels<repeated> -> String @ rbi/stdlib.rbi:2921
    method bm (label_width, labels, blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Benchmark::Tms
      ]
    } @ rbi/stdlib.rbi:2932
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = NilClass
          <constant:Arg0> = Process
        ]
      } @ rbi/stdlib.rbi:2929
      argument label_width<optional> -> Integer @ rbi/stdlib.rbi:2927
      argument labels<repeated> -> String @ rbi/stdlib.rbi:2928
    method bmbm (width, blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Benchmark::Tms
      ]
    } @ rbi/stdlib.rbi:2939
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = NilClass
          <constant:Arg0> = Process
        ]
      } @ rbi/stdlib.rbi:2936
      argument width<optional> -> Integer @ rbi/stdlib.rbi:2935
    method measure (label) -> Benchmark::Tms @ rbi/stdlib.rbi:2945
      argument label<optional> -> String @ rbi/stdlib.rbi:2942
    method realtime (blk) -> Integer @ rbi/stdlib.rbi:2951
      argument blk<block> -> BasicObject @ rbi/stdlib.rbi:2948
  class <singleton class:<constant:BigDecimal>> < ::<singleton class:<constant:Numeric>> () @ rbi/stdlib.rbi:34
  class <singleton class:<constant:BigMath>> < ::<constant:Module> () @ rbi/stdlib.rbi:36
    method exp (arg0, arg1) -> BigDecimal @ rbi/stdlib.rbi:3468
      argument arg0<> -> Integer @ rbi/stdlib.rbi:3464
      argument arg1<> -> Integer @ rbi/stdlib.rbi:3465
    method log (arg0, arg1) -> BigDecimal @ rbi/stdlib.rbi:3475
      argument arg0<> -> Integer @ rbi/stdlib.rbi:3471
      argument arg1<> -> Integer @ rbi/stdlib.rbi:3472
  class <singleton class:<constant:Binding>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:38
  class <singleton class:<constant:CSV>> < ::<singleton class:<constant:Object>> (<constant:Generic>) @ rbi/stdlib.rbi:40
    method foreach (path, options, blk) -> NilClass @ rbi/stdlib.rbi:738
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = AppliedType {
              klass = ::<constant:Array>
              targs = [
                <constant:Elem> = String
              ]
            }
        ]
      } @ rbi/stdlib.rbi:735
      argument options<optional> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = Symbol
          <constant:V> = BasicObject
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:734
      argument path<> -> AppliedType {
            klass = ::<constant:File>
            targs = [
              <constant:Elem> = untyped
            ]
          } | String @ rbi/stdlib.rbi:733
  class <singleton class:<constant:Class>> < ::<singleton class:<constant:Module>> () @ ???
  class <singleton class:<constant:ClosedQueueError>> < ::<singleton class:<constant:StopIteration>> () @ rbi/stdlib.rbi:66
  class <singleton class:<constant:Comparable>> < ::<constant:Module> () @ rbi/stdlib.rbi:29
  class <singleton class:<constant:Complex>> < ::<singleton class:<constant:Numeric>> () @ ???
  class <singleton class:<constant:Coverage>> < ::<constant:Module> () @ rbi/stdlib.rbi:70
    method result () -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = String
        <constant:V> = AppliedType {
            klass = ::<constant:Array>
            targs = [
              <constant:Elem> = Integer | NilClass
            ]
          }
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:3920
    method start () -> NilClass @ rbi/stdlib.rbi:3923
  class <singleton class:<constant:Data>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:72
  class <singleton class:<constant:Date>> < ::<singleton class:<constant:Object>> () @ rbi/date.rbi:1
    method _httpdate (arg0) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/date.rbi:357
      argument arg0<> -> String @ rbi/date.rbi:356
    method _iso8601 (arg0) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/date.rbi:327
      argument arg0<> -> String @ rbi/date.rbi:326
    method _jisx0301 (arg0) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/date.rbi:363
      argument arg0<> -> String @ rbi/date.rbi:362
    method _load (arg0) -> untyped @ rbi/date.rbi:269
      argument arg0<> -> untyped @ rbi/date.rbi:268
    method _parse (arg0, comp) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/date.rbi:324
      argument arg0<> -> String @ rbi/date.rbi:320
      argument comp<optional> -> TrueClass | FalseClass @ rbi/date.rbi:321
    method _rfc2822 (arg0) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/date.rbi:345
      argument arg0<> -> String @ rbi/date.rbi:344
    method _rfc3339 (arg0) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/date.rbi:333
      argument arg0<> -> String @ rbi/date.rbi:332
    method _rfc822 (arg0) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/date.rbi:348
      argument arg0<> -> String @ rbi/date.rbi:347
    method _strptime (arg0) -> untyped @ rbi/date.rbi:314
      argument arg0<repeated> -> untyped @ rbi/date.rbi:313
    method _xmlschema (arg0) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/date.rbi:339
      argument arg0<> -> String @ rbi/date.rbi:338
    method civil (arg0) -> untyped @ rbi/date.rbi:308
      argument arg0<repeated> -> untyped @ rbi/date.rbi:307
    method commercial (arg0) -> untyped @ rbi/date.rbi:311
      argument arg0<repeated> -> untyped @ rbi/date.rbi:310
    method gregorian_leap? (arg0) -> untyped @ rbi/date.rbi:299
      argument arg0<> -> untyped @ rbi/date.rbi:298
    method httpdate (arg0) -> untyped @ rbi/date.rbi:360
      argument arg0<repeated> -> untyped @ rbi/date.rbi:359
    method iso8601 (arg0) -> untyped @ rbi/date.rbi:330
      argument arg0<repeated> -> untyped @ rbi/date.rbi:329
    method jd (arg0) -> untyped @ rbi/date.rbi:278
      argument arg0<repeated> -> untyped @ rbi/date.rbi:277
    method jisx0301 (arg0) -> untyped @ rbi/date.rbi:366
      argument arg0<repeated> -> untyped @ rbi/date.rbi:365
    method julian_leap? (arg0) -> untyped @ rbi/date.rbi:296
      argument arg0<> -> untyped @ rbi/date.rbi:295
    method leap? (arg0) -> untyped @ rbi/date.rbi:302
      argument arg0<> -> untyped @ rbi/date.rbi:301
    method new (arg0) -> untyped @ rbi/date.rbi:266
      argument arg0<repeated> -> untyped @ rbi/date.rbi:265
    method ordinal (arg0) -> untyped @ rbi/date.rbi:305
      argument arg0<repeated> -> untyped @ rbi/date.rbi:304
    method parse (arg0) -> untyped @ rbi/date.rbi:275
      argument arg0<repeated> -> untyped @ rbi/date.rbi:274
    method rfc2822 (arg0) -> untyped @ rbi/date.rbi:351
      argument arg0<repeated> -> untyped @ rbi/date.rbi:350
    method rfc3339 (arg0) -> untyped @ rbi/date.rbi:336
      argument arg0<repeated> -> untyped @ rbi/date.rbi:335
    method rfc822 (arg0) -> untyped @ rbi/date.rbi:354
      argument arg0<repeated> -> untyped @ rbi/date.rbi:353
    method strptime (arg0) -> untyped @ rbi/date.rbi:317
      argument arg0<repeated> -> untyped @ rbi/date.rbi:316
    method today (arg0) -> untyped @ rbi/date.rbi:272
      argument arg0<repeated> -> untyped @ rbi/date.rbi:271
    method valid_civil? (arg0) -> untyped @ rbi/date.rbi:287
      argument arg0<repeated> -> untyped @ rbi/date.rbi:286
    method valid_commercial? (arg0) -> untyped @ rbi/date.rbi:293
      argument arg0<repeated> -> untyped @ rbi/date.rbi:292
    method valid_date? (arg0) -> untyped @ rbi/date.rbi:290
      argument arg0<repeated> -> untyped @ rbi/date.rbi:289
    method valid_jd? (arg0) -> untyped @ rbi/date.rbi:281
      argument arg0<repeated> -> untyped @ rbi/date.rbi:280
    method valid_ordinal? (arg0) -> untyped @ rbi/date.rbi:284
      argument arg0<repeated> -> untyped @ rbi/date.rbi:283
    method xmlschema (arg0) -> untyped @ rbi/date.rbi:342
      argument arg0<repeated> -> untyped @ rbi/date.rbi:341
  class <singleton class:<constant:DateTime>> < ::<singleton class:<constant:Date>> () @ rbi/date.rbi:369
    method _strptime (arg0, format) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/date.rbi:466
      argument arg0<> -> String @ rbi/date.rbi:462
      argument format<optional> -> String @ rbi/date.rbi:463
    method civil (arg0) -> untyped @ rbi/date.rbi:456
      argument arg0<repeated> -> untyped @ rbi/date.rbi:455
    method commercial (arg0) -> untyped @ rbi/date.rbi:459
      argument arg0<repeated> -> untyped @ rbi/date.rbi:458
    method httpdate (arg0) -> untyped @ rbi/date.rbi:487
      argument arg0<repeated> -> untyped @ rbi/date.rbi:486
    method iso8601 (arg0) -> untyped @ rbi/date.rbi:472
      argument arg0<repeated> -> untyped @ rbi/date.rbi:471
    method jd (arg0) -> untyped @ rbi/date.rbi:450
      argument arg0<repeated> -> untyped @ rbi/date.rbi:449
    method jisx0301 (arg0) -> untyped @ rbi/date.rbi:490
      argument arg0<repeated> -> untyped @ rbi/date.rbi:489
    method new (arg0) -> untyped @ rbi/date.rbi:441
      argument arg0<repeated> -> untyped @ rbi/date.rbi:440
    method now (arg0) -> untyped @ rbi/date.rbi:444
      argument arg0<repeated> -> untyped @ rbi/date.rbi:443
    method ordinal (arg0) -> untyped @ rbi/date.rbi:453
      argument arg0<repeated> -> untyped @ rbi/date.rbi:452
    method parse (arg0) -> untyped @ rbi/date.rbi:447
      argument arg0<repeated> -> untyped @ rbi/date.rbi:446
    method rfc2822 (arg0) -> untyped @ rbi/date.rbi:481
      argument arg0<repeated> -> untyped @ rbi/date.rbi:480
    method rfc3339 (arg0) -> untyped @ rbi/date.rbi:475
      argument arg0<repeated> -> untyped @ rbi/date.rbi:474
    method rfc822 (arg0) -> untyped @ rbi/date.rbi:484
      argument arg0<repeated> -> untyped @ rbi/date.rbi:483
    method strptime (arg0) -> untyped @ rbi/date.rbi:469
      argument arg0<repeated> -> untyped @ rbi/date.rbi:468
    method xmlschema (arg0) -> untyped @ rbi/date.rbi:478
      argument arg0<repeated> -> untyped @ rbi/date.rbi:477
  class <singleton class:<constant:DidYouMean>> < ::<constant:Module> () @ rbi/stdlib.rbi:81
  class <singleton class:<constant:Dir>> < ::<singleton class:<constant:Object>> (<constant:Generic>) @ rbi/stdlib.rbi:105
    method <overload N.1 : []> (pattern, flags, blk) -> NilClass @ rbi/stdlib.rbi:951
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = String
        ]
      } @ rbi/stdlib.rbi:954
      argument flags<optional> -> Integer @ rbi/stdlib.rbi:953
      argument pattern<> -> AppliedType {
            klass = ::<constant:Array>
            targs = [
              <constant:Elem> = String
            ]
          } | String @ rbi/stdlib.rbi:952
    method <overload N.1 : chdir> (arg0, blk) -> untyped @ rbi/stdlib.rbi:770
      argument arg0<optional> -> String | Pathname @ rbi/stdlib.rbi:771
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = String
        ]
      } @ rbi/stdlib.rbi:772
    method <overload N.1 : foreach> (dir, arg0) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:808
      argument arg0<optional> -> Encoding @ rbi/stdlib.rbi:810
      argument blk<block> @ rbi/stdlib.rbi:813
      argument dir<> -> String @ rbi/stdlib.rbi:809
    method <overload N.1 : glob> (pattern, flags, blk) -> NilClass @ rbi/stdlib.rbi:823
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = String
        ]
      } @ rbi/stdlib.rbi:826
      argument flags<optional> -> Integer @ rbi/stdlib.rbi:825
      argument pattern<> -> AppliedType {
            klass = ::<constant:Array>
            targs = [
              <constant:Elem> = String
            ]
          } | String @ rbi/stdlib.rbi:824
    method <overload N.1 : open> (arg0, arg1, blk) -> untyped @ rbi/stdlib.rbi:849
      argument arg0<> -> String @ rbi/stdlib.rbi:850
      argument arg1<optional> -> Encoding @ rbi/stdlib.rbi:851
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = AppliedType {
              klass = ::<constant:Dir>
              targs = [
                <constant:Elem> = String
              ]
            }
        ]
      } @ rbi/stdlib.rbi:852
    method [] (pattern, flags) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:957
      argument blk<block> @ rbi/stdlib.rbi:957
      argument flags<optional> -> Integer @ rbi/stdlib.rbi:948
      argument pattern<> -> AppliedType {
            klass = ::<constant:Array>
            targs = [
              <constant:Elem> = String
            ]
          } | String @ rbi/stdlib.rbi:947
    method chdir (arg0) -> Integer @ rbi/stdlib.rbi:775
      argument arg0<optional> -> String | Pathname @ rbi/stdlib.rbi:767
      argument blk<block> @ rbi/stdlib.rbi:775
    method chroot (arg0) -> Integer @ rbi/stdlib.rbi:781
      argument arg0<> -> String @ rbi/stdlib.rbi:778
    method delete (arg0) -> Integer @ rbi/stdlib.rbi:787
      argument arg0<> -> String @ rbi/stdlib.rbi:784
    method entries (arg0, arg1) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:794
      argument arg0<> -> String @ rbi/stdlib.rbi:790
      argument arg1<optional> -> Encoding @ rbi/stdlib.rbi:791
    method exist? (file) -> TrueClass | FalseClass @ rbi/stdlib.rbi:800
      argument file<> -> String @ rbi/stdlib.rbi:797
    method foreach (dir, arg0, blk) -> NilClass @ rbi/stdlib.rbi:813
      argument arg0<optional> -> Encoding @ rbi/stdlib.rbi:804
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = String
        ]
      } @ rbi/stdlib.rbi:805
      argument dir<> -> String @ rbi/stdlib.rbi:803
    method getwd () -> String @ rbi/stdlib.rbi:816
    method glob (pattern, flags) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:829
      argument blk<block> @ rbi/stdlib.rbi:829
      argument flags<optional> -> Integer @ rbi/stdlib.rbi:820
      argument pattern<> -> AppliedType {
            klass = ::<constant:Array>
            targs = [
              <constant:Elem> = String
            ]
          } | String @ rbi/stdlib.rbi:819
    method home (arg0) -> String @ rbi/stdlib.rbi:835
      argument arg0<optional> -> String @ rbi/stdlib.rbi:832
    method mkdir (arg0, arg1) -> Integer @ rbi/stdlib.rbi:842
      argument arg0<> -> String @ rbi/stdlib.rbi:838
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:839
    method open (arg0, arg1) -> AppliedType {
      klass = ::<constant:Dir>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:855
      argument arg0<> -> String @ rbi/stdlib.rbi:845
      argument arg1<optional> -> Encoding @ rbi/stdlib.rbi:846
      argument blk<block> @ rbi/stdlib.rbi:855
    method pwd () -> String @ rbi/stdlib.rbi:858
    method rmdir (arg0) -> Integer @ rbi/stdlib.rbi:864
      argument arg0<> -> String @ rbi/stdlib.rbi:861
    method unlink (arg0) -> Integer @ rbi/stdlib.rbi:870
      argument arg0<> -> String @ rbi/stdlib.rbi:867
  class <singleton class:<constant:EOFError>> < ::<singleton class:<constant:IOError>> () @ rbi/stdlib.rbi:110
  class <singleton class:<constant:Encoding>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:112
    method <overload N.1 : default_external=> (arg0) -> Encoding @ rbi/stdlib.rbi:4036
      argument arg0<> -> Encoding @ rbi/stdlib.rbi:4037
    method <overload N.1 : default_internal=> (arg0) -> Encoding | NilClass @ rbi/stdlib.rbi:4049
      argument arg0<> -> Encoding @ rbi/stdlib.rbi:4050
    method aliases () -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = String
        <constant:V> = String
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:4020
    method compatible? (obj1, obj2) -> Encoding | NilClass @ rbi/stdlib.rbi:4027
      argument obj1<> -> BasicObject @ rbi/stdlib.rbi:4023
      argument obj2<> -> BasicObject @ rbi/stdlib.rbi:4024
    method default_external () -> Encoding @ rbi/stdlib.rbi:4030
    method default_external= (arg0) -> String @ rbi/stdlib.rbi:4040
      argument arg0<> -> String @ rbi/stdlib.rbi:4033
    method default_internal () -> Encoding @ rbi/stdlib.rbi:4043
    method default_internal= (arg0) -> String | NilClass @ rbi/stdlib.rbi:4053
      argument arg0<> -> String @ rbi/stdlib.rbi:4046
    method find (arg0) -> Encoding @ rbi/stdlib.rbi:4059
      argument arg0<> -> String | Encoding @ rbi/stdlib.rbi:4056
    method list () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Encoding
      ]
    } @ rbi/stdlib.rbi:4062
    method name_list () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:4065
  class <singleton class:<constant:EncodingError>> < ::<singleton class:<constant:StandardError>> () @ rbi/stdlib.rbi:114
  class <singleton class:<constant:Enumerable>> < ::<constant:Module> (<constant:Generic>) @ ???
  class <singleton class:<constant:Enumerator>> < ::<singleton class:<constant:Object>> (<constant:Generic>) @ rbi/stdlib.rbi:126
  class <singleton class:<constant:Errno>> < ::<constant:Module> () @ rbi/stdlib.rbi:136
  class <singleton class:<constant:Exception>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:10
  class <singleton class:<constant:FalseClass>> < ::<singleton class:<constant:Object>> () @ ???
  class <singleton class:<constant:Fiber>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:406
  class <singleton class:<constant:FiberError>> < ::<singleton class:<constant:StandardError>> () @ rbi/stdlib.rbi:408
  class <singleton class:<constant:File>> < ::<singleton class:<constant:IO>> (<constant:Generic>) @ ???
    method <overload N.1 : binread> (arg0, arg1) -> String @ rbi/stdlib.rbi:988
      argument arg0<> -> String @ rbi/stdlib.rbi:989
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:990
      argument arg2<optional> @ rbi/stdlib.rbi:999
    method <overload N.1 : open> (file, modearg, perm, opt, mode, external_encoding, internal_encoding, encoding, textmode, binmode, autoclose, blk) -> untyped @ rbi/stdlib.rbi:1176
      argument autoclose<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1187
      argument binmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1186
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = AppliedType {
              klass = ::<constant:File>
              targs = [
                <constant:Elem> = String
              ]
            }
        ]
      } @ rbi/stdlib.rbi:1188
      argument encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1184
      argument external_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1182
      argument file<> -> BasicObject @ rbi/stdlib.rbi:1177
      argument internal_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1183
      argument mode<optional, keyword> -> String @ rbi/stdlib.rbi:1181
      argument modearg<optional> -> String @ rbi/stdlib.rbi:1178
      argument opt<optional> -> Integer @ rbi/stdlib.rbi:1180
      argument perm<optional> -> String @ rbi/stdlib.rbi:1179
      argument textmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1185
    method <overload N.2 : binread> (arg0, arg1, arg2) -> String @ rbi/stdlib.rbi:993
      argument arg0<> -> String @ rbi/stdlib.rbi:994
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:995
      argument arg2<optional> -> Integer @ rbi/stdlib.rbi:996
    method absolute_path (file, dir) -> String @ rbi/stdlib.rbi:969
      argument dir<optional> -> String @ rbi/stdlib.rbi:966
      argument file<> -> String @ rbi/stdlib.rbi:965
    method atime (file) -> Time @ rbi/stdlib.rbi:975
      argument file<> -> BasicObject @ rbi/stdlib.rbi:972
    method basename (file, suffix) -> String @ rbi/stdlib.rbi:982
      argument file<> -> String @ rbi/stdlib.rbi:978
      argument suffix<optional> -> String @ rbi/stdlib.rbi:979
    method binread (arg0) -> String @ rbi/stdlib.rbi:999
      argument arg0<> -> String @ rbi/stdlib.rbi:985
      argument arg1<optional> @ rbi/stdlib.rbi:999
      argument arg2<optional> @ rbi/stdlib.rbi:999
    method birthtime (file) -> Time @ rbi/stdlib.rbi:1005
      argument file<> -> BasicObject @ rbi/stdlib.rbi:1002
    method blockdev? (file) -> TrueClass | FalseClass @ rbi/stdlib.rbi:1011
      argument file<> -> AppliedType {
            klass = ::<constant:IO>
            targs = [
              <constant:Elem> = untyped
            ]
          } | String @ rbi/stdlib.rbi:1008
    method chardev? (file) -> TrueClass | FalseClass @ rbi/stdlib.rbi:1017
      argument file<> -> AppliedType {
            klass = ::<constant:IO>
            targs = [
              <constant:Elem> = untyped
            ]
          } | String @ rbi/stdlib.rbi:1014
    method chmod (mode, files) -> Integer @ rbi/stdlib.rbi:1024
      argument files<repeated> -> String @ rbi/stdlib.rbi:1021
      argument mode<> -> Integer @ rbi/stdlib.rbi:1020
    method chown (owner, group, files) -> Integer @ rbi/stdlib.rbi:1032
      argument files<repeated> -> String @ rbi/stdlib.rbi:1029
      argument group<> -> Integer @ rbi/stdlib.rbi:1028
      argument owner<> -> Integer @ rbi/stdlib.rbi:1027
    method ctime (file) -> Time @ rbi/stdlib.rbi:1038
      argument file<> -> BasicObject @ rbi/stdlib.rbi:1035
    method delete (files) -> Integer @ rbi/stdlib.rbi:1044
      argument files<repeated> -> String @ rbi/stdlib.rbi:1041
    method directory? (file) -> TrueClass | FalseClass @ rbi/stdlib.rbi:1050
      argument file<> -> AppliedType {
            klass = ::<constant:IO>
            targs = [
              <constant:Elem> = untyped
            ]
          } | String @ rbi/stdlib.rbi:1047
    method dirname (file) -> String @ rbi/stdlib.rbi:1056
      argument file<> -> String @ rbi/stdlib.rbi:1053
    method executable? (file) -> TrueClass | FalseClass @ rbi/stdlib.rbi:1062
      argument file<> -> String @ rbi/stdlib.rbi:1059
    method executable_real? (file) -> TrueClass | FalseClass @ rbi/stdlib.rbi:1068
      argument file<> -> String @ rbi/stdlib.rbi:1065
    method exist? (file) -> TrueClass | FalseClass @ rbi/stdlib.rbi:1074
      argument file<> -> BasicObject @ rbi/stdlib.rbi:1071
    method expand_path (file, dir) -> String @ rbi/stdlib.rbi:1081
      argument dir<optional> -> BasicObject @ rbi/stdlib.rbi:1078
      argument file<> -> BasicObject @ rbi/stdlib.rbi:1077
    method extname (path) -> String @ rbi/stdlib.rbi:1087
      argument path<> -> String @ rbi/stdlib.rbi:1084
    method file? (file) -> TrueClass | FalseClass @ rbi/stdlib.rbi:1093
      argument file<> -> AppliedType {
            klass = ::<constant:IO>
            targs = [
              <constant:Elem> = untyped
            ]
          } | String @ rbi/stdlib.rbi:1090
    method fnmatch (pattern, path, flags) -> TrueClass | FalseClass @ rbi/stdlib.rbi:1101
      argument flags<optional> -> Integer @ rbi/stdlib.rbi:1098
      argument path<> -> String @ rbi/stdlib.rbi:1097
      argument pattern<> -> String @ rbi/stdlib.rbi:1096
    method fnmatch? (pattern, path, flags) -> TrueClass | FalseClass @ rbi/stdlib.rbi:1496
      argument flags<optional> -> Integer @ rbi/stdlib.rbi:1493
      argument path<> -> String @ rbi/stdlib.rbi:1492
      argument pattern<> -> String @ rbi/stdlib.rbi:1491
    method ftype (file) -> String @ rbi/stdlib.rbi:1107
      argument file<> -> String @ rbi/stdlib.rbi:1104
    method grpowned? (file) -> TrueClass | FalseClass @ rbi/stdlib.rbi:1113
      argument file<> -> AppliedType {
            klass = ::<constant:IO>
            targs = [
              <constant:Elem> = untyped
            ]
          } | String @ rbi/stdlib.rbi:1110
    method identical? (file_1, file_2) -> TrueClass | FalseClass @ rbi/stdlib.rbi:1120
      argument file_1<> -> AppliedType {
            klass = ::<constant:IO>
            targs = [
              <constant:Elem> = untyped
            ]
          } | String @ rbi/stdlib.rbi:1116
      argument file_2<> -> AppliedType {
            klass = ::<constant:IO>
            targs = [
              <constant:Elem> = untyped
            ]
          } | String @ rbi/stdlib.rbi:1117
    method join (arg0) -> String @ rbi/stdlib.rbi:1126
      argument arg0<repeated> -> BasicObject @ rbi/stdlib.rbi:1123
    method lchmod (mode, files) -> Integer @ rbi/stdlib.rbi:1133
      argument files<repeated> -> String @ rbi/stdlib.rbi:1130
      argument mode<> -> Integer @ rbi/stdlib.rbi:1129
    method lchown (owner, group, files) -> Integer @ rbi/stdlib.rbi:1141
      argument files<repeated> -> String @ rbi/stdlib.rbi:1138
      argument group<> -> Integer @ rbi/stdlib.rbi:1137
      argument owner<> -> Integer @ rbi/stdlib.rbi:1136
    method link (old, new) -> Integer @ rbi/stdlib.rbi:1148
      argument new<> -> String @ rbi/stdlib.rbi:1145
      argument old<> -> String @ rbi/stdlib.rbi:1144
    method lstat (file) -> File::Stat @ rbi/stdlib.rbi:1154
      argument file<> -> String @ rbi/stdlib.rbi:1151
    method mtime (file) -> Time @ rbi/stdlib.rbi:1160
      argument file<> -> BasicObject @ rbi/stdlib.rbi:1157
    method open (file, modearg, perm, opt, mode, external_encoding, internal_encoding, encoding, textmode, binmode, autoclose) -> AppliedType {
      klass = ::<constant:File>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1191
      argument autoclose<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1173
      argument binmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1172
      argument blk<block> @ rbi/stdlib.rbi:1191
      argument encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1170
      argument external_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1168
      argument file<> -> BasicObject @ rbi/stdlib.rbi:1163
      argument internal_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1169
      argument mode<optional, keyword> -> String @ rbi/stdlib.rbi:1167
      argument modearg<optional> -> String @ rbi/stdlib.rbi:1164
      argument opt<optional> -> Integer @ rbi/stdlib.rbi:1166
      argument perm<optional> -> String @ rbi/stdlib.rbi:1165
      argument textmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1171
    method owned? (file) -> TrueClass | FalseClass @ rbi/stdlib.rbi:1197
      argument file<> -> String @ rbi/stdlib.rbi:1194
    method path (path) -> String @ rbi/stdlib.rbi:1203
      argument path<> -> String @ rbi/stdlib.rbi:1200
    method pipe? (file) -> TrueClass | FalseClass @ rbi/stdlib.rbi:1209
      argument file<> -> String @ rbi/stdlib.rbi:1206
    method readable? (file) -> TrueClass | FalseClass @ rbi/stdlib.rbi:1215
      argument file<> -> String @ rbi/stdlib.rbi:1212
    method readable_real? (file) -> TrueClass | FalseClass @ rbi/stdlib.rbi:1221
      argument file<> -> String @ rbi/stdlib.rbi:1218
    method readlink (link) -> String @ rbi/stdlib.rbi:1227
      argument link<> -> String @ rbi/stdlib.rbi:1224
    method realdirpath (pathname, dir) -> String @ rbi/stdlib.rbi:1234
      argument dir<optional> -> String @ rbi/stdlib.rbi:1231
      argument pathname<> -> String @ rbi/stdlib.rbi:1230
    method realpath (pathname, dir) -> String @ rbi/stdlib.rbi:1241
      argument dir<optional> -> String @ rbi/stdlib.rbi:1238
      argument pathname<> -> String @ rbi/stdlib.rbi:1237
    method rename (old, new) -> Integer @ rbi/stdlib.rbi:1248
      argument new<> -> String @ rbi/stdlib.rbi:1245
      argument old<> -> String @ rbi/stdlib.rbi:1244
    method setgid? (file) -> TrueClass | FalseClass @ rbi/stdlib.rbi:1254
      argument file<> -> String @ rbi/stdlib.rbi:1251
    method setuid? (file) -> TrueClass | FalseClass @ rbi/stdlib.rbi:1260
      argument file<> -> String @ rbi/stdlib.rbi:1257
    method size (file) -> Integer @ rbi/stdlib.rbi:1266
      argument file<> -> AppliedType {
            klass = ::<constant:IO>
            targs = [
              <constant:Elem> = untyped
            ]
          } | String @ rbi/stdlib.rbi:1263
    method size? (file) -> Integer | NilClass @ rbi/stdlib.rbi:1272
      argument file<> -> AppliedType {
            klass = ::<constant:IO>
            targs = [
              <constant:Elem> = untyped
            ]
          } | String @ rbi/stdlib.rbi:1269
    method socket? (file) -> TrueClass | FalseClass @ rbi/stdlib.rbi:1278
      argument file<> -> AppliedType {
            klass = ::<constant:IO>
            targs = [
              <constant:Elem> = untyped
            ]
          } | String @ rbi/stdlib.rbi:1275
    method split (file) -> TupleType {
      0 = String
      1 = String
    } @ rbi/stdlib.rbi:1284
      argument file<> -> String @ rbi/stdlib.rbi:1281
    method stat (file) -> File::Stat @ rbi/stdlib.rbi:1290
      argument file<> -> BasicObject @ rbi/stdlib.rbi:1287
    method sticky? (file) -> TrueClass | FalseClass @ rbi/stdlib.rbi:1296
      argument file<> -> String @ rbi/stdlib.rbi:1293
    method symlink (old, new) -> Integer @ rbi/stdlib.rbi:1303
      argument new<> -> String @ rbi/stdlib.rbi:1300
      argument old<> -> String @ rbi/stdlib.rbi:1299
    method symlink? (file) -> TrueClass | FalseClass @ rbi/stdlib.rbi:1309
      argument file<> -> String @ rbi/stdlib.rbi:1306
    method truncate (file, arg0) -> Integer @ rbi/stdlib.rbi:1316
      argument arg0<> -> Integer @ rbi/stdlib.rbi:1313
      argument file<> -> String @ rbi/stdlib.rbi:1312
    method umask (arg0) -> Integer @ rbi/stdlib.rbi:1322
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:1319
    method unlink (files) -> Integer @ rbi/stdlib.rbi:1502
      argument files<repeated> -> String @ rbi/stdlib.rbi:1499
    method utime (atime, mtime, files) -> Integer @ rbi/stdlib.rbi:1330
      argument atime<> -> Time @ rbi/stdlib.rbi:1325
      argument files<repeated> -> String @ rbi/stdlib.rbi:1327
      argument mtime<> -> Time @ rbi/stdlib.rbi:1326
    method world_readable? (file) -> Integer | NilClass @ rbi/stdlib.rbi:1336
      argument file<> -> AppliedType {
            klass = ::<constant:IO>
            targs = [
              <constant:Elem> = untyped
            ]
          } | String @ rbi/stdlib.rbi:1333
    method world_writable? (file) -> Integer | NilClass @ rbi/stdlib.rbi:1342
      argument file<> -> AppliedType {
            klass = ::<constant:IO>
            targs = [
              <constant:Elem> = untyped
            ]
          } | String @ rbi/stdlib.rbi:1339
    method writable? (file) -> Integer | NilClass @ rbi/stdlib.rbi:1348
      argument file<> -> String @ rbi/stdlib.rbi:1345
    method writable_real? (file) -> Integer | NilClass @ rbi/stdlib.rbi:1354
      argument file<> -> String @ rbi/stdlib.rbi:1351
    method zero? (file) -> Integer | NilClass @ rbi/stdlib.rbi:1360
      argument file<> -> AppliedType {
            klass = ::<constant:IO>
            targs = [
              <constant:Elem> = untyped
            ]
          } | String @ rbi/stdlib.rbi:1357
  class <singleton class:<constant:FileTest>> < ::<constant:Module> () @ rbi/stdlib.rbi:421
  class <singleton class:<constant:FileUtils>> < ::<constant:Module> () @ rbi/stdlib.rbi:4897
    method cp_r (src, dest, preserve) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:4904
      argument dest<> -> String | Pathname @ rbi/stdlib.rbi:4900
      argument preserve<optional> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = Symbol
          <constant:V> = TrueClass | FalseClass
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:4901
      argument src<> -> String | Pathname @ rbi/stdlib.rbi:4899
    method mkdir_p (list, mode) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:4911
      argument list<> -> String | Pathname @ rbi/stdlib.rbi:4907
      argument mode<optional> -> AppliedType {
        klass = ::<constant:Hash>
        targs = [
          <constant:K> = Symbol
          <constant:V> = TrueClass | FalseClass
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:4908
  class <singleton class:<constant:Float>> < ::<singleton class:<constant:Numeric>> () @ ???
  class <singleton class:<constant:FloatDomainError>> < ::<singleton class:<constant:RangeError>> () @ rbi/stdlib.rbi:427
  class <singleton class:<constant:Forwardable>> < ::<constant:Module> () @ rbi/stdlib.rbi:429
  class <singleton class:<constant:GC>> < ::<constant:Module> () @ rbi/stdlib.rbi:431
    method count () -> Integer @ rbi/stdlib.rbi:5413
    method disable () -> TrueClass | FalseClass @ rbi/stdlib.rbi:5416
    method enable () -> TrueClass | FalseClass @ rbi/stdlib.rbi:5419
    method start (full_mark, immediate_sweep) -> NilClass @ rbi/stdlib.rbi:5426
      argument full_mark<optional, keyword> -> TrueClass | FalseClass @ rbi/stdlib.rbi:5422
      argument immediate_sweep<optional, keyword> -> TrueClass | FalseClass @ rbi/stdlib.rbi:5423
    method stat (arg0) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = Symbol
        <constant:V> = Integer
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5432
      argument arg0<optional> -> AppliedType {
            klass = ::<constant:Hash>
            targs = [
              <constant:K> = untyped
              <constant:V> = untyped
              <constant:Elem> = untyped
            ]
          } | Symbol @ rbi/stdlib.rbi:5429
    method stress () -> Integer | TrueClass | FalseClass @ rbi/stdlib.rbi:5435
  class <singleton class:<constant:Gem>> < ::<constant:Module> () @ rbi/stdlib.rbi:435
    method bin_path (name, args, requirements) -> String @ rbi/stdlib.rbi:5445
      argument args<optional> -> String @ rbi/stdlib.rbi:5441
      argument name<> -> String @ rbi/stdlib.rbi:5440
      argument requirements<repeated> -> Gem::Requirement @ rbi/stdlib.rbi:5442
    method binary_mode () -> String @ rbi/stdlib.rbi:5448
    method bindir (install_dir) -> String @ rbi/stdlib.rbi:5454
      argument install_dir<optional> -> String @ rbi/stdlib.rbi:5451
    method clear_default_specs () -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5457
    method clear_paths () -> NilClass @ rbi/stdlib.rbi:5460
    method config_file () -> String @ rbi/stdlib.rbi:5463
    method configuration () -> Gem::ConfigFile @ rbi/stdlib.rbi:5466
    method configuration= (config) -> untyped @ rbi/stdlib.rbi:5472
      argument config<> -> BasicObject @ rbi/stdlib.rbi:5469
    method datadir (gem_name) -> String | NilClass @ rbi/stdlib.rbi:5478
      argument gem_name<> -> String @ rbi/stdlib.rbi:5475
    method default_bindir () -> String | NilClass @ rbi/stdlib.rbi:5481
    method default_cert_path () -> String | NilClass @ rbi/stdlib.rbi:5484
    method default_dir () -> String | NilClass @ rbi/stdlib.rbi:5487
    method default_exec_format () -> String | NilClass @ rbi/stdlib.rbi:5490
    method default_key_path () -> String | NilClass @ rbi/stdlib.rbi:5493
    method default_path () -> String | NilClass @ rbi/stdlib.rbi:5496
    method default_rubygems_dirs () -> AppliedType {
          klass = ::<constant:Array>
          targs = [
            <constant:Elem> = String
          ]
        } | NilClass @ rbi/stdlib.rbi:5499
    method default_sources () -> AppliedType {
          klass = ::<constant:Array>
          targs = [
            <constant:Elem> = String
          ]
        } | NilClass @ rbi/stdlib.rbi:5502
  class <singleton class:<constant:Hash>> < ::<singleton class:<constant:Object>> (<constant:Generic>) @ ???
    method [] (arg0) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:5515
      argument arg0<repeated> -> BasicObject @ rbi/stdlib.rbi:5512
  class <singleton class:<constant:IO>> < ::<singleton class:<constant:Object>> (<constant:Generic>) @ rbi/stdlib.rbi:412
    method <overload N.1 : foreach> (name, sep, limit, external_encoding, internal_encoding, encoding, textmode, binmode, autoclose, mode) -> AppliedType {
      klass = ::<constant:Enumerator>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1908
      argument autoclose<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1917
      argument binmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1916
      argument blk<block> @ rbi/stdlib.rbi:1921
      argument encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1914
      argument external_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1912
      argument internal_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1913
      argument limit<optional> -> Integer @ rbi/stdlib.rbi:1911
      argument mode<optional, keyword> -> String @ rbi/stdlib.rbi:1918
      argument name<> -> String @ rbi/stdlib.rbi:1909
      argument sep<optional> -> String @ rbi/stdlib.rbi:1910
      argument textmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1915
    method <overload N.1 : open> (fd, modearg, external_encoding, internal_encoding, encoding, textmode, binmode, autoclose, mode, blk) -> untyped @ rbi/stdlib.rbi:1935
      argument autoclose<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1943
      argument binmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1942
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = AppliedType {
              klass = ::<constant:IO>
              targs = [
                <constant:Elem> = String
              ]
            }
        ]
      } @ rbi/stdlib.rbi:1945
      argument encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1940
      argument external_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1938
      argument fd<> -> Integer @ rbi/stdlib.rbi:1936
      argument internal_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1939
      argument mode<optional, keyword> -> String @ rbi/stdlib.rbi:1944
      argument modearg<optional> -> String @ rbi/stdlib.rbi:1937
      argument textmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1941
    method <overload N.1 : pipe> (int_enc, external_encoding, internal_encoding, encoding, textmode, binmode, autoclose, mode) -> TupleType {
      0 = AppliedType {
            klass = ::<constant:IO>
            targs = [
              <constant:Elem> = String
            ]
          }
      1 = AppliedType {
            klass = ::<constant:IO>
            targs = [
              <constant:Elem> = String
            ]
          }
    } @ rbi/stdlib.rbi:1961
      argument autoclose<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1969
      argument binmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1968
      argument blk<block> @ rbi/stdlib.rbi:1998
      argument encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1966
      argument ext_or_ext_int_enc<optional> @ rbi/stdlib.rbi:1998
      argument external_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1964
      argument int_enc<optional> -> String @ rbi/stdlib.rbi:1963
      argument internal_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1965
      argument mode<optional, keyword> -> String @ rbi/stdlib.rbi:1970
      argument textmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1967
    method <overload N.2 : pipe> (ext_or_ext_int_enc, external_encoding, internal_encoding, encoding, textmode, binmode, autoclose, mode, blk) -> untyped @ rbi/stdlib.rbi:1973
      argument autoclose<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1980
      argument binmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1979
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = TupleType {
              0 = AppliedType {
                    klass = ::<constant:IO>
                    targs = [
                      <constant:Elem> = String
                    ]
                  }
              1 = AppliedType {
                    klass = ::<constant:IO>
                    targs = [
                      <constant:Elem> = String
                    ]
                  }
            }
        ]
      } @ rbi/stdlib.rbi:1982
      argument encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1977
      argument ext_or_ext_int_enc<optional> -> String @ rbi/stdlib.rbi:1974
      argument external_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1975
      argument int_enc<optional> @ rbi/stdlib.rbi:1998
      argument internal_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1976
      argument mode<optional, keyword> -> String @ rbi/stdlib.rbi:1981
      argument textmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1978
    method <overload N.3 : pipe> (int_enc, external_encoding, internal_encoding, encoding, textmode, binmode, autoclose, mode, blk) -> untyped @ rbi/stdlib.rbi:1985
      argument autoclose<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1993
      argument binmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1992
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = TupleType {
              0 = AppliedType {
                    klass = ::<constant:IO>
                    targs = [
                      <constant:Elem> = String
                    ]
                  }
              1 = AppliedType {
                    klass = ::<constant:IO>
                    targs = [
                      <constant:Elem> = String
                    ]
                  }
            }
        ]
      } @ rbi/stdlib.rbi:1995
      argument encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1990
      argument ext_or_ext_int_enc<optional> @ rbi/stdlib.rbi:1998
      argument external_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1988
      argument int_enc<optional> -> String @ rbi/stdlib.rbi:1987
      argument internal_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1989
      argument mode<optional, keyword> -> String @ rbi/stdlib.rbi:1994
      argument textmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1991
    method binread (name, length, offset) -> String @ rbi/stdlib.rbi:1868
      argument length<optional> -> Integer @ rbi/stdlib.rbi:1864
      argument name<> -> String @ rbi/stdlib.rbi:1863
      argument offset<optional> -> Integer @ rbi/stdlib.rbi:1865
    method binwrite (name, arg0, offset, external_encoding, internal_encoding, encoding, textmode, binmode, autoclose, mode) -> Integer @ rbi/stdlib.rbi:1883
      argument arg0<> -> String @ rbi/stdlib.rbi:1872
      argument autoclose<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1879
      argument binmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1878
      argument encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1876
      argument external_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1874
      argument internal_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1875
      argument mode<optional, keyword> -> String @ rbi/stdlib.rbi:1880
      argument name<> -> String @ rbi/stdlib.rbi:1871
      argument offset<optional> -> Integer @ rbi/stdlib.rbi:1873
      argument textmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1877
    method copy_stream (src, dst, copy_length, src_offset) -> Integer @ rbi/stdlib.rbi:1892
      argument copy_length<optional> -> Integer @ rbi/stdlib.rbi:1888
      argument dst<> -> AppliedType {
            klass = ::<constant:IO>
            targs = [
              <constant:Elem> = String
            ]
          } | String @ rbi/stdlib.rbi:1887
      argument src<> -> AppliedType {
            klass = ::<constant:IO>
            targs = [
              <constant:Elem> = String
            ]
          } | String @ rbi/stdlib.rbi:1886
      argument src_offset<optional> -> Integer @ rbi/stdlib.rbi:1889
    method for_fd (fd, mode, opt) -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:2074
      argument fd<> -> Integer @ rbi/stdlib.rbi:2069
      argument mode<optional> -> Integer @ rbi/stdlib.rbi:2070
      argument opt<optional> -> Integer @ rbi/stdlib.rbi:2071
    method foreach (name, sep, limit, external_encoding, internal_encoding, encoding, textmode, binmode, autoclose, mode, blk) -> NilClass @ rbi/stdlib.rbi:1921
      argument autoclose<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1903
      argument binmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1902
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = String
        ]
      } @ rbi/stdlib.rbi:1905
      argument encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1900
      argument external_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1898
      argument internal_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1899
      argument limit<optional> -> Integer @ rbi/stdlib.rbi:1897
      argument mode<optional, keyword> -> String @ rbi/stdlib.rbi:1904
      argument name<> -> String @ rbi/stdlib.rbi:1895
      argument sep<optional> -> String @ rbi/stdlib.rbi:1896
      argument textmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1901
    method open (fd, modearg, external_encoding, internal_encoding, encoding, textmode, binmode, autoclose, mode) -> AppliedType {
      klass = ::<constant:IO>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:1948
      argument autoclose<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1931
      argument binmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1930
      argument blk<block> @ rbi/stdlib.rbi:1948
      argument encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1928
      argument external_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1926
      argument fd<> -> Integer @ rbi/stdlib.rbi:1924
      argument internal_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1927
      argument mode<optional, keyword> -> String @ rbi/stdlib.rbi:1932
      argument modearg<optional> -> String @ rbi/stdlib.rbi:1925
      argument textmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1929
    method pipe (ext_or_ext_int_enc, external_encoding, internal_encoding, encoding, textmode, binmode, autoclose, mode) -> TupleType {
      0 = AppliedType {
            klass = ::<constant:IO>
            targs = [
              <constant:Elem> = String
            ]
          }
      1 = AppliedType {
            klass = ::<constant:IO>
            targs = [
              <constant:Elem> = String
            ]
          }
    } @ rbi/stdlib.rbi:1998
      argument autoclose<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1957
      argument binmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1956
      argument blk<block> @ rbi/stdlib.rbi:1998
      argument encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1954
      argument ext_or_ext_int_enc<optional> -> String @ rbi/stdlib.rbi:1951
      argument external_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1952
      argument int_enc<optional> @ rbi/stdlib.rbi:1998
      argument internal_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:1953
      argument mode<optional, keyword> -> String @ rbi/stdlib.rbi:1958
      argument textmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:1955
    method read (name, length, offset, external_encoding, internal_encoding, encoding, textmode, binmode, autoclose, mode) -> String @ rbi/stdlib.rbi:2013
      argument autoclose<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:2009
      argument binmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:2008
      argument encoding<optional, keyword> -> String @ rbi/stdlib.rbi:2006
      argument external_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:2004
      argument internal_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:2005
      argument length<optional> -> Integer @ rbi/stdlib.rbi:2002
      argument mode<optional, keyword> -> String @ rbi/stdlib.rbi:2010
      argument name<> -> String @ rbi/stdlib.rbi:2001
      argument offset<optional> -> Integer @ rbi/stdlib.rbi:2003
      argument textmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:2007
    method readlines (name, sep, limit, external_encoding, internal_encoding, encoding, textmode, binmode, autoclose, mode) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:2028
      argument autoclose<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:2024
      argument binmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:2023
      argument encoding<optional, keyword> -> String @ rbi/stdlib.rbi:2021
      argument external_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:2019
      argument internal_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:2020
      argument limit<optional> -> Integer @ rbi/stdlib.rbi:2018
      argument mode<optional, keyword> -> String @ rbi/stdlib.rbi:2025
      argument name<> -> String @ rbi/stdlib.rbi:2016
      argument sep<optional> -> String @ rbi/stdlib.rbi:2017
      argument textmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:2022
    method select (read_array, write_array, error_array, timeout) -> AppliedType {
          klass = ::<constant:Array>
          targs = [
            <constant:Elem> = AppliedType {
                klass = ::<constant:IO>
                targs = [
                  <constant:Elem> = String
                ]
              }
          ]
        } | NilClass @ rbi/stdlib.rbi:2037
      argument error_array<optional> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = AppliedType {
              klass = ::<constant:IO>
              targs = [
                <constant:Elem> = String
              ]
            }
        ]
      } @ rbi/stdlib.rbi:2033
      argument read_array<> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = AppliedType {
              klass = ::<constant:IO>
              targs = [
                <constant:Elem> = String
              ]
            }
        ]
      } @ rbi/stdlib.rbi:2031
      argument timeout<optional> -> Integer @ rbi/stdlib.rbi:2034
      argument write_array<optional> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = AppliedType {
              klass = ::<constant:IO>
              targs = [
                <constant:Elem> = String
              ]
            }
        ]
      } @ rbi/stdlib.rbi:2032
    method sysopen (path, mode, perm) -> Integer @ rbi/stdlib.rbi:2045
      argument mode<optional> -> String @ rbi/stdlib.rbi:2041
      argument path<> -> String @ rbi/stdlib.rbi:2040
      argument perm<optional> -> String @ rbi/stdlib.rbi:2042
    method try_convert (arg0) -> AppliedType {
          klass = ::<constant:IO>
          targs = [
            <constant:Elem> = String
          ]
        } | NilClass @ rbi/stdlib.rbi:2051
      argument arg0<> -> BasicObject @ rbi/stdlib.rbi:2048
    method write (name, arg0, offset, external_encoding, internal_encoding, encoding, textmode, binmode, autoclose, mode) -> Integer @ rbi/stdlib.rbi:2066
      argument arg0<> -> String @ rbi/stdlib.rbi:2055
      argument autoclose<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:2062
      argument binmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:2061
      argument encoding<optional, keyword> -> String @ rbi/stdlib.rbi:2059
      argument external_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:2057
      argument internal_encoding<optional, keyword> -> String @ rbi/stdlib.rbi:2058
      argument mode<optional, keyword> -> String @ rbi/stdlib.rbi:2063
      argument name<> -> String @ rbi/stdlib.rbi:2054
      argument offset<optional> -> Integer @ rbi/stdlib.rbi:2056
      argument textmode<optional, keyword> -> BasicObject @ rbi/stdlib.rbi:2060
  class <singleton class:<constant:IOError>> < ::<singleton class:<constant:StandardError>> () @ rbi/stdlib.rbi:108
  class <singleton class:<constant:IndexError>> < ::<singleton class:<constant:StandardError>> () @ rbi/stdlib.rbi:62
  class <singleton class:<constant:Integer>> < ::<singleton class:<constant:Numeric>> () @ ???
  class <singleton class:<constant:Interrupt>> < ::<singleton class:<constant:SignalException>> () @ rbi/stdlib.rbi:554
  class <singleton class:<constant:Kernel>> < ::<constant:Module> () @ ???
    method <overload N.1 : Complex> (x) -> Complex @ rbi/stdlib.rbi:6465
      argument x<> -> String @ rbi/stdlib.rbi:6466
      argument y<optional> @ rbi/stdlib.rbi:6469
    method <overload N.1 : Rational> (x) -> Rational @ rbi/stdlib.rbi:6495
      argument x<> -> Object @ rbi/stdlib.rbi:6496
      argument y<optional> @ rbi/stdlib.rbi:6499
    method <overload N.1 : caller> () -> AppliedType {
          klass = ::<constant:Array>
          targs = [
            <constant:Elem> = String
          ]
        } | NilClass @ rbi/stdlib.rbi:6558
      argument length<optional> @ rbi/stdlib.rbi:6562
      argument start<optional> @ rbi/stdlib.rbi:6562
    method <overload N.1 : caller_locations> () -> AppliedType {
          klass = ::<constant:Array>
          targs = [
            <constant:Elem> = String
          ]
        } | NilClass @ rbi/stdlib.rbi:6569
      argument length<optional> @ rbi/stdlib.rbi:6573
      argument start<optional> @ rbi/stdlib.rbi:6573
    method <overload N.1 : exit> (status) -> NilClass @ rbi/stdlib.rbi:6585
      argument status<optional> -> Integer | TrueClass | FalseClass @ rbi/stdlib.rbi:6586
    method <overload N.1 : fail> (arg0) -> NilClass @ rbi/stdlib.rbi:6598
      argument arg0<optional> -> String @ rbi/stdlib.rbi:6599
      argument arg1<optional> @ rbi/stdlib.rbi:6613
      argument arg2<optional> @ rbi/stdlib.rbi:6613
    method <overload N.1 : raise> (arg0) -> NilClass @ rbi/stdlib.rbi:6680
      argument arg0<optional> -> String @ rbi/stdlib.rbi:6681
      argument arg1<optional> @ rbi/stdlib.rbi:6696
      argument arg2<optional> @ rbi/stdlib.rbi:6696
    method <overload N.2 : fail> (arg0, arg1) -> NilClass @ rbi/stdlib.rbi:6602
      argument arg0<optional> -> Class @ rbi/stdlib.rbi:6603
      argument arg1<optional> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = String
        ]
      } @ rbi/stdlib.rbi:6604
      argument arg2<optional> @ rbi/stdlib.rbi:6613
    method <overload N.2 : raise> (arg0, arg1, arg2) -> NilClass @ rbi/stdlib.rbi:6684
      argument arg0<optional> -> Class @ rbi/stdlib.rbi:6685
      argument arg1<optional> -> String @ rbi/stdlib.rbi:6686
      argument arg2<optional> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = String
        ]
      } @ rbi/stdlib.rbi:6687
    method <overload N.3 : fail> (arg0, arg1, arg2) -> NilClass @ rbi/stdlib.rbi:6607
      argument arg0<optional> -> Class @ rbi/stdlib.rbi:6608
      argument arg1<optional> -> String @ rbi/stdlib.rbi:6609
      argument arg2<optional> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = String
        ]
      } @ rbi/stdlib.rbi:6610
    method <overload N.3 : raise> (arg0, arg1, arg2) -> NilClass @ rbi/stdlib.rbi:6690
      argument arg0<optional> -> Exception @ rbi/stdlib.rbi:6691
      argument arg1<optional> -> String @ rbi/stdlib.rbi:6692
      argument arg2<optional> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = String
        ]
      } @ rbi/stdlib.rbi:6693
    method Array (x) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:6458
      argument x<> -> Object @ rbi/stdlib.rbi:6455
    method Complex (x, y) -> Complex @ rbi/stdlib.rbi:6469
      argument x<> -> Numeric @ rbi/stdlib.rbi:6461
      argument y<optional> -> Numeric @ rbi/stdlib.rbi:6462
    method Float (x) -> Float @ rbi/stdlib.rbi:6475
      argument x<> -> Numeric @ rbi/stdlib.rbi:6472
    method Hash (x) -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = untyped
        <constant:V> = untyped
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:6481
      argument x<> -> Object @ rbi/stdlib.rbi:6478
    method Integer (arg, base) -> Integer @ rbi/stdlib.rbi:6488
      argument arg<> -> Numeric | String @ rbi/stdlib.rbi:6484
      argument base<optional> -> Integer @ rbi/stdlib.rbi:6485
    method Rational (x, y) -> Rational @ rbi/stdlib.rbi:6499
      argument x<> -> Numeric @ rbi/stdlib.rbi:6491
      argument y<optional> -> Numeric @ rbi/stdlib.rbi:6492
    method String (x) -> String @ rbi/stdlib.rbi:6505
      argument x<> -> Object @ rbi/stdlib.rbi:6502
    method __callee__ () -> Symbol | NilClass @ rbi/stdlib.rbi:6508
    method __dir__ () -> String | NilClass @ rbi/stdlib.rbi:6511
    method __method__ () -> Symbol | NilClass @ rbi/stdlib.rbi:6514
    method ` (arg0) -> String @ rbi/stdlib.rbi:6520
      argument arg0<> -> String @ rbi/stdlib.rbi:6517
    method abort (msg) -> NilClass @ rbi/stdlib.rbi:6526
      argument msg<optional> -> String @ rbi/stdlib.rbi:6523
    method at_exit (blk) -> Proc @ rbi/stdlib.rbi:6532
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc0>
        targs = [
          <constant:Return> = BasicObject
        ]
      } @ rbi/stdlib.rbi:6529
    method autoload (_module, filename) -> NilClass @ rbi/stdlib.rbi:6539
      argument _module<> -> String | Symbol @ rbi/stdlib.rbi:6535
      argument filename<> -> String @ rbi/stdlib.rbi:6536
    method autoload? (name) -> String | NilClass @ rbi/stdlib.rbi:6545
      argument name<> -> Symbol | String @ rbi/stdlib.rbi:6542
    method binding () -> Binding @ rbi/stdlib.rbi:6548
    method block_given? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:6551
    method caller (start, length) -> AppliedType {
          klass = ::<constant:Array>
          targs = [
            <constant:Elem> = String
          ]
        } | NilClass @ rbi/stdlib.rbi:6562
      argument length<optional> -> Integer @ rbi/stdlib.rbi:6555
      argument start<optional> -> Integer @ rbi/stdlib.rbi:6554
    method caller_locations (start, length) -> AppliedType {
          klass = ::<constant:Array>
          targs = [
            <constant:Elem> = String
          ]
        } | NilClass @ rbi/stdlib.rbi:6573
      argument length<optional> -> Integer @ rbi/stdlib.rbi:6566
      argument start<optional> -> Integer @ rbi/stdlib.rbi:6565
    method eval (arg0, arg1, filename, lineno) -> untyped @ rbi/stdlib.rbi:6582
      argument arg0<> -> String @ rbi/stdlib.rbi:6576
      argument arg1<optional> -> Binding @ rbi/stdlib.rbi:6577
      argument filename<optional> -> String @ rbi/stdlib.rbi:6578
      argument lineno<optional> -> Integer @ rbi/stdlib.rbi:6579
    method exit () -> NilClass @ rbi/stdlib.rbi:6589
      argument status<optional> @ rbi/stdlib.rbi:6589
    method exit! (status) -> NilClass @ rbi/stdlib.rbi:6595
      argument status<> -> Integer | TrueClass | FalseClass @ rbi/stdlib.rbi:6592
    method fail () -> NilClass @ rbi/stdlib.rbi:6613
      argument arg0<optional> @ rbi/stdlib.rbi:6613
      argument arg1<optional> @ rbi/stdlib.rbi:6613
      argument arg2<optional> @ rbi/stdlib.rbi:6613
    method format (format, args) -> String @ rbi/stdlib.rbi:6620
      argument args<repeated> -> BasicObject @ rbi/stdlib.rbi:6617
      argument format<> -> String @ rbi/stdlib.rbi:6616
    method gets (arg0, arg1) -> String @ rbi/stdlib.rbi:6627
      argument arg0<optional> -> String @ rbi/stdlib.rbi:6623
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:6624
    method global_variables () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Symbol
      ]
    } @ rbi/stdlib.rbi:6630
    method iterator? () -> TrueClass | FalseClass @ rbi/stdlib.rbi:6633
    method load (filename, arg0) -> TrueClass | FalseClass @ rbi/stdlib.rbi:6640
      argument arg0<optional> -> TrueClass | FalseClass @ rbi/stdlib.rbi:6637
      argument filename<> -> String @ rbi/stdlib.rbi:6636
    method local_variables () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Symbol
      ]
    } @ rbi/stdlib.rbi:6643
    method open (name, rest, block) -> AppliedType {
          klass = ::<constant:IO>
          targs = [
            <constant:Elem> = String
          ]
        } | NilClass @ rbi/stdlib.rbi:6651
      argument block<optional> -> String @ rbi/stdlib.rbi:6648
      argument name<> -> String @ rbi/stdlib.rbi:6646
      argument rest<optional> -> String | Integer @ rbi/stdlib.rbi:6647
    method printf (arg0, arg1, arg2) -> NilClass @ rbi/stdlib.rbi:6659
      argument arg0<optional> -> AppliedType {
        klass = ::<constant:IO>
        targs = [
          <constant:Elem> = String
        ]
      } @ rbi/stdlib.rbi:6654
      argument arg1<optional> -> String @ rbi/stdlib.rbi:6655
      argument arg2<repeated> -> BasicObject @ rbi/stdlib.rbi:6656
    method proc (blk) -> Proc @ rbi/stdlib.rbi:6665
      argument blk<block> -> BasicObject @ rbi/stdlib.rbi:6662
    method putc (arg0) -> Integer @ rbi/stdlib.rbi:6671
      argument arg0<> -> Integer @ rbi/stdlib.rbi:6668
    method puts (arg0) -> NilClass @ rbi/stdlib.rbi:6677
      argument arg0<repeated> -> BasicObject @ rbi/stdlib.rbi:6674
    method raise () -> NilClass @ rbi/stdlib.rbi:6696
      argument arg0<optional> @ rbi/stdlib.rbi:6696
      argument arg1<optional> @ rbi/stdlib.rbi:6696
      argument arg2<optional> @ rbi/stdlib.rbi:6696
    method rand (max) -> Numeric @ rbi/stdlib.rbi:6702
      argument max<> -> AppliedType {
            klass = ::<constant:Range>
            targs = [
              <constant:Elem> = untyped
            ]
          } | Integer @ rbi/stdlib.rbi:6699
    method readline (arg0, arg1) -> String @ rbi/stdlib.rbi:6709
      argument arg0<optional> -> String @ rbi/stdlib.rbi:6705
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:6706
    method readlines (arg0, arg1) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:6716
      argument arg0<optional> -> String @ rbi/stdlib.rbi:6712
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:6713
    method require (name) -> TrueClass | FalseClass @ rbi/stdlib.rbi:6722
      argument name<> -> String @ rbi/stdlib.rbi:6719
    method require_relative (name) -> TrueClass | FalseClass @ rbi/stdlib.rbi:6728
      argument name<> -> String @ rbi/stdlib.rbi:6725
    method select (read, write, error, timeout) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:6737
      argument error<optional> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = AppliedType {
              klass = ::<constant:IO>
              targs = [
                <constant:Elem> = String
              ]
            }
        ]
      } @ rbi/stdlib.rbi:6733
      argument read<> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = AppliedType {
              klass = ::<constant:IO>
              targs = [
                <constant:Elem> = String
              ]
            }
        ]
      } @ rbi/stdlib.rbi:6731
      argument timeout<optional> -> Integer @ rbi/stdlib.rbi:6734
      argument write<optional> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = AppliedType {
              klass = ::<constant:IO>
              targs = [
                <constant:Elem> = String
              ]
            }
        ]
      } @ rbi/stdlib.rbi:6732
    method sleep (duration) -> Integer @ rbi/stdlib.rbi:6743
      argument duration<> -> Numeric @ rbi/stdlib.rbi:6740
    method sprintf (format, args) -> String @ rbi/stdlib.rbi:7022
      argument args<repeated> -> BasicObject @ rbi/stdlib.rbi:7019
      argument format<> -> String @ rbi/stdlib.rbi:7018
    method srand (number) -> Numeric @ rbi/stdlib.rbi:6749
      argument number<> -> Numeric @ rbi/stdlib.rbi:6746
    method syscall (num, args) -> untyped @ rbi/stdlib.rbi:6756
      argument args<repeated> -> BasicObject @ rbi/stdlib.rbi:6753
      argument num<> -> Integer @ rbi/stdlib.rbi:6752
    method test (cmd, file1, file2) -> TrueClass | FalseClass | Time @ rbi/stdlib.rbi:6764
      argument cmd<> -> String @ rbi/stdlib.rbi:6759
      argument file1<> -> String @ rbi/stdlib.rbi:6760
      argument file2<optional> -> String @ rbi/stdlib.rbi:6761
    method warn (msg) -> NilClass @ rbi/stdlib.rbi:6770
      argument msg<repeated> -> String @ rbi/stdlib.rbi:6767
  class <singleton class:<constant:KeyError>> < ::<singleton class:<constant:IndexError>> () @ rbi/stdlib.rbi:556
  class <singleton class:<constant:LoadError>> < ::<singleton class:<constant:ScriptError>> () @ rbi/stdlib.rbi:445
  class <singleton class:<constant:LocalJumpError>> < ::<singleton class:<constant:StandardError>> () @ rbi/stdlib.rbi:558
  class <singleton class:<constant:Marshal>> < ::<constant:Module> () @ rbi/stdlib.rbi:560
    method <overload N.1 : dump> (arg0, arg1) -> Object @ rbi/stdlib.rbi:7148
      argument arg0<> -> Object @ rbi/stdlib.rbi:7149
      argument arg1<optional> -> Integer @ rbi/stdlib.rbi:7150
      argument arg2<optional> @ rbi/stdlib.rbi:7153
    method dump (arg0, arg1, arg2) -> Object @ rbi/stdlib.rbi:7153
      argument arg0<> -> Object @ rbi/stdlib.rbi:7143
      argument arg1<optional> -> AppliedType {
        klass = ::<constant:IO>
        targs = [
          <constant:Elem> = String
        ]
      } @ rbi/stdlib.rbi:7144
      argument arg2<optional> -> Integer @ rbi/stdlib.rbi:7145
    method load (arg0, arg1) -> Object @ rbi/stdlib.rbi:7160
      argument arg0<> -> String @ rbi/stdlib.rbi:7156
      argument arg1<optional> -> Proc @ rbi/stdlib.rbi:7157
  class <singleton class:<constant:MatchData>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:562
  class <singleton class:<constant:Math>> < ::<constant:Module> () @ rbi/stdlib.rbi:564
    method acos (x) -> Float @ rbi/stdlib.rbi:7282
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7279
    method acosh (x) -> Float @ rbi/stdlib.rbi:7288
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7285
    method asin (x) -> Float @ rbi/stdlib.rbi:7294
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7291
    method asinh (x) -> Float @ rbi/stdlib.rbi:7300
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7297
    method atan (x) -> Float @ rbi/stdlib.rbi:7306
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7303
    method atan2 (y, x) -> Float @ rbi/stdlib.rbi:7313
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7310
      argument y<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7309
    method atanh (x) -> Float @ rbi/stdlib.rbi:7319
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7316
    method cbrt (x) -> Float @ rbi/stdlib.rbi:7325
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7322
    method cos (x) -> Float @ rbi/stdlib.rbi:7331
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7328
    method cosh (x) -> Float @ rbi/stdlib.rbi:7337
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7334
    method erf (x) -> Float @ rbi/stdlib.rbi:7343
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7340
    method erfc (x) -> Float @ rbi/stdlib.rbi:7349
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7346
    method exp (x) -> Float @ rbi/stdlib.rbi:7355
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7352
    method frexp (x) -> TupleType {
      0 = Integer | Float | Rational | BigDecimal
      1 = Integer | Float | Rational | BigDecimal
    } @ rbi/stdlib.rbi:7361
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7358
    method gamma (x) -> Float @ rbi/stdlib.rbi:7367
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7364
    method hypot (x, y) -> Float @ rbi/stdlib.rbi:7374
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7370
      argument y<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7371
    method ldexp (fraction, exponent) -> Float @ rbi/stdlib.rbi:7381
      argument exponent<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7378
      argument fraction<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7377
    method lgamma (x) -> Integer | Float @ rbi/stdlib.rbi:7387
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7384
    method log (x, base) -> Float @ rbi/stdlib.rbi:7394
      argument base<optional> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7391
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7390
    method log10 (x) -> Float @ rbi/stdlib.rbi:7400
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7397
    method log2 (x) -> Float @ rbi/stdlib.rbi:7406
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7403
    method sin (x) -> Float @ rbi/stdlib.rbi:7412
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7409
    method sinh (x) -> Float @ rbi/stdlib.rbi:7418
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7415
    method sqrt (x) -> Float @ rbi/stdlib.rbi:7424
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7421
    method tan (x) -> Float @ rbi/stdlib.rbi:7430
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7427
    method tanh (x) -> Float @ rbi/stdlib.rbi:7436
      argument x<> -> Integer | Float | Rational | BigDecimal @ rbi/stdlib.rbi:7433
  class <singleton class:<constant:Method>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:568
  class <singleton class:<constant:Module>> < ::<singleton class:<constant:Object>> () @ ???
    method constants () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Integer
      ]
    } @ rbi/stdlib.rbi:7464
    method nesting () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Module
      ]
    } @ rbi/stdlib.rbi:7467
  class <singleton class:<constant:Monitor>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:572
  class <singleton class:<constant:MonitorMixin>> < ::<constant:Module> () @ rbi/stdlib.rbi:570
  class <singleton class:<constant:NameError>> < ::<singleton class:<constant:StandardError>> () @ rbi/stdlib.rbi:579
  class <singleton class:<constant:NilClass>> < ::<singleton class:<constant:Object>> () @ ???
  class <singleton class:<constant:NoMemoryError>> < ::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:583
  class <singleton class:<constant:NoMethodError>> < ::<singleton class:<constant:NameError>> () @ rbi/stdlib.rbi:585
  class <singleton class:<constant:NotImplementedError>> < ::<singleton class:<constant:ScriptError>> () @ rbi/stdlib.rbi:587
  class <singleton class:<constant:Numeric>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:31
  class <singleton class:<constant:Object>> < ::<singleton class:<constant:BasicObject>> () @ ???
  class <singleton class:<constant:ObjectSpace>> < ::<constant:Module> () @ rbi/stdlib.rbi:589
  class <singleton class:<constant:Opus>> < ::<constant:Module> () @ ???
  class <singleton class:<constant:Pathname>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:8520
    method getwd () -> Pathname @ rbi/stdlib.rbi:8522
    method glob (p1, p2) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Pathname
      ]
    } @ rbi/stdlib.rbi:8529
      argument p1<> -> String @ rbi/stdlib.rbi:8525
      argument p2<optional> -> String @ rbi/stdlib.rbi:8526
    method pwd () -> Pathname @ rbi/stdlib.rbi:8967
  class <singleton class:<constant:Proc0>> < ::<singleton class:<constant:Proc>> () @ ???
  class <singleton class:<constant:Proc10>> < ::<singleton class:<constant:Proc>> () @ ???
  class <singleton class:<constant:Proc1>> < ::<singleton class:<constant:Proc>> () @ ???
  class <singleton class:<constant:Proc2>> < ::<singleton class:<constant:Proc>> () @ ???
  class <singleton class:<constant:Proc3>> < ::<singleton class:<constant:Proc>> () @ ???
  class <singleton class:<constant:Proc4>> < ::<singleton class:<constant:Proc>> () @ ???
  class <singleton class:<constant:Proc5>> < ::<singleton class:<constant:Proc>> () @ ???
  class <singleton class:<constant:Proc6>> < ::<singleton class:<constant:Proc>> () @ ???
  class <singleton class:<constant:Proc7>> < ::<singleton class:<constant:Proc>> () @ ???
  class <singleton class:<constant:Proc8>> < ::<singleton class:<constant:Proc>> () @ ???
  class <singleton class:<constant:Proc9>> < ::<singleton class:<constant:Proc>> () @ ???
  class <singleton class:<constant:Proc>> < ::<singleton class:<constant:Object>> () @ ???
  class <singleton class:<constant:Process>> < ::<constant:Module> () @ rbi/stdlib.rbi:596
    method <overload N.1 : fork> (blk) -> Integer | NilClass @ rbi/stdlib.rbi:9103
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc0>
        targs = [
          <constant:Return> = BasicObject
        ]
      } @ rbi/stdlib.rbi:9104
    method abort (msg) -> untyped @ rbi/stdlib.rbi:9040
      argument msg<optional> -> String @ rbi/stdlib.rbi:9037
    method argv0 () -> String @ rbi/stdlib.rbi:9043
    method clock_getres (clock_id, unit) -> Float | Integer @ rbi/stdlib.rbi:9050
      argument clock_id<> -> Symbol | Integer @ rbi/stdlib.rbi:9046
      argument unit<optional> -> Symbol @ rbi/stdlib.rbi:9047
    method clock_gettime (clock_id, unit) -> Float | Integer @ rbi/stdlib.rbi:9057
      argument clock_id<> -> Symbol | Integer @ rbi/stdlib.rbi:9053
      argument unit<optional> -> Symbol @ rbi/stdlib.rbi:9054
    method daemon (nochdir, noclose) -> Integer @ rbi/stdlib.rbi:9064
      argument nochdir<optional> -> BasicObject @ rbi/stdlib.rbi:9060
      argument noclose<optional> -> BasicObject @ rbi/stdlib.rbi:9061
    method detach (pid) -> Thread @ rbi/stdlib.rbi:9070
      argument pid<> -> Integer @ rbi/stdlib.rbi:9067
    method egid () -> Integer @ rbi/stdlib.rbi:9073
    method egid= (arg0) -> Integer @ rbi/stdlib.rbi:9079
      argument arg0<> -> Integer @ rbi/stdlib.rbi:9076
    method euid () -> Integer @ rbi/stdlib.rbi:9082
    method euid= (arg0) -> Integer @ rbi/stdlib.rbi:9088
      argument arg0<> -> Integer @ rbi/stdlib.rbi:9085
    method exit (status) -> untyped @ rbi/stdlib.rbi:9094
      argument status<optional> -> Integer @ rbi/stdlib.rbi:9091
    method exit! (status) -> untyped @ rbi/stdlib.rbi:9100
      argument status<optional> -> Integer @ rbi/stdlib.rbi:9097
    method fork () -> Integer | NilClass @ rbi/stdlib.rbi:9107
      argument blk<block> @ rbi/stdlib.rbi:9107
    method getpgid (pid) -> Integer @ rbi/stdlib.rbi:9113
      argument pid<> -> Integer @ rbi/stdlib.rbi:9110
    method getpgrp () -> Integer @ rbi/stdlib.rbi:9116
    method getpriority (kind, arg0) -> Integer @ rbi/stdlib.rbi:9123
      argument arg0<> -> Integer @ rbi/stdlib.rbi:9120
      argument kind<> -> Integer @ rbi/stdlib.rbi:9119
    method getrlimit (resource) -> TupleType {
      0 = Integer
      1 = Integer
    } @ rbi/stdlib.rbi:9129
      argument resource<> -> Symbol | String | Integer @ rbi/stdlib.rbi:9126
    method getsid (pid) -> Integer @ rbi/stdlib.rbi:9135
      argument pid<optional> -> Integer @ rbi/stdlib.rbi:9132
    method gid () -> Integer @ rbi/stdlib.rbi:9138
    method gid= (arg0) -> Integer @ rbi/stdlib.rbi:9144
      argument arg0<> -> Integer @ rbi/stdlib.rbi:9141
    method groups () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Integer
      ]
    } @ rbi/stdlib.rbi:9147
    method groups= (arg0) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Integer
      ]
    } @ rbi/stdlib.rbi:9153
      argument arg0<> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = Integer
        ]
      } @ rbi/stdlib.rbi:9150
    method initgroups (username, gid) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Integer
      ]
    } @ rbi/stdlib.rbi:9160
      argument gid<> -> Integer @ rbi/stdlib.rbi:9157
      argument username<> -> String @ rbi/stdlib.rbi:9156
    method kill (signal, pids) -> Integer @ rbi/stdlib.rbi:9167
      argument pids<repeated> -> Integer @ rbi/stdlib.rbi:9164
      argument signal<> -> Integer | Symbol | String @ rbi/stdlib.rbi:9163
    method maxgroups () -> Integer @ rbi/stdlib.rbi:9170
    method maxgroups= (arg0) -> Integer @ rbi/stdlib.rbi:9176
      argument arg0<> -> Integer @ rbi/stdlib.rbi:9173
    method pid () -> Integer @ rbi/stdlib.rbi:9179
    method ppid () -> Integer @ rbi/stdlib.rbi:9182
    method setpgid (pid, arg0) -> Integer @ rbi/stdlib.rbi:9189
      argument arg0<> -> Integer @ rbi/stdlib.rbi:9186
      argument pid<> -> Integer @ rbi/stdlib.rbi:9185
    method setpriority (kind, arg0, priority) -> Integer @ rbi/stdlib.rbi:9197
      argument arg0<> -> Integer @ rbi/stdlib.rbi:9193
      argument kind<> -> Integer @ rbi/stdlib.rbi:9192
      argument priority<> -> Integer @ rbi/stdlib.rbi:9194
    method setproctitle (arg0) -> String @ rbi/stdlib.rbi:9203
      argument arg0<> -> String @ rbi/stdlib.rbi:9200
    method setrlimit (resource, cur_limit, max_limit) -> NilClass @ rbi/stdlib.rbi:9211
      argument cur_limit<> -> Integer @ rbi/stdlib.rbi:9207
      argument max_limit<optional> -> Integer @ rbi/stdlib.rbi:9208
      argument resource<> -> Symbol | String | Integer @ rbi/stdlib.rbi:9206
    method setsid () -> Integer @ rbi/stdlib.rbi:9214
    method times () -> Process::Tms @ rbi/stdlib.rbi:9217
    method uid () -> Integer @ rbi/stdlib.rbi:9220
    method uid= (user) -> Integer @ rbi/stdlib.rbi:9226
      argument user<> -> Integer @ rbi/stdlib.rbi:9223
    method wait (pid, flags) -> Integer @ rbi/stdlib.rbi:9233
      argument flags<optional> -> Integer @ rbi/stdlib.rbi:9230
      argument pid<optional> -> Integer @ rbi/stdlib.rbi:9229
    method wait2 (pid, flags) -> TupleType {
      0 = Integer
      1 = Integer
    } @ rbi/stdlib.rbi:9240
      argument flags<optional> -> Integer @ rbi/stdlib.rbi:9237
      argument pid<optional> -> Integer @ rbi/stdlib.rbi:9236
    method waitall () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = TupleType {
            0 = Integer
            1 = Integer
          }
      ]
    } @ rbi/stdlib.rbi:9243
    method waitpid (pid, flags) -> Integer @ rbi/stdlib.rbi:9250
      argument flags<optional> -> Integer @ rbi/stdlib.rbi:9247
      argument pid<optional> -> Integer @ rbi/stdlib.rbi:9246
    method waitpid2 (pid, flags) -> TupleType {
      0 = Integer
      1 = Integer
    } @ rbi/stdlib.rbi:9257
      argument flags<optional> -> Integer @ rbi/stdlib.rbi:9254
      argument pid<optional> -> Integer @ rbi/stdlib.rbi:9253
  class <singleton class:<constant:Random>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:612
    method new_seed () -> Integer @ rbi/stdlib.rbi:9551
    method rand (max) -> Numeric @ rbi/stdlib.rbi:9557
      argument max<optional> -> Integer @ rbi/stdlib.rbi:9554
    method srand (number) -> Numeric @ rbi/stdlib.rbi:9563
      argument number<optional> -> Integer @ rbi/stdlib.rbi:9560
  class <singleton class:<constant:Range>> < ::<singleton class:<constant:Object>> (<constant:Generic>) @ ???
  class <singleton class:<constant:RangeError>> < ::<singleton class:<constant:StandardError>> () @ rbi/stdlib.rbi:425
  class <singleton class:<constant:Rational>> < ::<singleton class:<constant:Numeric>> () @ ???
  class <singleton class:<constant:RbConfig>> < ::<constant:Module> () @ rbi/stdlib.rbi:622
  class <singleton class:<constant:Regexp>> < ::<singleton class:<constant:Object>> () @ ???
    method <overload N.1 : compile> (arg0) -> Regexp @ rbi/stdlib.rbi:10328
      argument arg0<> -> Regexp @ rbi/stdlib.rbi:10329
      argument kcode<optional> @ rbi/stdlib.rbi:10332
      argument options<optional> @ rbi/stdlib.rbi:10332
    method <overload N.1 : last_match> (arg0) -> String @ rbi/stdlib.rbi:10219
      argument arg0<optional> -> Integer @ rbi/stdlib.rbi:10220
    method compile (arg0, options, kcode) -> Regexp @ rbi/stdlib.rbi:10332
      argument arg0<> -> String @ rbi/stdlib.rbi:10323
      argument kcode<optional> -> String @ rbi/stdlib.rbi:10325
      argument options<optional> -> BasicObject @ rbi/stdlib.rbi:10324
    method escape (arg0) -> String @ rbi/stdlib.rbi:10216
      argument arg0<> -> String | Symbol @ rbi/stdlib.rbi:10213
    method last_match () -> MatchData @ rbi/stdlib.rbi:10223
      argument arg0<optional> @ rbi/stdlib.rbi:10223
    method quote (arg0) -> String @ rbi/stdlib.rbi:10338
      argument arg0<> -> String | Symbol @ rbi/stdlib.rbi:10335
    method try_convert (obj) -> Regexp | NilClass @ rbi/stdlib.rbi:10229
      argument obj<> -> BasicObject @ rbi/stdlib.rbi:10226
  class <singleton class:<constant:RegexpError>> < ::<singleton class:<constant:StandardError>> () @ rbi/stdlib.rbi:626
  class <singleton class:<constant:RubyTyper>> < ::<constant:Module> () @ ???
  class <singleton class:<constant:RubyVM>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:628
  class <singleton class:<constant:RuntimeError>> < ::<singleton class:<constant:StandardError>> () @ rbi/stdlib.rbi:48
  class <singleton class:<constant:ScriptError>> < ::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:443
  class <singleton class:<constant:SecurityError>> < ::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:632
  class <singleton class:<constant:Set>> < ::<singleton class:<constant:Object>> (<constant:Generic>) @ ???
    method [] (ary) -> untyped @ rbi/stdlib.rbi:10470
      argument ary<repeated> -> BasicObject @ rbi/stdlib.rbi:10467
  class <singleton class:<constant:Signal>> < ::<constant:Module> () @ rbi/stdlib.rbi:637
    method <overload N.1 : trap> (arg0, blk) -> String | Proc @ rbi/stdlib.rbi:10752
      argument arg0<> -> Integer | String @ rbi/stdlib.rbi:10753
      argument blk<block> -> AppliedType {
        klass = ::<constant:Proc1>
        targs = [
          <constant:Return> = BasicObject
          <constant:Arg0> = Integer
        ]
      } @ rbi/stdlib.rbi:10754
    method list () -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = String
        <constant:V> = Integer
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:10740
    method signame (arg0) -> String | NilClass @ rbi/stdlib.rbi:10746
      argument arg0<> -> Integer @ rbi/stdlib.rbi:10743
    method trap (arg0) -> String | Proc @ rbi/stdlib.rbi:10757
      argument arg0<> -> Integer | String @ rbi/stdlib.rbi:10749
      argument blk<block> @ rbi/stdlib.rbi:10757
  class <singleton class:<constant:SignalException>> < ::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:552
  class <singleton class:<constant:SingleForwardable>> < ::<constant:Module> () @ rbi/stdlib.rbi:639
  class <singleton class:<constant:SortedSet>> < ::<singleton class:<constant:Set>> (<constant:Generic>) @ rbi/stdlib.rbi:641
  class <singleton class:<constant:StandardError>> < ::<singleton class:<constant:Exception>> () @ ???
  class <singleton class:<constant:StopIteration>> < ::<singleton class:<constant:IndexError>> () @ rbi/stdlib.rbi:64
  class <singleton class:<constant:String>> < ::<singleton class:<constant:Object>> () @ ???
    method try_convert (obj) -> String | NilClass @ rbi/stdlib.rbi:11572
      argument obj<> -> Object @ rbi/stdlib.rbi:11569
  class <singleton class:<constant:StringIO>> < ::<singleton class:<constant:Data>> (<constant:Generic>) @ rbi/stdlib.rbi:646
  class <singleton class:<constant:StringScanner>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:11600
    method new (arg0, arg1) -> StringScanner @ rbi/stdlib.rbi:11606
      argument arg0<> -> String @ rbi/stdlib.rbi:11602
      argument arg1<optional> -> TrueClass | FalseClass @ rbi/stdlib.rbi:11603
  class <singleton class:<constant:Struct>> < ::<singleton class:<constant:Object>> (<constant:Generic>) @ ???
    method new (arg0, arg1) -> <Class:RubyTyper::DynamicStruct> @ rbi/ruby_typer.rbi:9
      argument arg0<> -> Symbol | String @ rbi/ruby_typer.rbi:5
      argument arg1<repeated> -> Symbol | String @ rbi/ruby_typer.rbi:6
  class <singleton class:<constant:Symbol>> < ::<singleton class:<constant:Object>> () @ ???
    method all_symbols () -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = Symbol
      ]
    } @ rbi/stdlib.rbi:11623
  class <singleton class:<constant:SyntaxError>> < ::<singleton class:<constant:ScriptError>> () @ rbi/stdlib.rbi:652
  class <singleton class:<constant:SystemCallError>> < ::<singleton class:<constant:StandardError>> () @ rbi/stdlib.rbi:138
  class <singleton class:<constant:SystemExit>> < ::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:520
  class <singleton class:<constant:SystemStackError>> < ::<singleton class:<constant:Exception>> () @ rbi/stdlib.rbi:654
  class <singleton class:<constant:T>> < ::<singleton class:<constant:Object>> () @ ???
  class <singleton class:<constant:Thread>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:608
  class <singleton class:<constant:ThreadError>> < ::<singleton class:<constant:StandardError>> () @ rbi/stdlib.rbi:668
  class <singleton class:<constant:ThreadGroup>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:670
  class <singleton class:<constant:Time>> < ::<singleton class:<constant:Object>> () @ rbi/date.rbi:493
    method <overload N.1 : at> () -> Time @ rbi/stdlib.rbi:11918
      argument microseconds_with_frac<optional> @ rbi/stdlib.rbi:11927
      argument seconds<> @ rbi/stdlib.rbi:11927
    method <overload N.2 : at> (seconds, microseconds_with_frac) -> Time @ rbi/stdlib.rbi:11922
      argument microseconds_with_frac<optional> -> Numeric @ rbi/stdlib.rbi:11924
      argument seconds<> -> Numeric @ rbi/stdlib.rbi:11923
    method at (seconds) -> Time @ rbi/stdlib.rbi:11927
      argument microseconds_with_frac<optional> @ rbi/stdlib.rbi:11927
      argument seconds<> -> Time @ rbi/stdlib.rbi:11915
    method gm (year, month, day, hour, min, sec, usec_with_frac) -> Time @ rbi/stdlib.rbi:11939
      argument day<optional> -> Integer @ rbi/stdlib.rbi:11932
      argument hour<optional> -> Integer @ rbi/stdlib.rbi:11933
      argument min<optional> -> Integer @ rbi/stdlib.rbi:11934
      argument month<optional> -> Integer | String @ rbi/stdlib.rbi:11931
      argument sec<optional> -> Numeric @ rbi/stdlib.rbi:11935
      argument usec_with_frac<optional> -> Numeric @ rbi/stdlib.rbi:11936
      argument year<> -> Integer @ rbi/stdlib.rbi:11930
    method local (year, month, day, hour, min, sec, usec_with_frac) -> Time @ rbi/stdlib.rbi:11951
      argument day<optional> -> Integer @ rbi/stdlib.rbi:11944
      argument hour<optional> -> Integer @ rbi/stdlib.rbi:11945
      argument min<optional> -> Integer @ rbi/stdlib.rbi:11946
      argument month<optional> -> Integer | String @ rbi/stdlib.rbi:11943
      argument sec<optional> -> Numeric @ rbi/stdlib.rbi:11947
      argument usec_with_frac<optional> -> Numeric @ rbi/stdlib.rbi:11948
      argument year<> -> Integer @ rbi/stdlib.rbi:11942
    method mktime (year, month, day, hour, min, sec, usec_with_frac) -> Time @ rbi/stdlib.rbi:12192
      argument day<optional> -> Integer @ rbi/stdlib.rbi:12185
      argument hour<optional> -> Integer @ rbi/stdlib.rbi:12186
      argument min<optional> -> Integer @ rbi/stdlib.rbi:12187
      argument month<optional> -> Integer | String @ rbi/stdlib.rbi:12184
      argument sec<optional> -> Numeric @ rbi/stdlib.rbi:12188
      argument usec_with_frac<optional> -> Numeric @ rbi/stdlib.rbi:12189
      argument year<> -> Integer @ rbi/stdlib.rbi:12183
    method now () -> Time @ rbi/stdlib.rbi:11954
    method utc (year, month, day, hour, min, sec, usec_with_frac) -> Time @ rbi/stdlib.rbi:11966
      argument day<optional> -> Integer @ rbi/stdlib.rbi:11959
      argument hour<optional> -> Integer @ rbi/stdlib.rbi:11960
      argument min<optional> -> Integer @ rbi/stdlib.rbi:11961
      argument month<optional> -> Integer | String @ rbi/stdlib.rbi:11958
      argument sec<optional> -> Numeric @ rbi/stdlib.rbi:11962
      argument usec_with_frac<optional> -> Numeric @ rbi/stdlib.rbi:11963
      argument year<> -> Integer @ rbi/stdlib.rbi:11957
  class <singleton class:<constant:TracePoint>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:675
  class <singleton class:<constant:TrueClass>> < ::<singleton class:<constant:Object>> () @ ???
  class <singleton class:<constant:TypeError>> < ::<singleton class:<constant:StandardError>> () @ rbi/stdlib.rbi:679
  class <singleton class:<constant:URI>> < ::<constant:Module> () @ rbi/stdlib.rbi:681
    method <overload N.1 : encode> (arg, arg0) -> String @ rbi/stdlib.rbi:12336
      argument arg0<repeated> -> String @ rbi/stdlib.rbi:12338
      argument arg<> -> String @ rbi/stdlib.rbi:12337
    method <overload N.1 : escape> (arg, arg0) -> String @ rbi/stdlib.rbi:12283
      argument arg0<repeated> -> String @ rbi/stdlib.rbi:12285
      argument arg<> -> String @ rbi/stdlib.rbi:12284
    method decode (arg) -> String @ rbi/stdlib.rbi:12347
      argument arg<repeated> -> String @ rbi/stdlib.rbi:12344
    method decode_www_form_component (str, enc) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = TupleType {
            0 = String
            1 = String
          }
      ]
    } @ rbi/stdlib.rbi:12276
      argument enc<optional> -> Encoding @ rbi/stdlib.rbi:12273
      argument str<> -> String @ rbi/stdlib.rbi:12272
    method encode (arg, arg0) -> String @ rbi/stdlib.rbi:12341
      argument arg0<repeated> -> Regexp @ rbi/stdlib.rbi:12333
      argument arg<> -> String @ rbi/stdlib.rbi:12332
    method escape (arg, arg0) -> String @ rbi/stdlib.rbi:12288
      argument arg0<repeated> -> Regexp @ rbi/stdlib.rbi:12280
      argument arg<> -> String @ rbi/stdlib.rbi:12279
    method extract (str, schemes, blk) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:12296
      argument blk<block> -> BasicObject @ rbi/stdlib.rbi:12293
      argument schemes<optional> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:12292
      argument str<> -> String @ rbi/stdlib.rbi:12291
    method join (str) -> URI::HTTP @ rbi/stdlib.rbi:12302
      argument str<repeated> -> String @ rbi/stdlib.rbi:12299
    method parse (uri) -> URI::HTTP @ rbi/stdlib.rbi:12308
      argument uri<> -> String @ rbi/stdlib.rbi:12305
    method regexp (schemes) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String
      ]
    } @ rbi/stdlib.rbi:12314
      argument schemes<optional> -> AppliedType {
        klass = ::<constant:Array>
        targs = [
          <constant:Elem> = untyped
        ]
      } @ rbi/stdlib.rbi:12311
    method scheme_list () -> AppliedType {
      klass = ::<constant:Hash>
      targs = [
        <constant:K> = String
        <constant:V> = Class
        <constant:Elem> = untyped
      ]
    } @ rbi/stdlib.rbi:12317
    method split (uri) -> AppliedType {
      klass = ::<constant:Array>
      targs = [
        <constant:Elem> = String | NilClass
      ]
    } @ rbi/stdlib.rbi:12323
      argument uri<> -> String @ rbi/stdlib.rbi:12320
    method unescape (arg) -> String @ rbi/stdlib.rbi:12329
      argument arg<repeated> -> String @ rbi/stdlib.rbi:12326
  class <singleton class:<constant:UnboundMethod>> < ::<singleton class:<constant:Object>> () @ rbi/stdlib.rbi:720
  class <singleton class:<constant:UncaughtThrowError>> < ::<singleton class:<constant:ArgumentError>> () @ rbi/stdlib.rbi:722
  class <singleton class:<constant:Warning>> < ::<constant:Module> () @ rbi/stdlib.rbi:724
  class <singleton class:<constant:ZeroDivisionError>> < ::<singleton class:<constant:StandardError>> () @ rbi/stdlib.rbi:726
  method <static-init>$1 () @ bazel-out/host/genfiles/rbi/procs.rbi:1
  method <static-init>$3 () @ rbi/date.rbi:1
  method <static-init>$4 () @ rbi/ruby_typer.rbi:3
  method <static-init>$5 () @ rbi/stdlib.rbi:1
  method <static-init>$6 () @ rbi/t.rbi:1
  method <static-init>$7 () @ -e:1
  method <static-init>$8 () @ -e:1
  static-field <constant:M> -> AliasType { symbol = ::<constant:Opus>::<constant:DB>::<constant:Model> } @ ???

class <emptyTree><<constant:<root>>> < ()
  def self.<static-init><<static-init>$8>()
    1
  end
end
ClassDef{
  name = EmptyTree<<constant:<root>>>
  ancestors = []
  rhs = [
    MethodDef{
      self = 1
      name = <static-init><<static-init>$8>
      args = []
      rhs = IntLit{ value = 1 }
    }
  ]
}
digraph "-e"{
subgraph "cluster_#<static-init>$8" {
    label = "#<static-init>$8";
    color = blue;
    "bb#<static-init>$8_0" [shape = invhouse];
    "bb#<static-init>$8_1" [shape = parallelogram];

    "bb#<static-init>$8_0" [label = "block[id=0]()
<returnMethodTemp>$2 = 1 : Integer(1)
<finalReturn> = return <returnMethodTemp>$2 : <bottom>
<unconditional>"];

    "bb#<static-init>$8_0" -> "bb#<static-init>$8_1" [style="bold"];
    "bb#<static-init>$8_1" [label = "block[id=1]()
<unconditional>"];

    "bb#<static-init>$8_1" -> "bb#<static-init>$8_1" [style="bold"];
}

}

digraph "-e"{
subgraph "cluster_#<static-init>$8" {
    label = "#<static-init>$8";
    color = blue;
    "bb#<static-init>$8_0" [shape = invhouse];
    "bb#<static-init>$8_1" [shape = parallelogram];

    "bb#<static-init>$8_0" [label = "block[id=0]()
<returnMethodTemp>$2 = 1 : Integer(1)
<finalReturn> = return <returnMethodTemp>$2 : <bottom>
<returnMethodTemp>$2: Integer(1)

<finalReturn>: <bottom>

<unconditional>"];

    "bb#<static-init>$8_0" -> "bb#<static-init>$8_1" [style="bold"];
    "bb#<static-init>$8_1" [label = "block[id=1]()
<unconditional>"];

    "bb#<static-init>$8_1" -> "bb#<static-init>$8_1" [style="bold"];
}

}

1
# <returnMethodTemp>$2: Integer(1)
#
# <finalReturn>: <bottom>