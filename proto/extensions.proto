// DO NOT MODIFY, see README

// Put all Stripe custom options here (one place to ensure we don't have field number collisions)
//
// Field numbers 50000-99999 are reserved for org-internal options for each options type

syntax = "proto2"; // Proto3 extensions are still written in proto2
package com.stripe.ext; // This should be the only non-`com.stripe.payserver` .proto file in the repo

import "google/protobuf/descriptor.proto";

message KafkaPublishConfiguration {
    enum WireFormat {
        BSON = 1;
        JSON = 2;
    }

    // Wait for an ack from the Kafka cluster before returning successfully from
    // the `report` method?
    //
    // Use `sync = false` when you would rather silently drop a message than fail
    // the surrounding operation on a Kafka failure (this is reasonable for many
    // logging use cases).
    required bool sync = 1;

    // How should the event be serialized in the Kafka topic?
    required WireFormat wire_format = 2;

    // Setting envelope_collection will cause events to be serialized as:
    //    {collection: 'your_collection', event: {...}}
    // instead of leaving the event as the top-level object. This is required
    // when multiplexing multiple event types into a single Kafka topic (e.g.
    // 'reporting.events').
    optional string envelope_collection = 3;
}

extend google.protobuf.MessageOptions {
    // All top-level messages (not sub-documents) should have an owning_project
    // set, which should correspond to a project name in `project.yaml`.
    optional string owning_project = 50001;

    // Set kafka_topic for events that can be published to Kafka.
    // See https://confluence.corp.stripe.com/pages/viewpage.action?pageId=74828860
    // for best practices.
    optional string kafka_topic = 50002;

    // Optionally, override the default publish settings--synchronous
    // publishing in a BSON format.
    optional KafkaPublishConfiguration kafka_publish_config = 50003;
}

extend google.protobuf.FieldOptions {
    // Optionally, map the Proto type to a non-default Ruby type. This is meant
    // primarily for backwards compatibility with pre-Proto events. If you have a
    // use case for a new type or event, please bring it to #streaming.
    optional string ruby_type_override = 50001;
}
