syntax = "proto3";

package com.stripe.rubytyper;
import "proto/Name.proto";
import "proto/Symbol.proto";
import "proto/Type.proto";

// TODO: Add locations everywhere

message TypedVariable {
    string name = 1;
    Type type = 2;
}

message Instruction {
    message Block {
        // TODO later
    }
    message Send {
        TypedVariable receiver = 1;
        Name method = 2;
        repeated TypedVariable arguments = 3;
        Block block = 4;
    }
    message Cast {
        TypedVariable value = 1;
        Type type = 2;
    }

    enum Kind {
        UNKNOWN = 0;
        IDENT = 1;
        ALIAS = 2;
        SEND = 3;
        RETURN = 4;
        LITERAL = 5;
        UNANALYZABLE = 6;
        LOAD_ARG = 7;
        CAST = 8;
    }

    Kind kind = 1;
    oneof instr {
        string ident = 100;
        Symbol alias = 101;
        Send send = 102;
        TypedVariable return = 103;
        Type literal = 104;
        Symbol load_arg = 105;
        Cast cast = 106;
    }
}

message Binding {
    TypedVariable bind = 1;
    Instruction instruction = 2;
}

message Block {
    message BlockExit {
        TypedVariable cond = 1;
        int32 then_block = 2;
        int32 else_block = 3;
    }

    int32 id = 1;
    repeated Binding bindings = 2;
    BlockExit exit = 3;
}

message CFG {
    Symbol symbol = 1;
    Type returns = 3;
    message Argument {
        string name = 1;
        Type type = 2;
    }
    repeated Argument arguments = 4;

    repeated Block blocks = 5;
}
