#!/usr/bin/env bash
#!/usr/bin/env ruby

# A total hack, but this file is both a valid ruby script and a bash script.
=begin 2>/dev/null

# From here on in, it is all bash until the last line

display_help() {
  echo "Sorbet - A Typechecker for Ruby

$0 [command] [command_options]

  Where [command] is one of:
    initialize, init
    typecheck, tc"
  exit 0
}

if [ "$#" -eq 0 ]; then
  display_help
fi

command=$1
shift

# shellcheck disable=SC2120
typecheck() {
  fileList=$(mktemp)
  cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/sorbet"

  [ -d "$cache_dir" ] || mkdir "$cache_dir"
  if [ -f Gemfile.lock ]; then
    cache_hash=$(md5sum Gemfile.lock | awk '{ print $1 }')
    cache_file="${cache_dir}/${cache_hash}"
    if [ ! -f "$cache_file" ]; then
      bundle exec rbis | tr " " "\n" > "$cache_file"
    fi
    cat "$cache_file" >> "${fileList}"
  fi

  # shellcheck disable=SC2086
  "$(dirname "${BASH_SOURCE[0]}")"/sorbet-typechecker . @$fileList "$@"
}

case $command in
  "initialize" | "init")
    bundle exec sorbet-rbi-generation "$@"
    ;;

  "typecheck" | "tc")
    # shellcheck disable=SC2119
    typecheck "$@"
    ;;

  *)
    echo "Unknown command \`$command\`"
    display_help
esac

exit $?
# The closing comment for ruby to be ok with this file
=end
exec(__FILE__, *ARGV)
