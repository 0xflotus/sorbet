# C / C++ Options
# build --copt=--std=c++14 # breaks c dependencies on mac
build --cxxopt=--std=c++14

build --copt=-fno-omit-frame-pointer
build --cxxopt=-fno-omit-frame-pointer

build --copt=-fstack-protector
build --cxxopt=-fstack-protector

build --copt=-Werror
build --cxxopt=-Werror

build --host_cxxopt=-O0
build --host_copt=-O0

# fix build on mac. For some reason path stopped being propagated.
build --action_env PATH

# The MacOS CROSSTOOL in bazel defines _FORTIFY_SOURCE both on
# <command line>:1:9: and <built-in>:355:9: so sadly we turn them all off
build --copt=-Wno-macro-redefined
build --cxxopt=-Wno-macro-redefined

build:dbg --copt=-O0
build:dbg --cxxopt=-O0
build:dbg --copt=-g3
build:dbg --cxxopt=-g3
build:dbg --linkopt=-g3
build:dbg --linkopt=-fno-pie
build:dbg --copt=-fno-pie
build:dbg --cxxopt=-fno-pie

# CI uses a funny build, with debug code enabled but compiled with optimizations.
build:ci --copt=-DFORCE_DEBUG
build:ci --copt=-g3
build:ci --cxxopt=-DFORCE_DEBUG
build:ci --cxxopt=-g3

# LTO build. Much longer compilation time. Smaller size and better perf.
build:lto --copt=-flto=thin
build:lto --cxxopt=-flto=thin
build:lto --linkopt=-flto=thin
build:lto --linkopt=-fno-pie
build:lto --copt=-fno-pie
build:lto --cxxopt=-fno-pie

# It's useful to be able to write `config_setting` rules for "this is
# an unsanitized build", but we can't express "copt does not contain
# -fsanitize". So we set this `--define` and unset it if we're using a
# sanitizer.
build --define unsanitized=true
# sanitize build: run with ASAN and UBSAN. Catches most memory and
# undefined-behavior errors, substantially larger and slower binary.
build:sanitize --copt=-fsanitize=address
build:sanitize --cxxopt=-fsanitize=address
build:sanitize --linkopt=-fsanitize=address
build:sanitize --copt=-fsanitize=undefined --copt=-fno-sanitize-recover=undefined
build:sanitize --cxxopt=-fsanitize=undefined --copt=-fno-sanitize-recover=undefined
build:sanitize --linkopt=-fsanitize=undefined --copt=-fno-sanitize-recover=undefined
build:sanitize --define unsanitized=false

build:tstan --copt=-fsanitize=thread
build:tstan --cxxopt==-fsanitize=thread
build:tstan --linkopt=-fsanitize=thread
build:sanitize --define unsanitized=false

# Build optimized for executable size. Can be faster if size of executable code is a bottleneck.
build:size --linkopt=-Os
build:size --copt=-Os
build:size --cxxopt=-Os

### Debug symbols on OS X. ###
# From https://github.com/RobotLocomotion/drake/blob/master/tools/cc_toolchain/bazel.rc
# See https://github.com/bazelbuild/bazel/issues/2537
build:dbg --spawn_strategy=standalone
build:dbg --genrule_strategy=standalone
build:dbg --compilation_mode=dbg

build --strip=never

# Enable nice UIs. Taken from bazel.rc of Bazel itself.
build --experimental_skyframe_target_pattern_evaluator
common --experimental_ui --experimental_ui_actions_shown 8
common --show_progress_rate_limit=0.25
