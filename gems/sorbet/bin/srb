#!/usr/bin/env bash
#!/usr/bin/env ruby

# A total hack, but this file is both a valid ruby script and a bash script.
=begin 2>/dev/null

# From here on in, it is all bash until the last line

display_help() {
  echo "Sorbet - A Typechecker for Ruby

$0 [command] [command_options]

  Where [command] is one of:
    initialize, init
    typecheck, tc"
  exit 0
}

if [ "$#" -eq 0 ]; then
  display_help
fi

command=$1
shift

typecheck() {
  # We're using bash string operations here to avoid forking
  # (using dirname / basename) etc. would mean ~15ms for each call.

  # /path/to/gems/sorbet-0.0.1/bin/srb
  srb_path="${BASH_SOURCE[0]}"
  # /path/to/gems/sorbet-0.0.1
  without_bin_srb="${srb_path%/bin/srb}"
  # -0.0.1
  version_suffix="${without_bin_srb##*/sorbet}"
  # /path/to/gems
  gems_path="${without_bin_srb%/sorbet*}"
  # /path/to/gems/sorbet-static-0.0.1-darwin-17/libexec/sorbet
  # (assumes people only have one platform-depdendent gem installed per version)
  sorbet=("$gems_path/sorbet-static$version_suffix"*/libexec/sorbet)

  "${sorbet[0]}" "$@"
}

case $command in
  "initialize" | "init")
    bundle exec sorbet-rbi-generation "$@"
    ;;

  "typecheck" | "tc")
    typecheck "$@"
    ;;

  *)
    echo "Unknown command \`$command\`"
    display_help
esac

exit $?
# The closing comment for ruby to be ok with this file
=end
exec(__FILE__, *ARGV)
