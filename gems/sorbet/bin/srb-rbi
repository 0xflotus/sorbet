#!/usr/bin/env ruby

class Sorbet; end
module Sorbet::Private; end

require_relative '../lib/sorbet'
require_relative '../lib/create-config'
require_relative '../lib/gem-generator-tracepoint'
require_relative '../lib/hidden-definition-finder'
require_relative '../lib/fetch-rbis'
require_relative '../lib/suggest-typed'
require_relative '../lib/todo-rbi'

module Sorbet::Private::Main
  def self.main(argv)
    command = parse_command(argv)
    return command.call if command

    puts "
*************************************

Welcome to Sorbet!

This script will create a `./sorbet/` directory with:
* `sorbet/config` :                Default options to passed to sorbet on every run
* `sorbet/rbi/sorbet-typed/`       Community writen type definition files for your gems
* `sorbet/rbi/gems/`               Autogenerated type definitions for your gems using reflection
* `sorbet/rbi/hidden-definitions/` An encoding of all the runtime-defined definitions in your program
* `sorbet/rbi/todo.rbi`            Constants which weren't discovered in previous phases

It will also go through all your files and put the highest `typed:` level which currently passes.

NOTE: To do this, it will `require` ALL of your `.rb` files. This means if
you have any scripts which have top-level statements that aren't guarded by
a `if __FILE__ == $PROGRAM_NAME` block, they will execute. If `srb init` takes a
long time or hangs, we suggest you `CTRL+C` and guard your script's
top-level statements with `if __FILE__ == $PROGRAM_NAME` before re-running.

************************************
    "
    STDOUT.write('Proceeed [Y/n]? ')
    if STDIN.isatty
      input = Kernel.gets.strip
      if input != '' && input != 'y' && input != 'Y'
        puts "Quitting!"
        Kernel.exit(1)
      end
    elsif ENV['SRB_YES']
      puts 'SRB_YES set, proceeding'
    else
      puts "Not running interactivly. Set SRB_YES=1 environment variable to proceed"
      Kernel.exit(1)
    end

    # Create sorbet/config file
    Sorbet::Private::CreateConfig.main

    # Pull in the hand-written RBIs
    Sorbet::Private::FetchRBIs.main

    # Generate the RBIs from bundler
    Sorbet::Private::GemGeneratorTracepoint.main

    # Find the hidden methods
    Sorbet::Private::HiddenMethodFinder.main

    # Run sorbet and make constants to fix errors
    Sorbet::Private::TodoRBI.main

    # Run type suggestion once, and then generate the todo.rbi again.
    #
    # The first time we suggest typed sigils, a few files may be ignored if they
    # use Ruby features Sorbet does not support. However, since we ran the
    # todo.rbi generation before they were ignored, we discovered the constants
    # that they defined and did not add the constants to todo.rbi file.
    #
    # Regenerating after one run of sigil suggestion will put those constants
    # into the todo.rbi file.
    Sorbet::Private::SuggestTyped.suggest_typed
    Sorbet::Private::TodoRBI.main

    # Put some `typed:` sigils
    Sorbet::Private::SuggestTyped.main

    puts "
*************************************

Completed successfully, yay!

This script has probably generated many changed files in ./sorbet/. Please commit them all.

Some possible next steps:
* Verify this script worked by running `srb tc`. It should say 'No errors!'.
* Go change a file from `typed: false` to `typed: true`, and then run `srb tc`.
  It should tell you some type errors. If you can fix those, please do and commit the changes.
* Write as much new code as you can with `typed: true` or higher.
* Turn your `typed: ignore` files into `typed: false` and see the errors. Try to fix those.

************************************
    "
  end

  def self.parse_command(argv)
    return nil if argv.length == 0

    banner = "Usage: srb rbi <command>
  This script gets your current directory ready for using Sorbet by making all sorts of files in ./sorbet/. You should commit them to version control.

  We recommend running it without any options which will execute all the commands in order. If you only need a certain piece, you can pass a command to just run that part.

  You should re-run this script if your program ever stops typechecking due to dynamic code in your project."
    commands = "
  Common Commands:
    help                Print this message
    <empty> | update    Run all initialization commands

  Specific Commands:
    config              Recreate sorbet/config
    sorbet-typed        Download community maintained type definitions for gems
    gems                Generate arity-only type definitions by requiring the gem
    hidden-definitions  Load all your code and generate type definitions for any dynamic code
    todo                Run Sorbet and generate constants which Sorbet errors on
    suggest-typed       Put the highest `typed:` sigil in each of your files
    "

    command = case (argv[0])
    when 'help', '--help'
      puts banner
      puts commands
      exit(1)
    when 'config', Sorbet::Private::CreateConfig::SORBET_CONFIG_FILE
      -> {Sorbet::Private::CreateConfig.main}
    when 'sorbet-typed', Sorbet::Private::FetchRBIs::SORBET_RBI_SORBET_TYPED, Sorbet::Private::FetchRBIs::SORBET_RBI_LIST
      -> {Sorbet::Private::FetchRBIs.main}
    when 'gems', Sorbet::Private::GemGeneratorTracepoint::OUTPUT
      -> {Sorbet::Private::GemGeneratorTracepoint.main}
    when 'hidden-definitions', Sorbet::Private::HiddenMethodFinder::PATH
      -> {Sorbet::Private::HiddenMethodFinder.main}
    when 'todo', Sorbet::Private::TodoRBI::OUTPUT
      -> {Sorbet::Private::TodoRBI.main}
    when 'suggest-typed'
      -> {Sorbet::Private::SuggestTyped.main}

    when 'update'
      nil

    else
      puts "Unknown comand: #{argv[0]}"
      puts commands
      exit(1)
    end

    puts "Running command: #{argv[0]}"
    command
  end
end

Sorbet::Private::Main.main(ARGV)
